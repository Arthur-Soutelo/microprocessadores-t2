
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006f70  08006f70  00007f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007360  08007360  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007360  08007360  00008360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007368  08007368  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800736c  0800736c  0000836c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007370  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d4  08007544  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08007544  00009400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b072  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002376  00000000  00000000  0001426f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000165e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000985  00000000  00000000  00017260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ab  00000000  00000000  00017be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f378  00000000  00000000  00031390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f139  00000000  00000000  00040708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  000cf884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d3cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f54 	.word	0x08006f54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006f54 	.word	0x08006f54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <Read_Temperature>:
#include "ambient.h"

// Temperature read function using floating-point calculation
float Read_Temperature(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]

    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f000 f83e 	bl	8001074 <read_adc_value>
 8000ff8:	60f8      	str	r0, [r7, #12]

    // Convert ADC value to voltage
	float adcVoltage = (adcValue / 4095.0) * 3.3; // Assuming 12-bit resolution and 3.3V reference
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f9f2 	bl	80003e4 <__aeabi_ui2d>
 8001000:	a315      	add	r3, pc, #84	@ (adr r3, 8001058 <Read_Temperature+0x70>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fb91 	bl	800072c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	a313      	add	r3, pc, #76	@ (adr r3, 8001060 <Read_Temperature+0x78>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa5e 	bl	80004d8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd30 	bl	8000a88 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	60bb      	str	r3, [r7, #8]

	// Temperature calculation
	// Temperature = (Vadc - V25) / Slope + T25
	// T25 = 25°C (reference temperature)

	float temperature = ((adcVoltage - VOLTAGE_AT_25C) / AVG_SLOPE) + 25;
 800102c:	490e      	ldr	r1, [pc, #56]	@ (8001068 <Read_Temperature+0x80>)
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff fd7e 	bl	8000b30 <__aeabi_fsub>
 8001034:	4603      	mov	r3, r0
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <Read_Temperature+0x84>)
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff37 	bl	8000eac <__aeabi_fdiv>
 800103e:	4603      	mov	r3, r0
 8001040:	490b      	ldr	r1, [pc, #44]	@ (8001070 <Read_Temperature+0x88>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fd76 	bl	8000b34 <__addsf3>
 8001048:	4603      	mov	r3, r0
 800104a:	607b      	str	r3, [r7, #4]

    return temperature;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	40affe00 	.word	0x40affe00
 8001060:	66666666 	.word	0x66666666
 8001064:	400a6666 	.word	0x400a6666
 8001068:	3fb70a3d 	.word	0x3fb70a3d
 800106c:	4089999a 	.word	0x4089999a
 8001070:	41c80000 	.word	0x41c80000

08001074 <read_adc_value>:


uint32_t read_adc_value(uint32_t channel) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;  // Adjust as needed
 8001094:	2305      	movs	r3, #5
 8001096:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	4810      	ldr	r0, [pc, #64]	@ (80010e0 <read_adc_value+0x6c>)
 80010a0:	f001 f9d0 	bl	8002444 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <read_adc_value+0x3c>
        // Handle error
        return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e012      	b.n	80010d6 <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <read_adc_value+0x6c>)
 80010b2:	f000 ffdb 	bl	800206c <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <read_adc_value+0x6c>)
 80010bc:	f001 f8b0 	bl	8002220 <HAL_ADC_PollForConversion>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <read_adc_value+0x6c>)
 80010c8:	f001 f9b0 	bl	800242c <HAL_ADC_GetValue>
 80010cc:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 80010ce:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <read_adc_value+0x6c>)
 80010d0:	f001 f87a 	bl	80021c8 <HAL_ADC_Stop>

    return adcValue;
 80010d4:	697b      	ldr	r3, [r7, #20]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001f0 	.word	0x200001f0

080010e4 <debounce>:
#include "main.h"
#include "keypad.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 80010f8:	2301      	movs	r3, #1
 80010fa:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d822      	bhi.n	800114c <debounce+0x68>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <debounce+0x28>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	08001129 	.word	0x08001129
 8001114:	08001135 	.word	0x08001135
 8001118:	08001141 	.word	0x08001141
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <debounce+0xac>)
 800111e:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	81fb      	strh	r3, [r7, #14]
            break;
 8001126:	e013      	b.n	8001150 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <debounce+0xac>)
 800112a:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	81fb      	strh	r3, [r7, #14]
            break;
 8001132:	e00d      	b.n	8001150 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <debounce+0xac>)
 8001136:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 8001138:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800113c:	81fb      	strh	r3, [r7, #14]
            break;
 800113e:	e007      	b.n	8001150 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <debounce+0xac>)
 8001142:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 8001144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001148:	81fb      	strh	r3, [r7, #14]
            break;
 800114a:	e001      	b.n	8001150 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 800114c:	2301      	movs	r3, #1
 800114e:	e01a      	b.n	8001186 <debounce+0xa2>
    }

    while (count < 7) {
 8001150:	e015      	b.n	800117e <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fe8e 	bl	8001e74 <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	4619      	mov	r1, r3
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f001 fef7 	bl	8002f50 <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 8001166:	7d7a      	ldrb	r2, [r7, #21]
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	429a      	cmp	r2, r3
 800116c:	d103      	bne.n	8001176 <debounce+0x92>
            count++;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	3301      	adds	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	e001      	b.n	800117a <debounce+0x96>
        } else {
            count = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	2b06      	cmp	r3, #6
 8001182:	d9e6      	bls.n	8001152 <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 8001184:	7d7b      	ldrb	r3, [r7, #21]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010c00 	.word	0x40010c00

08001194 <keypad_getkey>:
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
}

char keypad_getkey(void) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 800119a:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <keypad_getkey+0xdc>)
 800119c:	1d3c      	adds	r4, r7, #4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	77bb      	strb	r3, [r7, #30]
 80011a8:	e059      	b.n	800125e <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 80011aa:	7fbb      	ldrb	r3, [r7, #30]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d821      	bhi.n	80011f4 <keypad_getkey+0x60>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <keypad_getkey+0x24>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d3 	.word	0x080011d3
 80011c0:	080011dd 	.word	0x080011dd
 80011c4:	080011e9 	.word	0x080011e9
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <keypad_getkey+0xe0>)
 80011ca:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 80011cc:	2301      	movs	r3, #1
 80011ce:	82fb      	strh	r3, [r7, #22]
                break;
 80011d0:	e015      	b.n	80011fe <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 80011d2:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <keypad_getkey+0xe0>)
 80011d4:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 80011d6:	2302      	movs	r3, #2
 80011d8:	82fb      	strh	r3, [r7, #22]
                break;
 80011da:	e010      	b.n	80011fe <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <keypad_getkey+0xe0>)
 80011de:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 80011e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e4:	82fb      	strh	r3, [r7, #22]
                break;
 80011e6:	e00a      	b.n	80011fe <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <keypad_getkey+0xe0>)
 80011ea:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f0:	82fb      	strh	r3, [r7, #22]
                break;
 80011f2:	e004      	b.n	80011fe <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	82fb      	strh	r3, [r7, #22]
                break;
 80011fc:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	69b8      	ldr	r0, [r7, #24]
 8001206:	f001 feba 	bl	8002f7e <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 800120a:	2300      	movs	r3, #0
 800120c:	77fb      	strb	r3, [r7, #31]
 800120e:	e01a      	b.n	8001246 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 8001210:	7fba      	ldrb	r2, [r7, #30]
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff64 	bl	80010e4 <debounce>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	69b8      	ldr	r0, [r7, #24]
 800122a:	f001 fea8 	bl	8002f7e <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 800122e:	7ffa      	ldrb	r2, [r7, #31]
 8001230:	7fbb      	ldrb	r3, [r7, #30]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	3220      	adds	r2, #32
 8001236:	443a      	add	r2, r7
 8001238:	4413      	add	r3, r2
 800123a:	3b1c      	subs	r3, #28
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	e012      	b.n	8001266 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	3301      	adds	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
 8001246:	7ffb      	ldrb	r3, [r7, #31]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d9e1      	bls.n	8001210 <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	69b8      	ldr	r0, [r7, #24]
 8001254:	f001 fe93 	bl	8002f7e <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8001258:	7fbb      	ldrb	r3, [r7, #30]
 800125a:	3301      	adds	r3, #1
 800125c:	77bb      	strb	r3, [r7, #30]
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d9a2      	bls.n	80011aa <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	08006f70 	.word	0x08006f70
 8001274:	40010c00 	.word	0x40010c00

08001278 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2108      	movs	r1, #8
 8001286:	4841      	ldr	r0, [pc, #260]	@ (800138c <write_command_LCD+0x114>)
 8001288:	f001 fe79 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	483e      	ldr	r0, [pc, #248]	@ (800138c <write_command_LCD+0x114>)
 8001292:	f001 fe74 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	111b      	asrs	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	4839      	ldr	r0, [pc, #228]	@ (8001390 <write_command_LCD+0x118>)
 80012aa:	f001 fe68 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	115b      	asrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c0:	4833      	ldr	r0, [pc, #204]	@ (8001390 <write_command_LCD+0x118>)
 80012c2:	f001 fe5c 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	119b      	asrs	r3, r3, #6
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d8:	482d      	ldr	r0, [pc, #180]	@ (8001390 <write_command_LCD+0x118>)
 80012da:	f001 fe50 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	09db      	lsrs	r3, r3, #7
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ea:	4829      	ldr	r0, [pc, #164]	@ (8001390 <write_command_LCD+0x118>)
 80012ec:	f001 fe47 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fdbf 	bl	8001e74 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2110      	movs	r1, #16
 80012fa:	4824      	ldr	r0, [pc, #144]	@ (800138c <write_command_LCD+0x114>)
 80012fc:	f001 fe3f 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001300:	2014      	movs	r0, #20
 8001302:	f000 fdb7 	bl	8001e74 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2110      	movs	r1, #16
 800130a:	4820      	ldr	r0, [pc, #128]	@ (800138c <write_command_LCD+0x114>)
 800130c:	f001 fe37 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800131e:	481c      	ldr	r0, [pc, #112]	@ (8001390 <write_command_LCD+0x118>)
 8001320:	f001 fe2d 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	105b      	asrs	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001336:	4816      	ldr	r0, [pc, #88]	@ (8001390 <write_command_LCD+0x118>)
 8001338:	f001 fe21 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	109b      	asrs	r3, r3, #2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <write_command_LCD+0x118>)
 8001350:	f001 fe15 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	10db      	asrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001366:	480a      	ldr	r0, [pc, #40]	@ (8001390 <write_command_LCD+0x118>)
 8001368:	f001 fe09 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800136c:	200a      	movs	r0, #10
 800136e:	f000 fd81 	bl	8001e74 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <write_command_LCD+0x114>)
 8001378:	f001 fe01 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800137c:	2014      	movs	r0, #20
 800137e:	f000 fd79 	bl	8001e74 <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40010c00 	.word	0x40010c00
 8001390:	40010800 	.word	0x40010800

08001394 <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2108      	movs	r1, #8
 80013a2:	4841      	ldr	r0, [pc, #260]	@ (80014a8 <write_data_LCD+0x114>)
 80013a4:	f001 fdeb 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	483e      	ldr	r0, [pc, #248]	@ (80014a8 <write_data_LCD+0x114>)
 80013ae:	f001 fde6 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	111b      	asrs	r3, r3, #4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c4:	4839      	ldr	r0, [pc, #228]	@ (80014ac <write_data_LCD+0x118>)
 80013c6:	f001 fdda 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	115b      	asrs	r3, r3, #5
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <write_data_LCD+0x118>)
 80013de:	f001 fdce 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	119b      	asrs	r3, r3, #6
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013f4:	482d      	ldr	r0, [pc, #180]	@ (80014ac <write_data_LCD+0x118>)
 80013f6:	f001 fdc2 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	09db      	lsrs	r3, r3, #7
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001406:	4829      	ldr	r0, [pc, #164]	@ (80014ac <write_data_LCD+0x118>)
 8001408:	f001 fdb9 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f000 fd31 	bl	8001e74 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	4824      	ldr	r0, [pc, #144]	@ (80014a8 <write_data_LCD+0x114>)
 8001418:	f001 fdb1 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800141c:	2014      	movs	r0, #20
 800141e:	f000 fd29 	bl	8001e74 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2110      	movs	r1, #16
 8001426:	4820      	ldr	r0, [pc, #128]	@ (80014a8 <write_data_LCD+0x114>)
 8001428:	f001 fda9 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <write_data_LCD+0x118>)
 800143c:	f001 fd9f 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	105b      	asrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001452:	4816      	ldr	r0, [pc, #88]	@ (80014ac <write_data_LCD+0x118>)
 8001454:	f001 fd93 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	109b      	asrs	r3, r3, #2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <write_data_LCD+0x118>)
 800146c:	f001 fd87 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	10db      	asrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001482:	480a      	ldr	r0, [pc, #40]	@ (80014ac <write_data_LCD+0x118>)
 8001484:	f001 fd7b 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f000 fcf3 	bl	8001e74 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <write_data_LCD+0x114>)
 8001494:	f001 fd73 	bl	8002f7e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001498:	2014      	movs	r0, #20
 800149a:	f000 fceb 	bl	8001e74 <HAL_Delay>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40010800 	.word	0x40010800

080014b0 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 80014b4:	2032      	movs	r0, #50	@ 0x32
 80014b6:	f000 fcdd 	bl	8001e74 <HAL_Delay>
    write_command_LCD(0x33);
 80014ba:	2033      	movs	r0, #51	@ 0x33
 80014bc:	f7ff fedc 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x32);
 80014c0:	2032      	movs	r0, #50	@ 0x32
 80014c2:	f7ff fed9 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x28);
 80014c6:	2028      	movs	r0, #40	@ 0x28
 80014c8:	f7ff fed6 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x0C);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f7ff fed3 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x06);
 80014d2:	2006      	movs	r0, #6
 80014d4:	f7ff fed0 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x01);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fecd 	bl	8001278 <write_command_LCD>
    HAL_Delay(2);
 80014de:	2002      	movs	r0, #2
 80014e0:	f000 fcc8 	bl	8001e74 <HAL_Delay>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    while (*text) {
 80014f0:	e006      	b.n	8001500 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff4a 	bl	8001394 <write_data_LCD>
    while (*text) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f4      	bne.n	80014f2 <write_string_LCD+0xa>
    }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <write_string_line>:

void write_string_line(char line, const char *text) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	6039      	str	r1, [r7, #0]
 800151c:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d103      	bne.n	800152c <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8001524:	2080      	movs	r0, #128	@ 0x80
 8001526:	f7ff fea7 	bl	8001278 <write_command_LCD>
 800152a:	e005      	b.n	8001538 <write_string_line+0x26>
    } else if (line == 2) {
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 8001532:	20c0      	movs	r0, #192	@ 0xc0
 8001534:	f7ff fea0 	bl	8001278 <write_command_LCD>
    }
    write_string_LCD(text);
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff ffd5 	bl	80014e8 <write_string_LCD>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <clear_display>:

void clear_display(void) {
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fe94 	bl	8001278 <write_command_LCD>
    HAL_Delay(2);
 8001550:	2002      	movs	r0, #2
 8001552:	f000 fc8f 	bl	8001e74 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_TIM_PeriodElapsedCallback>:
////        }
//    }
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d108      	bne.n	8001580 <HAL_TIM_PeriodElapsedCallback+0x24>
    {
    	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800156e:	2108      	movs	r1, #8
 8001570:	4806      	ldr	r0, [pc, #24]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001572:	f001 fd1c 	bl	8002fae <HAL_GPIO_TogglePin>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800157a:	4805      	ldr	r0, [pc, #20]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800157c:	f001 fd17 	bl	8002fae <HAL_GPIO_TogglePin>
    }
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40000400 	.word	0x40000400
 800158c:	40010800 	.word	0x40010800
 8001590:	40011000 	.word	0x40011000

08001594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159a:	f000 fc09 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159e:	f000 f86d 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a2:	f000 f971 	bl	8001888 <MX_GPIO_Init>
  MX_DMA_Init();
 80015a6:	f000 f951 	bl	800184c <MX_DMA_Init>
  MX_ADC1_Init();
 80015aa:	f000 f8c3 	bl	8001734 <MX_ADC1_Init>
  MX_TIM3_Init();
 80015ae:	f000 f8ff 	bl	80017b0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);

  /* Enable interrupt by timer 3*/
  HAL_TIM_Base_Start_IT(&htim3);
 80015b2:	482a      	ldr	r0, [pc, #168]	@ (800165c <main+0xc8>)
 80015b4:	f002 facc 	bl	8003b50 <HAL_TIM_Base_Start_IT>

  init_LCD();
 80015b8:	f7ff ff7a 	bl	80014b0 <init_LCD>
  //keypad_init();

  clear_display();
 80015bc:	f7ff ffc3 	bl	8001546 <clear_display>
  write_string_line(1,"   Smart-fARM");
 80015c0:	4927      	ldr	r1, [pc, #156]	@ (8001660 <main+0xcc>)
 80015c2:	2001      	movs	r0, #1
 80015c4:	f7ff ffa5 	bl	8001512 <write_string_line>
  write_string_line(2,"");
 80015c8:	4926      	ldr	r1, [pc, #152]	@ (8001664 <main+0xd0>)
 80015ca:	2002      	movs	r0, #2
 80015cc:	f7ff ffa1 	bl	8001512 <write_string_line>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 80015d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015d4:	4824      	ldr	r0, [pc, #144]	@ (8001668 <main+0xd4>)
 80015d6:	f001 fcea 	bl	8002fae <HAL_GPIO_TogglePin>

//	clear_display();
//	write_string_line(1,"   Smart-fARM");
//	HAL_Delay(2000);

	 char key = keypad_getkey();
 80015da:	f7ff fddb 	bl	8001194 <keypad_getkey>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
	 if(key != 0){
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d017      	beq.n	8001618 <main+0x84>
		 clear_display();
 80015e8:	f7ff ffad 	bl	8001546 <clear_display>
		 write_string_line(1,"GOT KEY: ");
 80015ec:	491f      	ldr	r1, [pc, #124]	@ (800166c <main+0xd8>)
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff8f 	bl	8001512 <write_string_line>
		 write_data_LCD(key);
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fecc 	bl	8001394 <write_data_LCD>
		 HAL_Delay(2000);
 80015fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001600:	f000 fc38 	bl	8001e74 <HAL_Delay>
		 clear_display();
 8001604:	f7ff ff9f 	bl	8001546 <clear_display>
		 write_string_line(1,"   Smart-fARM");
 8001608:	4915      	ldr	r1, [pc, #84]	@ (8001660 <main+0xcc>)
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff ff81 	bl	8001512 <write_string_line>
		 write_string_line(2,"");
 8001610:	4914      	ldr	r1, [pc, #80]	@ (8001664 <main+0xd0>)
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff ff7d 	bl	8001512 <write_string_line>
//	 itoa(ldr2_value,buffer,10);
//	 write_string_line(2,buffer);

	 float temperature;
	 char buffer [16];
	 temperature = Read_Temperature();
 8001618:	f7ff fce6 	bl	8000fe8 <Read_Temperature>
 800161c:	6138      	str	r0, [r7, #16]
	 sprintf(buffer, "%.2f", temperature);  // Convert float to string with 2 decimal places
 800161e:	6938      	ldr	r0, [r7, #16]
 8001620:	f7fe ff02 	bl	8000428 <__aeabi_f2d>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4638      	mov	r0, r7
 800162a:	4911      	ldr	r1, [pc, #68]	@ (8001670 <main+0xdc>)
 800162c:	f003 fb5c 	bl	8004ce8 <siprintf>
	 clear_display();
 8001630:	f7ff ff89 	bl	8001546 <clear_display>
	 write_string_line(1,"   Smart-fARM");
 8001634:	490a      	ldr	r1, [pc, #40]	@ (8001660 <main+0xcc>)
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff ff6b 	bl	8001512 <write_string_line>
	 write_string_line(2,"    ");
 800163c:	490d      	ldr	r1, [pc, #52]	@ (8001674 <main+0xe0>)
 800163e:	2002      	movs	r0, #2
 8001640:	f7ff ff67 	bl	8001512 <write_string_line>
	 write_string_LCD(buffer);
 8001644:	463b      	mov	r3, r7
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff ff4e 	bl	80014e8 <write_string_LCD>
	 write_string_LCD("\xDF" "C");
 800164c:	480a      	ldr	r0, [pc, #40]	@ (8001678 <main+0xe4>)
 800164e:	f7ff ff4b 	bl	80014e8 <write_string_LCD>
	 HAL_Delay(2000);
 8001652:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001656:	f000 fc0d 	bl	8001e74 <HAL_Delay>
  {
 800165a:	e7be      	b.n	80015da <main+0x46>
 800165c:	20000264 	.word	0x20000264
 8001660:	08006f80 	.word	0x08006f80
 8001664:	08006f90 	.word	0x08006f90
 8001668:	40011000 	.word	0x40011000
 800166c:	08006f94 	.word	0x08006f94
 8001670:	08006fa0 	.word	0x08006fa0
 8001674:	08006fa8 	.word	0x08006fa8
 8001678:	08006fb0 	.word	0x08006fb0

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	@ 0x50
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001686:	2228      	movs	r2, #40	@ 0x28
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f003 fb8f 	bl	8004dae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ba:	2301      	movs	r3, #1
 80016bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016be:	2302      	movs	r3, #2
 80016c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016d2:	4618      	mov	r0, r3
 80016d4:	f001 fc84 	bl	8002fe0 <HAL_RCC_OscConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016de:	f000 f973 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e2:	230f      	movs	r3, #15
 80016e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	2102      	movs	r1, #2
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 fef0 	bl	80034e4 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800170a:	f000 f95d 	bl	80019c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800170e:	2302      	movs	r3, #2
 8001710:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001716:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f002 f85c 	bl	80037d8 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001726:	f000 f94f 	bl	80019c8 <Error_Handler>
  }
}
 800172a:	bf00      	nop
 800172c:	3750      	adds	r7, #80	@ 0x50
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001744:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001746:	4a19      	ldr	r2, [pc, #100]	@ (80017ac <MX_ADC1_Init+0x78>)
 8001748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174a:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_ADC1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001750:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001752:	2201      	movs	r2, #1
 8001754:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001758:	2200      	movs	r2, #0
 800175a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_ADC1_Init+0x74>)
 800175e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001762:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_ADC1_Init+0x74>)
 800176c:	2201      	movs	r2, #1
 800176e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	480d      	ldr	r0, [pc, #52]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001772:	f000 fba3 	bl	8001ebc <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800177c:	f000 f924 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001780:	2310      	movs	r3, #16
 8001782:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001784:	2301      	movs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001788:	2305      	movs	r3, #5
 800178a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4805      	ldr	r0, [pc, #20]	@ (80017a8 <MX_ADC1_Init+0x74>)
 8001792:	f000 fe57 	bl	8002444 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800179c:	f000 f914 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200001f0 	.word	0x200001f0
 80017ac:	40012400 	.word	0x40012400

080017b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001848 <MX_TIM3_Init+0x98>)
 80017d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017d4:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80017d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017dc:	2210      	movs	r2, #16
 80017de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017e2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017f0:	2280      	movs	r2, #128	@ 0x80
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017f4:	4813      	ldr	r0, [pc, #76]	@ (8001844 <MX_TIM3_Init+0x94>)
 80017f6:	f002 f95b 	bl	8003ab0 <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001800:	f000 f8e2 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0308 	add.w	r3, r7, #8
 800180e:	4619      	mov	r1, r3
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <MX_TIM3_Init+0x94>)
 8001812:	f002 faf7 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800181c:	f000 f8d4 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001820:	2300      	movs	r3, #0
 8001822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_TIM3_Init+0x94>)
 800182e:	f002 fccd 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001838:	f000 f8c6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000264 	.word	0x20000264
 8001848:	40000400 	.word	0x40000400

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_DMA_Init+0x38>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <MX_DMA_Init+0x38>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6153      	str	r3, [r2, #20]
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_DMA_Init+0x38>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	200b      	movs	r0, #11
 8001870:	f001 f853 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001874:	200b      	movs	r0, #11
 8001876:	f001 f86c 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	f107 0310 	add.w	r3, r7, #16
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
 800189a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189c:	4b46      	ldr	r3, [pc, #280]	@ (80019b8 <MX_GPIO_Init+0x130>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a45      	ldr	r2, [pc, #276]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018a2:	f043 0310 	orr.w	r3, r3, #16
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	4a3f      	ldr	r2, [pc, #252]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018ba:	f043 0320 	orr.w	r3, r3, #32
 80018be:	6193      	str	r3, [r2, #24]
 80018c0:	4b3d      	ldr	r3, [pc, #244]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	4a39      	ldr	r2, [pc, #228]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	6193      	str	r3, [r2, #24]
 80018d8:	4b37      	ldr	r3, [pc, #220]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a33      	ldr	r2, [pc, #204]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <MX_GPIO_Init+0x130>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001902:	482e      	ldr	r0, [pc, #184]	@ (80019bc <MX_GPIO_Init+0x134>)
 8001904:	f001 fb3b 	bl	8002f7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001908:	2200      	movs	r2, #0
 800190a:	f641 6108 	movw	r1, #7688	@ 0x1e08
 800190e:	482c      	ldr	r0, [pc, #176]	@ (80019c0 <MX_GPIO_Init+0x138>)
 8001910:	f001 fb35 	bl	8002f7e <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8001914:	2200      	movs	r2, #0
 8001916:	f640 411b 	movw	r1, #3099	@ 0xc1b
 800191a:	482a      	ldr	r0, [pc, #168]	@ (80019c4 <MX_GPIO_Init+0x13c>)
 800191c:	f001 fb2f 	bl	8002f7e <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001926:	2301      	movs	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	4619      	mov	r1, r3
 8001938:	4820      	ldr	r0, [pc, #128]	@ (80019bc <MX_GPIO_Init+0x134>)
 800193a:	f001 f985 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRRIGACAO_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 800193e:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8001942:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001950:	f107 0310 	add.w	r3, r7, #16
 8001954:	4619      	mov	r1, r3
 8001956:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <MX_GPIO_Init+0x138>)
 8001958:	f001 f976 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 800195c:	f640 431b 	movw	r3, #3099	@ 0xc1b
 8001960:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4619      	mov	r1, r3
 8001974:	4813      	ldr	r0, [pc, #76]	@ (80019c4 <MX_GPIO_Init+0x13c>)
 8001976:	f001 f967 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 800197a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800197e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001984:	2301      	movs	r3, #1
 8001986:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	480d      	ldr	r0, [pc, #52]	@ (80019c4 <MX_GPIO_Init+0x13c>)
 8001990:	f001 f95a 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	4806      	ldr	r0, [pc, #24]	@ (80019c4 <MX_GPIO_Init+0x13c>)
 80019aa:	f001 f94d 	bl	8002c48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40010800 	.word	0x40010800
 80019c4:	40010c00 	.word	0x40010c00

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_MspInit+0x5c>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	4a14      	ldr	r2, [pc, #80]	@ (8001a30 <HAL_MspInit+0x5c>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	6193      	str	r3, [r2, #24]
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_MspInit+0x5c>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_MspInit+0x5c>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001a30 <HAL_MspInit+0x5c>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x5c>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_MspInit+0x60>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <HAL_MspInit+0x60>)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000

08001a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <HAL_ADC_MspInit+0xbc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d149      	bne.n	8001aec <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a58:	4b27      	ldr	r3, [pc, #156]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a26      	ldr	r2, [pc, #152]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a70:	4b21      	ldr	r3, [pc, #132]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	6193      	str	r3, [r2, #24]
 8001a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <HAL_ADC_MspInit+0xc0>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	4819      	ldr	r0, [pc, #100]	@ (8001afc <HAL_ADC_MspInit+0xc4>)
 8001a98:	f001 f8d6 	bl	8002c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001a9e:	4a19      	ldr	r2, [pc, #100]	@ (8001b04 <HAL_ADC_MspInit+0xcc>)
 8001aa0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa8:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aae:	4b14      	ldr	r3, [pc, #80]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aca:	4b0d      	ldr	r3, [pc, #52]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ad0:	480b      	ldr	r0, [pc, #44]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ad2:	f000 ff59 	bl	8002988 <HAL_DMA_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001adc:	f7ff ff74 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ae4:	621a      	str	r2, [r3, #32]
 8001ae6:	4a06      	ldr	r2, [pc, #24]	@ (8001b00 <HAL_ADC_MspInit+0xc8>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40012400 	.word	0x40012400
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010800 	.word	0x40010800
 8001b00:	20000220 	.word	0x20000220
 8001b04:	40020008 	.word	0x40020008

08001b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	@ (8001b4c <HAL_TIM_Base_MspInit+0x44>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d113      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_TIM_Base_MspInit+0x48>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_TIM_Base_MspInit+0x48>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b0a      	ldr	r3, [pc, #40]	@ (8001b50 <HAL_TIM_Base_MspInit+0x48>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	201d      	movs	r0, #29
 8001b38:	f000 feef 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b3c:	201d      	movs	r0, #29
 8001b3e:	f000 ff08 	bl	8002952 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	40021000 	.word	0x40021000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <NMI_Handler+0x4>

08001b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 f94a 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}

08001bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	@ (8001bbc <DMA1_Channel1_IRQHandler+0x10>)
 8001bb2:	f000 ff43 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000220 	.word	0x20000220

08001bc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bc4:	4802      	ldr	r0, [pc, #8]	@ (8001bd0 <TIM3_IRQHandler+0x10>)
 8001bc6:	f002 f815 	bl	8003bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000264 	.word	0x20000264

08001bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <_kill>:

int _kill(int pid, int sig)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bec:	f003 f932 	bl	8004e54 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2216      	movs	r2, #22
 8001bf4:	601a      	str	r2, [r3, #0]
  return -1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_exit>:

void _exit (int status)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ffe7 	bl	8001be2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <_exit+0x12>

08001c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	4601      	mov	r1, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <_read+0x12>
  }

  return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e009      	b.n	8001c78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60ba      	str	r2, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf1      	blt.n	8001c64 <_write+0x12>
  }
  return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_close>:

int _close(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bc80      	pop	{r7}
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <_sbrk+0x5c>)
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <_sbrk+0x60>)
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d00:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <_sbrk+0x64>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <_sbrk+0x64>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	@ (8001d54 <_sbrk+0x68>)
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d207      	bcs.n	8001d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d1c:	f003 f89a 	bl	8004e54 <__errno>
 8001d20:	4603      	mov	r3, r0
 8001d22:	220c      	movs	r2, #12
 8001d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d26:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2a:	e009      	b.n	8001d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d2c:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <_sbrk+0x64>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	4a05      	ldr	r2, [pc, #20]	@ (8001d50 <_sbrk+0x64>)
 8001d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20005000 	.word	0x20005000
 8001d4c:	00000400 	.word	0x00000400
 8001d50:	200002ac 	.word	0x200002ac
 8001d54:	20000400 	.word	0x20000400

08001d58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr

08001d64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d64:	f7ff fff8 	bl	8001d58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d68:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d6a:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a09      	ldr	r2, [pc, #36]	@ (8001da4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d80:	4c09      	ldr	r4, [pc, #36]	@ (8001da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f003 f867 	bl	8004e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d92:	f7ff fbff 	bl	8001594 <main>
  bx lr
 8001d96:	4770      	bx	lr
  ldr r0, =_sdata
 8001d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d9c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001da0:	08007370 	.word	0x08007370
  ldr r2, =_sbss
 8001da4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001da8:	20000400 	.word	0x20000400

08001dac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_2_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <HAL_Init+0x28>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	@ (8001dd8 <HAL_Init+0x28>)
 8001dba:	f043 0310 	orr.w	r3, r3, #16
 8001dbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 fd9f 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fe02 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40022000 	.word	0x40022000

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fdb7 	bl	800296e <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 fd7f 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	@ (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_IncTick+0x1c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_IncTick+0x20>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <HAL_IncTick+0x20>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	200002b0 	.word	0x200002b0

08001e60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return uwTick;
 8001e64:	4b02      	ldr	r3, [pc, #8]	@ (8001e70 <HAL_GetTick+0x10>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	200002b0 	.word	0x200002b0

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffe0 	bl	8001e60 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008

08001ebc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0be      	b.n	800205c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fd9c 	bl	8001a38 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fbf1 	bl	80026e8 <ADC_ConversionStop_Disable>
 8001f06:	4603      	mov	r3, r0
 8001f08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8099 	bne.w	800204a <HAL_ADC_Init+0x18e>
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8095 	bne.w	800204a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f28:	f023 0302 	bic.w	r3, r3, #2
 8001f2c:	f043 0202 	orr.w	r2, r3, #2
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	7b1b      	ldrb	r3, [r3, #12]
 8001f42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f54:	d003      	beq.n	8001f5e <HAL_ADC_Init+0xa2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_ADC_Init+0xa8>
 8001f5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_Init+0xaa>
 8001f64:	2300      	movs	r3, #0
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7d1b      	ldrb	r3, [r3, #20]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d119      	bne.n	8001fa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7b1b      	ldrb	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	035a      	lsls	r2, r3, #13
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_ADC_Init+0x1a8>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	68b9      	ldr	r1, [r7, #8]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd8:	d003      	beq.n	8001fe2 <HAL_ADC_Init+0x126>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d104      	bne.n	8001fec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	051b      	lsls	r3, r3, #20
 8001fea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_ADC_Init+0x1ac>)
 8002008:	4013      	ands	r3, r2
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	429a      	cmp	r2, r3
 800200e:	d10b      	bne.n	8002028 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	f043 0201 	orr.w	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002026:	e018      	b.n	800205a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202c:	f023 0312 	bic.w	r3, r3, #18
 8002030:	f043 0210 	orr.w	r2, r3, #16
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002048:	e007      	b.n	800205a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	ffe1f7fd 	.word	0xffe1f7fd
 8002068:	ff1f0efe 	.word	0xff1f0efe

0800206c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Start+0x1a>
 8002082:	2302      	movs	r3, #2
 8002084:	e098      	b.n	80021b8 <HAL_ADC_Start+0x14c>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fad0 	bl	8002634 <ADC_Enable>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8087 	bne.w	80021ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a41      	ldr	r2, [pc, #260]	@ (80021c0 <HAL_ADC_Start+0x154>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_Start+0x5e>
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_ADC_Start+0x158>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d115      	bne.n	80020f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d026      	beq.n	8002132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f4:	e01d      	b.n	8002132 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2f      	ldr	r2, [pc, #188]	@ (80021c4 <HAL_ADC_Start+0x158>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_ADC_Start+0xaa>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2b      	ldr	r2, [pc, #172]	@ (80021c0 <HAL_ADC_Start+0x154>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10d      	bne.n	8002132 <HAL_ADC_Start+0xc6>
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_ADC_Start+0x158>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800212a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002136:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d006      	beq.n	800214c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	f023 0206 	bic.w	r2, r3, #6
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800214a:	e002      	b.n	8002152 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0202 	mvn.w	r2, #2
 8002162:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800216e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002172:	d113      	bne.n	800219c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <HAL_ADC_Start+0x154>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d105      	bne.n	800218a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800217e:	4b11      	ldr	r3, [pc, #68]	@ (80021c4 <HAL_ADC_Start+0x158>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d108      	bne.n	800219c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	e00c      	b.n	80021b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	e003      	b.n	80021b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40012800 	.word	0x40012800
 80021c4:	40012400 	.word	0x40012400

080021c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_ADC_Stop+0x1a>
 80021de:	2302      	movs	r3, #2
 80021e0:	e01a      	b.n	8002218 <HAL_ADC_Stop+0x50>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fa7c 	bl	80026e8 <ADC_ConversionStop_Disable>
 80021f0:	4603      	mov	r3, r0
 80021f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f043 0201 	orr.w	r2, r3, #1
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002236:	f7ff fe13 	bl	8001e60 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0d3      	b.n	800240a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d131      	bne.n	80022d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002276:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800227a:	2b00      	cmp	r3, #0
 800227c:	d12a      	bne.n	80022d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800227e:	e021      	b.n	80022c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002286:	d01d      	beq.n	80022c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_ADC_PollForConversion+0x7e>
 800228e:	f7ff fde7 	bl	8001e60 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d212      	bcs.n	80022c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	f043 0204 	orr.w	r2, r3, #4
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0a2      	b.n	800240a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0d6      	beq.n	8002280 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022d2:	e070      	b.n	80023b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <HAL_ADC_PollForConversion+0x1f4>)
 80022d6:	681c      	ldr	r4, [r3, #0]
 80022d8:	2002      	movs	r0, #2
 80022da:	f001 fb33 	bl	8003944 <HAL_RCCEx_GetPeriphCLKFreq>
 80022de:	4603      	mov	r3, r0
 80022e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002418 <HAL_ADC_PollForConversion+0x1f8>)
 80022ec:	400b      	ands	r3, r1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d118      	bne.n	8002324 <HAL_ADC_PollForConversion+0x104>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68d9      	ldr	r1, [r3, #12]
 80022f8:	4b48      	ldr	r3, [pc, #288]	@ (800241c <HAL_ADC_PollForConversion+0x1fc>)
 80022fa:	400b      	ands	r3, r1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d111      	bne.n	8002324 <HAL_ADC_PollForConversion+0x104>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <HAL_ADC_PollForConversion+0x200>)
 8002308:	400b      	ands	r3, r1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_ADC_PollForConversion+0x100>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68d9      	ldr	r1, [r3, #12]
 8002314:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <HAL_ADC_PollForConversion+0x204>)
 8002316:	400b      	ands	r3, r1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_PollForConversion+0x100>
 800231c:	2314      	movs	r3, #20
 800231e:	e020      	b.n	8002362 <HAL_ADC_PollForConversion+0x142>
 8002320:	2329      	movs	r3, #41	@ 0x29
 8002322:	e01e      	b.n	8002362 <HAL_ADC_PollForConversion+0x142>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_ADC_PollForConversion+0x200>)
 800232c:	400b      	ands	r3, r1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_ADC_PollForConversion+0x120>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68d9      	ldr	r1, [r3, #12]
 8002338:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <HAL_ADC_PollForConversion+0x204>)
 800233a:	400b      	ands	r3, r1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_ADC_PollForConversion+0x13c>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6919      	ldr	r1, [r3, #16]
 8002346:	4b38      	ldr	r3, [pc, #224]	@ (8002428 <HAL_ADC_PollForConversion+0x208>)
 8002348:	400b      	ands	r3, r1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d108      	bne.n	8002360 <HAL_ADC_PollForConversion+0x140>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68d9      	ldr	r1, [r3, #12]
 8002354:	4b34      	ldr	r3, [pc, #208]	@ (8002428 <HAL_ADC_PollForConversion+0x208>)
 8002356:	400b      	ands	r3, r1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_PollForConversion+0x140>
 800235c:	2354      	movs	r3, #84	@ 0x54
 800235e:	e000      	b.n	8002362 <HAL_ADC_PollForConversion+0x142>
 8002360:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002368:	e021      	b.n	80023ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d01a      	beq.n	80023a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d007      	beq.n	8002388 <HAL_ADC_PollForConversion+0x168>
 8002378:	f7ff fd72 	bl	8001e60 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d20f      	bcs.n	80023a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d90b      	bls.n	80023a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e030      	b.n	800240a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	3301      	adds	r3, #1
 80023ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d8d9      	bhi.n	800236a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f06f 0212 	mvn.w	r2, #18
 80023be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023d6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023da:	d115      	bne.n	8002408 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	371c      	adds	r7, #28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	20000000 	.word	0x20000000
 8002418:	24924924 	.word	0x24924924
 800241c:	00924924 	.word	0x00924924
 8002420:	12492492 	.word	0x12492492
 8002424:	00492492 	.word	0x00492492
 8002428:	00249249 	.word	0x00249249

0800242c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x20>
 8002460:	2302      	movs	r3, #2
 8002462:	e0dc      	b.n	800261e <HAL_ADC_ConfigChannel+0x1da>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d81c      	bhi.n	80024ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	3b05      	subs	r3, #5
 8002486:	221f      	movs	r2, #31
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	4019      	ands	r1, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	4413      	add	r3, r2
 800249e:	3b05      	subs	r3, #5
 80024a0:	fa00 f203 	lsl.w	r2, r0, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ac:	e03c      	b.n	8002528 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d81c      	bhi.n	80024f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	3b23      	subs	r3, #35	@ 0x23
 80024c8:	221f      	movs	r2, #31
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	4019      	ands	r1, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	3b23      	subs	r3, #35	@ 0x23
 80024e2:	fa00 f203 	lsl.w	r2, r0, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80024ee:	e01b      	b.n	8002528 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b41      	subs	r3, #65	@ 0x41
 8002502:	221f      	movs	r2, #31
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	4019      	ands	r1, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6818      	ldr	r0, [r3, #0]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b41      	subs	r3, #65	@ 0x41
 800251c:	fa00 f203 	lsl.w	r2, r0, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b09      	cmp	r3, #9
 800252e:	d91c      	bls.n	800256a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d9      	ldr	r1, [r3, #12]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	3b1e      	subs	r3, #30
 8002542:	2207      	movs	r2, #7
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	4019      	ands	r1, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	6898      	ldr	r0, [r3, #8]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	3b1e      	subs	r3, #30
 800255c:	fa00 f203 	lsl.w	r2, r0, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	e019      	b.n	800259e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	2207      	movs	r2, #7
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6898      	ldr	r0, [r3, #8]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	fa00 f203 	lsl.w	r2, r0, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d003      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025aa:	2b11      	cmp	r3, #17
 80025ac:	d132      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002628 <HAL_ADC_ConfigChannel+0x1e4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d125      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d126      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d11a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025de:	4b13      	ldr	r3, [pc, #76]	@ (800262c <HAL_ADC_ConfigChannel+0x1e8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a13      	ldr	r2, [pc, #76]	@ (8002630 <HAL_ADC_ConfigChannel+0x1ec>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	0c9a      	lsrs	r2, r3, #18
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025f4:	e002      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f9      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x1b2>
 8002602:	e007      	b.n	8002614 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	f043 0220 	orr.w	r2, r3, #32
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	40012400 	.word	0x40012400
 800262c:	20000000 	.word	0x20000000
 8002630:	431bde83 	.word	0x431bde83

08002634 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d040      	beq.n	80026d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <ADC_Enable+0xac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <ADC_Enable+0xb0>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002670:	e002      	b.n	8002678 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f9      	bne.n	8002672 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800267e:	f7ff fbef 	bl	8001e60 <HAL_GetTick>
 8002682:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002684:	e01f      	b.n	80026c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002686:	f7ff fbeb 	bl	8001e60 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d918      	bls.n	80026c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d011      	beq.n	80026c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a6:	f043 0210 	orr.w	r2, r3, #16
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e007      	b.n	80026d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d1d8      	bne.n	8002686 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	20000000 	.word	0x20000000
 80026e4:	431bde83 	.word	0x431bde83

080026e8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d12e      	bne.n	8002760 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002712:	f7ff fba5 	bl	8001e60 <HAL_GetTick>
 8002716:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002718:	e01b      	b.n	8002752 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800271a:	f7ff fba1 	bl	8001e60 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d914      	bls.n	8002752 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10d      	bne.n	8002752 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e007      	b.n	8002762 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d0dc      	beq.n	800271a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4906      	ldr	r1, [pc, #24]	@ (8002804 <__NVIC_EnableIRQ+0x34>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	@ (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	@ (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	@ 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff90 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	@ (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	@ (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff2d 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff42 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff90 	bl	800285c <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5f 	bl	8002808 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff35 	bl	80027d0 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e043      	b.n	8002a26 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b22      	ldr	r3, [pc, #136]	@ (8002a30 <HAL_DMA_Init+0xa8>)
 80029a6:	4413      	add	r3, r2
 80029a8:	4a22      	ldr	r2, [pc, #136]	@ (8002a34 <HAL_DMA_Init+0xac>)
 80029aa:	fba2 2303 	umull	r2, r3, r2, r3
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	009a      	lsls	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a38 <HAL_DMA_Init+0xb0>)
 80029ba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2202      	movs	r2, #2
 80029c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029d2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80029d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	bffdfff8 	.word	0xbffdfff8
 8002a34:	cccccccd 	.word	0xcccccccd
 8002a38:	40020000 	.word	0x40020000

08002a3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	2204      	movs	r2, #4
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d04f      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xc8>
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04a      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0204 	bic.w	r2, r2, #4
 8002a8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a66      	ldr	r2, [pc, #408]	@ (8002c2c <HAL_DMA_IRQHandler+0x1f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d029      	beq.n	8002aea <HAL_DMA_IRQHandler+0xae>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a65      	ldr	r2, [pc, #404]	@ (8002c30 <HAL_DMA_IRQHandler+0x1f4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d022      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0xaa>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a63      	ldr	r2, [pc, #396]	@ (8002c34 <HAL_DMA_IRQHandler+0x1f8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01a      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0xa4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a62      	ldr	r2, [pc, #392]	@ (8002c38 <HAL_DMA_IRQHandler+0x1fc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d012      	beq.n	8002ada <HAL_DMA_IRQHandler+0x9e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a60      	ldr	r2, [pc, #384]	@ (8002c3c <HAL_DMA_IRQHandler+0x200>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00a      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x98>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a5f      	ldr	r2, [pc, #380]	@ (8002c40 <HAL_DMA_IRQHandler+0x204>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d102      	bne.n	8002ace <HAL_DMA_IRQHandler+0x92>
 8002ac8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002acc:	e00e      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002ace:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002ad2:	e00b      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002ad4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002ad8:	e008      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002ada:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ade:	e005      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002ae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ae4:	e002      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002ae6:	2340      	movs	r3, #64	@ 0x40
 8002ae8:	e000      	b.n	8002aec <HAL_DMA_IRQHandler+0xb0>
 8002aea:	2304      	movs	r3, #4
 8002aec:	4a55      	ldr	r2, [pc, #340]	@ (8002c44 <HAL_DMA_IRQHandler+0x208>)
 8002aee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8094 	beq.w	8002c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b02:	e08e      	b.n	8002c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	2202      	movs	r2, #2
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d056      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x186>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d051      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020a 	bic.w	r2, r2, #10
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a38      	ldr	r2, [pc, #224]	@ (8002c2c <HAL_DMA_IRQHandler+0x1f0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d029      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x166>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a37      	ldr	r2, [pc, #220]	@ (8002c30 <HAL_DMA_IRQHandler+0x1f4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x162>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a35      	ldr	r2, [pc, #212]	@ (8002c34 <HAL_DMA_IRQHandler+0x1f8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01a      	beq.n	8002b98 <HAL_DMA_IRQHandler+0x15c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a34      	ldr	r2, [pc, #208]	@ (8002c38 <HAL_DMA_IRQHandler+0x1fc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x156>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a32      	ldr	r2, [pc, #200]	@ (8002c3c <HAL_DMA_IRQHandler+0x200>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00a      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x150>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a31      	ldr	r2, [pc, #196]	@ (8002c40 <HAL_DMA_IRQHandler+0x204>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d102      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x14a>
 8002b80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002b84:	e00e      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b8a:	e00b      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b90:	e008      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002b92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b96:	e005      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002b98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b9c:	e002      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002b9e:	2320      	movs	r3, #32
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x168>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	4a27      	ldr	r2, [pc, #156]	@ (8002c44 <HAL_DMA_IRQHandler+0x208>)
 8002ba6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d034      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002bc0:	e02f      	b.n	8002c22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	409a      	lsls	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d028      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x1e8>
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d023      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 020e 	bic.w	r2, r2, #14
 8002bea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	4798      	blx	r3
    }
  }
  return;
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
}
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40020008 	.word	0x40020008
 8002c30:	4002001c 	.word	0x4002001c
 8002c34:	40020030 	.word	0x40020030
 8002c38:	40020044 	.word	0x40020044
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	4002006c 	.word	0x4002006c
 8002c44:	40020000 	.word	0x40020000

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b08b      	sub	sp, #44	@ 0x2c
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e169      	b.n	8002f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	69fa      	ldr	r2, [r7, #28]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 8158 	bne.w	8002f2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d05e      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c84:	4a98      	ldr	r2, [pc, #608]	@ (8002ee8 <HAL_GPIO_Init+0x2a0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d875      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c8a:	4a98      	ldr	r2, [pc, #608]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d058      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c90:	4a96      	ldr	r2, [pc, #600]	@ (8002eec <HAL_GPIO_Init+0x2a4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d86f      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002c96:	4a96      	ldr	r2, [pc, #600]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d052      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002c9c:	4a94      	ldr	r2, [pc, #592]	@ (8002ef0 <HAL_GPIO_Init+0x2a8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d869      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002ca2:	4a94      	ldr	r2, [pc, #592]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04c      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002ca8:	4a92      	ldr	r2, [pc, #584]	@ (8002ef4 <HAL_GPIO_Init+0x2ac>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d863      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cae:	4a92      	ldr	r2, [pc, #584]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d046      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
 8002cb4:	4a90      	ldr	r2, [pc, #576]	@ (8002ef8 <HAL_GPIO_Init+0x2b0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d85d      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cba:	2b12      	cmp	r3, #18
 8002cbc:	d82a      	bhi.n	8002d14 <HAL_GPIO_Init+0xcc>
 8002cbe:	2b12      	cmp	r3, #18
 8002cc0:	d859      	bhi.n	8002d76 <HAL_GPIO_Init+0x12e>
 8002cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_GPIO_Init+0x80>)
 8002cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc8:	08002d43 	.word	0x08002d43
 8002ccc:	08002d1d 	.word	0x08002d1d
 8002cd0:	08002d2f 	.word	0x08002d2f
 8002cd4:	08002d71 	.word	0x08002d71
 8002cd8:	08002d77 	.word	0x08002d77
 8002cdc:	08002d77 	.word	0x08002d77
 8002ce0:	08002d77 	.word	0x08002d77
 8002ce4:	08002d77 	.word	0x08002d77
 8002ce8:	08002d77 	.word	0x08002d77
 8002cec:	08002d77 	.word	0x08002d77
 8002cf0:	08002d77 	.word	0x08002d77
 8002cf4:	08002d77 	.word	0x08002d77
 8002cf8:	08002d77 	.word	0x08002d77
 8002cfc:	08002d77 	.word	0x08002d77
 8002d00:	08002d77 	.word	0x08002d77
 8002d04:	08002d77 	.word	0x08002d77
 8002d08:	08002d77 	.word	0x08002d77
 8002d0c:	08002d25 	.word	0x08002d25
 8002d10:	08002d39 	.word	0x08002d39
 8002d14:	4a79      	ldr	r2, [pc, #484]	@ (8002efc <HAL_GPIO_Init+0x2b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d013      	beq.n	8002d42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d1a:	e02c      	b.n	8002d76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	623b      	str	r3, [r7, #32]
          break;
 8002d22:	e029      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	623b      	str	r3, [r7, #32]
          break;
 8002d2c:	e024      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	3308      	adds	r3, #8
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e01f      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	623b      	str	r3, [r7, #32]
          break;
 8002d40:	e01a      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	623b      	str	r3, [r7, #32]
          break;
 8002d4e:	e013      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	611a      	str	r2, [r3, #16]
          break;
 8002d62:	e009      	b.n	8002d78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d64:	2308      	movs	r3, #8
 8002d66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	615a      	str	r2, [r3, #20]
          break;
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
          break;
 8002d74:	e000      	b.n	8002d78 <HAL_GPIO_Init+0x130>
          break;
 8002d76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2bff      	cmp	r3, #255	@ 0xff
 8002d7c:	d801      	bhi.n	8002d82 <HAL_GPIO_Init+0x13a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e001      	b.n	8002d86 <HAL_GPIO_Init+0x13e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	@ 0xff
 8002d8c:	d802      	bhi.n	8002d94 <HAL_GPIO_Init+0x14c>
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x152>
 8002d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d96:	3b08      	subs	r3, #8
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	210f      	movs	r1, #15
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	fa01 f303 	lsl.w	r3, r1, r3
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	431a      	orrs	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b1 	beq.w	8002f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_GPIO_Init+0x2b8>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a40      	ldr	r2, [pc, #256]	@ (8002f08 <HAL_GPIO_Init+0x2c0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d013      	beq.n	8002e34 <HAL_GPIO_Init+0x1ec>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f0c <HAL_GPIO_Init+0x2c4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00d      	beq.n	8002e30 <HAL_GPIO_Init+0x1e8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a3e      	ldr	r2, [pc, #248]	@ (8002f10 <HAL_GPIO_Init+0x2c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <HAL_GPIO_Init+0x1e4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f14 <HAL_GPIO_Init+0x2cc>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <HAL_GPIO_Init+0x1e0>
 8002e24:	2303      	movs	r3, #3
 8002e26:	e006      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e004      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e002      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_GPIO_Init+0x1ee>
 8002e34:	2300      	movs	r3, #0
 8002e36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e38:	f002 0203 	and.w	r2, r2, #3
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	4093      	lsls	r3, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e46:	492f      	ldr	r1, [pc, #188]	@ (8002f04 <HAL_GPIO_Init+0x2bc>)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	089b      	lsrs	r3, r3, #2
 8002e4c:	3302      	adds	r3, #2
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d006      	beq.n	8002e6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	492c      	ldr	r1, [pc, #176]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	608b      	str	r3, [r1, #8]
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	4928      	ldr	r1, [pc, #160]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4922      	ldr	r1, [pc, #136]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60cb      	str	r3, [r1, #12]
 8002e94:	e006      	b.n	8002ea4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	491e      	ldr	r1, [pc, #120]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb0:	4b19      	ldr	r3, [pc, #100]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4918      	ldr	r1, [pc, #96]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ebe:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4914      	ldr	r1, [pc, #80]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e021      	b.n	8002f2a <HAL_GPIO_Init+0x2e2>
 8002ee6:	bf00      	nop
 8002ee8:	10320000 	.word	0x10320000
 8002eec:	10310000 	.word	0x10310000
 8002ef0:	10220000 	.word	0x10220000
 8002ef4:	10210000 	.word	0x10210000
 8002ef8:	10120000 	.word	0x10120000
 8002efc:	10110000 	.word	0x10110000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	40010c00 	.word	0x40010c00
 8002f10:	40011000 	.word	0x40011000
 8002f14:	40011400 	.word	0x40011400
 8002f18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4909      	ldr	r1, [pc, #36]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f47f ae8e 	bne.w	8002c5c <HAL_GPIO_Init+0x14>
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	372c      	adds	r7, #44	@ 0x2c
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr
 8002f4c:	40010400 	.word	0x40010400

08002f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	887b      	ldrh	r3, [r7, #2]
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	807b      	strh	r3, [r7, #2]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f8e:	787b      	ldrb	r3, [r7, #1]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f94:	887a      	ldrh	r2, [r7, #2]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f9a:	e003      	b.n	8002fa4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	041a      	lsls	r2, r3, #16
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	611a      	str	r2, [r3, #16]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b085      	sub	sp, #20
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fc0:	887a      	ldrh	r2, [r7, #2]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	041a      	lsls	r2, r3, #16
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43d9      	mvns	r1, r3
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	400b      	ands	r3, r1
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e272      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8087 	beq.w	800310e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003000:	4b92      	ldr	r3, [pc, #584]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b04      	cmp	r3, #4
 800300a:	d00c      	beq.n	8003026 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800300c:	4b8f      	ldr	r3, [pc, #572]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d112      	bne.n	800303e <HAL_RCC_OscConfig+0x5e>
 8003018:	4b8c      	ldr	r3, [pc, #560]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d10b      	bne.n	800303e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003026:	4b89      	ldr	r3, [pc, #548]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d06c      	beq.n	800310c <HAL_RCC_OscConfig+0x12c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d168      	bne.n	800310c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e24c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x76>
 8003048:	4b80      	ldr	r3, [pc, #512]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a7f      	ldr	r2, [pc, #508]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e02e      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b7b      	ldr	r3, [pc, #492]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7a      	ldr	r2, [pc, #488]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b78      	ldr	r3, [pc, #480]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a77      	ldr	r2, [pc, #476]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e01d      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003080:	d10c      	bne.n	800309c <HAL_RCC_OscConfig+0xbc>
 8003082:	4b72      	ldr	r3, [pc, #456]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a71      	ldr	r2, [pc, #452]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	4b6f      	ldr	r3, [pc, #444]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a6e      	ldr	r2, [pc, #440]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	e00b      	b.n	80030b4 <HAL_RCC_OscConfig+0xd4>
 800309c:	4b6b      	ldr	r3, [pc, #428]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a6a      	ldr	r2, [pc, #424]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	4b68      	ldr	r3, [pc, #416]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a67      	ldr	r2, [pc, #412]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80030ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d013      	beq.n	80030e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fed0 	bl	8001e60 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c4:	f7fe fecc 	bl	8001e60 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	@ 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e200      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d6:	4b5d      	ldr	r3, [pc, #372]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe4>
 80030e2:	e014      	b.n	800310e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe febc 	bl	8001e60 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe feb8 	bl	8001e60 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	@ 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1ec      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030fe:	4b53      	ldr	r3, [pc, #332]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x10c>
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d063      	beq.n	80031e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800311a:	4b4c      	ldr	r3, [pc, #304]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003126:	4b49      	ldr	r3, [pc, #292]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 030c 	and.w	r3, r3, #12
 800312e:	2b08      	cmp	r3, #8
 8003130:	d11c      	bne.n	800316c <HAL_RCC_OscConfig+0x18c>
 8003132:	4b46      	ldr	r3, [pc, #280]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d116      	bne.n	800316c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313e:	4b43      	ldr	r3, [pc, #268]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d001      	beq.n	8003156 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e1c0      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	4b3d      	ldr	r3, [pc, #244]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4939      	ldr	r1, [pc, #228]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316a:	e03a      	b.n	80031e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003174:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <HAL_RCC_OscConfig+0x270>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fe71 	bl	8001e60 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe fe6d 	bl	8001e60 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e1a1      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003194:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4927      	ldr	r1, [pc, #156]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]
 80031b4:	e015      	b.n	80031e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031b6:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <HAL_RCC_OscConfig+0x270>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7fe fe50 	bl	8001e60 <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c4:	f7fe fe4c 	bl	8001e60 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e180      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031d6:	4b1d      	ldr	r3, [pc, #116]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d03a      	beq.n	8003264 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d019      	beq.n	800322a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f6:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <HAL_RCC_OscConfig+0x274>)
 80031f8:	2201      	movs	r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fc:	f7fe fe30 	bl	8001e60 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fe fe2c 	bl	8001e60 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e160      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <HAL_RCC_OscConfig+0x26c>)
 8003218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003222:	2001      	movs	r0, #1
 8003224:	f000 faba 	bl	800379c <RCC_Delay>
 8003228:	e01c      	b.n	8003264 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322a:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_RCC_OscConfig+0x274>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe fe16 	bl	8001e60 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003236:	e00f      	b.n	8003258 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fe12 	bl	8001e60 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d908      	bls.n	8003258 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e146      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	42420000 	.word	0x42420000
 8003254:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003258:	4b92      	ldr	r3, [pc, #584]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e9      	bne.n	8003238 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80a6 	beq.w	80033be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003276:	4b8b      	ldr	r3, [pc, #556]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10d      	bne.n	800329e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a87      	ldr	r2, [pc, #540]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328c:	61d3      	str	r3, [r2, #28]
 800328e:	4b85      	ldr	r3, [pc, #532]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b82      	ldr	r3, [pc, #520]	@ (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b7f      	ldr	r3, [pc, #508]	@ (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7e      	ldr	r2, [pc, #504]	@ (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fdd3 	bl	8001e60 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fe fdcf 	bl	8001e60 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	@ 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e103      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b75      	ldr	r3, [pc, #468]	@ (80034a8 <HAL_RCC_OscConfig+0x4c8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x312>
 80032e4:	4b6f      	ldr	r3, [pc, #444]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a6e      	ldr	r2, [pc, #440]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e02d      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x334>
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	4a69      	ldr	r2, [pc, #420]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6213      	str	r3, [r2, #32]
 8003306:	4b67      	ldr	r3, [pc, #412]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	4a66      	ldr	r2, [pc, #408]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6213      	str	r3, [r2, #32]
 8003312:	e01c      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b05      	cmp	r3, #5
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x356>
 800331c:	4b61      	ldr	r3, [pc, #388]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a60      	ldr	r2, [pc, #384]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6213      	str	r3, [r2, #32]
 8003328:	4b5e      	ldr	r3, [pc, #376]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a5d      	ldr	r2, [pc, #372]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0x36e>
 8003336:	4b5b      	ldr	r3, [pc, #364]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	4a5a      	ldr	r2, [pc, #360]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6213      	str	r3, [r2, #32]
 8003342:	4b58      	ldr	r3, [pc, #352]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	4a57      	ldr	r2, [pc, #348]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d015      	beq.n	8003382 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003356:	f7fe fd83 	bl	8001e60 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800335c:	e00a      	b.n	8003374 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335e:	f7fe fd7f 	bl	8001e60 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e0b1      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	4b4b      	ldr	r3, [pc, #300]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ee      	beq.n	800335e <HAL_RCC_OscConfig+0x37e>
 8003380:	e014      	b.n	80033ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003382:	f7fe fd6d 	bl	8001e60 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe fd69 	bl	8001e60 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e09b      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a0:	4b40      	ldr	r3, [pc, #256]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ee      	bne.n	800338a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033ac:	7dfb      	ldrb	r3, [r7, #23]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d105      	bne.n	80033be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b2:	4b3c      	ldr	r3, [pc, #240]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8087 	beq.w	80034d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033c8:	4b36      	ldr	r3, [pc, #216]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d061      	beq.n	8003498 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d146      	bne.n	800346a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033dc:	4b33      	ldr	r3, [pc, #204]	@ (80034ac <HAL_RCC_OscConfig+0x4cc>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe fd3d 	bl	8001e60 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe fd39 	bl	8001e60 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e06d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fc:	4b29      	ldr	r3, [pc, #164]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003410:	d108      	bne.n	8003424 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003412:	4b24      	ldr	r3, [pc, #144]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	4921      	ldr	r1, [pc, #132]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	4313      	orrs	r3, r2
 8003422:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003424:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a19      	ldr	r1, [r3, #32]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003434:	430b      	orrs	r3, r1
 8003436:	491b      	ldr	r1, [pc, #108]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <HAL_RCC_OscConfig+0x4cc>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fd0d 	bl	8001e60 <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344a:	f7fe fd09 	bl	8001e60 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03d      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345c:	4b11      	ldr	r3, [pc, #68]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCC_OscConfig+0x46a>
 8003468:	e035      	b.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b10      	ldr	r3, [pc, #64]	@ (80034ac <HAL_RCC_OscConfig+0x4cc>)
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fe fcf6 	bl	8001e60 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003478:	f7fe fcf2 	bl	8001e60 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e026      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x498>
 8003496:	e01e      	b.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e019      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40007000 	.word	0x40007000
 80034ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_OscConfig+0x500>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000

080034e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0d0      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034f8:	4b6a      	ldr	r3, [pc, #424]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d910      	bls.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003506:	4b67      	ldr	r3, [pc, #412]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0207 	bic.w	r2, r3, #7
 800350e:	4965      	ldr	r1, [pc, #404]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003516:	4b63      	ldr	r3, [pc, #396]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	429a      	cmp	r2, r3
 8003522:	d001      	beq.n	8003528 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0b8      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d020      	beq.n	8003576 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003540:	4b59      	ldr	r3, [pc, #356]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a58      	ldr	r2, [pc, #352]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800354a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003558:	4b53      	ldr	r3, [pc, #332]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a52      	ldr	r2, [pc, #328]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003562:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b50      	ldr	r3, [pc, #320]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	494d      	ldr	r1, [pc, #308]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d040      	beq.n	8003604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b47      	ldr	r3, [pc, #284]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d115      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e07f      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	4b41      	ldr	r3, [pc, #260]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d109      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e073      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035b2:	4b3d      	ldr	r3, [pc, #244]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06b      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	4b39      	ldr	r3, [pc, #228]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f023 0203 	bic.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	4936      	ldr	r1, [pc, #216]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d4:	f7fe fc44 	bl	8001e60 <HAL_GetTick>
 80035d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	e00a      	b.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035dc:	f7fe fc40 	bl	8001e60 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e053      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 020c 	and.w	r2, r3, #12
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	429a      	cmp	r2, r3
 8003602:	d1eb      	bne.n	80035dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b27      	ldr	r3, [pc, #156]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d210      	bcs.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b24      	ldr	r3, [pc, #144]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 0207 	bic.w	r2, r3, #7
 800361a:	4922      	ldr	r1, [pc, #136]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b20      	ldr	r3, [pc, #128]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0307 	and.w	r3, r3, #7
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e032      	b.n	800369a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4916      	ldr	r1, [pc, #88]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d009      	beq.n	8003672 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800365e:	4b12      	ldr	r3, [pc, #72]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	490e      	ldr	r1, [pc, #56]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003672:	f000 f821 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003676:	4602      	mov	r2, r0
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c4>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	091b      	lsrs	r3, r3, #4
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	490a      	ldr	r1, [pc, #40]	@ (80036ac <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	5ccb      	ldrb	r3, [r1, r3]
 8003686:	fa22 f303 	lsr.w	r3, r2, r3
 800368a:	4a09      	ldr	r2, [pc, #36]	@ (80036b0 <HAL_RCC_ClockConfig+0x1cc>)
 800368c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fba2 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40022000 	.word	0x40022000
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08006fb4 	.word	0x08006fb4
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000004 	.word	0x20000004

080036b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	2300      	movs	r3, #0
 80036cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036d2:	4b1e      	ldr	r3, [pc, #120]	@ (800374c <HAL_RCC_GetSysClockFreq+0x94>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d002      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x30>
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_GetSysClockFreq+0x36>
 80036e6:	e027      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ea:	613b      	str	r3, [r7, #16]
      break;
 80036ec:	e027      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	0c9b      	lsrs	r3, r3, #18
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036f8:	5cd3      	ldrb	r3, [r2, r3]
 80036fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d010      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003706:	4b11      	ldr	r3, [pc, #68]	@ (800374c <HAL_RCC_GetSysClockFreq+0x94>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x98>)
 800371a:	fb03 f202 	mul.w	r2, r3, r2
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	e004      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a0c      	ldr	r2, [pc, #48]	@ (800375c <HAL_RCC_GetSysClockFreq+0xa4>)
 800372c:	fb02 f303 	mul.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	613b      	str	r3, [r7, #16]
      break;
 8003736:	e002      	b.n	800373e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b05      	ldr	r3, [pc, #20]	@ (8003750 <HAL_RCC_GetSysClockFreq+0x98>)
 800373a:	613b      	str	r3, [r7, #16]
      break;
 800373c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800373e:	693b      	ldr	r3, [r7, #16]
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000
 8003750:	007a1200 	.word	0x007a1200
 8003754:	08006fcc 	.word	0x08006fcc
 8003758:	08006fdc 	.word	0x08006fdc
 800375c:	003d0900 	.word	0x003d0900

08003760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003764:	4b02      	ldr	r3, [pc, #8]	@ (8003770 <HAL_RCC_GetHCLKFreq+0x10>)
 8003766:	681b      	ldr	r3, [r3, #0]
}
 8003768:	4618      	mov	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	20000000 	.word	0x20000000

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff fff2 	bl	8003760 <HAL_RCC_GetHCLKFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0adb      	lsrs	r3, r3, #11
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4903      	ldr	r1, [pc, #12]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	08006fc4 	.word	0x08006fc4

0800379c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037a4:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <RCC_Delay+0x34>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	@ (80037d4 <RCC_Delay+0x38>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a5b      	lsrs	r3, r3, #9
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037b8:	bf00      	nop
  }
  while (Delay --);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1e5a      	subs	r2, r3, #1
 80037be:	60fa      	str	r2, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f9      	bne.n	80037b8 <RCC_Delay+0x1c>
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr
 80037d0:	20000000 	.word	0x20000000
 80037d4:	10624dd3 	.word	0x10624dd3

080037d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	2300      	movs	r3, #0
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d07d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10d      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003804:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	4a4b      	ldr	r2, [pc, #300]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800380e:	61d3      	str	r3, [r2, #28]
 8003810:	4b49      	ldr	r3, [pc, #292]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800381c:	2301      	movs	r3, #1
 800381e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d118      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800382c:	4b43      	ldr	r3, [pc, #268]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a42      	ldr	r2, [pc, #264]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003836:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003838:	f7fe fb12 	bl	8001e60 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800383e:	e008      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003840:	f7fe fb0e 	bl	8001e60 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b64      	cmp	r3, #100	@ 0x64
 800384c:	d901      	bls.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e06d      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b3a      	ldr	r3, [pc, #232]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f0      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800385e:	4b36      	ldr	r3, [pc, #216]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003866:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d02e      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	429a      	cmp	r2, r3
 800387a:	d027      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800387c:	4b2e      	ldr	r3, [pc, #184]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003884:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003886:	4b2e      	ldr	r3, [pc, #184]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003888:	2201      	movs	r2, #1
 800388a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800388c:	4b2c      	ldr	r3, [pc, #176]	@ (8003940 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003892:	4a29      	ldr	r2, [pc, #164]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fadd 	bl	8001e60 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a8:	e00a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fe fad9 	bl	8001e60 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e036      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ee      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4917      	ldr	r1, [pc, #92]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d105      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4a13      	ldr	r2, [pc, #76]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	490b      	ldr	r1, [pc, #44]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391a:	4b07      	ldr	r3, [pc, #28]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4904      	ldr	r1, [pc, #16]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	40007000 	.word	0x40007000
 8003940:	42420440 	.word	0x42420440

08003944 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b10      	cmp	r3, #16
 8003964:	d00a      	beq.n	800397c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b10      	cmp	r3, #16
 800396a:	f200 808a 	bhi.w	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d045      	beq.n	8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d075      	beq.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800397a:	e082      	b.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800397c:	4b46      	ldr	r3, [pc, #280]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003982:	4b45      	ldr	r3, [pc, #276]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d07b      	beq.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0c9b      	lsrs	r3, r3, #18
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	4a41      	ldr	r2, [pc, #260]	@ (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d015      	beq.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	0c5b      	lsrs	r3, r3, #17
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	4a3b      	ldr	r2, [pc, #236]	@ (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80039b2:	5cd3      	ldrb	r3, [r2, r3]
 80039b4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00d      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80039c0:	4a38      	ldr	r2, [pc, #224]	@ (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	fb02 f303 	mul.w	r3, r2, r3
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80039dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039e8:	d102      	bne.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	61bb      	str	r3, [r7, #24]
      break;
 80039ee:	e04a      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	4a2d      	ldr	r2, [pc, #180]	@ (8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]
      break;
 80039fe:	e042      	b.n	8003a86 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a00:	4b25      	ldr	r3, [pc, #148]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a10:	d108      	bne.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003a1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e01f      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2e:	d109      	bne.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003a30:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003a3c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e00f      	b.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a4e:	d11c      	bne.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a50:	4b11      	ldr	r3, [pc, #68]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d016      	beq.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003a5c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003a60:	61bb      	str	r3, [r7, #24]
      break;
 8003a62:	e012      	b.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003a64:	e011      	b.n	8003a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003a66:	f7ff fe85 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	0b9b      	lsrs	r3, r3, #14
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	3301      	adds	r3, #1
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
      break;
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a82:	bf00      	nop
 8003a84:	e002      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a86:	bf00      	nop
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003a8a:	bf00      	nop
    }
  }
  return (frequency);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08006fe0 	.word	0x08006fe0
 8003aa0:	08006ff0 	.word	0x08006ff0
 8003aa4:	007a1200 	.word	0x007a1200
 8003aa8:	003d0900 	.word	0x003d0900
 8003aac:	aaaaaaab 	.word	0xaaaaaaab

08003ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e041      	b.n	8003b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fe f816 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 fa74 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e03a      	b.n	8003bde <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <HAL_TIM_Base_Start_IT+0x98>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x58>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x58>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a14      	ldr	r2, [pc, #80]	@ (8003bec <HAL_TIM_Base_Start_IT+0x9c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x58>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a13      	ldr	r2, [pc, #76]	@ (8003bf0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d010      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	e007      	b.n	8003bdc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr
 8003be8:	40012c00 	.word	0x40012c00
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800

08003bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0202 	mvn.w	r2, #2
 8003c20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f9b4 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f9a7 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f9b6 	bl	8003fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d122      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0204 	mvn.w	r2, #4
 8003c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f98a 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003c90:	e005      	b.n	8003c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f97d 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f98c 	bl	8003fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d122      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0208 	mvn.w	r2, #8
 8003cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2204      	movs	r2, #4
 8003cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f960 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003ce4:	e005      	b.n	8003cf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f953 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f962 	bl	8003fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d122      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b10      	cmp	r3, #16
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f06f 0210 	mvn.w	r2, #16
 8003d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2208      	movs	r2, #8
 8003d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f936 	bl	8003fa4 <HAL_TIM_IC_CaptureCallback>
 8003d38:	e005      	b.n	8003d46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f929 	bl	8003f92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f938 	bl	8003fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10e      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d107      	bne.n	8003d78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0201 	mvn.w	r2, #1
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fd fbf2 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d82:	2b80      	cmp	r3, #128	@ 0x80
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b80      	cmp	r3, #128	@ 0x80
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa7b 	bl	800429a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dae:	2b40      	cmp	r3, #64	@ 0x40
 8003db0:	d10e      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dbc:	2b40      	cmp	r3, #64	@ 0x40
 8003dbe:	d107      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8fc 	bl	8003fc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d10e      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0320 	and.w	r3, r3, #32
 8003de8:	2b20      	cmp	r3, #32
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0220 	mvn.w	r2, #32
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fa46 	bl	8004288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_TIM_ConfigClockSource+0x1c>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e0b4      	b.n	8003f8a <HAL_TIM_ConfigClockSource+0x186>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd4>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e66:	f000 8086 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x172>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e70:	2b70      	cmp	r3, #112	@ 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xa6>
 8003e74:	2b70      	cmp	r3, #112	@ 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e78:	2b60      	cmp	r3, #96	@ 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x11a>
 8003e7c:	2b60      	cmp	r3, #96	@ 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e80:	2b50      	cmp	r3, #80	@ 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xfa>
 8003e84:	2b50      	cmp	r3, #80	@ 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e88:	2b40      	cmp	r3, #64	@ 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x13a>
 8003e8c:	2b40      	cmp	r3, #64	@ 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003e94:	2b30      	cmp	r3, #48	@ 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15a>
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eba:	f000 f968 	bl	800418e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]
      break;
 8003ed6:	e04f      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee8:	f000 f951 	bl	800418e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
      break;
 8003efc:	e03c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f8c8 	bl	80040a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	@ 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f91f 	bl	800415a <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e02c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f8e6 	bl	80040fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	@ 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f90f 	bl	800415a <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e01c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 f8a8 	bl	80040a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	@ 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f8ff 	bl	800415a <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e00c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 f8f6 	bl	800415a <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e003      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e000      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bc80      	pop	{r7}
 8003fd8:	4770      	bx	lr
	...

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a29      	ldr	r2, [pc, #164]	@ (8004094 <TIM_Base_SetConfig+0xb8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00b      	beq.n	800400c <TIM_Base_SetConfig+0x30>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d007      	beq.n	800400c <TIM_Base_SetConfig+0x30>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a26      	ldr	r2, [pc, #152]	@ (8004098 <TIM_Base_SetConfig+0xbc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d003      	beq.n	800400c <TIM_Base_SetConfig+0x30>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a25      	ldr	r2, [pc, #148]	@ (800409c <TIM_Base_SetConfig+0xc0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a1c      	ldr	r2, [pc, #112]	@ (8004094 <TIM_Base_SetConfig+0xb8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d00b      	beq.n	800403e <TIM_Base_SetConfig+0x62>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800402c:	d007      	beq.n	800403e <TIM_Base_SetConfig+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <TIM_Base_SetConfig+0xbc>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d003      	beq.n	800403e <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a18      	ldr	r2, [pc, #96]	@ (800409c <TIM_Base_SetConfig+0xc0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d108      	bne.n	8004050 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4313      	orrs	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <TIM_Base_SetConfig+0xb8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d103      	bne.n	8004084 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	615a      	str	r2, [r3, #20]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr
 8004094:	40012c00 	.word	0x40012c00
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800

080040a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 030a 	bic.w	r3, r3, #10
 80040dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	f023 0210 	bic.w	r2, r3, #16
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	031b      	lsls	r3, r3, #12
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004138:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800415a:	b480      	push	{r7}
 800415c:	b085      	sub	sp, #20
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004170:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	f043 0307 	orr.w	r3, r3, #7
 800417c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr

0800418e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	021a      	lsls	r2, r3, #8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	431a      	orrs	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	609a      	str	r2, [r3, #8]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e046      	b.n	8004272 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d00e      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d009      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d004      	beq.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a10      	ldr	r2, [pc, #64]	@ (8004284 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d10c      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	40012c00 	.word	0x40012c00
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800

08004288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr

080042ac <__cvt>:
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042b2:	461d      	mov	r5, r3
 80042b4:	bfbb      	ittet	lt
 80042b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80042ba:	461d      	movlt	r5, r3
 80042bc:	2300      	movge	r3, #0
 80042be:	232d      	movlt	r3, #45	@ 0x2d
 80042c0:	b088      	sub	sp, #32
 80042c2:	4614      	mov	r4, r2
 80042c4:	bfb8      	it	lt
 80042c6:	4614      	movlt	r4, r2
 80042c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80042ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80042cc:	7013      	strb	r3, [r2, #0]
 80042ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80042d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80042d4:	f023 0820 	bic.w	r8, r3, #32
 80042d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80042dc:	d005      	beq.n	80042ea <__cvt+0x3e>
 80042de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80042e2:	d100      	bne.n	80042e6 <__cvt+0x3a>
 80042e4:	3601      	adds	r6, #1
 80042e6:	2302      	movs	r3, #2
 80042e8:	e000      	b.n	80042ec <__cvt+0x40>
 80042ea:	2303      	movs	r3, #3
 80042ec:	aa07      	add	r2, sp, #28
 80042ee:	9204      	str	r2, [sp, #16]
 80042f0:	aa06      	add	r2, sp, #24
 80042f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042f6:	e9cd 3600 	strd	r3, r6, [sp]
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	f000 fe6f 	bl	8004fe0 <_dtoa_r>
 8004302:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004306:	4607      	mov	r7, r0
 8004308:	d119      	bne.n	800433e <__cvt+0x92>
 800430a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800430c:	07db      	lsls	r3, r3, #31
 800430e:	d50e      	bpl.n	800432e <__cvt+0x82>
 8004310:	eb00 0906 	add.w	r9, r0, r6
 8004314:	2200      	movs	r2, #0
 8004316:	2300      	movs	r3, #0
 8004318:	4620      	mov	r0, r4
 800431a:	4629      	mov	r1, r5
 800431c:	f7fc fb44 	bl	80009a8 <__aeabi_dcmpeq>
 8004320:	b108      	cbz	r0, 8004326 <__cvt+0x7a>
 8004322:	f8cd 901c 	str.w	r9, [sp, #28]
 8004326:	2230      	movs	r2, #48	@ 0x30
 8004328:	9b07      	ldr	r3, [sp, #28]
 800432a:	454b      	cmp	r3, r9
 800432c:	d31e      	bcc.n	800436c <__cvt+0xc0>
 800432e:	4638      	mov	r0, r7
 8004330:	9b07      	ldr	r3, [sp, #28]
 8004332:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004334:	1bdb      	subs	r3, r3, r7
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	b008      	add	sp, #32
 800433a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004342:	eb00 0906 	add.w	r9, r0, r6
 8004346:	d1e5      	bne.n	8004314 <__cvt+0x68>
 8004348:	7803      	ldrb	r3, [r0, #0]
 800434a:	2b30      	cmp	r3, #48	@ 0x30
 800434c:	d10a      	bne.n	8004364 <__cvt+0xb8>
 800434e:	2200      	movs	r2, #0
 8004350:	2300      	movs	r3, #0
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f7fc fb27 	bl	80009a8 <__aeabi_dcmpeq>
 800435a:	b918      	cbnz	r0, 8004364 <__cvt+0xb8>
 800435c:	f1c6 0601 	rsb	r6, r6, #1
 8004360:	f8ca 6000 	str.w	r6, [sl]
 8004364:	f8da 3000 	ldr.w	r3, [sl]
 8004368:	4499      	add	r9, r3
 800436a:	e7d3      	b.n	8004314 <__cvt+0x68>
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	9107      	str	r1, [sp, #28]
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e7d9      	b.n	8004328 <__cvt+0x7c>

08004374 <__exponent>:
 8004374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004376:	2900      	cmp	r1, #0
 8004378:	bfb6      	itet	lt
 800437a:	232d      	movlt	r3, #45	@ 0x2d
 800437c:	232b      	movge	r3, #43	@ 0x2b
 800437e:	4249      	neglt	r1, r1
 8004380:	2909      	cmp	r1, #9
 8004382:	7002      	strb	r2, [r0, #0]
 8004384:	7043      	strb	r3, [r0, #1]
 8004386:	dd29      	ble.n	80043dc <__exponent+0x68>
 8004388:	f10d 0307 	add.w	r3, sp, #7
 800438c:	461d      	mov	r5, r3
 800438e:	270a      	movs	r7, #10
 8004390:	fbb1 f6f7 	udiv	r6, r1, r7
 8004394:	461a      	mov	r2, r3
 8004396:	fb07 1416 	mls	r4, r7, r6, r1
 800439a:	3430      	adds	r4, #48	@ 0x30
 800439c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80043a0:	460c      	mov	r4, r1
 80043a2:	2c63      	cmp	r4, #99	@ 0x63
 80043a4:	4631      	mov	r1, r6
 80043a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80043aa:	dcf1      	bgt.n	8004390 <__exponent+0x1c>
 80043ac:	3130      	adds	r1, #48	@ 0x30
 80043ae:	1e94      	subs	r4, r2, #2
 80043b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043b4:	4623      	mov	r3, r4
 80043b6:	1c41      	adds	r1, r0, #1
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	d30a      	bcc.n	80043d2 <__exponent+0x5e>
 80043bc:	f10d 0309 	add.w	r3, sp, #9
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	42ac      	cmp	r4, r5
 80043c4:	bf88      	it	hi
 80043c6:	2300      	movhi	r3, #0
 80043c8:	3302      	adds	r3, #2
 80043ca:	4403      	add	r3, r0
 80043cc:	1a18      	subs	r0, r3, r0
 80043ce:	b003      	add	sp, #12
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80043d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80043da:	e7ed      	b.n	80043b8 <__exponent+0x44>
 80043dc:	2330      	movs	r3, #48	@ 0x30
 80043de:	3130      	adds	r1, #48	@ 0x30
 80043e0:	7083      	strb	r3, [r0, #2]
 80043e2:	70c1      	strb	r1, [r0, #3]
 80043e4:	1d03      	adds	r3, r0, #4
 80043e6:	e7f1      	b.n	80043cc <__exponent+0x58>

080043e8 <_printf_float>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	b091      	sub	sp, #68	@ 0x44
 80043ee:	460c      	mov	r4, r1
 80043f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80043f4:	4616      	mov	r6, r2
 80043f6:	461f      	mov	r7, r3
 80043f8:	4605      	mov	r5, r0
 80043fa:	f000 fce1 	bl	8004dc0 <_localeconv_r>
 80043fe:	6803      	ldr	r3, [r0, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	9308      	str	r3, [sp, #32]
 8004404:	f7fb fea4 	bl	8000150 <strlen>
 8004408:	2300      	movs	r3, #0
 800440a:	930e      	str	r3, [sp, #56]	@ 0x38
 800440c:	f8d8 3000 	ldr.w	r3, [r8]
 8004410:	9009      	str	r0, [sp, #36]	@ 0x24
 8004412:	3307      	adds	r3, #7
 8004414:	f023 0307 	bic.w	r3, r3, #7
 8004418:	f103 0208 	add.w	r2, r3, #8
 800441c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004420:	f8d4 b000 	ldr.w	fp, [r4]
 8004424:	f8c8 2000 	str.w	r2, [r8]
 8004428:	e9d3 8900 	ldrd	r8, r9, [r3]
 800442c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004432:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004436:	f04f 32ff 	mov.w	r2, #4294967295
 800443a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800443e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004442:	4b9c      	ldr	r3, [pc, #624]	@ (80046b4 <_printf_float+0x2cc>)
 8004444:	f7fc fae2 	bl	8000a0c <__aeabi_dcmpun>
 8004448:	bb70      	cbnz	r0, 80044a8 <_printf_float+0xc0>
 800444a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800444e:	f04f 32ff 	mov.w	r2, #4294967295
 8004452:	4b98      	ldr	r3, [pc, #608]	@ (80046b4 <_printf_float+0x2cc>)
 8004454:	f7fc fabc 	bl	80009d0 <__aeabi_dcmple>
 8004458:	bb30      	cbnz	r0, 80044a8 <_printf_float+0xc0>
 800445a:	2200      	movs	r2, #0
 800445c:	2300      	movs	r3, #0
 800445e:	4640      	mov	r0, r8
 8004460:	4649      	mov	r1, r9
 8004462:	f7fc faab 	bl	80009bc <__aeabi_dcmplt>
 8004466:	b110      	cbz	r0, 800446e <_printf_float+0x86>
 8004468:	232d      	movs	r3, #45	@ 0x2d
 800446a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800446e:	4a92      	ldr	r2, [pc, #584]	@ (80046b8 <_printf_float+0x2d0>)
 8004470:	4b92      	ldr	r3, [pc, #584]	@ (80046bc <_printf_float+0x2d4>)
 8004472:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004476:	bf94      	ite	ls
 8004478:	4690      	movls	r8, r2
 800447a:	4698      	movhi	r8, r3
 800447c:	2303      	movs	r3, #3
 800447e:	f04f 0900 	mov.w	r9, #0
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	f02b 0304 	bic.w	r3, fp, #4
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	4633      	mov	r3, r6
 800448c:	4621      	mov	r1, r4
 800448e:	4628      	mov	r0, r5
 8004490:	9700      	str	r7, [sp, #0]
 8004492:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004494:	f000 f9d4 	bl	8004840 <_printf_common>
 8004498:	3001      	adds	r0, #1
 800449a:	f040 8090 	bne.w	80045be <_printf_float+0x1d6>
 800449e:	f04f 30ff 	mov.w	r0, #4294967295
 80044a2:	b011      	add	sp, #68	@ 0x44
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	4649      	mov	r1, r9
 80044b0:	f7fc faac 	bl	8000a0c <__aeabi_dcmpun>
 80044b4:	b148      	cbz	r0, 80044ca <_printf_float+0xe2>
 80044b6:	464b      	mov	r3, r9
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bfb8      	it	lt
 80044bc:	232d      	movlt	r3, #45	@ 0x2d
 80044be:	4a80      	ldr	r2, [pc, #512]	@ (80046c0 <_printf_float+0x2d8>)
 80044c0:	bfb8      	it	lt
 80044c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80044c6:	4b7f      	ldr	r3, [pc, #508]	@ (80046c4 <_printf_float+0x2dc>)
 80044c8:	e7d3      	b.n	8004472 <_printf_float+0x8a>
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	d13f      	bne.n	8004554 <_printf_float+0x16c>
 80044d4:	2306      	movs	r3, #6
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80044de:	6023      	str	r3, [r4, #0]
 80044e0:	9206      	str	r2, [sp, #24]
 80044e2:	aa0e      	add	r2, sp, #56	@ 0x38
 80044e4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80044e8:	aa0d      	add	r2, sp, #52	@ 0x34
 80044ea:	9203      	str	r2, [sp, #12]
 80044ec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80044f0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	4642      	mov	r2, r8
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	4628      	mov	r0, r5
 80044fc:	464b      	mov	r3, r9
 80044fe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004500:	f7ff fed4 	bl	80042ac <__cvt>
 8004504:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004506:	4680      	mov	r8, r0
 8004508:	2947      	cmp	r1, #71	@ 0x47
 800450a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800450c:	d128      	bne.n	8004560 <_printf_float+0x178>
 800450e:	1cc8      	adds	r0, r1, #3
 8004510:	db02      	blt.n	8004518 <_printf_float+0x130>
 8004512:	6863      	ldr	r3, [r4, #4]
 8004514:	4299      	cmp	r1, r3
 8004516:	dd40      	ble.n	800459a <_printf_float+0x1b2>
 8004518:	f1aa 0a02 	sub.w	sl, sl, #2
 800451c:	fa5f fa8a 	uxtb.w	sl, sl
 8004520:	4652      	mov	r2, sl
 8004522:	3901      	subs	r1, #1
 8004524:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004528:	910d      	str	r1, [sp, #52]	@ 0x34
 800452a:	f7ff ff23 	bl	8004374 <__exponent>
 800452e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004530:	4681      	mov	r9, r0
 8004532:	1813      	adds	r3, r2, r0
 8004534:	2a01      	cmp	r2, #1
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	dc02      	bgt.n	8004540 <_printf_float+0x158>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	07d2      	lsls	r2, r2, #31
 800453e:	d501      	bpl.n	8004544 <_printf_float+0x15c>
 8004540:	3301      	adds	r3, #1
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004548:	2b00      	cmp	r3, #0
 800454a:	d09e      	beq.n	800448a <_printf_float+0xa2>
 800454c:	232d      	movs	r3, #45	@ 0x2d
 800454e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004552:	e79a      	b.n	800448a <_printf_float+0xa2>
 8004554:	2947      	cmp	r1, #71	@ 0x47
 8004556:	d1bf      	bne.n	80044d8 <_printf_float+0xf0>
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1bd      	bne.n	80044d8 <_printf_float+0xf0>
 800455c:	2301      	movs	r3, #1
 800455e:	e7ba      	b.n	80044d6 <_printf_float+0xee>
 8004560:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004564:	d9dc      	bls.n	8004520 <_printf_float+0x138>
 8004566:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800456a:	d118      	bne.n	800459e <_printf_float+0x1b6>
 800456c:	2900      	cmp	r1, #0
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	dd0b      	ble.n	800458a <_printf_float+0x1a2>
 8004572:	6121      	str	r1, [r4, #16]
 8004574:	b913      	cbnz	r3, 800457c <_printf_float+0x194>
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	07d0      	lsls	r0, r2, #31
 800457a:	d502      	bpl.n	8004582 <_printf_float+0x19a>
 800457c:	3301      	adds	r3, #1
 800457e:	440b      	add	r3, r1
 8004580:	6123      	str	r3, [r4, #16]
 8004582:	f04f 0900 	mov.w	r9, #0
 8004586:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004588:	e7dc      	b.n	8004544 <_printf_float+0x15c>
 800458a:	b913      	cbnz	r3, 8004592 <_printf_float+0x1aa>
 800458c:	6822      	ldr	r2, [r4, #0]
 800458e:	07d2      	lsls	r2, r2, #31
 8004590:	d501      	bpl.n	8004596 <_printf_float+0x1ae>
 8004592:	3302      	adds	r3, #2
 8004594:	e7f4      	b.n	8004580 <_printf_float+0x198>
 8004596:	2301      	movs	r3, #1
 8004598:	e7f2      	b.n	8004580 <_printf_float+0x198>
 800459a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800459e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80045a0:	4299      	cmp	r1, r3
 80045a2:	db05      	blt.n	80045b0 <_printf_float+0x1c8>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	6121      	str	r1, [r4, #16]
 80045a8:	07d8      	lsls	r0, r3, #31
 80045aa:	d5ea      	bpl.n	8004582 <_printf_float+0x19a>
 80045ac:	1c4b      	adds	r3, r1, #1
 80045ae:	e7e7      	b.n	8004580 <_printf_float+0x198>
 80045b0:	2900      	cmp	r1, #0
 80045b2:	bfcc      	ite	gt
 80045b4:	2201      	movgt	r2, #1
 80045b6:	f1c1 0202 	rsble	r2, r1, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	e7e0      	b.n	8004580 <_printf_float+0x198>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	055a      	lsls	r2, r3, #21
 80045c2:	d407      	bmi.n	80045d4 <_printf_float+0x1ec>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	4642      	mov	r2, r8
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	d12b      	bne.n	800462a <_printf_float+0x242>
 80045d2:	e764      	b.n	800449e <_printf_float+0xb6>
 80045d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045d8:	f240 80dc 	bls.w	8004794 <_printf_float+0x3ac>
 80045dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	f7fc f9e0 	bl	80009a8 <__aeabi_dcmpeq>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	d033      	beq.n	8004654 <_printf_float+0x26c>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4631      	mov	r1, r6
 80045f0:	4628      	mov	r0, r5
 80045f2:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <_printf_float+0x2e0>)
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af51 	beq.w	800449e <_printf_float+0xb6>
 80045fc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004600:	4543      	cmp	r3, r8
 8004602:	db02      	blt.n	800460a <_printf_float+0x222>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	07d8      	lsls	r0, r3, #31
 8004608:	d50f      	bpl.n	800462a <_printf_float+0x242>
 800460a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800460e:	4631      	mov	r1, r6
 8004610:	4628      	mov	r0, r5
 8004612:	47b8      	blx	r7
 8004614:	3001      	adds	r0, #1
 8004616:	f43f af42 	beq.w	800449e <_printf_float+0xb6>
 800461a:	f04f 0900 	mov.w	r9, #0
 800461e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004622:	f104 0a1a 	add.w	sl, r4, #26
 8004626:	45c8      	cmp	r8, r9
 8004628:	dc09      	bgt.n	800463e <_printf_float+0x256>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	079b      	lsls	r3, r3, #30
 800462e:	f100 8102 	bmi.w	8004836 <_printf_float+0x44e>
 8004632:	68e0      	ldr	r0, [r4, #12]
 8004634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004636:	4298      	cmp	r0, r3
 8004638:	bfb8      	it	lt
 800463a:	4618      	movlt	r0, r3
 800463c:	e731      	b.n	80044a2 <_printf_float+0xba>
 800463e:	2301      	movs	r3, #1
 8004640:	4652      	mov	r2, sl
 8004642:	4631      	mov	r1, r6
 8004644:	4628      	mov	r0, r5
 8004646:	47b8      	blx	r7
 8004648:	3001      	adds	r0, #1
 800464a:	f43f af28 	beq.w	800449e <_printf_float+0xb6>
 800464e:	f109 0901 	add.w	r9, r9, #1
 8004652:	e7e8      	b.n	8004626 <_printf_float+0x23e>
 8004654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004656:	2b00      	cmp	r3, #0
 8004658:	dc38      	bgt.n	80046cc <_printf_float+0x2e4>
 800465a:	2301      	movs	r3, #1
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	4a19      	ldr	r2, [pc, #100]	@ (80046c8 <_printf_float+0x2e0>)
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f af1a 	beq.w	800449e <_printf_float+0xb6>
 800466a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800466e:	ea59 0303 	orrs.w	r3, r9, r3
 8004672:	d102      	bne.n	800467a <_printf_float+0x292>
 8004674:	6823      	ldr	r3, [r4, #0]
 8004676:	07d9      	lsls	r1, r3, #31
 8004678:	d5d7      	bpl.n	800462a <_printf_float+0x242>
 800467a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f af0a 	beq.w	800449e <_printf_float+0xb6>
 800468a:	f04f 0a00 	mov.w	sl, #0
 800468e:	f104 0b1a 	add.w	fp, r4, #26
 8004692:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004694:	425b      	negs	r3, r3
 8004696:	4553      	cmp	r3, sl
 8004698:	dc01      	bgt.n	800469e <_printf_float+0x2b6>
 800469a:	464b      	mov	r3, r9
 800469c:	e793      	b.n	80045c6 <_printf_float+0x1de>
 800469e:	2301      	movs	r3, #1
 80046a0:	465a      	mov	r2, fp
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	f43f aef8 	beq.w	800449e <_printf_float+0xb6>
 80046ae:	f10a 0a01 	add.w	sl, sl, #1
 80046b2:	e7ee      	b.n	8004692 <_printf_float+0x2aa>
 80046b4:	7fefffff 	.word	0x7fefffff
 80046b8:	08006ff2 	.word	0x08006ff2
 80046bc:	08006ff6 	.word	0x08006ff6
 80046c0:	08006ffa 	.word	0x08006ffa
 80046c4:	08006ffe 	.word	0x08006ffe
 80046c8:	08007002 	.word	0x08007002
 80046cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046ce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80046d2:	4553      	cmp	r3, sl
 80046d4:	bfa8      	it	ge
 80046d6:	4653      	movge	r3, sl
 80046d8:	2b00      	cmp	r3, #0
 80046da:	4699      	mov	r9, r3
 80046dc:	dc36      	bgt.n	800474c <_printf_float+0x364>
 80046de:	f04f 0b00 	mov.w	fp, #0
 80046e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e6:	f104 021a 	add.w	r2, r4, #26
 80046ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80046ee:	eba3 0309 	sub.w	r3, r3, r9
 80046f2:	455b      	cmp	r3, fp
 80046f4:	dc31      	bgt.n	800475a <_printf_float+0x372>
 80046f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046f8:	459a      	cmp	sl, r3
 80046fa:	dc3a      	bgt.n	8004772 <_printf_float+0x38a>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	07da      	lsls	r2, r3, #31
 8004700:	d437      	bmi.n	8004772 <_printf_float+0x38a>
 8004702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004704:	ebaa 0903 	sub.w	r9, sl, r3
 8004708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800470a:	ebaa 0303 	sub.w	r3, sl, r3
 800470e:	4599      	cmp	r9, r3
 8004710:	bfa8      	it	ge
 8004712:	4699      	movge	r9, r3
 8004714:	f1b9 0f00 	cmp.w	r9, #0
 8004718:	dc33      	bgt.n	8004782 <_printf_float+0x39a>
 800471a:	f04f 0800 	mov.w	r8, #0
 800471e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004722:	f104 0b1a 	add.w	fp, r4, #26
 8004726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004728:	ebaa 0303 	sub.w	r3, sl, r3
 800472c:	eba3 0309 	sub.w	r3, r3, r9
 8004730:	4543      	cmp	r3, r8
 8004732:	f77f af7a 	ble.w	800462a <_printf_float+0x242>
 8004736:	2301      	movs	r3, #1
 8004738:	465a      	mov	r2, fp
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	f43f aeac 	beq.w	800449e <_printf_float+0xb6>
 8004746:	f108 0801 	add.w	r8, r8, #1
 800474a:	e7ec      	b.n	8004726 <_printf_float+0x33e>
 800474c:	4642      	mov	r2, r8
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	d1c2      	bne.n	80046de <_printf_float+0x2f6>
 8004758:	e6a1      	b.n	800449e <_printf_float+0xb6>
 800475a:	2301      	movs	r3, #1
 800475c:	4631      	mov	r1, r6
 800475e:	4628      	mov	r0, r5
 8004760:	920a      	str	r2, [sp, #40]	@ 0x28
 8004762:	47b8      	blx	r7
 8004764:	3001      	adds	r0, #1
 8004766:	f43f ae9a 	beq.w	800449e <_printf_float+0xb6>
 800476a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800476c:	f10b 0b01 	add.w	fp, fp, #1
 8004770:	e7bb      	b.n	80046ea <_printf_float+0x302>
 8004772:	4631      	mov	r1, r6
 8004774:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004778:	4628      	mov	r0, r5
 800477a:	47b8      	blx	r7
 800477c:	3001      	adds	r0, #1
 800477e:	d1c0      	bne.n	8004702 <_printf_float+0x31a>
 8004780:	e68d      	b.n	800449e <_printf_float+0xb6>
 8004782:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004784:	464b      	mov	r3, r9
 8004786:	4631      	mov	r1, r6
 8004788:	4628      	mov	r0, r5
 800478a:	4442      	add	r2, r8
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	d1c3      	bne.n	800471a <_printf_float+0x332>
 8004792:	e684      	b.n	800449e <_printf_float+0xb6>
 8004794:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004798:	f1ba 0f01 	cmp.w	sl, #1
 800479c:	dc01      	bgt.n	80047a2 <_printf_float+0x3ba>
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d536      	bpl.n	8004810 <_printf_float+0x428>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4642      	mov	r2, r8
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f ae76 	beq.w	800449e <_printf_float+0xb6>
 80047b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	f43f ae6e 	beq.w	800449e <_printf_float+0xb6>
 80047c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047ce:	f7fc f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80047d2:	b9c0      	cbnz	r0, 8004806 <_printf_float+0x41e>
 80047d4:	4653      	mov	r3, sl
 80047d6:	f108 0201 	add.w	r2, r8, #1
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	d10c      	bne.n	80047fe <_printf_float+0x416>
 80047e4:	e65b      	b.n	800449e <_printf_float+0xb6>
 80047e6:	2301      	movs	r3, #1
 80047e8:	465a      	mov	r2, fp
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f ae54 	beq.w	800449e <_printf_float+0xb6>
 80047f6:	f108 0801 	add.w	r8, r8, #1
 80047fa:	45d0      	cmp	r8, sl
 80047fc:	dbf3      	blt.n	80047e6 <_printf_float+0x3fe>
 80047fe:	464b      	mov	r3, r9
 8004800:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004804:	e6e0      	b.n	80045c8 <_printf_float+0x1e0>
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	f104 0b1a 	add.w	fp, r4, #26
 800480e:	e7f4      	b.n	80047fa <_printf_float+0x412>
 8004810:	2301      	movs	r3, #1
 8004812:	4642      	mov	r2, r8
 8004814:	e7e1      	b.n	80047da <_printf_float+0x3f2>
 8004816:	2301      	movs	r3, #1
 8004818:	464a      	mov	r2, r9
 800481a:	4631      	mov	r1, r6
 800481c:	4628      	mov	r0, r5
 800481e:	47b8      	blx	r7
 8004820:	3001      	adds	r0, #1
 8004822:	f43f ae3c 	beq.w	800449e <_printf_float+0xb6>
 8004826:	f108 0801 	add.w	r8, r8, #1
 800482a:	68e3      	ldr	r3, [r4, #12]
 800482c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800482e:	1a5b      	subs	r3, r3, r1
 8004830:	4543      	cmp	r3, r8
 8004832:	dcf0      	bgt.n	8004816 <_printf_float+0x42e>
 8004834:	e6fd      	b.n	8004632 <_printf_float+0x24a>
 8004836:	f04f 0800 	mov.w	r8, #0
 800483a:	f104 0919 	add.w	r9, r4, #25
 800483e:	e7f4      	b.n	800482a <_printf_float+0x442>

08004840 <_printf_common>:
 8004840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004844:	4616      	mov	r6, r2
 8004846:	4698      	mov	r8, r3
 8004848:	688a      	ldr	r2, [r1, #8]
 800484a:	690b      	ldr	r3, [r1, #16]
 800484c:	4607      	mov	r7, r0
 800484e:	4293      	cmp	r3, r2
 8004850:	bfb8      	it	lt
 8004852:	4613      	movlt	r3, r2
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800485a:	460c      	mov	r4, r1
 800485c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004860:	b10a      	cbz	r2, 8004866 <_printf_common+0x26>
 8004862:	3301      	adds	r3, #1
 8004864:	6033      	str	r3, [r6, #0]
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	0699      	lsls	r1, r3, #26
 800486a:	bf42      	ittt	mi
 800486c:	6833      	ldrmi	r3, [r6, #0]
 800486e:	3302      	addmi	r3, #2
 8004870:	6033      	strmi	r3, [r6, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	f015 0506 	ands.w	r5, r5, #6
 8004878:	d106      	bne.n	8004888 <_printf_common+0x48>
 800487a:	f104 0a19 	add.w	sl, r4, #25
 800487e:	68e3      	ldr	r3, [r4, #12]
 8004880:	6832      	ldr	r2, [r6, #0]
 8004882:	1a9b      	subs	r3, r3, r2
 8004884:	42ab      	cmp	r3, r5
 8004886:	dc2b      	bgt.n	80048e0 <_printf_common+0xa0>
 8004888:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	3b00      	subs	r3, #0
 8004890:	bf18      	it	ne
 8004892:	2301      	movne	r3, #1
 8004894:	0692      	lsls	r2, r2, #26
 8004896:	d430      	bmi.n	80048fa <_printf_common+0xba>
 8004898:	4641      	mov	r1, r8
 800489a:	4638      	mov	r0, r7
 800489c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048a0:	47c8      	blx	r9
 80048a2:	3001      	adds	r0, #1
 80048a4:	d023      	beq.n	80048ee <_printf_common+0xae>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	6922      	ldr	r2, [r4, #16]
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	bf14      	ite	ne
 80048b2:	2500      	movne	r5, #0
 80048b4:	6833      	ldreq	r3, [r6, #0]
 80048b6:	f04f 0600 	mov.w	r6, #0
 80048ba:	bf08      	it	eq
 80048bc:	68e5      	ldreq	r5, [r4, #12]
 80048be:	f104 041a 	add.w	r4, r4, #26
 80048c2:	bf08      	it	eq
 80048c4:	1aed      	subeq	r5, r5, r3
 80048c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80048ca:	bf08      	it	eq
 80048cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048d0:	4293      	cmp	r3, r2
 80048d2:	bfc4      	itt	gt
 80048d4:	1a9b      	subgt	r3, r3, r2
 80048d6:	18ed      	addgt	r5, r5, r3
 80048d8:	42b5      	cmp	r5, r6
 80048da:	d11a      	bne.n	8004912 <_printf_common+0xd2>
 80048dc:	2000      	movs	r0, #0
 80048de:	e008      	b.n	80048f2 <_printf_common+0xb2>
 80048e0:	2301      	movs	r3, #1
 80048e2:	4652      	mov	r2, sl
 80048e4:	4641      	mov	r1, r8
 80048e6:	4638      	mov	r0, r7
 80048e8:	47c8      	blx	r9
 80048ea:	3001      	adds	r0, #1
 80048ec:	d103      	bne.n	80048f6 <_printf_common+0xb6>
 80048ee:	f04f 30ff 	mov.w	r0, #4294967295
 80048f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f6:	3501      	adds	r5, #1
 80048f8:	e7c1      	b.n	800487e <_printf_common+0x3e>
 80048fa:	2030      	movs	r0, #48	@ 0x30
 80048fc:	18e1      	adds	r1, r4, r3
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004908:	4422      	add	r2, r4
 800490a:	3302      	adds	r3, #2
 800490c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004910:	e7c2      	b.n	8004898 <_printf_common+0x58>
 8004912:	2301      	movs	r3, #1
 8004914:	4622      	mov	r2, r4
 8004916:	4641      	mov	r1, r8
 8004918:	4638      	mov	r0, r7
 800491a:	47c8      	blx	r9
 800491c:	3001      	adds	r0, #1
 800491e:	d0e6      	beq.n	80048ee <_printf_common+0xae>
 8004920:	3601      	adds	r6, #1
 8004922:	e7d9      	b.n	80048d8 <_printf_common+0x98>

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	7e0f      	ldrb	r7, [r1, #24]
 800492a:	4691      	mov	r9, r2
 800492c:	2f78      	cmp	r7, #120	@ 0x78
 800492e:	4680      	mov	r8, r0
 8004930:	460c      	mov	r4, r1
 8004932:	469a      	mov	sl, r3
 8004934:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	@ 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d3 	beq.w	8004aec <_printf_i+0x1c8>
 8004946:	2f58      	cmp	r7, #88	@ 0x58
 8004948:	f000 80ba 	beq.w	8004ac0 <_printf_i+0x19c>
 800494c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a101      	add	r1, pc, #4	@ (adr r1, 8004964 <_printf_i+0x40>)
 8004960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004ad3 	.word	0x08004ad3
 8004994:	080049fb 	.word	0x080049fb
 8004998:	08004a8d 	.word	0x08004a8d
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004af5 	.word	0x08004af5
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	080049fb 	.word	0x080049fb
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004a95 	.word	0x08004a95
 80049bc:	6833      	ldr	r3, [r6, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6032      	str	r2, [r6, #0]
 80049c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e09e      	b.n	8004b0e <_printf_i+0x1ea>
 80049d0:	6833      	ldr	r3, [r6, #0]
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1d19      	adds	r1, r3, #4
 80049d6:	6031      	str	r1, [r6, #0]
 80049d8:	0606      	lsls	r6, r0, #24
 80049da:	d501      	bpl.n	80049e0 <_printf_i+0xbc>
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	e003      	b.n	80049e8 <_printf_i+0xc4>
 80049e0:	0645      	lsls	r5, r0, #25
 80049e2:	d5fb      	bpl.n	80049dc <_printf_i+0xb8>
 80049e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xd0>
 80049ec:	232d      	movs	r3, #45	@ 0x2d
 80049ee:	426d      	negs	r5, r5
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f4:	230a      	movs	r3, #10
 80049f6:	4859      	ldr	r0, [pc, #356]	@ (8004b5c <_printf_i+0x238>)
 80049f8:	e011      	b.n	8004a1e <_printf_i+0xfa>
 80049fa:	6821      	ldr	r1, [r4, #0]
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	0608      	lsls	r0, r1, #24
 8004a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a04:	d402      	bmi.n	8004a0c <_printf_i+0xe8>
 8004a06:	0649      	lsls	r1, r1, #25
 8004a08:	bf48      	it	mi
 8004a0a:	b2ad      	uxthmi	r5, r5
 8004a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a0e:	6033      	str	r3, [r6, #0]
 8004a10:	bf14      	ite	ne
 8004a12:	230a      	movne	r3, #10
 8004a14:	2308      	moveq	r3, #8
 8004a16:	4851      	ldr	r0, [pc, #324]	@ (8004b5c <_printf_i+0x238>)
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a1e:	6866      	ldr	r6, [r4, #4]
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	bfa8      	it	ge
 8004a24:	6821      	ldrge	r1, [r4, #0]
 8004a26:	60a6      	str	r6, [r4, #8]
 8004a28:	bfa4      	itt	ge
 8004a2a:	f021 0104 	bicge.w	r1, r1, #4
 8004a2e:	6021      	strge	r1, [r4, #0]
 8004a30:	b90d      	cbnz	r5, 8004a36 <_printf_i+0x112>
 8004a32:	2e00      	cmp	r6, #0
 8004a34:	d04b      	beq.n	8004ace <_printf_i+0x1aa>
 8004a36:	4616      	mov	r6, r2
 8004a38:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a3c:	fb03 5711 	mls	r7, r3, r1, r5
 8004a40:	5dc7      	ldrb	r7, [r0, r7]
 8004a42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a46:	462f      	mov	r7, r5
 8004a48:	42bb      	cmp	r3, r7
 8004a4a:	460d      	mov	r5, r1
 8004a4c:	d9f4      	bls.n	8004a38 <_printf_i+0x114>
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d10b      	bne.n	8004a6a <_printf_i+0x146>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	07df      	lsls	r7, r3, #31
 8004a56:	d508      	bpl.n	8004a6a <_printf_i+0x146>
 8004a58:	6923      	ldr	r3, [r4, #16]
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	4299      	cmp	r1, r3
 8004a5e:	bfde      	ittt	le
 8004a60:	2330      	movle	r3, #48	@ 0x30
 8004a62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a6a:	1b92      	subs	r2, r2, r6
 8004a6c:	6122      	str	r2, [r4, #16]
 8004a6e:	464b      	mov	r3, r9
 8004a70:	4621      	mov	r1, r4
 8004a72:	4640      	mov	r0, r8
 8004a74:	f8cd a000 	str.w	sl, [sp]
 8004a78:	aa03      	add	r2, sp, #12
 8004a7a:	f7ff fee1 	bl	8004840 <_printf_common>
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d14a      	bne.n	8004b18 <_printf_i+0x1f4>
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	b004      	add	sp, #16
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f043 0320 	orr.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	2778      	movs	r7, #120	@ 0x78
 8004a96:	4832      	ldr	r0, [pc, #200]	@ (8004b60 <_printf_i+0x23c>)
 8004a98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	6831      	ldr	r1, [r6, #0]
 8004aa0:	061f      	lsls	r7, r3, #24
 8004aa2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004aa6:	d402      	bmi.n	8004aae <_printf_i+0x18a>
 8004aa8:	065f      	lsls	r7, r3, #25
 8004aaa:	bf48      	it	mi
 8004aac:	b2ad      	uxthmi	r5, r5
 8004aae:	6031      	str	r1, [r6, #0]
 8004ab0:	07d9      	lsls	r1, r3, #31
 8004ab2:	bf44      	itt	mi
 8004ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab8:	6023      	strmi	r3, [r4, #0]
 8004aba:	b11d      	cbz	r5, 8004ac4 <_printf_i+0x1a0>
 8004abc:	2310      	movs	r3, #16
 8004abe:	e7ab      	b.n	8004a18 <_printf_i+0xf4>
 8004ac0:	4826      	ldr	r0, [pc, #152]	@ (8004b5c <_printf_i+0x238>)
 8004ac2:	e7e9      	b.n	8004a98 <_printf_i+0x174>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	f023 0320 	bic.w	r3, r3, #32
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	e7f6      	b.n	8004abc <_printf_i+0x198>
 8004ace:	4616      	mov	r6, r2
 8004ad0:	e7bd      	b.n	8004a4e <_printf_i+0x12a>
 8004ad2:	6833      	ldr	r3, [r6, #0]
 8004ad4:	6825      	ldr	r5, [r4, #0]
 8004ad6:	1d18      	adds	r0, r3, #4
 8004ad8:	6961      	ldr	r1, [r4, #20]
 8004ada:	6030      	str	r0, [r6, #0]
 8004adc:	062e      	lsls	r6, r5, #24
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	d501      	bpl.n	8004ae6 <_printf_i+0x1c2>
 8004ae2:	6019      	str	r1, [r3, #0]
 8004ae4:	e002      	b.n	8004aec <_printf_i+0x1c8>
 8004ae6:	0668      	lsls	r0, r5, #25
 8004ae8:	d5fb      	bpl.n	8004ae2 <_printf_i+0x1be>
 8004aea:	8019      	strh	r1, [r3, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	4616      	mov	r6, r2
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	e7bc      	b.n	8004a6e <_printf_i+0x14a>
 8004af4:	6833      	ldr	r3, [r6, #0]
 8004af6:	2100      	movs	r1, #0
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	6032      	str	r2, [r6, #0]
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 f9d4 	bl	8004eae <memchr>
 8004b06:	b108      	cbz	r0, 8004b0c <_printf_i+0x1e8>
 8004b08:	1b80      	subs	r0, r0, r6
 8004b0a:	6060      	str	r0, [r4, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	2300      	movs	r3, #0
 8004b12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b16:	e7aa      	b.n	8004a6e <_printf_i+0x14a>
 8004b18:	4632      	mov	r2, r6
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	47d0      	blx	sl
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0ad      	beq.n	8004a82 <_printf_i+0x15e>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	079b      	lsls	r3, r3, #30
 8004b2a:	d413      	bmi.n	8004b54 <_printf_i+0x230>
 8004b2c:	68e0      	ldr	r0, [r4, #12]
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	4298      	cmp	r0, r3
 8004b32:	bfb8      	it	lt
 8004b34:	4618      	movlt	r0, r3
 8004b36:	e7a6      	b.n	8004a86 <_printf_i+0x162>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4632      	mov	r2, r6
 8004b3c:	4649      	mov	r1, r9
 8004b3e:	4640      	mov	r0, r8
 8004b40:	47d0      	blx	sl
 8004b42:	3001      	adds	r0, #1
 8004b44:	d09d      	beq.n	8004a82 <_printf_i+0x15e>
 8004b46:	3501      	adds	r5, #1
 8004b48:	68e3      	ldr	r3, [r4, #12]
 8004b4a:	9903      	ldr	r1, [sp, #12]
 8004b4c:	1a5b      	subs	r3, r3, r1
 8004b4e:	42ab      	cmp	r3, r5
 8004b50:	dcf2      	bgt.n	8004b38 <_printf_i+0x214>
 8004b52:	e7eb      	b.n	8004b2c <_printf_i+0x208>
 8004b54:	2500      	movs	r5, #0
 8004b56:	f104 0619 	add.w	r6, r4, #25
 8004b5a:	e7f5      	b.n	8004b48 <_printf_i+0x224>
 8004b5c:	08007004 	.word	0x08007004
 8004b60:	08007015 	.word	0x08007015

08004b64 <std>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b510      	push	{r4, lr}
 8004b68:	4604      	mov	r4, r0
 8004b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b72:	6083      	str	r3, [r0, #8]
 8004b74:	8181      	strh	r1, [r0, #12]
 8004b76:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b78:	81c2      	strh	r2, [r0, #14]
 8004b7a:	6183      	str	r3, [r0, #24]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2208      	movs	r2, #8
 8004b80:	305c      	adds	r0, #92	@ 0x5c
 8004b82:	f000 f914 	bl	8004dae <memset>
 8004b86:	4b0d      	ldr	r3, [pc, #52]	@ (8004bbc <std+0x58>)
 8004b88:	6224      	str	r4, [r4, #32]
 8004b8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc0 <std+0x5c>)
 8004b8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <std+0x60>)
 8004b92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <std+0x64>)
 8004b96:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b98:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <std+0x68>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	d006      	beq.n	8004bac <std+0x48>
 8004b9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ba2:	4294      	cmp	r4, r2
 8004ba4:	d002      	beq.n	8004bac <std+0x48>
 8004ba6:	33d0      	adds	r3, #208	@ 0xd0
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	d105      	bne.n	8004bb8 <std+0x54>
 8004bac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb4:	f000 b978 	b.w	8004ea8 <__retarget_lock_init_recursive>
 8004bb8:	bd10      	pop	{r4, pc}
 8004bba:	bf00      	nop
 8004bbc:	08004d29 	.word	0x08004d29
 8004bc0:	08004d4b 	.word	0x08004d4b
 8004bc4:	08004d83 	.word	0x08004d83
 8004bc8:	08004da7 	.word	0x08004da7
 8004bcc:	200002b4 	.word	0x200002b4

08004bd0 <stdio_exit_handler>:
 8004bd0:	4a02      	ldr	r2, [pc, #8]	@ (8004bdc <stdio_exit_handler+0xc>)
 8004bd2:	4903      	ldr	r1, [pc, #12]	@ (8004be0 <stdio_exit_handler+0x10>)
 8004bd4:	4803      	ldr	r0, [pc, #12]	@ (8004be4 <stdio_exit_handler+0x14>)
 8004bd6:	f000 b869 	b.w	8004cac <_fwalk_sglue>
 8004bda:	bf00      	nop
 8004bdc:	2000000c 	.word	0x2000000c
 8004be0:	0800681d 	.word	0x0800681d
 8004be4:	2000001c 	.word	0x2000001c

08004be8 <cleanup_stdio>:
 8004be8:	6841      	ldr	r1, [r0, #4]
 8004bea:	4b0c      	ldr	r3, [pc, #48]	@ (8004c1c <cleanup_stdio+0x34>)
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4299      	cmp	r1, r3
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	d001      	beq.n	8004bf8 <cleanup_stdio+0x10>
 8004bf4:	f001 fe12 	bl	800681c <_fflush_r>
 8004bf8:	68a1      	ldr	r1, [r4, #8]
 8004bfa:	4b09      	ldr	r3, [pc, #36]	@ (8004c20 <cleanup_stdio+0x38>)
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	d002      	beq.n	8004c06 <cleanup_stdio+0x1e>
 8004c00:	4620      	mov	r0, r4
 8004c02:	f001 fe0b 	bl	800681c <_fflush_r>
 8004c06:	68e1      	ldr	r1, [r4, #12]
 8004c08:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <cleanup_stdio+0x3c>)
 8004c0a:	4299      	cmp	r1, r3
 8004c0c:	d004      	beq.n	8004c18 <cleanup_stdio+0x30>
 8004c0e:	4620      	mov	r0, r4
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	f001 be02 	b.w	800681c <_fflush_r>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200002b4 	.word	0x200002b4
 8004c20:	2000031c 	.word	0x2000031c
 8004c24:	20000384 	.word	0x20000384

08004c28 <global_stdio_init.part.0>:
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <global_stdio_init.part.0+0x30>)
 8004c2c:	4c0b      	ldr	r4, [pc, #44]	@ (8004c5c <global_stdio_init.part.0+0x34>)
 8004c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8004c60 <global_stdio_init.part.0+0x38>)
 8004c30:	4620      	mov	r0, r4
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2104      	movs	r1, #4
 8004c36:	2200      	movs	r2, #0
 8004c38:	f7ff ff94 	bl	8004b64 <std>
 8004c3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c40:	2201      	movs	r2, #1
 8004c42:	2109      	movs	r1, #9
 8004c44:	f7ff ff8e 	bl	8004b64 <std>
 8004c48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c52:	2112      	movs	r1, #18
 8004c54:	f7ff bf86 	b.w	8004b64 <std>
 8004c58:	200003ec 	.word	0x200003ec
 8004c5c:	200002b4 	.word	0x200002b4
 8004c60:	08004bd1 	.word	0x08004bd1

08004c64 <__sfp_lock_acquire>:
 8004c64:	4801      	ldr	r0, [pc, #4]	@ (8004c6c <__sfp_lock_acquire+0x8>)
 8004c66:	f000 b920 	b.w	8004eaa <__retarget_lock_acquire_recursive>
 8004c6a:	bf00      	nop
 8004c6c:	200003f5 	.word	0x200003f5

08004c70 <__sfp_lock_release>:
 8004c70:	4801      	ldr	r0, [pc, #4]	@ (8004c78 <__sfp_lock_release+0x8>)
 8004c72:	f000 b91b 	b.w	8004eac <__retarget_lock_release_recursive>
 8004c76:	bf00      	nop
 8004c78:	200003f5 	.word	0x200003f5

08004c7c <__sinit>:
 8004c7c:	b510      	push	{r4, lr}
 8004c7e:	4604      	mov	r4, r0
 8004c80:	f7ff fff0 	bl	8004c64 <__sfp_lock_acquire>
 8004c84:	6a23      	ldr	r3, [r4, #32]
 8004c86:	b11b      	cbz	r3, 8004c90 <__sinit+0x14>
 8004c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c8c:	f7ff bff0 	b.w	8004c70 <__sfp_lock_release>
 8004c90:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <__sinit+0x28>)
 8004c92:	6223      	str	r3, [r4, #32]
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <__sinit+0x2c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f5      	bne.n	8004c88 <__sinit+0xc>
 8004c9c:	f7ff ffc4 	bl	8004c28 <global_stdio_init.part.0>
 8004ca0:	e7f2      	b.n	8004c88 <__sinit+0xc>
 8004ca2:	bf00      	nop
 8004ca4:	08004be9 	.word	0x08004be9
 8004ca8:	200003ec 	.word	0x200003ec

08004cac <_fwalk_sglue>:
 8004cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4607      	mov	r7, r0
 8004cb2:	4688      	mov	r8, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	2600      	movs	r6, #0
 8004cb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cbc:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc0:	d505      	bpl.n	8004cce <_fwalk_sglue+0x22>
 8004cc2:	6824      	ldr	r4, [r4, #0]
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	d1f7      	bne.n	8004cb8 <_fwalk_sglue+0xc>
 8004cc8:	4630      	mov	r0, r6
 8004cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cce:	89ab      	ldrh	r3, [r5, #12]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d907      	bls.n	8004ce4 <_fwalk_sglue+0x38>
 8004cd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	d003      	beq.n	8004ce4 <_fwalk_sglue+0x38>
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4638      	mov	r0, r7
 8004ce0:	47c0      	blx	r8
 8004ce2:	4306      	orrs	r6, r0
 8004ce4:	3568      	adds	r5, #104	@ 0x68
 8004ce6:	e7e9      	b.n	8004cbc <_fwalk_sglue+0x10>

08004ce8 <siprintf>:
 8004ce8:	b40e      	push	{r1, r2, r3}
 8004cea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cee:	b500      	push	{lr}
 8004cf0:	b09c      	sub	sp, #112	@ 0x70
 8004cf2:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cf4:	9002      	str	r0, [sp, #8]
 8004cf6:	9006      	str	r0, [sp, #24]
 8004cf8:	9107      	str	r1, [sp, #28]
 8004cfa:	9104      	str	r1, [sp, #16]
 8004cfc:	4808      	ldr	r0, [pc, #32]	@ (8004d20 <siprintf+0x38>)
 8004cfe:	4909      	ldr	r1, [pc, #36]	@ (8004d24 <siprintf+0x3c>)
 8004d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d04:	9105      	str	r1, [sp, #20]
 8004d06:	6800      	ldr	r0, [r0, #0]
 8004d08:	a902      	add	r1, sp, #8
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	f001 fc0a 	bl	8006524 <_svfiprintf_r>
 8004d10:	2200      	movs	r2, #0
 8004d12:	9b02      	ldr	r3, [sp, #8]
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	b01c      	add	sp, #112	@ 0x70
 8004d18:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d1c:	b003      	add	sp, #12
 8004d1e:	4770      	bx	lr
 8004d20:	20000018 	.word	0x20000018
 8004d24:	ffff0208 	.word	0xffff0208

08004d28 <__sread>:
 8004d28:	b510      	push	{r4, lr}
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	f000 f86c 	bl	8004e0c <_read_r>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	bfab      	itete	ge
 8004d38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d3c:	181b      	addge	r3, r3, r0
 8004d3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d42:	bfac      	ite	ge
 8004d44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d46:	81a3      	strhlt	r3, [r4, #12]
 8004d48:	bd10      	pop	{r4, pc}

08004d4a <__swrite>:
 8004d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4e:	461f      	mov	r7, r3
 8004d50:	898b      	ldrh	r3, [r1, #12]
 8004d52:	4605      	mov	r5, r0
 8004d54:	05db      	lsls	r3, r3, #23
 8004d56:	460c      	mov	r4, r1
 8004d58:	4616      	mov	r6, r2
 8004d5a:	d505      	bpl.n	8004d68 <__swrite+0x1e>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	f000 f840 	bl	8004de8 <_lseek_r>
 8004d68:	89a3      	ldrh	r3, [r4, #12]
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	4628      	mov	r0, r5
 8004d74:	463b      	mov	r3, r7
 8004d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7e:	f000 b857 	b.w	8004e30 <_write_r>

08004d82 <__sseek>:
 8004d82:	b510      	push	{r4, lr}
 8004d84:	460c      	mov	r4, r1
 8004d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8a:	f000 f82d 	bl	8004de8 <_lseek_r>
 8004d8e:	1c43      	adds	r3, r0, #1
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	bf15      	itete	ne
 8004d94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d9e:	81a3      	strheq	r3, [r4, #12]
 8004da0:	bf18      	it	ne
 8004da2:	81a3      	strhne	r3, [r4, #12]
 8004da4:	bd10      	pop	{r4, pc}

08004da6 <__sclose>:
 8004da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004daa:	f000 b80d 	b.w	8004dc8 <_close_r>

08004dae <memset>:
 8004dae:	4603      	mov	r3, r0
 8004db0:	4402      	add	r2, r0
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d100      	bne.n	8004db8 <memset+0xa>
 8004db6:	4770      	bx	lr
 8004db8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dbc:	e7f9      	b.n	8004db2 <memset+0x4>
	...

08004dc0 <_localeconv_r>:
 8004dc0:	4800      	ldr	r0, [pc, #0]	@ (8004dc4 <_localeconv_r+0x4>)
 8004dc2:	4770      	bx	lr
 8004dc4:	20000158 	.word	0x20000158

08004dc8 <_close_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4d05      	ldr	r5, [pc, #20]	@ (8004de4 <_close_r+0x1c>)
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	f7fc ff59 	bl	8001c8a <_close>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_close_r+0x1a>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_close_r+0x1a>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	200003f0 	.word	0x200003f0

08004de8 <_lseek_r>:
 8004de8:	b538      	push	{r3, r4, r5, lr}
 8004dea:	4604      	mov	r4, r0
 8004dec:	4608      	mov	r0, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	2200      	movs	r2, #0
 8004df2:	4d05      	ldr	r5, [pc, #20]	@ (8004e08 <_lseek_r+0x20>)
 8004df4:	602a      	str	r2, [r5, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f7fc ff6b 	bl	8001cd2 <_lseek>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d102      	bne.n	8004e06 <_lseek_r+0x1e>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	b103      	cbz	r3, 8004e06 <_lseek_r+0x1e>
 8004e04:	6023      	str	r3, [r4, #0]
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	200003f0 	.word	0x200003f0

08004e0c <_read_r>:
 8004e0c:	b538      	push	{r3, r4, r5, lr}
 8004e0e:	4604      	mov	r4, r0
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	4d05      	ldr	r5, [pc, #20]	@ (8004e2c <_read_r+0x20>)
 8004e18:	602a      	str	r2, [r5, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f7fc fefc 	bl	8001c18 <_read>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_read_r+0x1e>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_read_r+0x1e>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	200003f0 	.word	0x200003f0

08004e30 <_write_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4d05      	ldr	r5, [pc, #20]	@ (8004e50 <_write_r+0x20>)
 8004e3c:	602a      	str	r2, [r5, #0]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f7fc ff07 	bl	8001c52 <_write>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_write_r+0x1e>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_write_r+0x1e>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200003f0 	.word	0x200003f0

08004e54 <__errno>:
 8004e54:	4b01      	ldr	r3, [pc, #4]	@ (8004e5c <__errno+0x8>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	20000018 	.word	0x20000018

08004e60 <__libc_init_array>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	2600      	movs	r6, #0
 8004e64:	4d0c      	ldr	r5, [pc, #48]	@ (8004e98 <__libc_init_array+0x38>)
 8004e66:	4c0d      	ldr	r4, [pc, #52]	@ (8004e9c <__libc_init_array+0x3c>)
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	42a6      	cmp	r6, r4
 8004e6e:	d109      	bne.n	8004e84 <__libc_init_array+0x24>
 8004e70:	f002 f870 	bl	8006f54 <_init>
 8004e74:	2600      	movs	r6, #0
 8004e76:	4d0a      	ldr	r5, [pc, #40]	@ (8004ea0 <__libc_init_array+0x40>)
 8004e78:	4c0a      	ldr	r4, [pc, #40]	@ (8004ea4 <__libc_init_array+0x44>)
 8004e7a:	1b64      	subs	r4, r4, r5
 8004e7c:	10a4      	asrs	r4, r4, #2
 8004e7e:	42a6      	cmp	r6, r4
 8004e80:	d105      	bne.n	8004e8e <__libc_init_array+0x2e>
 8004e82:	bd70      	pop	{r4, r5, r6, pc}
 8004e84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e88:	4798      	blx	r3
 8004e8a:	3601      	adds	r6, #1
 8004e8c:	e7ee      	b.n	8004e6c <__libc_init_array+0xc>
 8004e8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e92:	4798      	blx	r3
 8004e94:	3601      	adds	r6, #1
 8004e96:	e7f2      	b.n	8004e7e <__libc_init_array+0x1e>
 8004e98:	08007368 	.word	0x08007368
 8004e9c:	08007368 	.word	0x08007368
 8004ea0:	08007368 	.word	0x08007368
 8004ea4:	0800736c 	.word	0x0800736c

08004ea8 <__retarget_lock_init_recursive>:
 8004ea8:	4770      	bx	lr

08004eaa <__retarget_lock_acquire_recursive>:
 8004eaa:	4770      	bx	lr

08004eac <__retarget_lock_release_recursive>:
 8004eac:	4770      	bx	lr

08004eae <memchr>:
 8004eae:	4603      	mov	r3, r0
 8004eb0:	b510      	push	{r4, lr}
 8004eb2:	b2c9      	uxtb	r1, r1
 8004eb4:	4402      	add	r2, r0
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	4618      	mov	r0, r3
 8004eba:	d101      	bne.n	8004ec0 <memchr+0x12>
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e003      	b.n	8004ec8 <memchr+0x1a>
 8004ec0:	7804      	ldrb	r4, [r0, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	428c      	cmp	r4, r1
 8004ec6:	d1f6      	bne.n	8004eb6 <memchr+0x8>
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <quorem>:
 8004eca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ece:	6903      	ldr	r3, [r0, #16]
 8004ed0:	690c      	ldr	r4, [r1, #16]
 8004ed2:	4607      	mov	r7, r0
 8004ed4:	42a3      	cmp	r3, r4
 8004ed6:	db7e      	blt.n	8004fd6 <quorem+0x10c>
 8004ed8:	3c01      	subs	r4, #1
 8004eda:	00a3      	lsls	r3, r4, #2
 8004edc:	f100 0514 	add.w	r5, r0, #20
 8004ee0:	f101 0814 	add.w	r8, r1, #20
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004efc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f00:	d32e      	bcc.n	8004f60 <quorem+0x96>
 8004f02:	f04f 0a00 	mov.w	sl, #0
 8004f06:	46c4      	mov	ip, r8
 8004f08:	46ae      	mov	lr, r5
 8004f0a:	46d3      	mov	fp, sl
 8004f0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f10:	b298      	uxth	r0, r3
 8004f12:	fb06 a000 	mla	r0, r6, r0, sl
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	0c02      	lsrs	r2, r0, #16
 8004f1a:	fb06 2303 	mla	r3, r6, r3, r2
 8004f1e:	f8de 2000 	ldr.w	r2, [lr]
 8004f22:	b280      	uxth	r0, r0
 8004f24:	b292      	uxth	r2, r2
 8004f26:	1a12      	subs	r2, r2, r0
 8004f28:	445a      	add	r2, fp
 8004f2a:	f8de 0000 	ldr.w	r0, [lr]
 8004f2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f3c:	b292      	uxth	r2, r2
 8004f3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f42:	45e1      	cmp	r9, ip
 8004f44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f48:	f84e 2b04 	str.w	r2, [lr], #4
 8004f4c:	d2de      	bcs.n	8004f0c <quorem+0x42>
 8004f4e:	9b00      	ldr	r3, [sp, #0]
 8004f50:	58eb      	ldr	r3, [r5, r3]
 8004f52:	b92b      	cbnz	r3, 8004f60 <quorem+0x96>
 8004f54:	9b01      	ldr	r3, [sp, #4]
 8004f56:	3b04      	subs	r3, #4
 8004f58:	429d      	cmp	r5, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	d32f      	bcc.n	8004fbe <quorem+0xf4>
 8004f5e:	613c      	str	r4, [r7, #16]
 8004f60:	4638      	mov	r0, r7
 8004f62:	f001 f97b 	bl	800625c <__mcmp>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	db25      	blt.n	8004fb6 <quorem+0xec>
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f72:	f8d1 c000 	ldr.w	ip, [r1]
 8004f76:	fa1f fe82 	uxth.w	lr, r2
 8004f7a:	fa1f f38c 	uxth.w	r3, ip
 8004f7e:	eba3 030e 	sub.w	r3, r3, lr
 8004f82:	4403      	add	r3, r0
 8004f84:	0c12      	lsrs	r2, r2, #16
 8004f86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004f8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f94:	45c1      	cmp	r9, r8
 8004f96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f9a:	f841 3b04 	str.w	r3, [r1], #4
 8004f9e:	d2e6      	bcs.n	8004f6e <quorem+0xa4>
 8004fa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fa4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fa8:	b922      	cbnz	r2, 8004fb4 <quorem+0xea>
 8004faa:	3b04      	subs	r3, #4
 8004fac:	429d      	cmp	r5, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	d30b      	bcc.n	8004fca <quorem+0x100>
 8004fb2:	613c      	str	r4, [r7, #16]
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	b003      	add	sp, #12
 8004fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	2a00      	cmp	r2, #0
 8004fc4:	d1cb      	bne.n	8004f5e <quorem+0x94>
 8004fc6:	3c01      	subs	r4, #1
 8004fc8:	e7c6      	b.n	8004f58 <quorem+0x8e>
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	2a00      	cmp	r2, #0
 8004fd0:	d1ef      	bne.n	8004fb2 <quorem+0xe8>
 8004fd2:	3c01      	subs	r4, #1
 8004fd4:	e7ea      	b.n	8004fac <quorem+0xe2>
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	e7ee      	b.n	8004fb8 <quorem+0xee>
 8004fda:	0000      	movs	r0, r0
 8004fdc:	0000      	movs	r0, r0
	...

08004fe0 <_dtoa_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	69c7      	ldr	r7, [r0, #28]
 8004fea:	b097      	sub	sp, #92	@ 0x5c
 8004fec:	4683      	mov	fp, r0
 8004fee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ff2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004ff4:	b97f      	cbnz	r7, 8005016 <_dtoa_r+0x36>
 8004ff6:	2010      	movs	r0, #16
 8004ff8:	f000 fe02 	bl	8005c00 <malloc>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f8cb 001c 	str.w	r0, [fp, #28]
 8005002:	b920      	cbnz	r0, 800500e <_dtoa_r+0x2e>
 8005004:	21ef      	movs	r1, #239	@ 0xef
 8005006:	4ba8      	ldr	r3, [pc, #672]	@ (80052a8 <_dtoa_r+0x2c8>)
 8005008:	48a8      	ldr	r0, [pc, #672]	@ (80052ac <_dtoa_r+0x2cc>)
 800500a:	f001 fc67 	bl	80068dc <__assert_func>
 800500e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005012:	6007      	str	r7, [r0, #0]
 8005014:	60c7      	str	r7, [r0, #12]
 8005016:	f8db 301c 	ldr.w	r3, [fp, #28]
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	b159      	cbz	r1, 8005036 <_dtoa_r+0x56>
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	2301      	movs	r3, #1
 8005022:	4093      	lsls	r3, r2
 8005024:	604a      	str	r2, [r1, #4]
 8005026:	608b      	str	r3, [r1, #8]
 8005028:	4658      	mov	r0, fp
 800502a:	f000 fedf 	bl	8005dec <_Bfree>
 800502e:	2200      	movs	r2, #0
 8005030:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	1e2b      	subs	r3, r5, #0
 8005038:	bfaf      	iteee	ge
 800503a:	2300      	movge	r3, #0
 800503c:	2201      	movlt	r2, #1
 800503e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005042:	9303      	strlt	r3, [sp, #12]
 8005044:	bfa8      	it	ge
 8005046:	6033      	strge	r3, [r6, #0]
 8005048:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800504c:	4b98      	ldr	r3, [pc, #608]	@ (80052b0 <_dtoa_r+0x2d0>)
 800504e:	bfb8      	it	lt
 8005050:	6032      	strlt	r2, [r6, #0]
 8005052:	ea33 0308 	bics.w	r3, r3, r8
 8005056:	d112      	bne.n	800507e <_dtoa_r+0x9e>
 8005058:	f242 730f 	movw	r3, #9999	@ 0x270f
 800505c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005064:	4323      	orrs	r3, r4
 8005066:	f000 8550 	beq.w	8005b0a <_dtoa_r+0xb2a>
 800506a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800506c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80052b4 <_dtoa_r+0x2d4>
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8552 	beq.w	8005b1a <_dtoa_r+0xb3a>
 8005076:	f10a 0303 	add.w	r3, sl, #3
 800507a:	f000 bd4c 	b.w	8005b16 <_dtoa_r+0xb36>
 800507e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005082:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800508a:	2200      	movs	r2, #0
 800508c:	2300      	movs	r3, #0
 800508e:	f7fb fc8b 	bl	80009a8 <__aeabi_dcmpeq>
 8005092:	4607      	mov	r7, r0
 8005094:	b158      	cbz	r0, 80050ae <_dtoa_r+0xce>
 8005096:	2301      	movs	r3, #1
 8005098:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800509e:	b113      	cbz	r3, 80050a6 <_dtoa_r+0xc6>
 80050a0:	4b85      	ldr	r3, [pc, #532]	@ (80052b8 <_dtoa_r+0x2d8>)
 80050a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80052bc <_dtoa_r+0x2dc>
 80050aa:	f000 bd36 	b.w	8005b1a <_dtoa_r+0xb3a>
 80050ae:	ab14      	add	r3, sp, #80	@ 0x50
 80050b0:	9301      	str	r3, [sp, #4]
 80050b2:	ab15      	add	r3, sp, #84	@ 0x54
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	4658      	mov	r0, fp
 80050b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050bc:	f001 f97e 	bl	80063bc <__d2b>
 80050c0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80050c4:	4681      	mov	r9, r0
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	d077      	beq.n	80051ba <_dtoa_r+0x1da>
 80050ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050d0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80050d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80050dc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80050e0:	9712      	str	r7, [sp, #72]	@ 0x48
 80050e2:	4619      	mov	r1, r3
 80050e4:	2200      	movs	r2, #0
 80050e6:	4b76      	ldr	r3, [pc, #472]	@ (80052c0 <_dtoa_r+0x2e0>)
 80050e8:	f7fb f83e 	bl	8000168 <__aeabi_dsub>
 80050ec:	a368      	add	r3, pc, #416	@ (adr r3, 8005290 <_dtoa_r+0x2b0>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f9f1 	bl	80004d8 <__aeabi_dmul>
 80050f6:	a368      	add	r3, pc, #416	@ (adr r3, 8005298 <_dtoa_r+0x2b8>)
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb f836 	bl	800016c <__adddf3>
 8005100:	4604      	mov	r4, r0
 8005102:	4630      	mov	r0, r6
 8005104:	460d      	mov	r5, r1
 8005106:	f7fb f97d 	bl	8000404 <__aeabi_i2d>
 800510a:	a365      	add	r3, pc, #404	@ (adr r3, 80052a0 <_dtoa_r+0x2c0>)
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb f9e2 	bl	80004d8 <__aeabi_dmul>
 8005114:	4602      	mov	r2, r0
 8005116:	460b      	mov	r3, r1
 8005118:	4620      	mov	r0, r4
 800511a:	4629      	mov	r1, r5
 800511c:	f7fb f826 	bl	800016c <__adddf3>
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	f7fb fc88 	bl	8000a38 <__aeabi_d2iz>
 8005128:	2200      	movs	r2, #0
 800512a:	4607      	mov	r7, r0
 800512c:	2300      	movs	r3, #0
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fc43 	bl	80009bc <__aeabi_dcmplt>
 8005136:	b140      	cbz	r0, 800514a <_dtoa_r+0x16a>
 8005138:	4638      	mov	r0, r7
 800513a:	f7fb f963 	bl	8000404 <__aeabi_i2d>
 800513e:	4622      	mov	r2, r4
 8005140:	462b      	mov	r3, r5
 8005142:	f7fb fc31 	bl	80009a8 <__aeabi_dcmpeq>
 8005146:	b900      	cbnz	r0, 800514a <_dtoa_r+0x16a>
 8005148:	3f01      	subs	r7, #1
 800514a:	2f16      	cmp	r7, #22
 800514c:	d853      	bhi.n	80051f6 <_dtoa_r+0x216>
 800514e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005152:	4b5c      	ldr	r3, [pc, #368]	@ (80052c4 <_dtoa_r+0x2e4>)
 8005154:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fc2e 	bl	80009bc <__aeabi_dcmplt>
 8005160:	2800      	cmp	r0, #0
 8005162:	d04a      	beq.n	80051fa <_dtoa_r+0x21a>
 8005164:	2300      	movs	r3, #0
 8005166:	3f01      	subs	r7, #1
 8005168:	930f      	str	r3, [sp, #60]	@ 0x3c
 800516a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800516c:	1b9b      	subs	r3, r3, r6
 800516e:	1e5a      	subs	r2, r3, #1
 8005170:	bf46      	itte	mi
 8005172:	f1c3 0801 	rsbmi	r8, r3, #1
 8005176:	2300      	movmi	r3, #0
 8005178:	f04f 0800 	movpl.w	r8, #0
 800517c:	9209      	str	r2, [sp, #36]	@ 0x24
 800517e:	bf48      	it	mi
 8005180:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005182:	2f00      	cmp	r7, #0
 8005184:	db3b      	blt.n	80051fe <_dtoa_r+0x21e>
 8005186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005188:	970e      	str	r7, [sp, #56]	@ 0x38
 800518a:	443b      	add	r3, r7
 800518c:	9309      	str	r3, [sp, #36]	@ 0x24
 800518e:	2300      	movs	r3, #0
 8005190:	930a      	str	r3, [sp, #40]	@ 0x28
 8005192:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005194:	2b09      	cmp	r3, #9
 8005196:	d866      	bhi.n	8005266 <_dtoa_r+0x286>
 8005198:	2b05      	cmp	r3, #5
 800519a:	bfc4      	itt	gt
 800519c:	3b04      	subgt	r3, #4
 800519e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80051a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051a2:	bfc8      	it	gt
 80051a4:	2400      	movgt	r4, #0
 80051a6:	f1a3 0302 	sub.w	r3, r3, #2
 80051aa:	bfd8      	it	le
 80051ac:	2401      	movle	r4, #1
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d864      	bhi.n	800527c <_dtoa_r+0x29c>
 80051b2:	e8df f003 	tbb	[pc, r3]
 80051b6:	382b      	.short	0x382b
 80051b8:	5636      	.short	0x5636
 80051ba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051be:	441e      	add	r6, r3
 80051c0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	bfc1      	itttt	gt
 80051c8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80051cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80051d0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80051d4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80051d8:	bfd6      	itet	le
 80051da:	f1c3 0320 	rsble	r3, r3, #32
 80051de:	ea48 0003 	orrgt.w	r0, r8, r3
 80051e2:	fa04 f003 	lslle.w	r0, r4, r3
 80051e6:	f7fb f8fd 	bl	80003e4 <__aeabi_ui2d>
 80051ea:	2201      	movs	r2, #1
 80051ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80051f0:	3e01      	subs	r6, #1
 80051f2:	9212      	str	r2, [sp, #72]	@ 0x48
 80051f4:	e775      	b.n	80050e2 <_dtoa_r+0x102>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e7b6      	b.n	8005168 <_dtoa_r+0x188>
 80051fa:	900f      	str	r0, [sp, #60]	@ 0x3c
 80051fc:	e7b5      	b.n	800516a <_dtoa_r+0x18a>
 80051fe:	427b      	negs	r3, r7
 8005200:	930a      	str	r3, [sp, #40]	@ 0x28
 8005202:	2300      	movs	r3, #0
 8005204:	eba8 0807 	sub.w	r8, r8, r7
 8005208:	930e      	str	r3, [sp, #56]	@ 0x38
 800520a:	e7c2      	b.n	8005192 <_dtoa_r+0x1b2>
 800520c:	2300      	movs	r3, #0
 800520e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005210:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005212:	2b00      	cmp	r3, #0
 8005214:	dc35      	bgt.n	8005282 <_dtoa_r+0x2a2>
 8005216:	2301      	movs	r3, #1
 8005218:	461a      	mov	r2, r3
 800521a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800521e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005220:	e00b      	b.n	800523a <_dtoa_r+0x25a>
 8005222:	2301      	movs	r3, #1
 8005224:	e7f3      	b.n	800520e <_dtoa_r+0x22e>
 8005226:	2300      	movs	r3, #0
 8005228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800522a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	9308      	str	r3, [sp, #32]
 8005230:	3301      	adds	r3, #1
 8005232:	2b01      	cmp	r3, #1
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	bfb8      	it	lt
 8005238:	2301      	movlt	r3, #1
 800523a:	2100      	movs	r1, #0
 800523c:	2204      	movs	r2, #4
 800523e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005242:	f102 0514 	add.w	r5, r2, #20
 8005246:	429d      	cmp	r5, r3
 8005248:	d91f      	bls.n	800528a <_dtoa_r+0x2aa>
 800524a:	6041      	str	r1, [r0, #4]
 800524c:	4658      	mov	r0, fp
 800524e:	f000 fd8d 	bl	8005d6c <_Balloc>
 8005252:	4682      	mov	sl, r0
 8005254:	2800      	cmp	r0, #0
 8005256:	d139      	bne.n	80052cc <_dtoa_r+0x2ec>
 8005258:	4602      	mov	r2, r0
 800525a:	f240 11af 	movw	r1, #431	@ 0x1af
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <_dtoa_r+0x2e8>)
 8005260:	e6d2      	b.n	8005008 <_dtoa_r+0x28>
 8005262:	2301      	movs	r3, #1
 8005264:	e7e0      	b.n	8005228 <_dtoa_r+0x248>
 8005266:	2401      	movs	r4, #1
 8005268:	2300      	movs	r3, #0
 800526a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800526c:	9320      	str	r3, [sp, #128]	@ 0x80
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	2200      	movs	r2, #0
 8005274:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005278:	2312      	movs	r3, #18
 800527a:	e7d0      	b.n	800521e <_dtoa_r+0x23e>
 800527c:	2301      	movs	r3, #1
 800527e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005280:	e7f5      	b.n	800526e <_dtoa_r+0x28e>
 8005282:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005284:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005288:	e7d7      	b.n	800523a <_dtoa_r+0x25a>
 800528a:	3101      	adds	r1, #1
 800528c:	0052      	lsls	r2, r2, #1
 800528e:	e7d8      	b.n	8005242 <_dtoa_r+0x262>
 8005290:	636f4361 	.word	0x636f4361
 8005294:	3fd287a7 	.word	0x3fd287a7
 8005298:	8b60c8b3 	.word	0x8b60c8b3
 800529c:	3fc68a28 	.word	0x3fc68a28
 80052a0:	509f79fb 	.word	0x509f79fb
 80052a4:	3fd34413 	.word	0x3fd34413
 80052a8:	08007033 	.word	0x08007033
 80052ac:	0800704a 	.word	0x0800704a
 80052b0:	7ff00000 	.word	0x7ff00000
 80052b4:	0800702f 	.word	0x0800702f
 80052b8:	08007003 	.word	0x08007003
 80052bc:	08007002 	.word	0x08007002
 80052c0:	3ff80000 	.word	0x3ff80000
 80052c4:	08007140 	.word	0x08007140
 80052c8:	080070a2 	.word	0x080070a2
 80052cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80052d0:	6018      	str	r0, [r3, #0]
 80052d2:	9b07      	ldr	r3, [sp, #28]
 80052d4:	2b0e      	cmp	r3, #14
 80052d6:	f200 80a4 	bhi.w	8005422 <_dtoa_r+0x442>
 80052da:	2c00      	cmp	r4, #0
 80052dc:	f000 80a1 	beq.w	8005422 <_dtoa_r+0x442>
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	dd33      	ble.n	800534c <_dtoa_r+0x36c>
 80052e4:	4b86      	ldr	r3, [pc, #536]	@ (8005500 <_dtoa_r+0x520>)
 80052e6:	f007 020f 	and.w	r2, r7, #15
 80052ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ee:	05f8      	lsls	r0, r7, #23
 80052f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80052fc:	d516      	bpl.n	800532c <_dtoa_r+0x34c>
 80052fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005302:	4b80      	ldr	r3, [pc, #512]	@ (8005504 <_dtoa_r+0x524>)
 8005304:	2603      	movs	r6, #3
 8005306:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800530a:	f7fb fa0f 	bl	800072c <__aeabi_ddiv>
 800530e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005312:	f004 040f 	and.w	r4, r4, #15
 8005316:	4d7b      	ldr	r5, [pc, #492]	@ (8005504 <_dtoa_r+0x524>)
 8005318:	b954      	cbnz	r4, 8005330 <_dtoa_r+0x350>
 800531a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800531e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005322:	f7fb fa03 	bl	800072c <__aeabi_ddiv>
 8005326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800532a:	e028      	b.n	800537e <_dtoa_r+0x39e>
 800532c:	2602      	movs	r6, #2
 800532e:	e7f2      	b.n	8005316 <_dtoa_r+0x336>
 8005330:	07e1      	lsls	r1, r4, #31
 8005332:	d508      	bpl.n	8005346 <_dtoa_r+0x366>
 8005334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005338:	e9d5 2300 	ldrd	r2, r3, [r5]
 800533c:	f7fb f8cc 	bl	80004d8 <__aeabi_dmul>
 8005340:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005344:	3601      	adds	r6, #1
 8005346:	1064      	asrs	r4, r4, #1
 8005348:	3508      	adds	r5, #8
 800534a:	e7e5      	b.n	8005318 <_dtoa_r+0x338>
 800534c:	f000 80d2 	beq.w	80054f4 <_dtoa_r+0x514>
 8005350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005354:	427c      	negs	r4, r7
 8005356:	4b6a      	ldr	r3, [pc, #424]	@ (8005500 <_dtoa_r+0x520>)
 8005358:	f004 020f 	and.w	r2, r4, #15
 800535c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f7fb f8b8 	bl	80004d8 <__aeabi_dmul>
 8005368:	2602      	movs	r6, #2
 800536a:	2300      	movs	r3, #0
 800536c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005370:	4d64      	ldr	r5, [pc, #400]	@ (8005504 <_dtoa_r+0x524>)
 8005372:	1124      	asrs	r4, r4, #4
 8005374:	2c00      	cmp	r4, #0
 8005376:	f040 80b2 	bne.w	80054de <_dtoa_r+0x4fe>
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1d3      	bne.n	8005326 <_dtoa_r+0x346>
 800537e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005382:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80b7 	beq.w	80054f8 <_dtoa_r+0x518>
 800538a:	2200      	movs	r2, #0
 800538c:	4620      	mov	r0, r4
 800538e:	4629      	mov	r1, r5
 8005390:	4b5d      	ldr	r3, [pc, #372]	@ (8005508 <_dtoa_r+0x528>)
 8005392:	f7fb fb13 	bl	80009bc <__aeabi_dcmplt>
 8005396:	2800      	cmp	r0, #0
 8005398:	f000 80ae 	beq.w	80054f8 <_dtoa_r+0x518>
 800539c:	9b07      	ldr	r3, [sp, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80aa 	beq.w	80054f8 <_dtoa_r+0x518>
 80053a4:	9b08      	ldr	r3, [sp, #32]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd37      	ble.n	800541a <_dtoa_r+0x43a>
 80053aa:	1e7b      	subs	r3, r7, #1
 80053ac:	4620      	mov	r0, r4
 80053ae:	9304      	str	r3, [sp, #16]
 80053b0:	2200      	movs	r2, #0
 80053b2:	4629      	mov	r1, r5
 80053b4:	4b55      	ldr	r3, [pc, #340]	@ (800550c <_dtoa_r+0x52c>)
 80053b6:	f7fb f88f 	bl	80004d8 <__aeabi_dmul>
 80053ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053be:	9c08      	ldr	r4, [sp, #32]
 80053c0:	3601      	adds	r6, #1
 80053c2:	4630      	mov	r0, r6
 80053c4:	f7fb f81e 	bl	8000404 <__aeabi_i2d>
 80053c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053cc:	f7fb f884 	bl	80004d8 <__aeabi_dmul>
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005510 <_dtoa_r+0x530>)
 80053d4:	f7fa feca 	bl	800016c <__adddf3>
 80053d8:	4605      	mov	r5, r0
 80053da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80053de:	2c00      	cmp	r4, #0
 80053e0:	f040 809a 	bne.w	8005518 <_dtoa_r+0x538>
 80053e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053e8:	2200      	movs	r2, #0
 80053ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005514 <_dtoa_r+0x534>)
 80053ec:	f7fa febc 	bl	8000168 <__aeabi_dsub>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053f8:	462a      	mov	r2, r5
 80053fa:	4633      	mov	r3, r6
 80053fc:	f7fb fafc 	bl	80009f8 <__aeabi_dcmpgt>
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 828e 	bne.w	8005922 <_dtoa_r+0x942>
 8005406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540a:	462a      	mov	r2, r5
 800540c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005410:	f7fb fad4 	bl	80009bc <__aeabi_dcmplt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f040 8127 	bne.w	8005668 <_dtoa_r+0x688>
 800541a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800541e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005422:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	f2c0 8163 	blt.w	80056f0 <_dtoa_r+0x710>
 800542a:	2f0e      	cmp	r7, #14
 800542c:	f300 8160 	bgt.w	80056f0 <_dtoa_r+0x710>
 8005430:	4b33      	ldr	r3, [pc, #204]	@ (8005500 <_dtoa_r+0x520>)
 8005432:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005436:	e9d3 3400 	ldrd	r3, r4, [r3]
 800543a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800543e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005440:	2b00      	cmp	r3, #0
 8005442:	da03      	bge.n	800544c <_dtoa_r+0x46c>
 8005444:	9b07      	ldr	r3, [sp, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f340 8100 	ble.w	800564c <_dtoa_r+0x66c>
 800544c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005450:	4656      	mov	r6, sl
 8005452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005456:	4620      	mov	r0, r4
 8005458:	4629      	mov	r1, r5
 800545a:	f7fb f967 	bl	800072c <__aeabi_ddiv>
 800545e:	f7fb faeb 	bl	8000a38 <__aeabi_d2iz>
 8005462:	4680      	mov	r8, r0
 8005464:	f7fa ffce 	bl	8000404 <__aeabi_i2d>
 8005468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800546c:	f7fb f834 	bl	80004d8 <__aeabi_dmul>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f7fa fe76 	bl	8000168 <__aeabi_dsub>
 800547c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005480:	9d07      	ldr	r5, [sp, #28]
 8005482:	f806 4b01 	strb.w	r4, [r6], #1
 8005486:	eba6 040a 	sub.w	r4, r6, sl
 800548a:	42a5      	cmp	r5, r4
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	f040 8116 	bne.w	80056c0 <_dtoa_r+0x6e0>
 8005494:	f7fa fe6a 	bl	800016c <__adddf3>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	4604      	mov	r4, r0
 800549e:	460d      	mov	r5, r1
 80054a0:	f7fb faaa 	bl	80009f8 <__aeabi_dcmpgt>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	f040 80f8 	bne.w	800569a <_dtoa_r+0x6ba>
 80054aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054ae:	4620      	mov	r0, r4
 80054b0:	4629      	mov	r1, r5
 80054b2:	f7fb fa79 	bl	80009a8 <__aeabi_dcmpeq>
 80054b6:	b118      	cbz	r0, 80054c0 <_dtoa_r+0x4e0>
 80054b8:	f018 0f01 	tst.w	r8, #1
 80054bc:	f040 80ed 	bne.w	800569a <_dtoa_r+0x6ba>
 80054c0:	4649      	mov	r1, r9
 80054c2:	4658      	mov	r0, fp
 80054c4:	f000 fc92 	bl	8005dec <_Bfree>
 80054c8:	2300      	movs	r3, #0
 80054ca:	7033      	strb	r3, [r6, #0]
 80054cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80054ce:	3701      	adds	r7, #1
 80054d0:	601f      	str	r7, [r3, #0]
 80054d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8320 	beq.w	8005b1a <_dtoa_r+0xb3a>
 80054da:	601e      	str	r6, [r3, #0]
 80054dc:	e31d      	b.n	8005b1a <_dtoa_r+0xb3a>
 80054de:	07e2      	lsls	r2, r4, #31
 80054e0:	d505      	bpl.n	80054ee <_dtoa_r+0x50e>
 80054e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054e6:	f7fa fff7 	bl	80004d8 <__aeabi_dmul>
 80054ea:	2301      	movs	r3, #1
 80054ec:	3601      	adds	r6, #1
 80054ee:	1064      	asrs	r4, r4, #1
 80054f0:	3508      	adds	r5, #8
 80054f2:	e73f      	b.n	8005374 <_dtoa_r+0x394>
 80054f4:	2602      	movs	r6, #2
 80054f6:	e742      	b.n	800537e <_dtoa_r+0x39e>
 80054f8:	9c07      	ldr	r4, [sp, #28]
 80054fa:	9704      	str	r7, [sp, #16]
 80054fc:	e761      	b.n	80053c2 <_dtoa_r+0x3e2>
 80054fe:	bf00      	nop
 8005500:	08007140 	.word	0x08007140
 8005504:	08007118 	.word	0x08007118
 8005508:	3ff00000 	.word	0x3ff00000
 800550c:	40240000 	.word	0x40240000
 8005510:	401c0000 	.word	0x401c0000
 8005514:	40140000 	.word	0x40140000
 8005518:	4b70      	ldr	r3, [pc, #448]	@ (80056dc <_dtoa_r+0x6fc>)
 800551a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800551c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005520:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005524:	4454      	add	r4, sl
 8005526:	2900      	cmp	r1, #0
 8005528:	d045      	beq.n	80055b6 <_dtoa_r+0x5d6>
 800552a:	2000      	movs	r0, #0
 800552c:	496c      	ldr	r1, [pc, #432]	@ (80056e0 <_dtoa_r+0x700>)
 800552e:	f7fb f8fd 	bl	800072c <__aeabi_ddiv>
 8005532:	4633      	mov	r3, r6
 8005534:	462a      	mov	r2, r5
 8005536:	f7fa fe17 	bl	8000168 <__aeabi_dsub>
 800553a:	4656      	mov	r6, sl
 800553c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005544:	f7fb fa78 	bl	8000a38 <__aeabi_d2iz>
 8005548:	4605      	mov	r5, r0
 800554a:	f7fa ff5b 	bl	8000404 <__aeabi_i2d>
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005556:	f7fa fe07 	bl	8000168 <__aeabi_dsub>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	3530      	adds	r5, #48	@ 0x30
 8005560:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005564:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005568:	f806 5b01 	strb.w	r5, [r6], #1
 800556c:	f7fb fa26 	bl	80009bc <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	d163      	bne.n	800563c <_dtoa_r+0x65c>
 8005574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005578:	2000      	movs	r0, #0
 800557a:	495a      	ldr	r1, [pc, #360]	@ (80056e4 <_dtoa_r+0x704>)
 800557c:	f7fa fdf4 	bl	8000168 <__aeabi_dsub>
 8005580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005584:	f7fb fa1a 	bl	80009bc <__aeabi_dcmplt>
 8005588:	2800      	cmp	r0, #0
 800558a:	f040 8087 	bne.w	800569c <_dtoa_r+0x6bc>
 800558e:	42a6      	cmp	r6, r4
 8005590:	f43f af43 	beq.w	800541a <_dtoa_r+0x43a>
 8005594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005598:	2200      	movs	r2, #0
 800559a:	4b53      	ldr	r3, [pc, #332]	@ (80056e8 <_dtoa_r+0x708>)
 800559c:	f7fa ff9c 	bl	80004d8 <__aeabi_dmul>
 80055a0:	2200      	movs	r2, #0
 80055a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055aa:	4b4f      	ldr	r3, [pc, #316]	@ (80056e8 <_dtoa_r+0x708>)
 80055ac:	f7fa ff94 	bl	80004d8 <__aeabi_dmul>
 80055b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055b4:	e7c4      	b.n	8005540 <_dtoa_r+0x560>
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	f7fa ff8d 	bl	80004d8 <__aeabi_dmul>
 80055be:	4656      	mov	r6, sl
 80055c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ca:	f7fb fa35 	bl	8000a38 <__aeabi_d2iz>
 80055ce:	4605      	mov	r5, r0
 80055d0:	f7fa ff18 	bl	8000404 <__aeabi_i2d>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055dc:	f7fa fdc4 	bl	8000168 <__aeabi_dsub>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	3530      	adds	r5, #48	@ 0x30
 80055e6:	f806 5b01 	strb.w	r5, [r6], #1
 80055ea:	42a6      	cmp	r6, r4
 80055ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	d124      	bne.n	8005640 <_dtoa_r+0x660>
 80055f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80055fa:	4b39      	ldr	r3, [pc, #228]	@ (80056e0 <_dtoa_r+0x700>)
 80055fc:	f7fa fdb6 	bl	800016c <__adddf3>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005608:	f7fb f9f6 	bl	80009f8 <__aeabi_dcmpgt>
 800560c:	2800      	cmp	r0, #0
 800560e:	d145      	bne.n	800569c <_dtoa_r+0x6bc>
 8005610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005614:	2000      	movs	r0, #0
 8005616:	4932      	ldr	r1, [pc, #200]	@ (80056e0 <_dtoa_r+0x700>)
 8005618:	f7fa fda6 	bl	8000168 <__aeabi_dsub>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005624:	f7fb f9ca 	bl	80009bc <__aeabi_dcmplt>
 8005628:	2800      	cmp	r0, #0
 800562a:	f43f aef6 	beq.w	800541a <_dtoa_r+0x43a>
 800562e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005630:	1e73      	subs	r3, r6, #1
 8005632:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005634:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005638:	2b30      	cmp	r3, #48	@ 0x30
 800563a:	d0f8      	beq.n	800562e <_dtoa_r+0x64e>
 800563c:	9f04      	ldr	r7, [sp, #16]
 800563e:	e73f      	b.n	80054c0 <_dtoa_r+0x4e0>
 8005640:	4b29      	ldr	r3, [pc, #164]	@ (80056e8 <_dtoa_r+0x708>)
 8005642:	f7fa ff49 	bl	80004d8 <__aeabi_dmul>
 8005646:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800564a:	e7bc      	b.n	80055c6 <_dtoa_r+0x5e6>
 800564c:	d10c      	bne.n	8005668 <_dtoa_r+0x688>
 800564e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005652:	2200      	movs	r2, #0
 8005654:	4b25      	ldr	r3, [pc, #148]	@ (80056ec <_dtoa_r+0x70c>)
 8005656:	f7fa ff3f 	bl	80004d8 <__aeabi_dmul>
 800565a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800565e:	f7fb f9c1 	bl	80009e4 <__aeabi_dcmpge>
 8005662:	2800      	cmp	r0, #0
 8005664:	f000 815b 	beq.w	800591e <_dtoa_r+0x93e>
 8005668:	2400      	movs	r4, #0
 800566a:	4625      	mov	r5, r4
 800566c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800566e:	4656      	mov	r6, sl
 8005670:	43db      	mvns	r3, r3
 8005672:	9304      	str	r3, [sp, #16]
 8005674:	2700      	movs	r7, #0
 8005676:	4621      	mov	r1, r4
 8005678:	4658      	mov	r0, fp
 800567a:	f000 fbb7 	bl	8005dec <_Bfree>
 800567e:	2d00      	cmp	r5, #0
 8005680:	d0dc      	beq.n	800563c <_dtoa_r+0x65c>
 8005682:	b12f      	cbz	r7, 8005690 <_dtoa_r+0x6b0>
 8005684:	42af      	cmp	r7, r5
 8005686:	d003      	beq.n	8005690 <_dtoa_r+0x6b0>
 8005688:	4639      	mov	r1, r7
 800568a:	4658      	mov	r0, fp
 800568c:	f000 fbae 	bl	8005dec <_Bfree>
 8005690:	4629      	mov	r1, r5
 8005692:	4658      	mov	r0, fp
 8005694:	f000 fbaa 	bl	8005dec <_Bfree>
 8005698:	e7d0      	b.n	800563c <_dtoa_r+0x65c>
 800569a:	9704      	str	r7, [sp, #16]
 800569c:	4633      	mov	r3, r6
 800569e:	461e      	mov	r6, r3
 80056a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a4:	2a39      	cmp	r2, #57	@ 0x39
 80056a6:	d107      	bne.n	80056b8 <_dtoa_r+0x6d8>
 80056a8:	459a      	cmp	sl, r3
 80056aa:	d1f8      	bne.n	800569e <_dtoa_r+0x6be>
 80056ac:	9a04      	ldr	r2, [sp, #16]
 80056ae:	3201      	adds	r2, #1
 80056b0:	9204      	str	r2, [sp, #16]
 80056b2:	2230      	movs	r2, #48	@ 0x30
 80056b4:	f88a 2000 	strb.w	r2, [sl]
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	3201      	adds	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e7bd      	b.n	800563c <_dtoa_r+0x65c>
 80056c0:	2200      	movs	r2, #0
 80056c2:	4b09      	ldr	r3, [pc, #36]	@ (80056e8 <_dtoa_r+0x708>)
 80056c4:	f7fa ff08 	bl	80004d8 <__aeabi_dmul>
 80056c8:	2200      	movs	r2, #0
 80056ca:	2300      	movs	r3, #0
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	f7fb f96a 	bl	80009a8 <__aeabi_dcmpeq>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f43f aebc 	beq.w	8005452 <_dtoa_r+0x472>
 80056da:	e6f1      	b.n	80054c0 <_dtoa_r+0x4e0>
 80056dc:	08007140 	.word	0x08007140
 80056e0:	3fe00000 	.word	0x3fe00000
 80056e4:	3ff00000 	.word	0x3ff00000
 80056e8:	40240000 	.word	0x40240000
 80056ec:	40140000 	.word	0x40140000
 80056f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	f000 80db 	beq.w	80058ae <_dtoa_r+0x8ce>
 80056f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80056fa:	2a01      	cmp	r2, #1
 80056fc:	f300 80bf 	bgt.w	800587e <_dtoa_r+0x89e>
 8005700:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005702:	2a00      	cmp	r2, #0
 8005704:	f000 80b7 	beq.w	8005876 <_dtoa_r+0x896>
 8005708:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800570c:	4646      	mov	r6, r8
 800570e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005710:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005712:	2101      	movs	r1, #1
 8005714:	441a      	add	r2, r3
 8005716:	4658      	mov	r0, fp
 8005718:	4498      	add	r8, r3
 800571a:	9209      	str	r2, [sp, #36]	@ 0x24
 800571c:	f000 fc1a 	bl	8005f54 <__i2b>
 8005720:	4605      	mov	r5, r0
 8005722:	b15e      	cbz	r6, 800573c <_dtoa_r+0x75c>
 8005724:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005726:	2b00      	cmp	r3, #0
 8005728:	dd08      	ble.n	800573c <_dtoa_r+0x75c>
 800572a:	42b3      	cmp	r3, r6
 800572c:	bfa8      	it	ge
 800572e:	4633      	movge	r3, r6
 8005730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005732:	eba8 0803 	sub.w	r8, r8, r3
 8005736:	1af6      	subs	r6, r6, r3
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	9309      	str	r3, [sp, #36]	@ 0x24
 800573c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800573e:	b1f3      	cbz	r3, 800577e <_dtoa_r+0x79e>
 8005740:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 80b7 	beq.w	80058b6 <_dtoa_r+0x8d6>
 8005748:	b18c      	cbz	r4, 800576e <_dtoa_r+0x78e>
 800574a:	4629      	mov	r1, r5
 800574c:	4622      	mov	r2, r4
 800574e:	4658      	mov	r0, fp
 8005750:	f000 fcbe 	bl	80060d0 <__pow5mult>
 8005754:	464a      	mov	r2, r9
 8005756:	4601      	mov	r1, r0
 8005758:	4605      	mov	r5, r0
 800575a:	4658      	mov	r0, fp
 800575c:	f000 fc10 	bl	8005f80 <__multiply>
 8005760:	4649      	mov	r1, r9
 8005762:	9004      	str	r0, [sp, #16]
 8005764:	4658      	mov	r0, fp
 8005766:	f000 fb41 	bl	8005dec <_Bfree>
 800576a:	9b04      	ldr	r3, [sp, #16]
 800576c:	4699      	mov	r9, r3
 800576e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005770:	1b1a      	subs	r2, r3, r4
 8005772:	d004      	beq.n	800577e <_dtoa_r+0x79e>
 8005774:	4649      	mov	r1, r9
 8005776:	4658      	mov	r0, fp
 8005778:	f000 fcaa 	bl	80060d0 <__pow5mult>
 800577c:	4681      	mov	r9, r0
 800577e:	2101      	movs	r1, #1
 8005780:	4658      	mov	r0, fp
 8005782:	f000 fbe7 	bl	8005f54 <__i2b>
 8005786:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005788:	4604      	mov	r4, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 81c9 	beq.w	8005b22 <_dtoa_r+0xb42>
 8005790:	461a      	mov	r2, r3
 8005792:	4601      	mov	r1, r0
 8005794:	4658      	mov	r0, fp
 8005796:	f000 fc9b 	bl	80060d0 <__pow5mult>
 800579a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800579c:	4604      	mov	r4, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	f300 808f 	bgt.w	80058c2 <_dtoa_r+0x8e2>
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8087 	bne.w	80058ba <_dtoa_r+0x8da>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f040 8083 	bne.w	80058be <_dtoa_r+0x8de>
 80057b8:	9b03      	ldr	r3, [sp, #12]
 80057ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057be:	0d1b      	lsrs	r3, r3, #20
 80057c0:	051b      	lsls	r3, r3, #20
 80057c2:	b12b      	cbz	r3, 80057d0 <_dtoa_r+0x7f0>
 80057c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c6:	f108 0801 	add.w	r8, r8, #1
 80057ca:	3301      	adds	r3, #1
 80057cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ce:	2301      	movs	r3, #1
 80057d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80057d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 81aa 	beq.w	8005b2e <_dtoa_r+0xb4e>
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057e0:	6918      	ldr	r0, [r3, #16]
 80057e2:	f000 fb6b 	bl	8005ebc <__hi0bits>
 80057e6:	f1c0 0020 	rsb	r0, r0, #32
 80057ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ec:	4418      	add	r0, r3
 80057ee:	f010 001f 	ands.w	r0, r0, #31
 80057f2:	d071      	beq.n	80058d8 <_dtoa_r+0x8f8>
 80057f4:	f1c0 0320 	rsb	r3, r0, #32
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	dd65      	ble.n	80058c8 <_dtoa_r+0x8e8>
 80057fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057fe:	f1c0 001c 	rsb	r0, r0, #28
 8005802:	4403      	add	r3, r0
 8005804:	4480      	add	r8, r0
 8005806:	4406      	add	r6, r0
 8005808:	9309      	str	r3, [sp, #36]	@ 0x24
 800580a:	f1b8 0f00 	cmp.w	r8, #0
 800580e:	dd05      	ble.n	800581c <_dtoa_r+0x83c>
 8005810:	4649      	mov	r1, r9
 8005812:	4642      	mov	r2, r8
 8005814:	4658      	mov	r0, fp
 8005816:	f000 fcb5 	bl	8006184 <__lshift>
 800581a:	4681      	mov	r9, r0
 800581c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800581e:	2b00      	cmp	r3, #0
 8005820:	dd05      	ble.n	800582e <_dtoa_r+0x84e>
 8005822:	4621      	mov	r1, r4
 8005824:	461a      	mov	r2, r3
 8005826:	4658      	mov	r0, fp
 8005828:	f000 fcac 	bl	8006184 <__lshift>
 800582c:	4604      	mov	r4, r0
 800582e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d053      	beq.n	80058dc <_dtoa_r+0x8fc>
 8005834:	4621      	mov	r1, r4
 8005836:	4648      	mov	r0, r9
 8005838:	f000 fd10 	bl	800625c <__mcmp>
 800583c:	2800      	cmp	r0, #0
 800583e:	da4d      	bge.n	80058dc <_dtoa_r+0x8fc>
 8005840:	1e7b      	subs	r3, r7, #1
 8005842:	4649      	mov	r1, r9
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	220a      	movs	r2, #10
 8005848:	2300      	movs	r3, #0
 800584a:	4658      	mov	r0, fp
 800584c:	f000 faf0 	bl	8005e30 <__multadd>
 8005850:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005852:	4681      	mov	r9, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 816c 	beq.w	8005b32 <_dtoa_r+0xb52>
 800585a:	2300      	movs	r3, #0
 800585c:	4629      	mov	r1, r5
 800585e:	220a      	movs	r2, #10
 8005860:	4658      	mov	r0, fp
 8005862:	f000 fae5 	bl	8005e30 <__multadd>
 8005866:	9b08      	ldr	r3, [sp, #32]
 8005868:	4605      	mov	r5, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	dc61      	bgt.n	8005932 <_dtoa_r+0x952>
 800586e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005870:	2b02      	cmp	r3, #2
 8005872:	dc3b      	bgt.n	80058ec <_dtoa_r+0x90c>
 8005874:	e05d      	b.n	8005932 <_dtoa_r+0x952>
 8005876:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005878:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800587c:	e746      	b.n	800570c <_dtoa_r+0x72c>
 800587e:	9b07      	ldr	r3, [sp, #28]
 8005880:	1e5c      	subs	r4, r3, #1
 8005882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005884:	42a3      	cmp	r3, r4
 8005886:	bfbf      	itttt	lt
 8005888:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800588a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800588c:	1ae3      	sublt	r3, r4, r3
 800588e:	18d2      	addlt	r2, r2, r3
 8005890:	bfa8      	it	ge
 8005892:	1b1c      	subge	r4, r3, r4
 8005894:	9b07      	ldr	r3, [sp, #28]
 8005896:	bfbe      	ittt	lt
 8005898:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800589a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800589c:	2400      	movlt	r4, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfb5      	itete	lt
 80058a2:	eba8 0603 	sublt.w	r6, r8, r3
 80058a6:	4646      	movge	r6, r8
 80058a8:	2300      	movlt	r3, #0
 80058aa:	9b07      	ldrge	r3, [sp, #28]
 80058ac:	e730      	b.n	8005710 <_dtoa_r+0x730>
 80058ae:	4646      	mov	r6, r8
 80058b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80058b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80058b4:	e735      	b.n	8005722 <_dtoa_r+0x742>
 80058b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80058b8:	e75c      	b.n	8005774 <_dtoa_r+0x794>
 80058ba:	2300      	movs	r3, #0
 80058bc:	e788      	b.n	80057d0 <_dtoa_r+0x7f0>
 80058be:	9b02      	ldr	r3, [sp, #8]
 80058c0:	e786      	b.n	80057d0 <_dtoa_r+0x7f0>
 80058c2:	2300      	movs	r3, #0
 80058c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80058c6:	e788      	b.n	80057da <_dtoa_r+0x7fa>
 80058c8:	d09f      	beq.n	800580a <_dtoa_r+0x82a>
 80058ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058cc:	331c      	adds	r3, #28
 80058ce:	441a      	add	r2, r3
 80058d0:	4498      	add	r8, r3
 80058d2:	441e      	add	r6, r3
 80058d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80058d6:	e798      	b.n	800580a <_dtoa_r+0x82a>
 80058d8:	4603      	mov	r3, r0
 80058da:	e7f6      	b.n	80058ca <_dtoa_r+0x8ea>
 80058dc:	9b07      	ldr	r3, [sp, #28]
 80058de:	9704      	str	r7, [sp, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	dc20      	bgt.n	8005926 <_dtoa_r+0x946>
 80058e4:	9308      	str	r3, [sp, #32]
 80058e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	dd1e      	ble.n	800592a <_dtoa_r+0x94a>
 80058ec:	9b08      	ldr	r3, [sp, #32]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f47f aebc 	bne.w	800566c <_dtoa_r+0x68c>
 80058f4:	4621      	mov	r1, r4
 80058f6:	2205      	movs	r2, #5
 80058f8:	4658      	mov	r0, fp
 80058fa:	f000 fa99 	bl	8005e30 <__multadd>
 80058fe:	4601      	mov	r1, r0
 8005900:	4604      	mov	r4, r0
 8005902:	4648      	mov	r0, r9
 8005904:	f000 fcaa 	bl	800625c <__mcmp>
 8005908:	2800      	cmp	r0, #0
 800590a:	f77f aeaf 	ble.w	800566c <_dtoa_r+0x68c>
 800590e:	2331      	movs	r3, #49	@ 0x31
 8005910:	4656      	mov	r6, sl
 8005912:	f806 3b01 	strb.w	r3, [r6], #1
 8005916:	9b04      	ldr	r3, [sp, #16]
 8005918:	3301      	adds	r3, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	e6aa      	b.n	8005674 <_dtoa_r+0x694>
 800591e:	9c07      	ldr	r4, [sp, #28]
 8005920:	9704      	str	r7, [sp, #16]
 8005922:	4625      	mov	r5, r4
 8005924:	e7f3      	b.n	800590e <_dtoa_r+0x92e>
 8005926:	9b07      	ldr	r3, [sp, #28]
 8005928:	9308      	str	r3, [sp, #32]
 800592a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8104 	beq.w	8005b3a <_dtoa_r+0xb5a>
 8005932:	2e00      	cmp	r6, #0
 8005934:	dd05      	ble.n	8005942 <_dtoa_r+0x962>
 8005936:	4629      	mov	r1, r5
 8005938:	4632      	mov	r2, r6
 800593a:	4658      	mov	r0, fp
 800593c:	f000 fc22 	bl	8006184 <__lshift>
 8005940:	4605      	mov	r5, r0
 8005942:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05a      	beq.n	80059fe <_dtoa_r+0xa1e>
 8005948:	4658      	mov	r0, fp
 800594a:	6869      	ldr	r1, [r5, #4]
 800594c:	f000 fa0e 	bl	8005d6c <_Balloc>
 8005950:	4606      	mov	r6, r0
 8005952:	b928      	cbnz	r0, 8005960 <_dtoa_r+0x980>
 8005954:	4602      	mov	r2, r0
 8005956:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800595a:	4b83      	ldr	r3, [pc, #524]	@ (8005b68 <_dtoa_r+0xb88>)
 800595c:	f7ff bb54 	b.w	8005008 <_dtoa_r+0x28>
 8005960:	692a      	ldr	r2, [r5, #16]
 8005962:	f105 010c 	add.w	r1, r5, #12
 8005966:	3202      	adds	r2, #2
 8005968:	0092      	lsls	r2, r2, #2
 800596a:	300c      	adds	r0, #12
 800596c:	f000 ffa8 	bl	80068c0 <memcpy>
 8005970:	2201      	movs	r2, #1
 8005972:	4631      	mov	r1, r6
 8005974:	4658      	mov	r0, fp
 8005976:	f000 fc05 	bl	8006184 <__lshift>
 800597a:	462f      	mov	r7, r5
 800597c:	4605      	mov	r5, r0
 800597e:	f10a 0301 	add.w	r3, sl, #1
 8005982:	9307      	str	r3, [sp, #28]
 8005984:	9b08      	ldr	r3, [sp, #32]
 8005986:	4453      	add	r3, sl
 8005988:	930b      	str	r3, [sp, #44]	@ 0x2c
 800598a:	9b02      	ldr	r3, [sp, #8]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	930a      	str	r3, [sp, #40]	@ 0x28
 8005992:	9b07      	ldr	r3, [sp, #28]
 8005994:	4621      	mov	r1, r4
 8005996:	3b01      	subs	r3, #1
 8005998:	4648      	mov	r0, r9
 800599a:	9302      	str	r3, [sp, #8]
 800599c:	f7ff fa95 	bl	8004eca <quorem>
 80059a0:	4639      	mov	r1, r7
 80059a2:	9008      	str	r0, [sp, #32]
 80059a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059a8:	4648      	mov	r0, r9
 80059aa:	f000 fc57 	bl	800625c <__mcmp>
 80059ae:	462a      	mov	r2, r5
 80059b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80059b2:	4621      	mov	r1, r4
 80059b4:	4658      	mov	r0, fp
 80059b6:	f000 fc6d 	bl	8006294 <__mdiff>
 80059ba:	68c2      	ldr	r2, [r0, #12]
 80059bc:	4606      	mov	r6, r0
 80059be:	bb02      	cbnz	r2, 8005a02 <_dtoa_r+0xa22>
 80059c0:	4601      	mov	r1, r0
 80059c2:	4648      	mov	r0, r9
 80059c4:	f000 fc4a 	bl	800625c <__mcmp>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4631      	mov	r1, r6
 80059cc:	4658      	mov	r0, fp
 80059ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80059d0:	f000 fa0c 	bl	8005dec <_Bfree>
 80059d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059d8:	9e07      	ldr	r6, [sp, #28]
 80059da:	ea43 0102 	orr.w	r1, r3, r2
 80059de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059e0:	4319      	orrs	r1, r3
 80059e2:	d110      	bne.n	8005a06 <_dtoa_r+0xa26>
 80059e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80059e8:	d029      	beq.n	8005a3e <_dtoa_r+0xa5e>
 80059ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dd02      	ble.n	80059f6 <_dtoa_r+0xa16>
 80059f0:	9b08      	ldr	r3, [sp, #32]
 80059f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80059f6:	9b02      	ldr	r3, [sp, #8]
 80059f8:	f883 8000 	strb.w	r8, [r3]
 80059fc:	e63b      	b.n	8005676 <_dtoa_r+0x696>
 80059fe:	4628      	mov	r0, r5
 8005a00:	e7bb      	b.n	800597a <_dtoa_r+0x99a>
 8005a02:	2201      	movs	r2, #1
 8005a04:	e7e1      	b.n	80059ca <_dtoa_r+0x9ea>
 8005a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	db04      	blt.n	8005a16 <_dtoa_r+0xa36>
 8005a0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005a0e:	430b      	orrs	r3, r1
 8005a10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a12:	430b      	orrs	r3, r1
 8005a14:	d120      	bne.n	8005a58 <_dtoa_r+0xa78>
 8005a16:	2a00      	cmp	r2, #0
 8005a18:	dded      	ble.n	80059f6 <_dtoa_r+0xa16>
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	4658      	mov	r0, fp
 8005a20:	f000 fbb0 	bl	8006184 <__lshift>
 8005a24:	4621      	mov	r1, r4
 8005a26:	4681      	mov	r9, r0
 8005a28:	f000 fc18 	bl	800625c <__mcmp>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	dc03      	bgt.n	8005a38 <_dtoa_r+0xa58>
 8005a30:	d1e1      	bne.n	80059f6 <_dtoa_r+0xa16>
 8005a32:	f018 0f01 	tst.w	r8, #1
 8005a36:	d0de      	beq.n	80059f6 <_dtoa_r+0xa16>
 8005a38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a3c:	d1d8      	bne.n	80059f0 <_dtoa_r+0xa10>
 8005a3e:	2339      	movs	r3, #57	@ 0x39
 8005a40:	9a02      	ldr	r2, [sp, #8]
 8005a42:	7013      	strb	r3, [r2, #0]
 8005a44:	4633      	mov	r3, r6
 8005a46:	461e      	mov	r6, r3
 8005a48:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	2a39      	cmp	r2, #57	@ 0x39
 8005a50:	d052      	beq.n	8005af8 <_dtoa_r+0xb18>
 8005a52:	3201      	adds	r2, #1
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e60e      	b.n	8005676 <_dtoa_r+0x696>
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	dd07      	ble.n	8005a6c <_dtoa_r+0xa8c>
 8005a5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a60:	d0ed      	beq.n	8005a3e <_dtoa_r+0xa5e>
 8005a62:	9a02      	ldr	r2, [sp, #8]
 8005a64:	f108 0301 	add.w	r3, r8, #1
 8005a68:	7013      	strb	r3, [r2, #0]
 8005a6a:	e604      	b.n	8005676 <_dtoa_r+0x696>
 8005a6c:	9b07      	ldr	r3, [sp, #28]
 8005a6e:	9a07      	ldr	r2, [sp, #28]
 8005a70:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005a74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d028      	beq.n	8005acc <_dtoa_r+0xaec>
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	220a      	movs	r2, #10
 8005a80:	4658      	mov	r0, fp
 8005a82:	f000 f9d5 	bl	8005e30 <__multadd>
 8005a86:	42af      	cmp	r7, r5
 8005a88:	4681      	mov	r9, r0
 8005a8a:	f04f 0300 	mov.w	r3, #0
 8005a8e:	f04f 020a 	mov.w	r2, #10
 8005a92:	4639      	mov	r1, r7
 8005a94:	4658      	mov	r0, fp
 8005a96:	d107      	bne.n	8005aa8 <_dtoa_r+0xac8>
 8005a98:	f000 f9ca 	bl	8005e30 <__multadd>
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	9b07      	ldr	r3, [sp, #28]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	9307      	str	r3, [sp, #28]
 8005aa6:	e774      	b.n	8005992 <_dtoa_r+0x9b2>
 8005aa8:	f000 f9c2 	bl	8005e30 <__multadd>
 8005aac:	4629      	mov	r1, r5
 8005aae:	4607      	mov	r7, r0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	220a      	movs	r2, #10
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 f9bb 	bl	8005e30 <__multadd>
 8005aba:	4605      	mov	r5, r0
 8005abc:	e7f0      	b.n	8005aa0 <_dtoa_r+0xac0>
 8005abe:	9b08      	ldr	r3, [sp, #32]
 8005ac0:	2700      	movs	r7, #0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	bfcc      	ite	gt
 8005ac6:	461e      	movgt	r6, r3
 8005ac8:	2601      	movle	r6, #1
 8005aca:	4456      	add	r6, sl
 8005acc:	4649      	mov	r1, r9
 8005ace:	2201      	movs	r2, #1
 8005ad0:	4658      	mov	r0, fp
 8005ad2:	f000 fb57 	bl	8006184 <__lshift>
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	4681      	mov	r9, r0
 8005ada:	f000 fbbf 	bl	800625c <__mcmp>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	dcb0      	bgt.n	8005a44 <_dtoa_r+0xa64>
 8005ae2:	d102      	bne.n	8005aea <_dtoa_r+0xb0a>
 8005ae4:	f018 0f01 	tst.w	r8, #1
 8005ae8:	d1ac      	bne.n	8005a44 <_dtoa_r+0xa64>
 8005aea:	4633      	mov	r3, r6
 8005aec:	461e      	mov	r6, r3
 8005aee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005af2:	2a30      	cmp	r2, #48	@ 0x30
 8005af4:	d0fa      	beq.n	8005aec <_dtoa_r+0xb0c>
 8005af6:	e5be      	b.n	8005676 <_dtoa_r+0x696>
 8005af8:	459a      	cmp	sl, r3
 8005afa:	d1a4      	bne.n	8005a46 <_dtoa_r+0xa66>
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	3301      	adds	r3, #1
 8005b00:	9304      	str	r3, [sp, #16]
 8005b02:	2331      	movs	r3, #49	@ 0x31
 8005b04:	f88a 3000 	strb.w	r3, [sl]
 8005b08:	e5b5      	b.n	8005676 <_dtoa_r+0x696>
 8005b0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005b6c <_dtoa_r+0xb8c>
 8005b10:	b11b      	cbz	r3, 8005b1a <_dtoa_r+0xb3a>
 8005b12:	f10a 0308 	add.w	r3, sl, #8
 8005b16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4650      	mov	r0, sl
 8005b1c:	b017      	add	sp, #92	@ 0x5c
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	f77f ae3d 	ble.w	80057a4 <_dtoa_r+0x7c4>
 8005b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b2e:	2001      	movs	r0, #1
 8005b30:	e65b      	b.n	80057ea <_dtoa_r+0x80a>
 8005b32:	9b08      	ldr	r3, [sp, #32]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f77f aed6 	ble.w	80058e6 <_dtoa_r+0x906>
 8005b3a:	4656      	mov	r6, sl
 8005b3c:	4621      	mov	r1, r4
 8005b3e:	4648      	mov	r0, r9
 8005b40:	f7ff f9c3 	bl	8004eca <quorem>
 8005b44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	f806 8b01 	strb.w	r8, [r6], #1
 8005b4e:	eba6 020a 	sub.w	r2, r6, sl
 8005b52:	4293      	cmp	r3, r2
 8005b54:	ddb3      	ble.n	8005abe <_dtoa_r+0xade>
 8005b56:	4649      	mov	r1, r9
 8005b58:	2300      	movs	r3, #0
 8005b5a:	220a      	movs	r2, #10
 8005b5c:	4658      	mov	r0, fp
 8005b5e:	f000 f967 	bl	8005e30 <__multadd>
 8005b62:	4681      	mov	r9, r0
 8005b64:	e7ea      	b.n	8005b3c <_dtoa_r+0xb5c>
 8005b66:	bf00      	nop
 8005b68:	080070a2 	.word	0x080070a2
 8005b6c:	08007026 	.word	0x08007026

08005b70 <_free_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4605      	mov	r5, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d040      	beq.n	8005bfa <_free_r+0x8a>
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f0c      	subs	r4, r1, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfb8      	it	lt
 8005b82:	18e4      	addlt	r4, r4, r3
 8005b84:	f000 f8e6 	bl	8005d54 <__malloc_lock>
 8005b88:	4a1c      	ldr	r2, [pc, #112]	@ (8005bfc <_free_r+0x8c>)
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	b933      	cbnz	r3, 8005b9c <_free_r+0x2c>
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	6014      	str	r4, [r2, #0]
 8005b92:	4628      	mov	r0, r5
 8005b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b98:	f000 b8e2 	b.w	8005d60 <__malloc_unlock>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d908      	bls.n	8005bb2 <_free_r+0x42>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	1821      	adds	r1, r4, r0
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf01      	itttt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	1809      	addeq	r1, r1, r0
 8005bae:	6021      	streq	r1, [r4, #0]
 8005bb0:	e7ed      	b.n	8005b8e <_free_r+0x1e>
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b10b      	cbz	r3, 8005bbc <_free_r+0x4c>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d9fa      	bls.n	8005bb2 <_free_r+0x42>
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	1850      	adds	r0, r2, r1
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	d10b      	bne.n	8005bdc <_free_r+0x6c>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	1850      	adds	r0, r2, r1
 8005bca:	4283      	cmp	r3, r0
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	d1e0      	bne.n	8005b92 <_free_r+0x22>
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	4408      	add	r0, r1
 8005bd6:	6010      	str	r0, [r2, #0]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	e7da      	b.n	8005b92 <_free_r+0x22>
 8005bdc:	d902      	bls.n	8005be4 <_free_r+0x74>
 8005bde:	230c      	movs	r3, #12
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	e7d6      	b.n	8005b92 <_free_r+0x22>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	1821      	adds	r1, r4, r0
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf01      	itttt	eq
 8005bec:	6819      	ldreq	r1, [r3, #0]
 8005bee:	685b      	ldreq	r3, [r3, #4]
 8005bf0:	1809      	addeq	r1, r1, r0
 8005bf2:	6021      	streq	r1, [r4, #0]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	6054      	str	r4, [r2, #4]
 8005bf8:	e7cb      	b.n	8005b92 <_free_r+0x22>
 8005bfa:	bd38      	pop	{r3, r4, r5, pc}
 8005bfc:	200003fc 	.word	0x200003fc

08005c00 <malloc>:
 8005c00:	4b02      	ldr	r3, [pc, #8]	@ (8005c0c <malloc+0xc>)
 8005c02:	4601      	mov	r1, r0
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	f000 b825 	b.w	8005c54 <_malloc_r>
 8005c0a:	bf00      	nop
 8005c0c:	20000018 	.word	0x20000018

08005c10 <sbrk_aligned>:
 8005c10:	b570      	push	{r4, r5, r6, lr}
 8005c12:	4e0f      	ldr	r6, [pc, #60]	@ (8005c50 <sbrk_aligned+0x40>)
 8005c14:	460c      	mov	r4, r1
 8005c16:	6831      	ldr	r1, [r6, #0]
 8005c18:	4605      	mov	r5, r0
 8005c1a:	b911      	cbnz	r1, 8005c22 <sbrk_aligned+0x12>
 8005c1c:	f000 fe40 	bl	80068a0 <_sbrk_r>
 8005c20:	6030      	str	r0, [r6, #0]
 8005c22:	4621      	mov	r1, r4
 8005c24:	4628      	mov	r0, r5
 8005c26:	f000 fe3b 	bl	80068a0 <_sbrk_r>
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	d103      	bne.n	8005c36 <sbrk_aligned+0x26>
 8005c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c32:	4620      	mov	r0, r4
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	1cc4      	adds	r4, r0, #3
 8005c38:	f024 0403 	bic.w	r4, r4, #3
 8005c3c:	42a0      	cmp	r0, r4
 8005c3e:	d0f8      	beq.n	8005c32 <sbrk_aligned+0x22>
 8005c40:	1a21      	subs	r1, r4, r0
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 fe2c 	bl	80068a0 <_sbrk_r>
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d1f2      	bne.n	8005c32 <sbrk_aligned+0x22>
 8005c4c:	e7ef      	b.n	8005c2e <sbrk_aligned+0x1e>
 8005c4e:	bf00      	nop
 8005c50:	200003f8 	.word	0x200003f8

08005c54 <_malloc_r>:
 8005c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c58:	1ccd      	adds	r5, r1, #3
 8005c5a:	f025 0503 	bic.w	r5, r5, #3
 8005c5e:	3508      	adds	r5, #8
 8005c60:	2d0c      	cmp	r5, #12
 8005c62:	bf38      	it	cc
 8005c64:	250c      	movcc	r5, #12
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	4606      	mov	r6, r0
 8005c6a:	db01      	blt.n	8005c70 <_malloc_r+0x1c>
 8005c6c:	42a9      	cmp	r1, r5
 8005c6e:	d904      	bls.n	8005c7a <_malloc_r+0x26>
 8005c70:	230c      	movs	r3, #12
 8005c72:	6033      	str	r3, [r6, #0]
 8005c74:	2000      	movs	r0, #0
 8005c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d50 <_malloc_r+0xfc>
 8005c7e:	f000 f869 	bl	8005d54 <__malloc_lock>
 8005c82:	f8d8 3000 	ldr.w	r3, [r8]
 8005c86:	461c      	mov	r4, r3
 8005c88:	bb44      	cbnz	r4, 8005cdc <_malloc_r+0x88>
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	f7ff ffbf 	bl	8005c10 <sbrk_aligned>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	4604      	mov	r4, r0
 8005c96:	d158      	bne.n	8005d4a <_malloc_r+0xf6>
 8005c98:	f8d8 4000 	ldr.w	r4, [r8]
 8005c9c:	4627      	mov	r7, r4
 8005c9e:	2f00      	cmp	r7, #0
 8005ca0:	d143      	bne.n	8005d2a <_malloc_r+0xd6>
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	d04b      	beq.n	8005d3e <_malloc_r+0xea>
 8005ca6:	6823      	ldr	r3, [r4, #0]
 8005ca8:	4639      	mov	r1, r7
 8005caa:	4630      	mov	r0, r6
 8005cac:	eb04 0903 	add.w	r9, r4, r3
 8005cb0:	f000 fdf6 	bl	80068a0 <_sbrk_r>
 8005cb4:	4581      	cmp	r9, r0
 8005cb6:	d142      	bne.n	8005d3e <_malloc_r+0xea>
 8005cb8:	6821      	ldr	r1, [r4, #0]
 8005cba:	4630      	mov	r0, r6
 8005cbc:	1a6d      	subs	r5, r5, r1
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	f7ff ffa6 	bl	8005c10 <sbrk_aligned>
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d03a      	beq.n	8005d3e <_malloc_r+0xea>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	442b      	add	r3, r5
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	bb62      	cbnz	r2, 8005d30 <_malloc_r+0xdc>
 8005cd6:	f8c8 7000 	str.w	r7, [r8]
 8005cda:	e00f      	b.n	8005cfc <_malloc_r+0xa8>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	1b52      	subs	r2, r2, r5
 8005ce0:	d420      	bmi.n	8005d24 <_malloc_r+0xd0>
 8005ce2:	2a0b      	cmp	r2, #11
 8005ce4:	d917      	bls.n	8005d16 <_malloc_r+0xc2>
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	6025      	str	r5, [r4, #0]
 8005cec:	bf18      	it	ne
 8005cee:	6059      	strne	r1, [r3, #4]
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	bf08      	it	eq
 8005cf4:	f8c8 1000 	streq.w	r1, [r8]
 8005cf8:	5162      	str	r2, [r4, r5]
 8005cfa:	604b      	str	r3, [r1, #4]
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f000 f82f 	bl	8005d60 <__malloc_unlock>
 8005d02:	f104 000b 	add.w	r0, r4, #11
 8005d06:	1d23      	adds	r3, r4, #4
 8005d08:	f020 0007 	bic.w	r0, r0, #7
 8005d0c:	1ac2      	subs	r2, r0, r3
 8005d0e:	bf1c      	itt	ne
 8005d10:	1a1b      	subne	r3, r3, r0
 8005d12:	50a3      	strne	r3, [r4, r2]
 8005d14:	e7af      	b.n	8005c76 <_malloc_r+0x22>
 8005d16:	6862      	ldr	r2, [r4, #4]
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	bf0c      	ite	eq
 8005d1c:	f8c8 2000 	streq.w	r2, [r8]
 8005d20:	605a      	strne	r2, [r3, #4]
 8005d22:	e7eb      	b.n	8005cfc <_malloc_r+0xa8>
 8005d24:	4623      	mov	r3, r4
 8005d26:	6864      	ldr	r4, [r4, #4]
 8005d28:	e7ae      	b.n	8005c88 <_malloc_r+0x34>
 8005d2a:	463c      	mov	r4, r7
 8005d2c:	687f      	ldr	r7, [r7, #4]
 8005d2e:	e7b6      	b.n	8005c9e <_malloc_r+0x4a>
 8005d30:	461a      	mov	r2, r3
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	d1fb      	bne.n	8005d30 <_malloc_r+0xdc>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6053      	str	r3, [r2, #4]
 8005d3c:	e7de      	b.n	8005cfc <_malloc_r+0xa8>
 8005d3e:	230c      	movs	r3, #12
 8005d40:	4630      	mov	r0, r6
 8005d42:	6033      	str	r3, [r6, #0]
 8005d44:	f000 f80c 	bl	8005d60 <__malloc_unlock>
 8005d48:	e794      	b.n	8005c74 <_malloc_r+0x20>
 8005d4a:	6005      	str	r5, [r0, #0]
 8005d4c:	e7d6      	b.n	8005cfc <_malloc_r+0xa8>
 8005d4e:	bf00      	nop
 8005d50:	200003fc 	.word	0x200003fc

08005d54 <__malloc_lock>:
 8005d54:	4801      	ldr	r0, [pc, #4]	@ (8005d5c <__malloc_lock+0x8>)
 8005d56:	f7ff b8a8 	b.w	8004eaa <__retarget_lock_acquire_recursive>
 8005d5a:	bf00      	nop
 8005d5c:	200003f4 	.word	0x200003f4

08005d60 <__malloc_unlock>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__malloc_unlock+0x8>)
 8005d62:	f7ff b8a3 	b.w	8004eac <__retarget_lock_release_recursive>
 8005d66:	bf00      	nop
 8005d68:	200003f4 	.word	0x200003f4

08005d6c <_Balloc>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	69c6      	ldr	r6, [r0, #28]
 8005d70:	4604      	mov	r4, r0
 8005d72:	460d      	mov	r5, r1
 8005d74:	b976      	cbnz	r6, 8005d94 <_Balloc+0x28>
 8005d76:	2010      	movs	r0, #16
 8005d78:	f7ff ff42 	bl	8005c00 <malloc>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	61e0      	str	r0, [r4, #28]
 8005d80:	b920      	cbnz	r0, 8005d8c <_Balloc+0x20>
 8005d82:	216b      	movs	r1, #107	@ 0x6b
 8005d84:	4b17      	ldr	r3, [pc, #92]	@ (8005de4 <_Balloc+0x78>)
 8005d86:	4818      	ldr	r0, [pc, #96]	@ (8005de8 <_Balloc+0x7c>)
 8005d88:	f000 fda8 	bl	80068dc <__assert_func>
 8005d8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d90:	6006      	str	r6, [r0, #0]
 8005d92:	60c6      	str	r6, [r0, #12]
 8005d94:	69e6      	ldr	r6, [r4, #28]
 8005d96:	68f3      	ldr	r3, [r6, #12]
 8005d98:	b183      	cbz	r3, 8005dbc <_Balloc+0x50>
 8005d9a:	69e3      	ldr	r3, [r4, #28]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005da2:	b9b8      	cbnz	r0, 8005dd4 <_Balloc+0x68>
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f605 	lsl.w	r6, r1, r5
 8005daa:	1d72      	adds	r2, r6, #5
 8005dac:	4620      	mov	r0, r4
 8005dae:	0092      	lsls	r2, r2, #2
 8005db0:	f000 fdb2 	bl	8006918 <_calloc_r>
 8005db4:	b160      	cbz	r0, 8005dd0 <_Balloc+0x64>
 8005db6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005dba:	e00e      	b.n	8005dda <_Balloc+0x6e>
 8005dbc:	2221      	movs	r2, #33	@ 0x21
 8005dbe:	2104      	movs	r1, #4
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fda9 	bl	8006918 <_calloc_r>
 8005dc6:	69e3      	ldr	r3, [r4, #28]
 8005dc8:	60f0      	str	r0, [r6, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e4      	bne.n	8005d9a <_Balloc+0x2e>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	6802      	ldr	r2, [r0, #0]
 8005dd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005de0:	e7f7      	b.n	8005dd2 <_Balloc+0x66>
 8005de2:	bf00      	nop
 8005de4:	08007033 	.word	0x08007033
 8005de8:	080070b3 	.word	0x080070b3

08005dec <_Bfree>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	69c6      	ldr	r6, [r0, #28]
 8005df0:	4605      	mov	r5, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	b976      	cbnz	r6, 8005e14 <_Bfree+0x28>
 8005df6:	2010      	movs	r0, #16
 8005df8:	f7ff ff02 	bl	8005c00 <malloc>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	61e8      	str	r0, [r5, #28]
 8005e00:	b920      	cbnz	r0, 8005e0c <_Bfree+0x20>
 8005e02:	218f      	movs	r1, #143	@ 0x8f
 8005e04:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <_Bfree+0x3c>)
 8005e06:	4809      	ldr	r0, [pc, #36]	@ (8005e2c <_Bfree+0x40>)
 8005e08:	f000 fd68 	bl	80068dc <__assert_func>
 8005e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e10:	6006      	str	r6, [r0, #0]
 8005e12:	60c6      	str	r6, [r0, #12]
 8005e14:	b13c      	cbz	r4, 8005e26 <_Bfree+0x3a>
 8005e16:	69eb      	ldr	r3, [r5, #28]
 8005e18:	6862      	ldr	r2, [r4, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e20:	6021      	str	r1, [r4, #0]
 8005e22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	08007033 	.word	0x08007033
 8005e2c:	080070b3 	.word	0x080070b3

08005e30 <__multadd>:
 8005e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e34:	4607      	mov	r7, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	461e      	mov	r6, r3
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	690d      	ldr	r5, [r1, #16]
 8005e3e:	f101 0c14 	add.w	ip, r1, #20
 8005e42:	f8dc 3000 	ldr.w	r3, [ip]
 8005e46:	3001      	adds	r0, #1
 8005e48:	b299      	uxth	r1, r3
 8005e4a:	fb02 6101 	mla	r1, r2, r1, r6
 8005e4e:	0c1e      	lsrs	r6, r3, #16
 8005e50:	0c0b      	lsrs	r3, r1, #16
 8005e52:	fb02 3306 	mla	r3, r2, r6, r3
 8005e56:	b289      	uxth	r1, r1
 8005e58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e5c:	4285      	cmp	r5, r0
 8005e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e62:	f84c 1b04 	str.w	r1, [ip], #4
 8005e66:	dcec      	bgt.n	8005e42 <__multadd+0x12>
 8005e68:	b30e      	cbz	r6, 8005eae <__multadd+0x7e>
 8005e6a:	68a3      	ldr	r3, [r4, #8]
 8005e6c:	42ab      	cmp	r3, r5
 8005e6e:	dc19      	bgt.n	8005ea4 <__multadd+0x74>
 8005e70:	6861      	ldr	r1, [r4, #4]
 8005e72:	4638      	mov	r0, r7
 8005e74:	3101      	adds	r1, #1
 8005e76:	f7ff ff79 	bl	8005d6c <_Balloc>
 8005e7a:	4680      	mov	r8, r0
 8005e7c:	b928      	cbnz	r0, 8005e8a <__multadd+0x5a>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	21ba      	movs	r1, #186	@ 0xba
 8005e82:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb4 <__multadd+0x84>)
 8005e84:	480c      	ldr	r0, [pc, #48]	@ (8005eb8 <__multadd+0x88>)
 8005e86:	f000 fd29 	bl	80068dc <__assert_func>
 8005e8a:	6922      	ldr	r2, [r4, #16]
 8005e8c:	f104 010c 	add.w	r1, r4, #12
 8005e90:	3202      	adds	r2, #2
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	300c      	adds	r0, #12
 8005e96:	f000 fd13 	bl	80068c0 <memcpy>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff ffa5 	bl	8005dec <_Bfree>
 8005ea2:	4644      	mov	r4, r8
 8005ea4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	615e      	str	r6, [r3, #20]
 8005eac:	6125      	str	r5, [r4, #16]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb4:	080070a2 	.word	0x080070a2
 8005eb8:	080070b3 	.word	0x080070b3

08005ebc <__hi0bits>:
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ec2:	bf3a      	itte	cc
 8005ec4:	0403      	lslcc	r3, r0, #16
 8005ec6:	2010      	movcc	r0, #16
 8005ec8:	2000      	movcs	r0, #0
 8005eca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ece:	bf3c      	itt	cc
 8005ed0:	021b      	lslcc	r3, r3, #8
 8005ed2:	3008      	addcc	r0, #8
 8005ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ed8:	bf3c      	itt	cc
 8005eda:	011b      	lslcc	r3, r3, #4
 8005edc:	3004      	addcc	r0, #4
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee2:	bf3c      	itt	cc
 8005ee4:	009b      	lslcc	r3, r3, #2
 8005ee6:	3002      	addcc	r0, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db05      	blt.n	8005ef8 <__hi0bits+0x3c>
 8005eec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ef0:	f100 0001 	add.w	r0, r0, #1
 8005ef4:	bf08      	it	eq
 8005ef6:	2020      	moveq	r0, #32
 8005ef8:	4770      	bx	lr

08005efa <__lo0bits>:
 8005efa:	6803      	ldr	r3, [r0, #0]
 8005efc:	4602      	mov	r2, r0
 8005efe:	f013 0007 	ands.w	r0, r3, #7
 8005f02:	d00b      	beq.n	8005f1c <__lo0bits+0x22>
 8005f04:	07d9      	lsls	r1, r3, #31
 8005f06:	d421      	bmi.n	8005f4c <__lo0bits+0x52>
 8005f08:	0798      	lsls	r0, r3, #30
 8005f0a:	bf49      	itett	mi
 8005f0c:	085b      	lsrmi	r3, r3, #1
 8005f0e:	089b      	lsrpl	r3, r3, #2
 8005f10:	2001      	movmi	r0, #1
 8005f12:	6013      	strmi	r3, [r2, #0]
 8005f14:	bf5c      	itt	pl
 8005f16:	2002      	movpl	r0, #2
 8005f18:	6013      	strpl	r3, [r2, #0]
 8005f1a:	4770      	bx	lr
 8005f1c:	b299      	uxth	r1, r3
 8005f1e:	b909      	cbnz	r1, 8005f24 <__lo0bits+0x2a>
 8005f20:	2010      	movs	r0, #16
 8005f22:	0c1b      	lsrs	r3, r3, #16
 8005f24:	b2d9      	uxtb	r1, r3
 8005f26:	b909      	cbnz	r1, 8005f2c <__lo0bits+0x32>
 8005f28:	3008      	adds	r0, #8
 8005f2a:	0a1b      	lsrs	r3, r3, #8
 8005f2c:	0719      	lsls	r1, r3, #28
 8005f2e:	bf04      	itt	eq
 8005f30:	091b      	lsreq	r3, r3, #4
 8005f32:	3004      	addeq	r0, #4
 8005f34:	0799      	lsls	r1, r3, #30
 8005f36:	bf04      	itt	eq
 8005f38:	089b      	lsreq	r3, r3, #2
 8005f3a:	3002      	addeq	r0, #2
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	d403      	bmi.n	8005f48 <__lo0bits+0x4e>
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	f100 0001 	add.w	r0, r0, #1
 8005f46:	d003      	beq.n	8005f50 <__lo0bits+0x56>
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4770      	bx	lr
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	4770      	bx	lr
 8005f50:	2020      	movs	r0, #32
 8005f52:	4770      	bx	lr

08005f54 <__i2b>:
 8005f54:	b510      	push	{r4, lr}
 8005f56:	460c      	mov	r4, r1
 8005f58:	2101      	movs	r1, #1
 8005f5a:	f7ff ff07 	bl	8005d6c <_Balloc>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	b928      	cbnz	r0, 8005f6e <__i2b+0x1a>
 8005f62:	f240 1145 	movw	r1, #325	@ 0x145
 8005f66:	4b04      	ldr	r3, [pc, #16]	@ (8005f78 <__i2b+0x24>)
 8005f68:	4804      	ldr	r0, [pc, #16]	@ (8005f7c <__i2b+0x28>)
 8005f6a:	f000 fcb7 	bl	80068dc <__assert_func>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	6144      	str	r4, [r0, #20]
 8005f72:	6103      	str	r3, [r0, #16]
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	bf00      	nop
 8005f78:	080070a2 	.word	0x080070a2
 8005f7c:	080070b3 	.word	0x080070b3

08005f80 <__multiply>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	4614      	mov	r4, r2
 8005f86:	690a      	ldr	r2, [r1, #16]
 8005f88:	6923      	ldr	r3, [r4, #16]
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	bfa2      	ittt	ge
 8005f90:	4623      	movge	r3, r4
 8005f92:	460c      	movge	r4, r1
 8005f94:	461f      	movge	r7, r3
 8005f96:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005f9a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	6861      	ldr	r1, [r4, #4]
 8005fa2:	eb0a 0609 	add.w	r6, sl, r9
 8005fa6:	42b3      	cmp	r3, r6
 8005fa8:	b085      	sub	sp, #20
 8005faa:	bfb8      	it	lt
 8005fac:	3101      	addlt	r1, #1
 8005fae:	f7ff fedd 	bl	8005d6c <_Balloc>
 8005fb2:	b930      	cbnz	r0, 8005fc2 <__multiply+0x42>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fba:	4b43      	ldr	r3, [pc, #268]	@ (80060c8 <__multiply+0x148>)
 8005fbc:	4843      	ldr	r0, [pc, #268]	@ (80060cc <__multiply+0x14c>)
 8005fbe:	f000 fc8d 	bl	80068dc <__assert_func>
 8005fc2:	f100 0514 	add.w	r5, r0, #20
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	2200      	movs	r2, #0
 8005fca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fce:	4543      	cmp	r3, r8
 8005fd0:	d321      	bcc.n	8006016 <__multiply+0x96>
 8005fd2:	f107 0114 	add.w	r1, r7, #20
 8005fd6:	f104 0214 	add.w	r2, r4, #20
 8005fda:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005fde:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005fe2:	9302      	str	r3, [sp, #8]
 8005fe4:	1b13      	subs	r3, r2, r4
 8005fe6:	3b15      	subs	r3, #21
 8005fe8:	f023 0303 	bic.w	r3, r3, #3
 8005fec:	3304      	adds	r3, #4
 8005fee:	f104 0715 	add.w	r7, r4, #21
 8005ff2:	42ba      	cmp	r2, r7
 8005ff4:	bf38      	it	cc
 8005ff6:	2304      	movcc	r3, #4
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	9103      	str	r1, [sp, #12]
 8005ffe:	428b      	cmp	r3, r1
 8006000:	d80c      	bhi.n	800601c <__multiply+0x9c>
 8006002:	2e00      	cmp	r6, #0
 8006004:	dd03      	ble.n	800600e <__multiply+0x8e>
 8006006:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800600a:	2b00      	cmp	r3, #0
 800600c:	d05a      	beq.n	80060c4 <__multiply+0x144>
 800600e:	6106      	str	r6, [r0, #16]
 8006010:	b005      	add	sp, #20
 8006012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	f843 2b04 	str.w	r2, [r3], #4
 800601a:	e7d8      	b.n	8005fce <__multiply+0x4e>
 800601c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006020:	f1ba 0f00 	cmp.w	sl, #0
 8006024:	d023      	beq.n	800606e <__multiply+0xee>
 8006026:	46a9      	mov	r9, r5
 8006028:	f04f 0c00 	mov.w	ip, #0
 800602c:	f104 0e14 	add.w	lr, r4, #20
 8006030:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006034:	f8d9 3000 	ldr.w	r3, [r9]
 8006038:	fa1f fb87 	uxth.w	fp, r7
 800603c:	b29b      	uxth	r3, r3
 800603e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006042:	4463      	add	r3, ip
 8006044:	f8d9 c000 	ldr.w	ip, [r9]
 8006048:	0c3f      	lsrs	r7, r7, #16
 800604a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800604e:	fb0a c707 	mla	r7, sl, r7, ip
 8006052:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006056:	b29b      	uxth	r3, r3
 8006058:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800605c:	4572      	cmp	r2, lr
 800605e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006062:	f849 3b04 	str.w	r3, [r9], #4
 8006066:	d8e3      	bhi.n	8006030 <__multiply+0xb0>
 8006068:	9b01      	ldr	r3, [sp, #4]
 800606a:	f845 c003 	str.w	ip, [r5, r3]
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	3104      	adds	r1, #4
 8006072:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006076:	f1b9 0f00 	cmp.w	r9, #0
 800607a:	d021      	beq.n	80060c0 <__multiply+0x140>
 800607c:	46ae      	mov	lr, r5
 800607e:	f04f 0a00 	mov.w	sl, #0
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	f104 0c14 	add.w	ip, r4, #20
 8006088:	f8bc b000 	ldrh.w	fp, [ip]
 800608c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006090:	b29b      	uxth	r3, r3
 8006092:	fb09 770b 	mla	r7, r9, fp, r7
 8006096:	4457      	add	r7, sl
 8006098:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800609c:	f84e 3b04 	str.w	r3, [lr], #4
 80060a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060a8:	f8be 3000 	ldrh.w	r3, [lr]
 80060ac:	4562      	cmp	r2, ip
 80060ae:	fb09 330a 	mla	r3, r9, sl, r3
 80060b2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80060b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ba:	d8e5      	bhi.n	8006088 <__multiply+0x108>
 80060bc:	9f01      	ldr	r7, [sp, #4]
 80060be:	51eb      	str	r3, [r5, r7]
 80060c0:	3504      	adds	r5, #4
 80060c2:	e79a      	b.n	8005ffa <__multiply+0x7a>
 80060c4:	3e01      	subs	r6, #1
 80060c6:	e79c      	b.n	8006002 <__multiply+0x82>
 80060c8:	080070a2 	.word	0x080070a2
 80060cc:	080070b3 	.word	0x080070b3

080060d0 <__pow5mult>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	4615      	mov	r5, r2
 80060d6:	f012 0203 	ands.w	r2, r2, #3
 80060da:	4607      	mov	r7, r0
 80060dc:	460e      	mov	r6, r1
 80060de:	d007      	beq.n	80060f0 <__pow5mult+0x20>
 80060e0:	4c25      	ldr	r4, [pc, #148]	@ (8006178 <__pow5mult+0xa8>)
 80060e2:	3a01      	subs	r2, #1
 80060e4:	2300      	movs	r3, #0
 80060e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ea:	f7ff fea1 	bl	8005e30 <__multadd>
 80060ee:	4606      	mov	r6, r0
 80060f0:	10ad      	asrs	r5, r5, #2
 80060f2:	d03d      	beq.n	8006170 <__pow5mult+0xa0>
 80060f4:	69fc      	ldr	r4, [r7, #28]
 80060f6:	b97c      	cbnz	r4, 8006118 <__pow5mult+0x48>
 80060f8:	2010      	movs	r0, #16
 80060fa:	f7ff fd81 	bl	8005c00 <malloc>
 80060fe:	4602      	mov	r2, r0
 8006100:	61f8      	str	r0, [r7, #28]
 8006102:	b928      	cbnz	r0, 8006110 <__pow5mult+0x40>
 8006104:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006108:	4b1c      	ldr	r3, [pc, #112]	@ (800617c <__pow5mult+0xac>)
 800610a:	481d      	ldr	r0, [pc, #116]	@ (8006180 <__pow5mult+0xb0>)
 800610c:	f000 fbe6 	bl	80068dc <__assert_func>
 8006110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006114:	6004      	str	r4, [r0, #0]
 8006116:	60c4      	str	r4, [r0, #12]
 8006118:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800611c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006120:	b94c      	cbnz	r4, 8006136 <__pow5mult+0x66>
 8006122:	f240 2171 	movw	r1, #625	@ 0x271
 8006126:	4638      	mov	r0, r7
 8006128:	f7ff ff14 	bl	8005f54 <__i2b>
 800612c:	2300      	movs	r3, #0
 800612e:	4604      	mov	r4, r0
 8006130:	f8c8 0008 	str.w	r0, [r8, #8]
 8006134:	6003      	str	r3, [r0, #0]
 8006136:	f04f 0900 	mov.w	r9, #0
 800613a:	07eb      	lsls	r3, r5, #31
 800613c:	d50a      	bpl.n	8006154 <__pow5mult+0x84>
 800613e:	4631      	mov	r1, r6
 8006140:	4622      	mov	r2, r4
 8006142:	4638      	mov	r0, r7
 8006144:	f7ff ff1c 	bl	8005f80 <__multiply>
 8006148:	4680      	mov	r8, r0
 800614a:	4631      	mov	r1, r6
 800614c:	4638      	mov	r0, r7
 800614e:	f7ff fe4d 	bl	8005dec <_Bfree>
 8006152:	4646      	mov	r6, r8
 8006154:	106d      	asrs	r5, r5, #1
 8006156:	d00b      	beq.n	8006170 <__pow5mult+0xa0>
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	b938      	cbnz	r0, 800616c <__pow5mult+0x9c>
 800615c:	4622      	mov	r2, r4
 800615e:	4621      	mov	r1, r4
 8006160:	4638      	mov	r0, r7
 8006162:	f7ff ff0d 	bl	8005f80 <__multiply>
 8006166:	6020      	str	r0, [r4, #0]
 8006168:	f8c0 9000 	str.w	r9, [r0]
 800616c:	4604      	mov	r4, r0
 800616e:	e7e4      	b.n	800613a <__pow5mult+0x6a>
 8006170:	4630      	mov	r0, r6
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	bf00      	nop
 8006178:	0800710c 	.word	0x0800710c
 800617c:	08007033 	.word	0x08007033
 8006180:	080070b3 	.word	0x080070b3

08006184 <__lshift>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	460c      	mov	r4, r1
 800618a:	4607      	mov	r7, r0
 800618c:	4691      	mov	r9, r2
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	6849      	ldr	r1, [r1, #4]
 8006192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800619c:	f108 0601 	add.w	r6, r8, #1
 80061a0:	42b3      	cmp	r3, r6
 80061a2:	db0b      	blt.n	80061bc <__lshift+0x38>
 80061a4:	4638      	mov	r0, r7
 80061a6:	f7ff fde1 	bl	8005d6c <_Balloc>
 80061aa:	4605      	mov	r5, r0
 80061ac:	b948      	cbnz	r0, 80061c2 <__lshift+0x3e>
 80061ae:	4602      	mov	r2, r0
 80061b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061b4:	4b27      	ldr	r3, [pc, #156]	@ (8006254 <__lshift+0xd0>)
 80061b6:	4828      	ldr	r0, [pc, #160]	@ (8006258 <__lshift+0xd4>)
 80061b8:	f000 fb90 	bl	80068dc <__assert_func>
 80061bc:	3101      	adds	r1, #1
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	e7ee      	b.n	80061a0 <__lshift+0x1c>
 80061c2:	2300      	movs	r3, #0
 80061c4:	f100 0114 	add.w	r1, r0, #20
 80061c8:	f100 0210 	add.w	r2, r0, #16
 80061cc:	4618      	mov	r0, r3
 80061ce:	4553      	cmp	r3, sl
 80061d0:	db33      	blt.n	800623a <__lshift+0xb6>
 80061d2:	6920      	ldr	r0, [r4, #16]
 80061d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061d8:	f104 0314 	add.w	r3, r4, #20
 80061dc:	f019 091f 	ands.w	r9, r9, #31
 80061e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061e8:	d02b      	beq.n	8006242 <__lshift+0xbe>
 80061ea:	468a      	mov	sl, r1
 80061ec:	2200      	movs	r2, #0
 80061ee:	f1c9 0e20 	rsb	lr, r9, #32
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	fa00 f009 	lsl.w	r0, r0, r9
 80061f8:	4310      	orrs	r0, r2
 80061fa:	f84a 0b04 	str.w	r0, [sl], #4
 80061fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006202:	459c      	cmp	ip, r3
 8006204:	fa22 f20e 	lsr.w	r2, r2, lr
 8006208:	d8f3      	bhi.n	80061f2 <__lshift+0x6e>
 800620a:	ebac 0304 	sub.w	r3, ip, r4
 800620e:	3b15      	subs	r3, #21
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	3304      	adds	r3, #4
 8006216:	f104 0015 	add.w	r0, r4, #21
 800621a:	4584      	cmp	ip, r0
 800621c:	bf38      	it	cc
 800621e:	2304      	movcc	r3, #4
 8006220:	50ca      	str	r2, [r1, r3]
 8006222:	b10a      	cbz	r2, 8006228 <__lshift+0xa4>
 8006224:	f108 0602 	add.w	r6, r8, #2
 8006228:	3e01      	subs	r6, #1
 800622a:	4638      	mov	r0, r7
 800622c:	4621      	mov	r1, r4
 800622e:	612e      	str	r6, [r5, #16]
 8006230:	f7ff fddc 	bl	8005dec <_Bfree>
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	f842 0f04 	str.w	r0, [r2, #4]!
 800623e:	3301      	adds	r3, #1
 8006240:	e7c5      	b.n	80061ce <__lshift+0x4a>
 8006242:	3904      	subs	r1, #4
 8006244:	f853 2b04 	ldr.w	r2, [r3], #4
 8006248:	459c      	cmp	ip, r3
 800624a:	f841 2f04 	str.w	r2, [r1, #4]!
 800624e:	d8f9      	bhi.n	8006244 <__lshift+0xc0>
 8006250:	e7ea      	b.n	8006228 <__lshift+0xa4>
 8006252:	bf00      	nop
 8006254:	080070a2 	.word	0x080070a2
 8006258:	080070b3 	.word	0x080070b3

0800625c <__mcmp>:
 800625c:	4603      	mov	r3, r0
 800625e:	690a      	ldr	r2, [r1, #16]
 8006260:	6900      	ldr	r0, [r0, #16]
 8006262:	b530      	push	{r4, r5, lr}
 8006264:	1a80      	subs	r0, r0, r2
 8006266:	d10e      	bne.n	8006286 <__mcmp+0x2a>
 8006268:	3314      	adds	r3, #20
 800626a:	3114      	adds	r1, #20
 800626c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006270:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006274:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006278:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800627c:	4295      	cmp	r5, r2
 800627e:	d003      	beq.n	8006288 <__mcmp+0x2c>
 8006280:	d205      	bcs.n	800628e <__mcmp+0x32>
 8006282:	f04f 30ff 	mov.w	r0, #4294967295
 8006286:	bd30      	pop	{r4, r5, pc}
 8006288:	42a3      	cmp	r3, r4
 800628a:	d3f3      	bcc.n	8006274 <__mcmp+0x18>
 800628c:	e7fb      	b.n	8006286 <__mcmp+0x2a>
 800628e:	2001      	movs	r0, #1
 8006290:	e7f9      	b.n	8006286 <__mcmp+0x2a>
	...

08006294 <__mdiff>:
 8006294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006298:	4689      	mov	r9, r1
 800629a:	4606      	mov	r6, r0
 800629c:	4611      	mov	r1, r2
 800629e:	4648      	mov	r0, r9
 80062a0:	4614      	mov	r4, r2
 80062a2:	f7ff ffdb 	bl	800625c <__mcmp>
 80062a6:	1e05      	subs	r5, r0, #0
 80062a8:	d112      	bne.n	80062d0 <__mdiff+0x3c>
 80062aa:	4629      	mov	r1, r5
 80062ac:	4630      	mov	r0, r6
 80062ae:	f7ff fd5d 	bl	8005d6c <_Balloc>
 80062b2:	4602      	mov	r2, r0
 80062b4:	b928      	cbnz	r0, 80062c2 <__mdiff+0x2e>
 80062b6:	f240 2137 	movw	r1, #567	@ 0x237
 80062ba:	4b3e      	ldr	r3, [pc, #248]	@ (80063b4 <__mdiff+0x120>)
 80062bc:	483e      	ldr	r0, [pc, #248]	@ (80063b8 <__mdiff+0x124>)
 80062be:	f000 fb0d 	bl	80068dc <__assert_func>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062c8:	4610      	mov	r0, r2
 80062ca:	b003      	add	sp, #12
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	bfbc      	itt	lt
 80062d2:	464b      	movlt	r3, r9
 80062d4:	46a1      	movlt	r9, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062dc:	bfba      	itte	lt
 80062de:	461c      	movlt	r4, r3
 80062e0:	2501      	movlt	r5, #1
 80062e2:	2500      	movge	r5, #0
 80062e4:	f7ff fd42 	bl	8005d6c <_Balloc>
 80062e8:	4602      	mov	r2, r0
 80062ea:	b918      	cbnz	r0, 80062f4 <__mdiff+0x60>
 80062ec:	f240 2145 	movw	r1, #581	@ 0x245
 80062f0:	4b30      	ldr	r3, [pc, #192]	@ (80063b4 <__mdiff+0x120>)
 80062f2:	e7e3      	b.n	80062bc <__mdiff+0x28>
 80062f4:	f100 0b14 	add.w	fp, r0, #20
 80062f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062fc:	f109 0310 	add.w	r3, r9, #16
 8006300:	60c5      	str	r5, [r0, #12]
 8006302:	f04f 0c00 	mov.w	ip, #0
 8006306:	f109 0514 	add.w	r5, r9, #20
 800630a:	46d9      	mov	r9, fp
 800630c:	6926      	ldr	r6, [r4, #16]
 800630e:	f104 0e14 	add.w	lr, r4, #20
 8006312:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006316:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800631a:	9301      	str	r3, [sp, #4]
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006322:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006326:	b281      	uxth	r1, r0
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	fa1f f38a 	uxth.w	r3, sl
 800632e:	1a5b      	subs	r3, r3, r1
 8006330:	0c00      	lsrs	r0, r0, #16
 8006332:	4463      	add	r3, ip
 8006334:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006338:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006342:	4576      	cmp	r6, lr
 8006344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006348:	f849 3b04 	str.w	r3, [r9], #4
 800634c:	d8e6      	bhi.n	800631c <__mdiff+0x88>
 800634e:	1b33      	subs	r3, r6, r4
 8006350:	3b15      	subs	r3, #21
 8006352:	f023 0303 	bic.w	r3, r3, #3
 8006356:	3415      	adds	r4, #21
 8006358:	3304      	adds	r3, #4
 800635a:	42a6      	cmp	r6, r4
 800635c:	bf38      	it	cc
 800635e:	2304      	movcc	r3, #4
 8006360:	441d      	add	r5, r3
 8006362:	445b      	add	r3, fp
 8006364:	461e      	mov	r6, r3
 8006366:	462c      	mov	r4, r5
 8006368:	4544      	cmp	r4, r8
 800636a:	d30e      	bcc.n	800638a <__mdiff+0xf6>
 800636c:	f108 0103 	add.w	r1, r8, #3
 8006370:	1b49      	subs	r1, r1, r5
 8006372:	f021 0103 	bic.w	r1, r1, #3
 8006376:	3d03      	subs	r5, #3
 8006378:	45a8      	cmp	r8, r5
 800637a:	bf38      	it	cc
 800637c:	2100      	movcc	r1, #0
 800637e:	440b      	add	r3, r1
 8006380:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006384:	b199      	cbz	r1, 80063ae <__mdiff+0x11a>
 8006386:	6117      	str	r7, [r2, #16]
 8006388:	e79e      	b.n	80062c8 <__mdiff+0x34>
 800638a:	46e6      	mov	lr, ip
 800638c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006390:	fa1f fc81 	uxth.w	ip, r1
 8006394:	44f4      	add	ip, lr
 8006396:	0c08      	lsrs	r0, r1, #16
 8006398:	4471      	add	r1, lr
 800639a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800639e:	b289      	uxth	r1, r1
 80063a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063a8:	f846 1b04 	str.w	r1, [r6], #4
 80063ac:	e7dc      	b.n	8006368 <__mdiff+0xd4>
 80063ae:	3f01      	subs	r7, #1
 80063b0:	e7e6      	b.n	8006380 <__mdiff+0xec>
 80063b2:	bf00      	nop
 80063b4:	080070a2 	.word	0x080070a2
 80063b8:	080070b3 	.word	0x080070b3

080063bc <__d2b>:
 80063bc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80063c0:	2101      	movs	r1, #1
 80063c2:	4690      	mov	r8, r2
 80063c4:	4699      	mov	r9, r3
 80063c6:	9e08      	ldr	r6, [sp, #32]
 80063c8:	f7ff fcd0 	bl	8005d6c <_Balloc>
 80063cc:	4604      	mov	r4, r0
 80063ce:	b930      	cbnz	r0, 80063de <__d2b+0x22>
 80063d0:	4602      	mov	r2, r0
 80063d2:	f240 310f 	movw	r1, #783	@ 0x30f
 80063d6:	4b23      	ldr	r3, [pc, #140]	@ (8006464 <__d2b+0xa8>)
 80063d8:	4823      	ldr	r0, [pc, #140]	@ (8006468 <__d2b+0xac>)
 80063da:	f000 fa7f 	bl	80068dc <__assert_func>
 80063de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063e6:	b10d      	cbz	r5, 80063ec <__d2b+0x30>
 80063e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	f1b8 0300 	subs.w	r3, r8, #0
 80063f2:	d024      	beq.n	800643e <__d2b+0x82>
 80063f4:	4668      	mov	r0, sp
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	f7ff fd7f 	bl	8005efa <__lo0bits>
 80063fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006400:	b1d8      	cbz	r0, 800643a <__d2b+0x7e>
 8006402:	f1c0 0320 	rsb	r3, r0, #32
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	430b      	orrs	r3, r1
 800640c:	40c2      	lsrs	r2, r0
 800640e:	6163      	str	r3, [r4, #20]
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	9b01      	ldr	r3, [sp, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	bf0c      	ite	eq
 8006418:	2201      	moveq	r2, #1
 800641a:	2202      	movne	r2, #2
 800641c:	61a3      	str	r3, [r4, #24]
 800641e:	6122      	str	r2, [r4, #16]
 8006420:	b1ad      	cbz	r5, 800644e <__d2b+0x92>
 8006422:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006426:	4405      	add	r5, r0
 8006428:	6035      	str	r5, [r6, #0]
 800642a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800642e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006430:	6018      	str	r0, [r3, #0]
 8006432:	4620      	mov	r0, r4
 8006434:	b002      	add	sp, #8
 8006436:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800643a:	6161      	str	r1, [r4, #20]
 800643c:	e7e9      	b.n	8006412 <__d2b+0x56>
 800643e:	a801      	add	r0, sp, #4
 8006440:	f7ff fd5b 	bl	8005efa <__lo0bits>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	6163      	str	r3, [r4, #20]
 800644a:	3020      	adds	r0, #32
 800644c:	e7e7      	b.n	800641e <__d2b+0x62>
 800644e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006452:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006456:	6030      	str	r0, [r6, #0]
 8006458:	6918      	ldr	r0, [r3, #16]
 800645a:	f7ff fd2f 	bl	8005ebc <__hi0bits>
 800645e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006462:	e7e4      	b.n	800642e <__d2b+0x72>
 8006464:	080070a2 	.word	0x080070a2
 8006468:	080070b3 	.word	0x080070b3

0800646c <__ssputs_r>:
 800646c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006470:	461f      	mov	r7, r3
 8006472:	688e      	ldr	r6, [r1, #8]
 8006474:	4682      	mov	sl, r0
 8006476:	42be      	cmp	r6, r7
 8006478:	460c      	mov	r4, r1
 800647a:	4690      	mov	r8, r2
 800647c:	680b      	ldr	r3, [r1, #0]
 800647e:	d82d      	bhi.n	80064dc <__ssputs_r+0x70>
 8006480:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006484:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006488:	d026      	beq.n	80064d8 <__ssputs_r+0x6c>
 800648a:	6965      	ldr	r5, [r4, #20]
 800648c:	6909      	ldr	r1, [r1, #16]
 800648e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006492:	eba3 0901 	sub.w	r9, r3, r1
 8006496:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800649a:	1c7b      	adds	r3, r7, #1
 800649c:	444b      	add	r3, r9
 800649e:	106d      	asrs	r5, r5, #1
 80064a0:	429d      	cmp	r5, r3
 80064a2:	bf38      	it	cc
 80064a4:	461d      	movcc	r5, r3
 80064a6:	0553      	lsls	r3, r2, #21
 80064a8:	d527      	bpl.n	80064fa <__ssputs_r+0x8e>
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7ff fbd2 	bl	8005c54 <_malloc_r>
 80064b0:	4606      	mov	r6, r0
 80064b2:	b360      	cbz	r0, 800650e <__ssputs_r+0xa2>
 80064b4:	464a      	mov	r2, r9
 80064b6:	6921      	ldr	r1, [r4, #16]
 80064b8:	f000 fa02 	bl	80068c0 <memcpy>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c6:	81a3      	strh	r3, [r4, #12]
 80064c8:	6126      	str	r6, [r4, #16]
 80064ca:	444e      	add	r6, r9
 80064cc:	6026      	str	r6, [r4, #0]
 80064ce:	463e      	mov	r6, r7
 80064d0:	6165      	str	r5, [r4, #20]
 80064d2:	eba5 0509 	sub.w	r5, r5, r9
 80064d6:	60a5      	str	r5, [r4, #8]
 80064d8:	42be      	cmp	r6, r7
 80064da:	d900      	bls.n	80064de <__ssputs_r+0x72>
 80064dc:	463e      	mov	r6, r7
 80064de:	4632      	mov	r2, r6
 80064e0:	4641      	mov	r1, r8
 80064e2:	6820      	ldr	r0, [r4, #0]
 80064e4:	f000 f9c2 	bl	800686c <memmove>
 80064e8:	2000      	movs	r0, #0
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	1b9b      	subs	r3, r3, r6
 80064ee:	60a3      	str	r3, [r4, #8]
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	4433      	add	r3, r6
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fa:	462a      	mov	r2, r5
 80064fc:	f000 fa32 	bl	8006964 <_realloc_r>
 8006500:	4606      	mov	r6, r0
 8006502:	2800      	cmp	r0, #0
 8006504:	d1e0      	bne.n	80064c8 <__ssputs_r+0x5c>
 8006506:	4650      	mov	r0, sl
 8006508:	6921      	ldr	r1, [r4, #16]
 800650a:	f7ff fb31 	bl	8005b70 <_free_r>
 800650e:	230c      	movs	r3, #12
 8006510:	f8ca 3000 	str.w	r3, [sl]
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	f04f 30ff 	mov.w	r0, #4294967295
 800651a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800651e:	81a3      	strh	r3, [r4, #12]
 8006520:	e7e9      	b.n	80064f6 <__ssputs_r+0x8a>
	...

08006524 <_svfiprintf_r>:
 8006524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006528:	4698      	mov	r8, r3
 800652a:	898b      	ldrh	r3, [r1, #12]
 800652c:	4607      	mov	r7, r0
 800652e:	061b      	lsls	r3, r3, #24
 8006530:	460d      	mov	r5, r1
 8006532:	4614      	mov	r4, r2
 8006534:	b09d      	sub	sp, #116	@ 0x74
 8006536:	d510      	bpl.n	800655a <_svfiprintf_r+0x36>
 8006538:	690b      	ldr	r3, [r1, #16]
 800653a:	b973      	cbnz	r3, 800655a <_svfiprintf_r+0x36>
 800653c:	2140      	movs	r1, #64	@ 0x40
 800653e:	f7ff fb89 	bl	8005c54 <_malloc_r>
 8006542:	6028      	str	r0, [r5, #0]
 8006544:	6128      	str	r0, [r5, #16]
 8006546:	b930      	cbnz	r0, 8006556 <_svfiprintf_r+0x32>
 8006548:	230c      	movs	r3, #12
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	b01d      	add	sp, #116	@ 0x74
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	2340      	movs	r3, #64	@ 0x40
 8006558:	616b      	str	r3, [r5, #20]
 800655a:	2300      	movs	r3, #0
 800655c:	9309      	str	r3, [sp, #36]	@ 0x24
 800655e:	2320      	movs	r3, #32
 8006560:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006564:	2330      	movs	r3, #48	@ 0x30
 8006566:	f04f 0901 	mov.w	r9, #1
 800656a:	f8cd 800c 	str.w	r8, [sp, #12]
 800656e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006708 <_svfiprintf_r+0x1e4>
 8006572:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006576:	4623      	mov	r3, r4
 8006578:	469a      	mov	sl, r3
 800657a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800657e:	b10a      	cbz	r2, 8006584 <_svfiprintf_r+0x60>
 8006580:	2a25      	cmp	r2, #37	@ 0x25
 8006582:	d1f9      	bne.n	8006578 <_svfiprintf_r+0x54>
 8006584:	ebba 0b04 	subs.w	fp, sl, r4
 8006588:	d00b      	beq.n	80065a2 <_svfiprintf_r+0x7e>
 800658a:	465b      	mov	r3, fp
 800658c:	4622      	mov	r2, r4
 800658e:	4629      	mov	r1, r5
 8006590:	4638      	mov	r0, r7
 8006592:	f7ff ff6b 	bl	800646c <__ssputs_r>
 8006596:	3001      	adds	r0, #1
 8006598:	f000 80a7 	beq.w	80066ea <_svfiprintf_r+0x1c6>
 800659c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800659e:	445a      	add	r2, fp
 80065a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80065a2:	f89a 3000 	ldrb.w	r3, [sl]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 809f 	beq.w	80066ea <_svfiprintf_r+0x1c6>
 80065ac:	2300      	movs	r3, #0
 80065ae:	f04f 32ff 	mov.w	r2, #4294967295
 80065b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065b6:	f10a 0a01 	add.w	sl, sl, #1
 80065ba:	9304      	str	r3, [sp, #16]
 80065bc:	9307      	str	r3, [sp, #28]
 80065be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80065c4:	4654      	mov	r4, sl
 80065c6:	2205      	movs	r2, #5
 80065c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065cc:	484e      	ldr	r0, [pc, #312]	@ (8006708 <_svfiprintf_r+0x1e4>)
 80065ce:	f7fe fc6e 	bl	8004eae <memchr>
 80065d2:	9a04      	ldr	r2, [sp, #16]
 80065d4:	b9d8      	cbnz	r0, 800660e <_svfiprintf_r+0xea>
 80065d6:	06d0      	lsls	r0, r2, #27
 80065d8:	bf44      	itt	mi
 80065da:	2320      	movmi	r3, #32
 80065dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065e0:	0711      	lsls	r1, r2, #28
 80065e2:	bf44      	itt	mi
 80065e4:	232b      	movmi	r3, #43	@ 0x2b
 80065e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065ea:	f89a 3000 	ldrb.w	r3, [sl]
 80065ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80065f0:	d015      	beq.n	800661e <_svfiprintf_r+0xfa>
 80065f2:	4654      	mov	r4, sl
 80065f4:	2000      	movs	r0, #0
 80065f6:	f04f 0c0a 	mov.w	ip, #10
 80065fa:	9a07      	ldr	r2, [sp, #28]
 80065fc:	4621      	mov	r1, r4
 80065fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006602:	3b30      	subs	r3, #48	@ 0x30
 8006604:	2b09      	cmp	r3, #9
 8006606:	d94b      	bls.n	80066a0 <_svfiprintf_r+0x17c>
 8006608:	b1b0      	cbz	r0, 8006638 <_svfiprintf_r+0x114>
 800660a:	9207      	str	r2, [sp, #28]
 800660c:	e014      	b.n	8006638 <_svfiprintf_r+0x114>
 800660e:	eba0 0308 	sub.w	r3, r0, r8
 8006612:	fa09 f303 	lsl.w	r3, r9, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	46a2      	mov	sl, r4
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	e7d2      	b.n	80065c4 <_svfiprintf_r+0xa0>
 800661e:	9b03      	ldr	r3, [sp, #12]
 8006620:	1d19      	adds	r1, r3, #4
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	9103      	str	r1, [sp, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfbb      	ittet	lt
 800662a:	425b      	neglt	r3, r3
 800662c:	f042 0202 	orrlt.w	r2, r2, #2
 8006630:	9307      	strge	r3, [sp, #28]
 8006632:	9307      	strlt	r3, [sp, #28]
 8006634:	bfb8      	it	lt
 8006636:	9204      	strlt	r2, [sp, #16]
 8006638:	7823      	ldrb	r3, [r4, #0]
 800663a:	2b2e      	cmp	r3, #46	@ 0x2e
 800663c:	d10a      	bne.n	8006654 <_svfiprintf_r+0x130>
 800663e:	7863      	ldrb	r3, [r4, #1]
 8006640:	2b2a      	cmp	r3, #42	@ 0x2a
 8006642:	d132      	bne.n	80066aa <_svfiprintf_r+0x186>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3402      	adds	r4, #2
 8006648:	1d1a      	adds	r2, r3, #4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	9203      	str	r2, [sp, #12]
 800664e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006652:	9305      	str	r3, [sp, #20]
 8006654:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800670c <_svfiprintf_r+0x1e8>
 8006658:	2203      	movs	r2, #3
 800665a:	4650      	mov	r0, sl
 800665c:	7821      	ldrb	r1, [r4, #0]
 800665e:	f7fe fc26 	bl	8004eae <memchr>
 8006662:	b138      	cbz	r0, 8006674 <_svfiprintf_r+0x150>
 8006664:	2240      	movs	r2, #64	@ 0x40
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	eba0 000a 	sub.w	r0, r0, sl
 800666c:	4082      	lsls	r2, r0
 800666e:	4313      	orrs	r3, r2
 8006670:	3401      	adds	r4, #1
 8006672:	9304      	str	r3, [sp, #16]
 8006674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006678:	2206      	movs	r2, #6
 800667a:	4825      	ldr	r0, [pc, #148]	@ (8006710 <_svfiprintf_r+0x1ec>)
 800667c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006680:	f7fe fc15 	bl	8004eae <memchr>
 8006684:	2800      	cmp	r0, #0
 8006686:	d036      	beq.n	80066f6 <_svfiprintf_r+0x1d2>
 8006688:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <_svfiprintf_r+0x1f0>)
 800668a:	bb1b      	cbnz	r3, 80066d4 <_svfiprintf_r+0x1b0>
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	3307      	adds	r3, #7
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	3308      	adds	r3, #8
 8006696:	9303      	str	r3, [sp, #12]
 8006698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669a:	4433      	add	r3, r6
 800669c:	9309      	str	r3, [sp, #36]	@ 0x24
 800669e:	e76a      	b.n	8006576 <_svfiprintf_r+0x52>
 80066a0:	460c      	mov	r4, r1
 80066a2:	2001      	movs	r0, #1
 80066a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066a8:	e7a8      	b.n	80065fc <_svfiprintf_r+0xd8>
 80066aa:	2300      	movs	r3, #0
 80066ac:	f04f 0c0a 	mov.w	ip, #10
 80066b0:	4619      	mov	r1, r3
 80066b2:	3401      	adds	r4, #1
 80066b4:	9305      	str	r3, [sp, #20]
 80066b6:	4620      	mov	r0, r4
 80066b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066bc:	3a30      	subs	r2, #48	@ 0x30
 80066be:	2a09      	cmp	r2, #9
 80066c0:	d903      	bls.n	80066ca <_svfiprintf_r+0x1a6>
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0c6      	beq.n	8006654 <_svfiprintf_r+0x130>
 80066c6:	9105      	str	r1, [sp, #20]
 80066c8:	e7c4      	b.n	8006654 <_svfiprintf_r+0x130>
 80066ca:	4604      	mov	r4, r0
 80066cc:	2301      	movs	r3, #1
 80066ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80066d2:	e7f0      	b.n	80066b6 <_svfiprintf_r+0x192>
 80066d4:	ab03      	add	r3, sp, #12
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	462a      	mov	r2, r5
 80066da:	4638      	mov	r0, r7
 80066dc:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <_svfiprintf_r+0x1f4>)
 80066de:	a904      	add	r1, sp, #16
 80066e0:	f7fd fe82 	bl	80043e8 <_printf_float>
 80066e4:	1c42      	adds	r2, r0, #1
 80066e6:	4606      	mov	r6, r0
 80066e8:	d1d6      	bne.n	8006698 <_svfiprintf_r+0x174>
 80066ea:	89ab      	ldrh	r3, [r5, #12]
 80066ec:	065b      	lsls	r3, r3, #25
 80066ee:	f53f af2d 	bmi.w	800654c <_svfiprintf_r+0x28>
 80066f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066f4:	e72c      	b.n	8006550 <_svfiprintf_r+0x2c>
 80066f6:	ab03      	add	r3, sp, #12
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	462a      	mov	r2, r5
 80066fc:	4638      	mov	r0, r7
 80066fe:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <_svfiprintf_r+0x1f4>)
 8006700:	a904      	add	r1, sp, #16
 8006702:	f7fe f90f 	bl	8004924 <_printf_i>
 8006706:	e7ed      	b.n	80066e4 <_svfiprintf_r+0x1c0>
 8006708:	08007208 	.word	0x08007208
 800670c:	0800720e 	.word	0x0800720e
 8006710:	08007212 	.word	0x08007212
 8006714:	080043e9 	.word	0x080043e9
 8006718:	0800646d 	.word	0x0800646d

0800671c <__sflush_r>:
 800671c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006722:	0716      	lsls	r6, r2, #28
 8006724:	4605      	mov	r5, r0
 8006726:	460c      	mov	r4, r1
 8006728:	d454      	bmi.n	80067d4 <__sflush_r+0xb8>
 800672a:	684b      	ldr	r3, [r1, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	dc02      	bgt.n	8006736 <__sflush_r+0x1a>
 8006730:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd48      	ble.n	80067c8 <__sflush_r+0xac>
 8006736:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006738:	2e00      	cmp	r6, #0
 800673a:	d045      	beq.n	80067c8 <__sflush_r+0xac>
 800673c:	2300      	movs	r3, #0
 800673e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006742:	682f      	ldr	r7, [r5, #0]
 8006744:	6a21      	ldr	r1, [r4, #32]
 8006746:	602b      	str	r3, [r5, #0]
 8006748:	d030      	beq.n	80067ac <__sflush_r+0x90>
 800674a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800674c:	89a3      	ldrh	r3, [r4, #12]
 800674e:	0759      	lsls	r1, r3, #29
 8006750:	d505      	bpl.n	800675e <__sflush_r+0x42>
 8006752:	6863      	ldr	r3, [r4, #4]
 8006754:	1ad2      	subs	r2, r2, r3
 8006756:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006758:	b10b      	cbz	r3, 800675e <__sflush_r+0x42>
 800675a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800675c:	1ad2      	subs	r2, r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	4628      	mov	r0, r5
 8006762:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006764:	6a21      	ldr	r1, [r4, #32]
 8006766:	47b0      	blx	r6
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	d106      	bne.n	800677c <__sflush_r+0x60>
 800676e:	6829      	ldr	r1, [r5, #0]
 8006770:	291d      	cmp	r1, #29
 8006772:	d82b      	bhi.n	80067cc <__sflush_r+0xb0>
 8006774:	4a28      	ldr	r2, [pc, #160]	@ (8006818 <__sflush_r+0xfc>)
 8006776:	410a      	asrs	r2, r1
 8006778:	07d6      	lsls	r6, r2, #31
 800677a:	d427      	bmi.n	80067cc <__sflush_r+0xb0>
 800677c:	2200      	movs	r2, #0
 800677e:	6062      	str	r2, [r4, #4]
 8006780:	6922      	ldr	r2, [r4, #16]
 8006782:	04d9      	lsls	r1, r3, #19
 8006784:	6022      	str	r2, [r4, #0]
 8006786:	d504      	bpl.n	8006792 <__sflush_r+0x76>
 8006788:	1c42      	adds	r2, r0, #1
 800678a:	d101      	bne.n	8006790 <__sflush_r+0x74>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b903      	cbnz	r3, 8006792 <__sflush_r+0x76>
 8006790:	6560      	str	r0, [r4, #84]	@ 0x54
 8006792:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006794:	602f      	str	r7, [r5, #0]
 8006796:	b1b9      	cbz	r1, 80067c8 <__sflush_r+0xac>
 8006798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800679c:	4299      	cmp	r1, r3
 800679e:	d002      	beq.n	80067a6 <__sflush_r+0x8a>
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff f9e5 	bl	8005b70 <_free_r>
 80067a6:	2300      	movs	r3, #0
 80067a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80067aa:	e00d      	b.n	80067c8 <__sflush_r+0xac>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b0      	blx	r6
 80067b2:	4602      	mov	r2, r0
 80067b4:	1c50      	adds	r0, r2, #1
 80067b6:	d1c9      	bne.n	800674c <__sflush_r+0x30>
 80067b8:	682b      	ldr	r3, [r5, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c6      	beq.n	800674c <__sflush_r+0x30>
 80067be:	2b1d      	cmp	r3, #29
 80067c0:	d001      	beq.n	80067c6 <__sflush_r+0xaa>
 80067c2:	2b16      	cmp	r3, #22
 80067c4:	d11d      	bne.n	8006802 <__sflush_r+0xe6>
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	2000      	movs	r0, #0
 80067ca:	e021      	b.n	8006810 <__sflush_r+0xf4>
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	b21b      	sxth	r3, r3
 80067d2:	e01a      	b.n	800680a <__sflush_r+0xee>
 80067d4:	690f      	ldr	r7, [r1, #16]
 80067d6:	2f00      	cmp	r7, #0
 80067d8:	d0f6      	beq.n	80067c8 <__sflush_r+0xac>
 80067da:	0793      	lsls	r3, r2, #30
 80067dc:	bf18      	it	ne
 80067de:	2300      	movne	r3, #0
 80067e0:	680e      	ldr	r6, [r1, #0]
 80067e2:	bf08      	it	eq
 80067e4:	694b      	ldreq	r3, [r1, #20]
 80067e6:	1bf6      	subs	r6, r6, r7
 80067e8:	600f      	str	r7, [r1, #0]
 80067ea:	608b      	str	r3, [r1, #8]
 80067ec:	2e00      	cmp	r6, #0
 80067ee:	ddeb      	ble.n	80067c8 <__sflush_r+0xac>
 80067f0:	4633      	mov	r3, r6
 80067f2:	463a      	mov	r2, r7
 80067f4:	4628      	mov	r0, r5
 80067f6:	6a21      	ldr	r1, [r4, #32]
 80067f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80067fc:	47e0      	blx	ip
 80067fe:	2800      	cmp	r0, #0
 8006800:	dc07      	bgt.n	8006812 <__sflush_r+0xf6>
 8006802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680a:	f04f 30ff 	mov.w	r0, #4294967295
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006812:	4407      	add	r7, r0
 8006814:	1a36      	subs	r6, r6, r0
 8006816:	e7e9      	b.n	80067ec <__sflush_r+0xd0>
 8006818:	dfbffffe 	.word	0xdfbffffe

0800681c <_fflush_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	690b      	ldr	r3, [r1, #16]
 8006820:	4605      	mov	r5, r0
 8006822:	460c      	mov	r4, r1
 8006824:	b913      	cbnz	r3, 800682c <_fflush_r+0x10>
 8006826:	2500      	movs	r5, #0
 8006828:	4628      	mov	r0, r5
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	b118      	cbz	r0, 8006836 <_fflush_r+0x1a>
 800682e:	6a03      	ldr	r3, [r0, #32]
 8006830:	b90b      	cbnz	r3, 8006836 <_fflush_r+0x1a>
 8006832:	f7fe fa23 	bl	8004c7c <__sinit>
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0f3      	beq.n	8006826 <_fflush_r+0xa>
 800683e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006840:	07d0      	lsls	r0, r2, #31
 8006842:	d404      	bmi.n	800684e <_fflush_r+0x32>
 8006844:	0599      	lsls	r1, r3, #22
 8006846:	d402      	bmi.n	800684e <_fflush_r+0x32>
 8006848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800684a:	f7fe fb2e 	bl	8004eaa <__retarget_lock_acquire_recursive>
 800684e:	4628      	mov	r0, r5
 8006850:	4621      	mov	r1, r4
 8006852:	f7ff ff63 	bl	800671c <__sflush_r>
 8006856:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006858:	4605      	mov	r5, r0
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d4e4      	bmi.n	8006828 <_fflush_r+0xc>
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	059b      	lsls	r3, r3, #22
 8006862:	d4e1      	bmi.n	8006828 <_fflush_r+0xc>
 8006864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006866:	f7fe fb21 	bl	8004eac <__retarget_lock_release_recursive>
 800686a:	e7dd      	b.n	8006828 <_fflush_r+0xc>

0800686c <memmove>:
 800686c:	4288      	cmp	r0, r1
 800686e:	b510      	push	{r4, lr}
 8006870:	eb01 0402 	add.w	r4, r1, r2
 8006874:	d902      	bls.n	800687c <memmove+0x10>
 8006876:	4284      	cmp	r4, r0
 8006878:	4623      	mov	r3, r4
 800687a:	d807      	bhi.n	800688c <memmove+0x20>
 800687c:	1e43      	subs	r3, r0, #1
 800687e:	42a1      	cmp	r1, r4
 8006880:	d008      	beq.n	8006894 <memmove+0x28>
 8006882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688a:	e7f8      	b.n	800687e <memmove+0x12>
 800688c:	4601      	mov	r1, r0
 800688e:	4402      	add	r2, r0
 8006890:	428a      	cmp	r2, r1
 8006892:	d100      	bne.n	8006896 <memmove+0x2a>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800689e:	e7f7      	b.n	8006890 <memmove+0x24>

080068a0 <_sbrk_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	2300      	movs	r3, #0
 80068a4:	4d05      	ldr	r5, [pc, #20]	@ (80068bc <_sbrk_r+0x1c>)
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fb fa1e 	bl	8001cec <_sbrk>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_sbrk_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_sbrk_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	200003f0 	.word	0x200003f0

080068c0 <memcpy>:
 80068c0:	440a      	add	r2, r1
 80068c2:	4291      	cmp	r1, r2
 80068c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80068c8:	d100      	bne.n	80068cc <memcpy+0xc>
 80068ca:	4770      	bx	lr
 80068cc:	b510      	push	{r4, lr}
 80068ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d2:	4291      	cmp	r1, r2
 80068d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068d8:	d1f9      	bne.n	80068ce <memcpy+0xe>
 80068da:	bd10      	pop	{r4, pc}

080068dc <__assert_func>:
 80068dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068de:	4614      	mov	r4, r2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b09      	ldr	r3, [pc, #36]	@ (8006908 <__assert_func+0x2c>)
 80068e4:	4605      	mov	r5, r0
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68d8      	ldr	r0, [r3, #12]
 80068ea:	b954      	cbnz	r4, 8006902 <__assert_func+0x26>
 80068ec:	4b07      	ldr	r3, [pc, #28]	@ (800690c <__assert_func+0x30>)
 80068ee:	461c      	mov	r4, r3
 80068f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80068f4:	9100      	str	r1, [sp, #0]
 80068f6:	462b      	mov	r3, r5
 80068f8:	4905      	ldr	r1, [pc, #20]	@ (8006910 <__assert_func+0x34>)
 80068fa:	f000 f86f 	bl	80069dc <fiprintf>
 80068fe:	f000 f87f 	bl	8006a00 <abort>
 8006902:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <__assert_func+0x38>)
 8006904:	e7f4      	b.n	80068f0 <__assert_func+0x14>
 8006906:	bf00      	nop
 8006908:	20000018 	.word	0x20000018
 800690c:	0800725e 	.word	0x0800725e
 8006910:	08007230 	.word	0x08007230
 8006914:	08007223 	.word	0x08007223

08006918 <_calloc_r>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	fba1 5402 	umull	r5, r4, r1, r2
 800691e:	b93c      	cbnz	r4, 8006930 <_calloc_r+0x18>
 8006920:	4629      	mov	r1, r5
 8006922:	f7ff f997 	bl	8005c54 <_malloc_r>
 8006926:	4606      	mov	r6, r0
 8006928:	b928      	cbnz	r0, 8006936 <_calloc_r+0x1e>
 800692a:	2600      	movs	r6, #0
 800692c:	4630      	mov	r0, r6
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	220c      	movs	r2, #12
 8006932:	6002      	str	r2, [r0, #0]
 8006934:	e7f9      	b.n	800692a <_calloc_r+0x12>
 8006936:	462a      	mov	r2, r5
 8006938:	4621      	mov	r1, r4
 800693a:	f7fe fa38 	bl	8004dae <memset>
 800693e:	e7f5      	b.n	800692c <_calloc_r+0x14>

08006940 <__ascii_mbtowc>:
 8006940:	b082      	sub	sp, #8
 8006942:	b901      	cbnz	r1, 8006946 <__ascii_mbtowc+0x6>
 8006944:	a901      	add	r1, sp, #4
 8006946:	b142      	cbz	r2, 800695a <__ascii_mbtowc+0x1a>
 8006948:	b14b      	cbz	r3, 800695e <__ascii_mbtowc+0x1e>
 800694a:	7813      	ldrb	r3, [r2, #0]
 800694c:	600b      	str	r3, [r1, #0]
 800694e:	7812      	ldrb	r2, [r2, #0]
 8006950:	1e10      	subs	r0, r2, #0
 8006952:	bf18      	it	ne
 8006954:	2001      	movne	r0, #1
 8006956:	b002      	add	sp, #8
 8006958:	4770      	bx	lr
 800695a:	4610      	mov	r0, r2
 800695c:	e7fb      	b.n	8006956 <__ascii_mbtowc+0x16>
 800695e:	f06f 0001 	mvn.w	r0, #1
 8006962:	e7f8      	b.n	8006956 <__ascii_mbtowc+0x16>

08006964 <_realloc_r>:
 8006964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006968:	4680      	mov	r8, r0
 800696a:	4615      	mov	r5, r2
 800696c:	460c      	mov	r4, r1
 800696e:	b921      	cbnz	r1, 800697a <_realloc_r+0x16>
 8006970:	4611      	mov	r1, r2
 8006972:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	f7ff b96d 	b.w	8005c54 <_malloc_r>
 800697a:	b92a      	cbnz	r2, 8006988 <_realloc_r+0x24>
 800697c:	f7ff f8f8 	bl	8005b70 <_free_r>
 8006980:	2400      	movs	r4, #0
 8006982:	4620      	mov	r0, r4
 8006984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006988:	f000 f841 	bl	8006a0e <_malloc_usable_size_r>
 800698c:	4285      	cmp	r5, r0
 800698e:	4606      	mov	r6, r0
 8006990:	d802      	bhi.n	8006998 <_realloc_r+0x34>
 8006992:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006996:	d8f4      	bhi.n	8006982 <_realloc_r+0x1e>
 8006998:	4629      	mov	r1, r5
 800699a:	4640      	mov	r0, r8
 800699c:	f7ff f95a 	bl	8005c54 <_malloc_r>
 80069a0:	4607      	mov	r7, r0
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d0ec      	beq.n	8006980 <_realloc_r+0x1c>
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	462a      	mov	r2, r5
 80069aa:	4621      	mov	r1, r4
 80069ac:	bf28      	it	cs
 80069ae:	4632      	movcs	r2, r6
 80069b0:	f7ff ff86 	bl	80068c0 <memcpy>
 80069b4:	4621      	mov	r1, r4
 80069b6:	4640      	mov	r0, r8
 80069b8:	f7ff f8da 	bl	8005b70 <_free_r>
 80069bc:	463c      	mov	r4, r7
 80069be:	e7e0      	b.n	8006982 <_realloc_r+0x1e>

080069c0 <__ascii_wctomb>:
 80069c0:	4603      	mov	r3, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	b141      	cbz	r1, 80069d8 <__ascii_wctomb+0x18>
 80069c6:	2aff      	cmp	r2, #255	@ 0xff
 80069c8:	d904      	bls.n	80069d4 <__ascii_wctomb+0x14>
 80069ca:	228a      	movs	r2, #138	@ 0x8a
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	4770      	bx	lr
 80069d4:	2001      	movs	r0, #1
 80069d6:	700a      	strb	r2, [r1, #0]
 80069d8:	4770      	bx	lr
	...

080069dc <fiprintf>:
 80069dc:	b40e      	push	{r1, r2, r3}
 80069de:	b503      	push	{r0, r1, lr}
 80069e0:	4601      	mov	r1, r0
 80069e2:	ab03      	add	r3, sp, #12
 80069e4:	4805      	ldr	r0, [pc, #20]	@ (80069fc <fiprintf+0x20>)
 80069e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f000 f83d 	bl	8006a6c <_vfiprintf_r>
 80069f2:	b002      	add	sp, #8
 80069f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f8:	b003      	add	sp, #12
 80069fa:	4770      	bx	lr
 80069fc:	20000018 	.word	0x20000018

08006a00 <abort>:
 8006a00:	2006      	movs	r0, #6
 8006a02:	b508      	push	{r3, lr}
 8006a04:	f000 fa06 	bl	8006e14 <raise>
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f7fb f8fa 	bl	8001c02 <_exit>

08006a0e <_malloc_usable_size_r>:
 8006a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a12:	1f18      	subs	r0, r3, #4
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bfbc      	itt	lt
 8006a18:	580b      	ldrlt	r3, [r1, r0]
 8006a1a:	18c0      	addlt	r0, r0, r3
 8006a1c:	4770      	bx	lr

08006a1e <__sfputc_r>:
 8006a1e:	6893      	ldr	r3, [r2, #8]
 8006a20:	b410      	push	{r4}
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	6093      	str	r3, [r2, #8]
 8006a28:	da07      	bge.n	8006a3a <__sfputc_r+0x1c>
 8006a2a:	6994      	ldr	r4, [r2, #24]
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	db01      	blt.n	8006a34 <__sfputc_r+0x16>
 8006a30:	290a      	cmp	r1, #10
 8006a32:	d102      	bne.n	8006a3a <__sfputc_r+0x1c>
 8006a34:	bc10      	pop	{r4}
 8006a36:	f000 b931 	b.w	8006c9c <__swbuf_r>
 8006a3a:	6813      	ldr	r3, [r2, #0]
 8006a3c:	1c58      	adds	r0, r3, #1
 8006a3e:	6010      	str	r0, [r2, #0]
 8006a40:	7019      	strb	r1, [r3, #0]
 8006a42:	4608      	mov	r0, r1
 8006a44:	bc10      	pop	{r4}
 8006a46:	4770      	bx	lr

08006a48 <__sfputs_r>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	4614      	mov	r4, r2
 8006a50:	18d5      	adds	r5, r2, r3
 8006a52:	42ac      	cmp	r4, r5
 8006a54:	d101      	bne.n	8006a5a <__sfputs_r+0x12>
 8006a56:	2000      	movs	r0, #0
 8006a58:	e007      	b.n	8006a6a <__sfputs_r+0x22>
 8006a5a:	463a      	mov	r2, r7
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a62:	f7ff ffdc 	bl	8006a1e <__sfputc_r>
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d1f3      	bne.n	8006a52 <__sfputs_r+0xa>
 8006a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a6c <_vfiprintf_r>:
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	460d      	mov	r5, r1
 8006a72:	4614      	mov	r4, r2
 8006a74:	4698      	mov	r8, r3
 8006a76:	4606      	mov	r6, r0
 8006a78:	b09d      	sub	sp, #116	@ 0x74
 8006a7a:	b118      	cbz	r0, 8006a84 <_vfiprintf_r+0x18>
 8006a7c:	6a03      	ldr	r3, [r0, #32]
 8006a7e:	b90b      	cbnz	r3, 8006a84 <_vfiprintf_r+0x18>
 8006a80:	f7fe f8fc 	bl	8004c7c <__sinit>
 8006a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d405      	bmi.n	8006a96 <_vfiprintf_r+0x2a>
 8006a8a:	89ab      	ldrh	r3, [r5, #12]
 8006a8c:	059a      	lsls	r2, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_vfiprintf_r+0x2a>
 8006a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a92:	f7fe fa0a 	bl	8004eaa <__retarget_lock_acquire_recursive>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	071b      	lsls	r3, r3, #28
 8006a9a:	d501      	bpl.n	8006aa0 <_vfiprintf_r+0x34>
 8006a9c:	692b      	ldr	r3, [r5, #16]
 8006a9e:	b99b      	cbnz	r3, 8006ac8 <_vfiprintf_r+0x5c>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 f938 	bl	8006d18 <__swsetup_r>
 8006aa8:	b170      	cbz	r0, 8006ac8 <_vfiprintf_r+0x5c>
 8006aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aac:	07dc      	lsls	r4, r3, #31
 8006aae:	d504      	bpl.n	8006aba <_vfiprintf_r+0x4e>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b01d      	add	sp, #116	@ 0x74
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	89ab      	ldrh	r3, [r5, #12]
 8006abc:	0598      	lsls	r0, r3, #22
 8006abe:	d4f7      	bmi.n	8006ab0 <_vfiprintf_r+0x44>
 8006ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ac2:	f7fe f9f3 	bl	8004eac <__retarget_lock_release_recursive>
 8006ac6:	e7f3      	b.n	8006ab0 <_vfiprintf_r+0x44>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006acc:	2320      	movs	r3, #32
 8006ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ad2:	2330      	movs	r3, #48	@ 0x30
 8006ad4:	f04f 0901 	mov.w	r9, #1
 8006ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006adc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006c88 <_vfiprintf_r+0x21c>
 8006ae0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ae4:	4623      	mov	r3, r4
 8006ae6:	469a      	mov	sl, r3
 8006ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aec:	b10a      	cbz	r2, 8006af2 <_vfiprintf_r+0x86>
 8006aee:	2a25      	cmp	r2, #37	@ 0x25
 8006af0:	d1f9      	bne.n	8006ae6 <_vfiprintf_r+0x7a>
 8006af2:	ebba 0b04 	subs.w	fp, sl, r4
 8006af6:	d00b      	beq.n	8006b10 <_vfiprintf_r+0xa4>
 8006af8:	465b      	mov	r3, fp
 8006afa:	4622      	mov	r2, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ffa2 	bl	8006a48 <__sfputs_r>
 8006b04:	3001      	adds	r0, #1
 8006b06:	f000 80a7 	beq.w	8006c58 <_vfiprintf_r+0x1ec>
 8006b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b0c:	445a      	add	r2, fp
 8006b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b10:	f89a 3000 	ldrb.w	r3, [sl]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 809f 	beq.w	8006c58 <_vfiprintf_r+0x1ec>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b24:	f10a 0a01 	add.w	sl, sl, #1
 8006b28:	9304      	str	r3, [sp, #16]
 8006b2a:	9307      	str	r3, [sp, #28]
 8006b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b32:	4654      	mov	r4, sl
 8006b34:	2205      	movs	r2, #5
 8006b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3a:	4853      	ldr	r0, [pc, #332]	@ (8006c88 <_vfiprintf_r+0x21c>)
 8006b3c:	f7fe f9b7 	bl	8004eae <memchr>
 8006b40:	9a04      	ldr	r2, [sp, #16]
 8006b42:	b9d8      	cbnz	r0, 8006b7c <_vfiprintf_r+0x110>
 8006b44:	06d1      	lsls	r1, r2, #27
 8006b46:	bf44      	itt	mi
 8006b48:	2320      	movmi	r3, #32
 8006b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b4e:	0713      	lsls	r3, r2, #28
 8006b50:	bf44      	itt	mi
 8006b52:	232b      	movmi	r3, #43	@ 0x2b
 8006b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b58:	f89a 3000 	ldrb.w	r3, [sl]
 8006b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b5e:	d015      	beq.n	8006b8c <_vfiprintf_r+0x120>
 8006b60:	4654      	mov	r4, sl
 8006b62:	2000      	movs	r0, #0
 8006b64:	f04f 0c0a 	mov.w	ip, #10
 8006b68:	9a07      	ldr	r2, [sp, #28]
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b70:	3b30      	subs	r3, #48	@ 0x30
 8006b72:	2b09      	cmp	r3, #9
 8006b74:	d94b      	bls.n	8006c0e <_vfiprintf_r+0x1a2>
 8006b76:	b1b0      	cbz	r0, 8006ba6 <_vfiprintf_r+0x13a>
 8006b78:	9207      	str	r2, [sp, #28]
 8006b7a:	e014      	b.n	8006ba6 <_vfiprintf_r+0x13a>
 8006b7c:	eba0 0308 	sub.w	r3, r0, r8
 8006b80:	fa09 f303 	lsl.w	r3, r9, r3
 8006b84:	4313      	orrs	r3, r2
 8006b86:	46a2      	mov	sl, r4
 8006b88:	9304      	str	r3, [sp, #16]
 8006b8a:	e7d2      	b.n	8006b32 <_vfiprintf_r+0xc6>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	1d19      	adds	r1, r3, #4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	9103      	str	r1, [sp, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	bfbb      	ittet	lt
 8006b98:	425b      	neglt	r3, r3
 8006b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b9e:	9307      	strge	r3, [sp, #28]
 8006ba0:	9307      	strlt	r3, [sp, #28]
 8006ba2:	bfb8      	it	lt
 8006ba4:	9204      	strlt	r2, [sp, #16]
 8006ba6:	7823      	ldrb	r3, [r4, #0]
 8006ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006baa:	d10a      	bne.n	8006bc2 <_vfiprintf_r+0x156>
 8006bac:	7863      	ldrb	r3, [r4, #1]
 8006bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bb0:	d132      	bne.n	8006c18 <_vfiprintf_r+0x1ac>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	3402      	adds	r4, #2
 8006bb6:	1d1a      	adds	r2, r3, #4
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	9203      	str	r2, [sp, #12]
 8006bbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006c8c <_vfiprintf_r+0x220>
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	4650      	mov	r0, sl
 8006bca:	7821      	ldrb	r1, [r4, #0]
 8006bcc:	f7fe f96f 	bl	8004eae <memchr>
 8006bd0:	b138      	cbz	r0, 8006be2 <_vfiprintf_r+0x176>
 8006bd2:	2240      	movs	r2, #64	@ 0x40
 8006bd4:	9b04      	ldr	r3, [sp, #16]
 8006bd6:	eba0 000a 	sub.w	r0, r0, sl
 8006bda:	4082      	lsls	r2, r0
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	3401      	adds	r4, #1
 8006be0:	9304      	str	r3, [sp, #16]
 8006be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be6:	2206      	movs	r2, #6
 8006be8:	4829      	ldr	r0, [pc, #164]	@ (8006c90 <_vfiprintf_r+0x224>)
 8006bea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bee:	f7fe f95e 	bl	8004eae <memchr>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d03f      	beq.n	8006c76 <_vfiprintf_r+0x20a>
 8006bf6:	4b27      	ldr	r3, [pc, #156]	@ (8006c94 <_vfiprintf_r+0x228>)
 8006bf8:	bb1b      	cbnz	r3, 8006c42 <_vfiprintf_r+0x1d6>
 8006bfa:	9b03      	ldr	r3, [sp, #12]
 8006bfc:	3307      	adds	r3, #7
 8006bfe:	f023 0307 	bic.w	r3, r3, #7
 8006c02:	3308      	adds	r3, #8
 8006c04:	9303      	str	r3, [sp, #12]
 8006c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c08:	443b      	add	r3, r7
 8006c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c0c:	e76a      	b.n	8006ae4 <_vfiprintf_r+0x78>
 8006c0e:	460c      	mov	r4, r1
 8006c10:	2001      	movs	r0, #1
 8006c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c16:	e7a8      	b.n	8006b6a <_vfiprintf_r+0xfe>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	f04f 0c0a 	mov.w	ip, #10
 8006c1e:	4619      	mov	r1, r3
 8006c20:	3401      	adds	r4, #1
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	4620      	mov	r0, r4
 8006c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c2a:	3a30      	subs	r2, #48	@ 0x30
 8006c2c:	2a09      	cmp	r2, #9
 8006c2e:	d903      	bls.n	8006c38 <_vfiprintf_r+0x1cc>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0c6      	beq.n	8006bc2 <_vfiprintf_r+0x156>
 8006c34:	9105      	str	r1, [sp, #20]
 8006c36:	e7c4      	b.n	8006bc2 <_vfiprintf_r+0x156>
 8006c38:	4604      	mov	r4, r0
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c40:	e7f0      	b.n	8006c24 <_vfiprintf_r+0x1b8>
 8006c42:	ab03      	add	r3, sp, #12
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	462a      	mov	r2, r5
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4b13      	ldr	r3, [pc, #76]	@ (8006c98 <_vfiprintf_r+0x22c>)
 8006c4c:	a904      	add	r1, sp, #16
 8006c4e:	f7fd fbcb 	bl	80043e8 <_printf_float>
 8006c52:	4607      	mov	r7, r0
 8006c54:	1c78      	adds	r0, r7, #1
 8006c56:	d1d6      	bne.n	8006c06 <_vfiprintf_r+0x19a>
 8006c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c5a:	07d9      	lsls	r1, r3, #31
 8006c5c:	d405      	bmi.n	8006c6a <_vfiprintf_r+0x1fe>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	059a      	lsls	r2, r3, #22
 8006c62:	d402      	bmi.n	8006c6a <_vfiprintf_r+0x1fe>
 8006c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c66:	f7fe f921 	bl	8004eac <__retarget_lock_release_recursive>
 8006c6a:	89ab      	ldrh	r3, [r5, #12]
 8006c6c:	065b      	lsls	r3, r3, #25
 8006c6e:	f53f af1f 	bmi.w	8006ab0 <_vfiprintf_r+0x44>
 8006c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c74:	e71e      	b.n	8006ab4 <_vfiprintf_r+0x48>
 8006c76:	ab03      	add	r3, sp, #12
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	462a      	mov	r2, r5
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <_vfiprintf_r+0x22c>)
 8006c80:	a904      	add	r1, sp, #16
 8006c82:	f7fd fe4f 	bl	8004924 <_printf_i>
 8006c86:	e7e4      	b.n	8006c52 <_vfiprintf_r+0x1e6>
 8006c88:	08007208 	.word	0x08007208
 8006c8c:	0800720e 	.word	0x0800720e
 8006c90:	08007212 	.word	0x08007212
 8006c94:	080043e9 	.word	0x080043e9
 8006c98:	08006a49 	.word	0x08006a49

08006c9c <__swbuf_r>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	b118      	cbz	r0, 8006cae <__swbuf_r+0x12>
 8006ca6:	6a03      	ldr	r3, [r0, #32]
 8006ca8:	b90b      	cbnz	r3, 8006cae <__swbuf_r+0x12>
 8006caa:	f7fd ffe7 	bl	8004c7c <__sinit>
 8006cae:	69a3      	ldr	r3, [r4, #24]
 8006cb0:	60a3      	str	r3, [r4, #8]
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	071a      	lsls	r2, r3, #28
 8006cb6:	d501      	bpl.n	8006cbc <__swbuf_r+0x20>
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	b943      	cbnz	r3, 8006cce <__swbuf_r+0x32>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 f82a 	bl	8006d18 <__swsetup_r>
 8006cc4:	b118      	cbz	r0, 8006cce <__swbuf_r+0x32>
 8006cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8006cca:	4638      	mov	r0, r7
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	b2f6      	uxtb	r6, r6
 8006cd4:	1a98      	subs	r0, r3, r2
 8006cd6:	6963      	ldr	r3, [r4, #20]
 8006cd8:	4637      	mov	r7, r6
 8006cda:	4283      	cmp	r3, r0
 8006cdc:	dc05      	bgt.n	8006cea <__swbuf_r+0x4e>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f7ff fd9b 	bl	800681c <_fflush_r>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d1ed      	bne.n	8006cc6 <__swbuf_r+0x2a>
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	60a3      	str	r3, [r4, #8]
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	6022      	str	r2, [r4, #0]
 8006cf6:	701e      	strb	r6, [r3, #0]
 8006cf8:	6962      	ldr	r2, [r4, #20]
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d004      	beq.n	8006d0a <__swbuf_r+0x6e>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	07db      	lsls	r3, r3, #31
 8006d04:	d5e1      	bpl.n	8006cca <__swbuf_r+0x2e>
 8006d06:	2e0a      	cmp	r6, #10
 8006d08:	d1df      	bne.n	8006cca <__swbuf_r+0x2e>
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7ff fd85 	bl	800681c <_fflush_r>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d0d9      	beq.n	8006cca <__swbuf_r+0x2e>
 8006d16:	e7d6      	b.n	8006cc6 <__swbuf_r+0x2a>

08006d18 <__swsetup_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4b29      	ldr	r3, [pc, #164]	@ (8006dc0 <__swsetup_r+0xa8>)
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	460c      	mov	r4, r1
 8006d22:	b118      	cbz	r0, 8006d2c <__swsetup_r+0x14>
 8006d24:	6a03      	ldr	r3, [r0, #32]
 8006d26:	b90b      	cbnz	r3, 8006d2c <__swsetup_r+0x14>
 8006d28:	f7fd ffa8 	bl	8004c7c <__sinit>
 8006d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d30:	0719      	lsls	r1, r3, #28
 8006d32:	d422      	bmi.n	8006d7a <__swsetup_r+0x62>
 8006d34:	06da      	lsls	r2, r3, #27
 8006d36:	d407      	bmi.n	8006d48 <__swsetup_r+0x30>
 8006d38:	2209      	movs	r2, #9
 8006d3a:	602a      	str	r2, [r5, #0]
 8006d3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d40:	f04f 30ff 	mov.w	r0, #4294967295
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	e033      	b.n	8006db0 <__swsetup_r+0x98>
 8006d48:	0758      	lsls	r0, r3, #29
 8006d4a:	d512      	bpl.n	8006d72 <__swsetup_r+0x5a>
 8006d4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d4e:	b141      	cbz	r1, 8006d62 <__swsetup_r+0x4a>
 8006d50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d54:	4299      	cmp	r1, r3
 8006d56:	d002      	beq.n	8006d5e <__swsetup_r+0x46>
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7fe ff09 	bl	8005b70 <_free_r>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6063      	str	r3, [r4, #4]
 8006d6e:	6923      	ldr	r3, [r4, #16]
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f043 0308 	orr.w	r3, r3, #8
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	b94b      	cbnz	r3, 8006d92 <__swsetup_r+0x7a>
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d88:	d003      	beq.n	8006d92 <__swsetup_r+0x7a>
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f000 f882 	bl	8006e96 <__smakebuf_r>
 8006d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d96:	f013 0201 	ands.w	r2, r3, #1
 8006d9a:	d00a      	beq.n	8006db2 <__swsetup_r+0x9a>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	60a2      	str	r2, [r4, #8]
 8006da0:	6962      	ldr	r2, [r4, #20]
 8006da2:	4252      	negs	r2, r2
 8006da4:	61a2      	str	r2, [r4, #24]
 8006da6:	6922      	ldr	r2, [r4, #16]
 8006da8:	b942      	cbnz	r2, 8006dbc <__swsetup_r+0xa4>
 8006daa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dae:	d1c5      	bne.n	8006d3c <__swsetup_r+0x24>
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	0799      	lsls	r1, r3, #30
 8006db4:	bf58      	it	pl
 8006db6:	6962      	ldrpl	r2, [r4, #20]
 8006db8:	60a2      	str	r2, [r4, #8]
 8006dba:	e7f4      	b.n	8006da6 <__swsetup_r+0x8e>
 8006dbc:	2000      	movs	r0, #0
 8006dbe:	e7f7      	b.n	8006db0 <__swsetup_r+0x98>
 8006dc0:	20000018 	.word	0x20000018

08006dc4 <_raise_r>:
 8006dc4:	291f      	cmp	r1, #31
 8006dc6:	b538      	push	{r3, r4, r5, lr}
 8006dc8:	4605      	mov	r5, r0
 8006dca:	460c      	mov	r4, r1
 8006dcc:	d904      	bls.n	8006dd8 <_raise_r+0x14>
 8006dce:	2316      	movs	r3, #22
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006dda:	b112      	cbz	r2, 8006de2 <_raise_r+0x1e>
 8006ddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006de0:	b94b      	cbnz	r3, 8006df6 <_raise_r+0x32>
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 f830 	bl	8006e48 <_getpid_r>
 8006de8:	4622      	mov	r2, r4
 8006dea:	4601      	mov	r1, r0
 8006dec:	4628      	mov	r0, r5
 8006dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006df2:	f000 b817 	b.w	8006e24 <_kill_r>
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d00a      	beq.n	8006e10 <_raise_r+0x4c>
 8006dfa:	1c59      	adds	r1, r3, #1
 8006dfc:	d103      	bne.n	8006e06 <_raise_r+0x42>
 8006dfe:	2316      	movs	r3, #22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	2001      	movs	r0, #1
 8006e04:	e7e7      	b.n	8006dd6 <_raise_r+0x12>
 8006e06:	2100      	movs	r1, #0
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e0e:	4798      	blx	r3
 8006e10:	2000      	movs	r0, #0
 8006e12:	e7e0      	b.n	8006dd6 <_raise_r+0x12>

08006e14 <raise>:
 8006e14:	4b02      	ldr	r3, [pc, #8]	@ (8006e20 <raise+0xc>)
 8006e16:	4601      	mov	r1, r0
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f7ff bfd3 	b.w	8006dc4 <_raise_r>
 8006e1e:	bf00      	nop
 8006e20:	20000018 	.word	0x20000018

08006e24 <_kill_r>:
 8006e24:	b538      	push	{r3, r4, r5, lr}
 8006e26:	2300      	movs	r3, #0
 8006e28:	4d06      	ldr	r5, [pc, #24]	@ (8006e44 <_kill_r+0x20>)
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	4608      	mov	r0, r1
 8006e2e:	4611      	mov	r1, r2
 8006e30:	602b      	str	r3, [r5, #0]
 8006e32:	f7fa fed6 	bl	8001be2 <_kill>
 8006e36:	1c43      	adds	r3, r0, #1
 8006e38:	d102      	bne.n	8006e40 <_kill_r+0x1c>
 8006e3a:	682b      	ldr	r3, [r5, #0]
 8006e3c:	b103      	cbz	r3, 8006e40 <_kill_r+0x1c>
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	bd38      	pop	{r3, r4, r5, pc}
 8006e42:	bf00      	nop
 8006e44:	200003f0 	.word	0x200003f0

08006e48 <_getpid_r>:
 8006e48:	f7fa bec4 	b.w	8001bd4 <_getpid>

08006e4c <__swhatbuf_r>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	460c      	mov	r4, r1
 8006e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e54:	4615      	mov	r5, r2
 8006e56:	2900      	cmp	r1, #0
 8006e58:	461e      	mov	r6, r3
 8006e5a:	b096      	sub	sp, #88	@ 0x58
 8006e5c:	da0c      	bge.n	8006e78 <__swhatbuf_r+0x2c>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	2100      	movs	r1, #0
 8006e62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e66:	bf14      	ite	ne
 8006e68:	2340      	movne	r3, #64	@ 0x40
 8006e6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e6e:	2000      	movs	r0, #0
 8006e70:	6031      	str	r1, [r6, #0]
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	b016      	add	sp, #88	@ 0x58
 8006e76:	bd70      	pop	{r4, r5, r6, pc}
 8006e78:	466a      	mov	r2, sp
 8006e7a:	f000 f849 	bl	8006f10 <_fstat_r>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	dbed      	blt.n	8006e5e <__swhatbuf_r+0x12>
 8006e82:	9901      	ldr	r1, [sp, #4]
 8006e84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e8c:	4259      	negs	r1, r3
 8006e8e:	4159      	adcs	r1, r3
 8006e90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e94:	e7eb      	b.n	8006e6e <__swhatbuf_r+0x22>

08006e96 <__smakebuf_r>:
 8006e96:	898b      	ldrh	r3, [r1, #12]
 8006e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e9a:	079d      	lsls	r5, r3, #30
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	d507      	bpl.n	8006eb2 <__smakebuf_r+0x1c>
 8006ea2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	2301      	movs	r3, #1
 8006eac:	6163      	str	r3, [r4, #20]
 8006eae:	b003      	add	sp, #12
 8006eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb2:	466a      	mov	r2, sp
 8006eb4:	ab01      	add	r3, sp, #4
 8006eb6:	f7ff ffc9 	bl	8006e4c <__swhatbuf_r>
 8006eba:	9f00      	ldr	r7, [sp, #0]
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f7fe fec7 	bl	8005c54 <_malloc_r>
 8006ec6:	b948      	cbnz	r0, 8006edc <__smakebuf_r+0x46>
 8006ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ecc:	059a      	lsls	r2, r3, #22
 8006ece:	d4ee      	bmi.n	8006eae <__smakebuf_r+0x18>
 8006ed0:	f023 0303 	bic.w	r3, r3, #3
 8006ed4:	f043 0302 	orr.w	r3, r3, #2
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	e7e2      	b.n	8006ea2 <__smakebuf_r+0xc>
 8006edc:	89a3      	ldrh	r3, [r4, #12]
 8006ede:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	6020      	str	r0, [r4, #0]
 8006eec:	b15b      	cbz	r3, 8006f06 <__smakebuf_r+0x70>
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef4:	f000 f81e 	bl	8006f34 <_isatty_r>
 8006ef8:	b128      	cbz	r0, 8006f06 <__smakebuf_r+0x70>
 8006efa:	89a3      	ldrh	r3, [r4, #12]
 8006efc:	f023 0303 	bic.w	r3, r3, #3
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	89a3      	ldrh	r3, [r4, #12]
 8006f08:	431d      	orrs	r5, r3
 8006f0a:	81a5      	strh	r5, [r4, #12]
 8006f0c:	e7cf      	b.n	8006eae <__smakebuf_r+0x18>
	...

08006f10 <_fstat_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	2300      	movs	r3, #0
 8006f14:	4d06      	ldr	r5, [pc, #24]	@ (8006f30 <_fstat_r+0x20>)
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7fa febf 	bl	8001ca0 <_fstat>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_fstat_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_fstat_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	200003f0 	.word	0x200003f0

08006f34 <_isatty_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	2300      	movs	r3, #0
 8006f38:	4d05      	ldr	r5, [pc, #20]	@ (8006f50 <_isatty_r+0x1c>)
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fa febd 	bl	8001cbe <_isatty>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_isatty_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_isatty_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	200003f0 	.word	0x200003f0

08006f54 <_init>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr

08006f60 <_fini>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr
