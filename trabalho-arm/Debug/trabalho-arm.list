
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002090  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800219c  0800219c  0000319c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021ec  080021ec  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080021ec  080021ec  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021ec  080021ec  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021ec  080021ec  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021f0  080021f0  000031f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080021f4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002200  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002200  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084dd  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019dd  00000000  00000000  0000c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  0000def0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000798  00000000  00000000  0000e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001730b  00000000  00000000  0000f070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b653  00000000  00000000  0002637b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008922c  00000000  00000000  000319ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000babfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002800  00000000  00000000  000bac40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bd440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002184 	.word	0x08002184

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002184 	.word	0x08002184

0800014c <debounce>:
#include "main.h"
#include "keypad.h"

// Debounce function to check the key press stability
static uint8_t debounce(GPIO_TypeDef* row_port, uint16_t row_pin) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
    uint8_t count = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]
    uint8_t keylast = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	73bb      	strb	r3, [r7, #14]
    uint8_t keynow = 1;
 8000160:	2301      	movs	r3, #1
 8000162:	737b      	strb	r3, [r7, #13]

    while (count < 7) {
 8000164:	e015      	b.n	8000192 <debounce+0x46>
        HAL_Delay(10); // Adjust debounce delay as needed
 8000166:	200a      	movs	r0, #10
 8000168:	f000 fd38 	bl	8000bdc <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 800016c:	887b      	ldrh	r3, [r7, #2]
 800016e:	4619      	mov	r1, r3
 8000170:	6878      	ldr	r0, [r7, #4]
 8000172:	f000 ffbf 	bl	80010f4 <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	737b      	strb	r3, [r7, #13]
        if (keynow == keylast) {
 800017a:	7b7a      	ldrb	r2, [r7, #13]
 800017c:	7bbb      	ldrb	r3, [r7, #14]
 800017e:	429a      	cmp	r2, r3
 8000180:	d103      	bne.n	800018a <debounce+0x3e>
            count++;
 8000182:	7bfb      	ldrb	r3, [r7, #15]
 8000184:	3301      	adds	r3, #1
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	e001      	b.n	800018e <debounce+0x42>
        } else {
            count = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	73fb      	strb	r3, [r7, #15]
        }
        keylast = keynow;
 800018e:	7b7b      	ldrb	r3, [r7, #13]
 8000190:	73bb      	strb	r3, [r7, #14]
    while (count < 7) {
 8000192:	7bfb      	ldrb	r3, [r7, #15]
 8000194:	2b06      	cmp	r3, #6
 8000196:	d9e6      	bls.n	8000166 <debounce+0x1a>
    }
    return keynow;
 8000198:	7b7b      	ldrb	r3, [r7, #13]
}
 800019a:	4618      	mov	r0, r3
 800019c:	3710      	adds	r7, #16
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
	...

080001a4 <keypad_init>:

void keypad_init(void) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b084      	sub	sp, #16
 80001a8:	af00      	add	r7, sp, #0
    // Set columns as outputs (low)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001aa:	463b      	mov	r3, r7
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = KEYPAD_COL1_Pin | KEYPAD_COL2_Pin | KEYPAD_COL3_Pin | KEYPAD_COL4_Pin;
 80001b6:	f640 4306 	movw	r3, #3078	@ 0xc06
 80001ba:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001bc:	2301      	movs	r3, #1
 80001be:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001c0:	2300      	movs	r3, #0
 80001c2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001c4:	2303      	movs	r3, #3
 80001c6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(KEYPAD_COL1_GPIO_Port, &GPIO_InitStruct);
 80001c8:	463b      	mov	r3, r7
 80001ca:	4619      	mov	r1, r3
 80001cc:	480c      	ldr	r0, [pc, #48]	@ (8000200 <keypad_init+0x5c>)
 80001ce:	f000 fe0d 	bl	8000dec <HAL_GPIO_Init>

    HAL_GPIO_WritePin(KEYPAD_COL1_GPIO_Port, KEYPAD_COL1_Pin | KEYPAD_COL2_Pin | KEYPAD_COL3_Pin | KEYPAD_COL4_Pin, GPIO_PIN_RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	f640 4106 	movw	r1, #3078	@ 0xc06
 80001d8:	4809      	ldr	r0, [pc, #36]	@ (8000200 <keypad_init+0x5c>)
 80001da:	f000 ffa2 	bl	8001122 <HAL_GPIO_WritePin>

    // Set rows as inputs with pull-up resistors
    GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin | KEYPAD_ROW2_Pin | KEYPAD_ROW3_Pin | KEYPAD_ROW4_Pin;
 80001de:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80001e2:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001e4:	2300      	movs	r3, #0
 80001e6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e8:	2301      	movs	r3, #1
 80001ea:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(KEYPAD_ROW1_GPIO_Port, &GPIO_InitStruct);
 80001ec:	463b      	mov	r3, r7
 80001ee:	4619      	mov	r1, r3
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <keypad_init+0x5c>)
 80001f2:	f000 fdfb 	bl	8000dec <HAL_GPIO_Init>
}
 80001f6:	bf00      	nop
 80001f8:	3710      	adds	r7, #16
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	40010c00 	.word	0x40010c00

08000204 <keypad_getkey>:

char keypad_getkey(void) {
 8000204:	b590      	push	{r4, r7, lr}
 8000206:	b087      	sub	sp, #28
 8000208:	af00      	add	r7, sp, #0
    short row, col;
    const char keys[4][4] = {
 800020a:	4b5d      	ldr	r3, [pc, #372]	@ (8000380 <keypad_getkey+0x17c>)
 800020c:	1d3c      	adds	r4, r7, #4
 800020e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 8000214:	2300      	movs	r3, #0
 8000216:	82bb      	strh	r3, [r7, #20]
 8000218:	e0a7      	b.n	800036a <keypad_getkey+0x166>
        // Set the current column to low
        HAL_GPIO_WritePin((col == 0) ? KEYPAD_COL1_GPIO_Port :
 800021a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d00f      	beq.n	8000242 <keypad_getkey+0x3e>
 8000222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000226:	2b01      	cmp	r3, #1
 8000228:	d009      	beq.n	800023e <keypad_getkey+0x3a>
 800022a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800022e:	2b02      	cmp	r3, #2
 8000230:	d102      	bne.n	8000238 <keypad_getkey+0x34>
 8000232:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000236:	e005      	b.n	8000244 <keypad_getkey+0x40>
 8000238:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800023c:	e002      	b.n	8000244 <keypad_getkey+0x40>
 800023e:	2304      	movs	r3, #4
 8000240:	e000      	b.n	8000244 <keypad_getkey+0x40>
 8000242:	2302      	movs	r3, #2
 8000244:	2200      	movs	r2, #0
 8000246:	4619      	mov	r1, r3
 8000248:	484e      	ldr	r0, [pc, #312]	@ (8000384 <keypad_getkey+0x180>)
 800024a:	f000 ff6a 	bl	8001122 <HAL_GPIO_WritePin>
                          (col == 0) ? KEYPAD_COL1_Pin :
                          (col == 1) ? KEYPAD_COL2_Pin :
                          (col == 2) ? KEYPAD_COL3_Pin : KEYPAD_COL4_Pin,
                          GPIO_PIN_RESET);

        for (row = 0; row < 4; row++) {
 800024e:	2300      	movs	r3, #0
 8000250:	82fb      	strh	r3, [r7, #22]
 8000252:	e066      	b.n	8000322 <keypad_getkey+0x11e>
            if (!HAL_GPIO_ReadPin((row == 0) ? KEYPAD_ROW1_GPIO_Port :
 8000254:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d010      	beq.n	800027e <keypad_getkey+0x7a>
 800025c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d009      	beq.n	8000278 <keypad_getkey+0x74>
 8000264:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000268:	2b02      	cmp	r3, #2
 800026a:	d102      	bne.n	8000272 <keypad_getkey+0x6e>
 800026c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000270:	e007      	b.n	8000282 <keypad_getkey+0x7e>
 8000272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000276:	e004      	b.n	8000282 <keypad_getkey+0x7e>
 8000278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800027c:	e001      	b.n	8000282 <keypad_getkey+0x7e>
 800027e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000282:	4619      	mov	r1, r3
 8000284:	483f      	ldr	r0, [pc, #252]	@ (8000384 <keypad_getkey+0x180>)
 8000286:	f000 ff35 	bl	80010f4 <HAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d142      	bne.n	8000316 <keypad_getkey+0x112>
                                  (row == 2) ? KEYPAD_ROW3_GPIO_Port : KEYPAD_ROW4_GPIO_Port,
                                  (row == 0) ? KEYPAD_ROW1_Pin :
                                  (row == 1) ? KEYPAD_ROW2_Pin :
                                  (row == 2) ? KEYPAD_ROW3_Pin : KEYPAD_ROW4_Pin)) {
                // Check if key is pressed and debounced
                if (debounce((row == 0) ? KEYPAD_ROW1_GPIO_Port :
 8000290:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d010      	beq.n	80002ba <keypad_getkey+0xb6>
 8000298:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800029c:	2b01      	cmp	r3, #1
 800029e:	d009      	beq.n	80002b4 <keypad_getkey+0xb0>
 80002a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80002a4:	2b02      	cmp	r3, #2
 80002a6:	d102      	bne.n	80002ae <keypad_getkey+0xaa>
 80002a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002ac:	e007      	b.n	80002be <keypad_getkey+0xba>
 80002ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002b2:	e004      	b.n	80002be <keypad_getkey+0xba>
 80002b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b8:	e001      	b.n	80002be <keypad_getkey+0xba>
 80002ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002be:	4619      	mov	r1, r3
 80002c0:	4830      	ldr	r0, [pc, #192]	@ (8000384 <keypad_getkey+0x180>)
 80002c2:	f7ff ff43 	bl	800014c <debounce>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d024      	beq.n	8000316 <keypad_getkey+0x112>
                             (row == 2) ? KEYPAD_ROW3_GPIO_Port : KEYPAD_ROW4_GPIO_Port,
                             (row == 0) ? KEYPAD_ROW1_Pin :
                             (row == 1) ? KEYPAD_ROW2_Pin :
                             (row == 2) ? KEYPAD_ROW3_Pin : KEYPAD_ROW4_Pin)) {
                    // Reset the column to high
                    HAL_GPIO_WritePin((col == 0) ? KEYPAD_COL1_GPIO_Port :
 80002cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d00f      	beq.n	80002f4 <keypad_getkey+0xf0>
 80002d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80002d8:	2b01      	cmp	r3, #1
 80002da:	d009      	beq.n	80002f0 <keypad_getkey+0xec>
 80002dc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80002e0:	2b02      	cmp	r3, #2
 80002e2:	d102      	bne.n	80002ea <keypad_getkey+0xe6>
 80002e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e8:	e005      	b.n	80002f6 <keypad_getkey+0xf2>
 80002ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80002ee:	e002      	b.n	80002f6 <keypad_getkey+0xf2>
 80002f0:	2304      	movs	r3, #4
 80002f2:	e000      	b.n	80002f6 <keypad_getkey+0xf2>
 80002f4:	2302      	movs	r3, #2
 80002f6:	2201      	movs	r2, #1
 80002f8:	4619      	mov	r1, r3
 80002fa:	4822      	ldr	r0, [pc, #136]	@ (8000384 <keypad_getkey+0x180>)
 80002fc:	f000 ff11 	bl	8001122 <HAL_GPIO_WritePin>
                                      (col == 2) ? KEYPAD_COL3_GPIO_Port : KEYPAD_COL4_GPIO_Port,
                                      (col == 0) ? KEYPAD_COL1_Pin :
                                      (col == 1) ? KEYPAD_COL2_Pin :
                                      (col == 2) ? KEYPAD_COL3_Pin : KEYPAD_COL4_Pin,
                                      GPIO_PIN_SET);
                    return keys[row][col]; // Return the pressed key
 8000300:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000304:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	3218      	adds	r2, #24
 800030c:	443a      	add	r2, r7
 800030e:	4413      	add	r3, r2
 8000310:	3b14      	subs	r3, #20
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	e02f      	b.n	8000376 <keypad_getkey+0x172>
        for (row = 0; row < 4; row++) {
 8000316:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800031a:	b29b      	uxth	r3, r3
 800031c:	3301      	adds	r3, #1
 800031e:	b29b      	uxth	r3, r3
 8000320:	82fb      	strh	r3, [r7, #22]
 8000322:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000326:	2b03      	cmp	r3, #3
 8000328:	dd94      	ble.n	8000254 <keypad_getkey+0x50>
                }
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin((col == 0) ? KEYPAD_COL1_GPIO_Port :
 800032a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d00f      	beq.n	8000352 <keypad_getkey+0x14e>
 8000332:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d009      	beq.n	800034e <keypad_getkey+0x14a>
 800033a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d102      	bne.n	8000348 <keypad_getkey+0x144>
 8000342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000346:	e005      	b.n	8000354 <keypad_getkey+0x150>
 8000348:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800034c:	e002      	b.n	8000354 <keypad_getkey+0x150>
 800034e:	2304      	movs	r3, #4
 8000350:	e000      	b.n	8000354 <keypad_getkey+0x150>
 8000352:	2302      	movs	r3, #2
 8000354:	2201      	movs	r2, #1
 8000356:	4619      	mov	r1, r3
 8000358:	480a      	ldr	r0, [pc, #40]	@ (8000384 <keypad_getkey+0x180>)
 800035a:	f000 fee2 	bl	8001122 <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 800035e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000362:	b29b      	uxth	r3, r3
 8000364:	3301      	adds	r3, #1
 8000366:	b29b      	uxth	r3, r3
 8000368:	82bb      	strh	r3, [r7, #20]
 800036a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800036e:	2b03      	cmp	r3, #3
 8000370:	f77f af53 	ble.w	800021a <keypad_getkey+0x16>
                          (col == 1) ? KEYPAD_COL2_Pin :
                          (col == 2) ? KEYPAD_COL3_Pin : KEYPAD_COL4_Pin,
                          GPIO_PIN_SET);
    }

    return 0; // Return 0 if no key is pressed
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	bd90      	pop	{r4, r7, pc}
 800037e:	bf00      	nop
 8000380:	0800219c 	.word	0x0800219c
 8000384:	40010c00 	.word	0x40010c00

08000388 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000398:	4842      	ldr	r0, [pc, #264]	@ (80004a4 <write_command_LCD+0x11c>)
 800039a:	f000 fec2 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003a4:	483f      	ldr	r0, [pc, #252]	@ (80004a4 <write_command_LCD+0x11c>)
 80003a6:	f000 febc 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	111b      	asrs	r3, r3, #4
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	461a      	mov	r2, r3
 80003b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003bc:	4839      	ldr	r0, [pc, #228]	@ (80004a4 <write_command_LCD+0x11c>)
 80003be:	f000 feb0 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	115b      	asrs	r3, r3, #5
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	461a      	mov	r2, r3
 80003d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003d4:	4833      	ldr	r0, [pc, #204]	@ (80004a4 <write_command_LCD+0x11c>)
 80003d6:	f000 fea4 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	119b      	asrs	r3, r3, #6
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	f003 0301 	and.w	r3, r3, #1
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	461a      	mov	r2, r3
 80003e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ec:	482d      	ldr	r0, [pc, #180]	@ (80004a4 <write_command_LCD+0x11c>)
 80003ee:	f000 fe98 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	09db      	lsrs	r3, r3, #7
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	461a      	mov	r2, r3
 80003fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003fe:	4829      	ldr	r0, [pc, #164]	@ (80004a4 <write_command_LCD+0x11c>)
 8000400:	f000 fe8f 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000404:	2001      	movs	r0, #1
 8000406:	f000 fbe9 	bl	8000bdc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000410:	4824      	ldr	r0, [pc, #144]	@ (80004a4 <write_command_LCD+0x11c>)
 8000412:	f000 fe86 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000416:	2002      	movs	r0, #2
 8000418:	f000 fbe0 	bl	8000bdc <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000422:	4820      	ldr	r0, [pc, #128]	@ (80004a4 <write_command_LCD+0x11c>)
 8000424:	f000 fe7d 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000436:	481b      	ldr	r0, [pc, #108]	@ (80004a4 <write_command_LCD+0x11c>)
 8000438:	f000 fe73 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	105b      	asrs	r3, r3, #1
 8000440:	b2db      	uxtb	r3, r3
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	b2db      	uxtb	r3, r3
 8000448:	461a      	mov	r2, r3
 800044a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800044e:	4815      	ldr	r0, [pc, #84]	@ (80004a4 <write_command_LCD+0x11c>)
 8000450:	f000 fe67 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	109b      	asrs	r3, r3, #2
 8000458:	b2db      	uxtb	r3, r3
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	b2db      	uxtb	r3, r3
 8000460:	461a      	mov	r2, r3
 8000462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000466:	480f      	ldr	r0, [pc, #60]	@ (80004a4 <write_command_LCD+0x11c>)
 8000468:	f000 fe5b 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	10db      	asrs	r3, r3, #3
 8000470:	b2db      	uxtb	r3, r3
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	461a      	mov	r2, r3
 800047a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800047e:	4809      	ldr	r0, [pc, #36]	@ (80004a4 <write_command_LCD+0x11c>)
 8000480:	f000 fe4f 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000484:	2001      	movs	r0, #1
 8000486:	f000 fba9 	bl	8000bdc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000490:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <write_command_LCD+0x11c>)
 8000492:	f000 fe46 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000496:	2002      	movs	r0, #2
 8000498:	f000 fba0 	bl	8000bdc <HAL_Delay>
}
 800049c:	bf00      	nop
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010800 	.word	0x40010800

080004a8 <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004b8:	4842      	ldr	r0, [pc, #264]	@ (80005c4 <write_data_LCD+0x11c>)
 80004ba:	f000 fe32 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c4:	483f      	ldr	r0, [pc, #252]	@ (80005c4 <write_data_LCD+0x11c>)
 80004c6:	f000 fe2c 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004ca:	79fb      	ldrb	r3, [r7, #7]
 80004cc:	111b      	asrs	r3, r3, #4
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004dc:	4839      	ldr	r0, [pc, #228]	@ (80005c4 <write_data_LCD+0x11c>)
 80004de:	f000 fe20 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	115b      	asrs	r3, r3, #5
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004f4:	4833      	ldr	r0, [pc, #204]	@ (80005c4 <write_data_LCD+0x11c>)
 80004f6:	f000 fe14 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	119b      	asrs	r3, r3, #6
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800050c:	482d      	ldr	r0, [pc, #180]	@ (80005c4 <write_data_LCD+0x11c>)
 800050e:	f000 fe08 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	09db      	lsrs	r3, r3, #7
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800051e:	4829      	ldr	r0, [pc, #164]	@ (80005c4 <write_data_LCD+0x11c>)
 8000520:	f000 fdff 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fb59 	bl	8000bdc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000530:	4824      	ldr	r0, [pc, #144]	@ (80005c4 <write_data_LCD+0x11c>)
 8000532:	f000 fdf6 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000536:	2002      	movs	r0, #2
 8000538:	f000 fb50 	bl	8000bdc <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000542:	4820      	ldr	r0, [pc, #128]	@ (80005c4 <write_data_LCD+0x11c>)
 8000544:	f000 fded 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000556:	481b      	ldr	r0, [pc, #108]	@ (80005c4 <write_data_LCD+0x11c>)
 8000558:	f000 fde3 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	105b      	asrs	r3, r3, #1
 8000560:	b2db      	uxtb	r3, r3
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	b2db      	uxtb	r3, r3
 8000568:	461a      	mov	r2, r3
 800056a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800056e:	4815      	ldr	r0, [pc, #84]	@ (80005c4 <write_data_LCD+0x11c>)
 8000570:	f000 fdd7 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	109b      	asrs	r3, r3, #2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000586:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <write_data_LCD+0x11c>)
 8000588:	f000 fdcb 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	10db      	asrs	r3, r3, #3
 8000590:	b2db      	uxtb	r3, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	461a      	mov	r2, r3
 800059a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800059e:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <write_data_LCD+0x11c>)
 80005a0:	f000 fdbf 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fb19 	bl	8000bdc <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b0:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <write_data_LCD+0x11c>)
 80005b2:	f000 fdb6 	bl	8001122 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80005b6:	2002      	movs	r0, #2
 80005b8:	f000 fb10 	bl	8000bdc <HAL_Delay>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010800 	.word	0x40010800

080005c8 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 80005cc:	2032      	movs	r0, #50	@ 0x32
 80005ce:	f000 fb05 	bl	8000bdc <HAL_Delay>
    write_command_LCD(0x33);
 80005d2:	2033      	movs	r0, #51	@ 0x33
 80005d4:	f7ff fed8 	bl	8000388 <write_command_LCD>
    write_command_LCD(0x32);
 80005d8:	2032      	movs	r0, #50	@ 0x32
 80005da:	f7ff fed5 	bl	8000388 <write_command_LCD>
    write_command_LCD(0x28);
 80005de:	2028      	movs	r0, #40	@ 0x28
 80005e0:	f7ff fed2 	bl	8000388 <write_command_LCD>
    write_command_LCD(0x0C);
 80005e4:	200c      	movs	r0, #12
 80005e6:	f7ff fecf 	bl	8000388 <write_command_LCD>
    write_command_LCD(0x06);
 80005ea:	2006      	movs	r0, #6
 80005ec:	f7ff fecc 	bl	8000388 <write_command_LCD>
    write_command_LCD(0x01);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f7ff fec9 	bl	8000388 <write_command_LCD>
    HAL_Delay(2);
 80005f6:	2002      	movs	r0, #2
 80005f8:	f000 faf0 	bl	8000bdc <HAL_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    while (*text) {
 8000608:	e006      	b.n	8000618 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ff48 	bl	80004a8 <write_data_LCD>
    while (*text) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f4      	bne.n	800060a <write_string_LCD+0xa>
    }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <write_string_line>:

void write_string_line(char line, const char *text) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	6039      	str	r1, [r7, #0]
 8000634:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d103      	bne.n	8000644 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 800063c:	2080      	movs	r0, #128	@ 0x80
 800063e:	f7ff fea3 	bl	8000388 <write_command_LCD>
 8000642:	e005      	b.n	8000650 <write_string_line+0x26>
    } else if (line == 2) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d102      	bne.n	8000650 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 800064a:	20c0      	movs	r0, #192	@ 0xc0
 800064c:	f7ff fe9c 	bl	8000388 <write_command_LCD>
    }
    write_string_LCD(text);
 8000650:	6838      	ldr	r0, [r7, #0]
 8000652:	f7ff ffd5 	bl	8000600 <write_string_LCD>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <clear_display>:

void clear_display(void) {
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff fe90 	bl	8000388 <write_command_LCD>
    HAL_Delay(2);
 8000668:	2002      	movs	r0, #2
 800066a:	f000 fab7 	bl	8000bdc <HAL_Delay>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067a:	f000 fa4d 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067e:	f000 f837 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000682:	f000 f8f9 	bl	8000878 <MX_GPIO_Init>
//  MX_ADC1_Init();
  MX_TIM1_Init();
 8000686:	f000 f88f 	bl	80007a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_LCD();
 800068a:	f7ff ff9d 	bl	80005c8 <init_LCD>
  keypad_init();
 800068e:	f7ff fd89 	bl	80001a4 <keypad_init>

  clear_display();
 8000692:	f7ff ffe4 	bl	800065e <clear_display>
  write_string_line(1,"   Smart-fARM");
 8000696:	4913      	ldr	r1, [pc, #76]	@ (80006e4 <main+0x70>)
 8000698:	2001      	movs	r0, #1
 800069a:	f7ff ffc6 	bl	800062a <write_string_line>
  while (1)
  {
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	  HAL_Delay(500);

	 char key = keypad_getkey();
 800069e:	f7ff fdb1 	bl	8000204 <keypad_getkey>
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	 if(key != 0){
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0f8      	beq.n	800069e <main+0x2a>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <main+0x74>)
 80006b2:	f000 fd4e 	bl	8001152 <HAL_GPIO_TogglePin>

		 clear_display();
 80006b6:	f7ff ffd2 	bl	800065e <clear_display>
		 write_string_line(1,"GOT KEY: ");
 80006ba:	490c      	ldr	r1, [pc, #48]	@ (80006ec <main+0x78>)
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffb4 	bl	800062a <write_string_line>
		 HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fa8a 	bl	8000bdc <HAL_Delay>
		 write_data_LCD(key);
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff feec 	bl	80004a8 <write_data_LCD>
		 HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	@ 0x64
 80006d2:	f000 fa83 	bl	8000bdc <HAL_Delay>
//		 ldr1_value = read_adc_value(ADC_CHANNEL_0);
//
//		 // Read LDR2 value from PA1 (ADC1_IN1)
//		 ldr2_value = read_adc_value(ADC_CHANNEL_1);

		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80006d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006da:	4803      	ldr	r0, [pc, #12]	@ (80006e8 <main+0x74>)
 80006dc:	f000 fd39 	bl	8001152 <HAL_GPIO_TogglePin>
  {
 80006e0:	e7dd      	b.n	800069e <main+0x2a>
 80006e2:	bf00      	nop
 80006e4:	080021ac 	.word	0x080021ac
 80006e8:	40011000 	.word	0x40011000
 80006ec:	080021bc 	.word	0x080021bc

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006fa:	2228      	movs	r2, #40	@ 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fd14 	bl	800212c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000720:	2301      	movs	r3, #1
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000724:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800073c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fd1c 	bl	8001184 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000752:	f000 f933 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000766:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ff88 	bl	8001688 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800077e:	f000 f91d 	bl	80009bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000782:	2302      	movs	r3, #2
 8000784:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800078a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f8d6 	bl	8001940 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079a:	f000 f90f 	bl	80009bc <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	@ 0x30
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d4:	4b26      	ldr	r3, [pc, #152]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007d6:	4a27      	ldr	r2, [pc, #156]	@ (8000874 <MX_TIM1_Init+0xcc>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007da:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b23      	ldr	r3, [pc, #140]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007e6:	4b22      	ldr	r3, [pc, #136]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000870 <MX_TIM1_Init+0xc8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000800:	481b      	ldr	r0, [pc, #108]	@ (8000870 <MX_TIM1_Init+0xc8>)
 8000802:	f001 f953 	bl	8001aac <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800080c:	f000 f8d6 	bl	80009bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4619      	mov	r1, r3
 800081c:	4814      	ldr	r0, [pc, #80]	@ (8000870 <MX_TIM1_Init+0xc8>)
 800081e:	f001 f994 	bl	8001b4a <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000828:	f000 f8c8 	bl	80009bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	480d      	ldr	r0, [pc, #52]	@ (8000870 <MX_TIM1_Init+0xc8>)
 800083c:	f001 fa4c 	bl	8001cd8 <HAL_TIM_SlaveConfigSynchro>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000846:	f000 f8b9 	bl	80009bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	@ (8000870 <MX_TIM1_Init+0xc8>)
 8000858:	f001 fc0a 	bl	8002070 <HAL_TIMEx_MasterConfigSynchronization>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000862:	f000 f8ab 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3730      	adds	r7, #48	@ 0x30
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000028 	.word	0x20000028
 8000874:	40012c00 	.word	0x40012c00

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088c:	4b47      	ldr	r3, [pc, #284]	@ (80009ac <MX_GPIO_Init+0x134>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a46      	ldr	r2, [pc, #280]	@ (80009ac <MX_GPIO_Init+0x134>)
 8000892:	f043 0310 	orr.w	r3, r3, #16
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <MX_GPIO_Init+0x134>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0310 	and.w	r3, r3, #16
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a4:	4b41      	ldr	r3, [pc, #260]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a40      	ldr	r2, [pc, #256]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b3b      	ldr	r3, [pc, #236]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a3a      	ldr	r2, [pc, #232]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d4:	4b35      	ldr	r3, [pc, #212]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a34      	ldr	r2, [pc, #208]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008da:	f043 0308 	orr.w	r3, r3, #8
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <MX_GPIO_Init+0x134>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0308 	and.w	r3, r3, #8
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008f2:	482f      	ldr	r0, [pc, #188]	@ (80009b0 <MX_GPIO_Init+0x138>)
 80008f4:	f000 fc15 	bl	8001122 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f640 4106 	movw	r1, #3078	@ 0xc06
 80008fe:	482d      	ldr	r0, [pc, #180]	@ (80009b4 <MX_GPIO_Init+0x13c>)
 8000900:	f000 fc0f 	bl	8001122 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 417c 	mov.w	r1, #64512	@ 0xfc00
 800090a:	482b      	ldr	r0, [pc, #172]	@ (80009b8 <MX_GPIO_Init+0x140>)
 800090c:	f000 fc09 	bl	8001122 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000910:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 0310 	add.w	r3, r7, #16
 8000926:	4619      	mov	r1, r3
 8000928:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <MX_GPIO_Init+0x138>)
 800092a:	f000 fa5f 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin;
 800092e:	f640 4306 	movw	r3, #3078	@ 0xc06
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	481b      	ldr	r0, [pc, #108]	@ (80009b4 <MX_GPIO_Init+0x13c>)
 8000948:	f000 fa50 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 800094c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000950:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	@ (80009b4 <MX_GPIO_Init+0x13c>)
 8000962:	f000 fa43 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8000966:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <MX_GPIO_Init+0x140>)
 8000980:	f000 fa34 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin;
 8000984:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_GPIO_Init+0x140>)
 800099e:	f000 fa25 	bl	8000dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a2:	bf00      	nop
 80009a4:	3720      	adds	r7, #32
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40011000 	.word	0x40011000
 80009b4:	40010c00 	.word	0x40010c00
 80009b8:	40010800 	.word	0x40010800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a14      	ldr	r2, [pc, #80]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b12      	ldr	r3, [pc, #72]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	61d3      	str	r3, [r2, #28]
 80009f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <HAL_MspInit+0x5c>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <HAL_MspInit+0x60>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_MspInit+0x60>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010000 	.word	0x40010000

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a09      	ldr	r2, [pc, #36]	@ (8000a60 <HAL_TIM_Base_MspInit+0x34>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10b      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a48:	6193      	str	r3, [r2, #24]
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_TIM_Base_MspInit+0x38>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	40021000 	.word	0x40021000

08000a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <NMI_Handler+0x4>

08000a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <MemManage_Handler+0x4>

08000a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f874 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff fff8 	bl	8000ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ad2:	490c      	ldr	r1, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ae8:	4c09      	ldr	r4, [pc, #36]	@ (8000b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f001 fb21 	bl	800213c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000afa:	f7ff fdbb 	bl	8000674 <main>
  bx lr
 8000afe:	4770      	bx	lr
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	080021f4 	.word	0x080021f4
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	20000074 	.word	0x20000074

08000b14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_2_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_Init+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	@ (8000b40 <HAL_Init+0x28>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f92b 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f000 f808 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff ff48 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000

08000b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b4c:	4b12      	ldr	r3, [pc, #72]	@ (8000b98 <HAL_InitTick+0x54>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <HAL_InitTick+0x58>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4619      	mov	r1, r3
 8000b56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f935 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e00e      	b.n	8000b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b0f      	cmp	r3, #15
 8000b76:	d80a      	bhi.n	8000b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	f000 f90b 	bl	8000d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4a06      	ldr	r2, [pc, #24]	@ (8000ba0 <HAL_InitTick+0x5c>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4a03      	ldr	r2, [pc, #12]	@ (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	6013      	str	r3, [r2, #0]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000070 	.word	0x20000070

08000bc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	@ (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000070 	.word	0x20000070

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff90 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff49 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff5e 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffb0 	bl	8000d40 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b08b      	sub	sp, #44	@ 0x2c
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfe:	e169      	b.n	80010d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e00:	2201      	movs	r2, #1
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	69fa      	ldr	r2, [r7, #28]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 8158 	bne.w	80010ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	4a9a      	ldr	r2, [pc, #616]	@ (800108c <HAL_GPIO_Init+0x2a0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d05e      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e28:	4a98      	ldr	r2, [pc, #608]	@ (800108c <HAL_GPIO_Init+0x2a0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d875      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e2e:	4a98      	ldr	r2, [pc, #608]	@ (8001090 <HAL_GPIO_Init+0x2a4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d058      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e34:	4a96      	ldr	r2, [pc, #600]	@ (8001090 <HAL_GPIO_Init+0x2a4>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d86f      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e3a:	4a96      	ldr	r2, [pc, #600]	@ (8001094 <HAL_GPIO_Init+0x2a8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d052      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e40:	4a94      	ldr	r2, [pc, #592]	@ (8001094 <HAL_GPIO_Init+0x2a8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d869      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e46:	4a94      	ldr	r2, [pc, #592]	@ (8001098 <HAL_GPIO_Init+0x2ac>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d04c      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e4c:	4a92      	ldr	r2, [pc, #584]	@ (8001098 <HAL_GPIO_Init+0x2ac>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d863      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e52:	4a92      	ldr	r2, [pc, #584]	@ (800109c <HAL_GPIO_Init+0x2b0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d046      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
 8000e58:	4a90      	ldr	r2, [pc, #576]	@ (800109c <HAL_GPIO_Init+0x2b0>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d85d      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e5e:	2b12      	cmp	r3, #18
 8000e60:	d82a      	bhi.n	8000eb8 <HAL_GPIO_Init+0xcc>
 8000e62:	2b12      	cmp	r3, #18
 8000e64:	d859      	bhi.n	8000f1a <HAL_GPIO_Init+0x12e>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <HAL_GPIO_Init+0x80>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000ee7 	.word	0x08000ee7
 8000e70:	08000ec1 	.word	0x08000ec1
 8000e74:	08000ed3 	.word	0x08000ed3
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f1b 	.word	0x08000f1b
 8000e80:	08000f1b 	.word	0x08000f1b
 8000e84:	08000f1b 	.word	0x08000f1b
 8000e88:	08000f1b 	.word	0x08000f1b
 8000e8c:	08000f1b 	.word	0x08000f1b
 8000e90:	08000f1b 	.word	0x08000f1b
 8000e94:	08000f1b 	.word	0x08000f1b
 8000e98:	08000f1b 	.word	0x08000f1b
 8000e9c:	08000f1b 	.word	0x08000f1b
 8000ea0:	08000f1b 	.word	0x08000f1b
 8000ea4:	08000f1b 	.word	0x08000f1b
 8000ea8:	08000f1b 	.word	0x08000f1b
 8000eac:	08000f1b 	.word	0x08000f1b
 8000eb0:	08000ec9 	.word	0x08000ec9
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	4a79      	ldr	r2, [pc, #484]	@ (80010a0 <HAL_GPIO_Init+0x2b4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d013      	beq.n	8000ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ebe:	e02c      	b.n	8000f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	623b      	str	r3, [r7, #32]
          break;
 8000ec6:	e029      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	623b      	str	r3, [r7, #32]
          break;
 8000ed0:	e024      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	68db      	ldr	r3, [r3, #12]
 8000ed6:	3308      	adds	r3, #8
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e01f      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e01a      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d102      	bne.n	8000ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e013      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000efc:	2308      	movs	r3, #8
 8000efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	611a      	str	r2, [r3, #16]
          break;
 8000f06:	e009      	b.n	8000f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	615a      	str	r2, [r3, #20]
          break;
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x130>
          break;
 8000f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	2bff      	cmp	r3, #255	@ 0xff
 8000f20:	d801      	bhi.n	8000f26 <HAL_GPIO_Init+0x13a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	e001      	b.n	8000f2a <HAL_GPIO_Init+0x13e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	2bff      	cmp	r3, #255	@ 0xff
 8000f30:	d802      	bhi.n	8000f38 <HAL_GPIO_Init+0x14c>
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	e002      	b.n	8000f3e <HAL_GPIO_Init+0x152>
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	3b08      	subs	r3, #8
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	210f      	movs	r1, #15
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	401a      	ands	r2, r3
 8000f50:	6a39      	ldr	r1, [r7, #32]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 80b1 	beq.w	80010ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	4a4c      	ldr	r2, [pc, #304]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f72:	f043 0301 	orr.w	r3, r3, #1
 8000f76:	6193      	str	r3, [r2, #24]
 8000f78:	4b4a      	ldr	r3, [pc, #296]	@ (80010a4 <HAL_GPIO_Init+0x2b8>)
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f84:	4a48      	ldr	r2, [pc, #288]	@ (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a40      	ldr	r2, [pc, #256]	@ (80010ac <HAL_GPIO_Init+0x2c0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1ec>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80010b0 <HAL_GPIO_Init+0x2c4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1e8>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3e      	ldr	r2, [pc, #248]	@ (80010b4 <HAL_GPIO_Init+0x2c8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e4>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e006      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fcc:	2304      	movs	r3, #4
 8000fce:	e004      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fdc:	f002 0203 	and.w	r2, r2, #3
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4093      	lsls	r3, r2
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fea:	492f      	ldr	r1, [pc, #188]	@ (80010a8 <HAL_GPIO_Init+0x2bc>)
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	492c      	ldr	r1, [pc, #176]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	608b      	str	r3, [r1, #8]
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001012:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	43db      	mvns	r3, r3
 800101a:	4928      	ldr	r1, [pc, #160]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800101c:	4013      	ands	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	4922      	ldr	r1, [pc, #136]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	60cb      	str	r3, [r1, #12]
 8001038:	e006      	b.n	8001048 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	43db      	mvns	r3, r3
 8001042:	491e      	ldr	r1, [pc, #120]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001044:	4013      	ands	r3, r2
 8001046:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d006      	beq.n	8001062 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001054:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4918      	ldr	r1, [pc, #96]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	43db      	mvns	r3, r3
 800106a:	4914      	ldr	r1, [pc, #80]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800106c:	4013      	ands	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d021      	beq.n	80010c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	490e      	ldr	r1, [pc, #56]	@ (80010bc <HAL_GPIO_Init+0x2d0>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
 8001088:	e021      	b.n	80010ce <HAL_GPIO_Init+0x2e2>
 800108a:	bf00      	nop
 800108c:	10320000 	.word	0x10320000
 8001090:	10310000 	.word	0x10310000
 8001094:	10220000 	.word	0x10220000
 8001098:	10210000 	.word	0x10210000
 800109c:	10120000 	.word	0x10120000
 80010a0:	10110000 	.word	0x10110000
 80010a4:	40021000 	.word	0x40021000
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40010800 	.word	0x40010800
 80010b0:	40010c00 	.word	0x40010c00
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40011400 	.word	0x40011400
 80010bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <HAL_GPIO_Init+0x304>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4909      	ldr	r1, [pc, #36]	@ (80010f0 <HAL_GPIO_Init+0x304>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	3301      	adds	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	fa22 f303 	lsr.w	r3, r2, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f47f ae8e 	bne.w	8000e00 <HAL_GPIO_Init+0x14>
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	372c      	adds	r7, #44	@ 0x2c
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	40010400 	.word	0x40010400

080010f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	887b      	ldrh	r3, [r7, #2]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e001      	b.n	8001116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001116:	7bfb      	ldrb	r3, [r7, #15]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
 800112e:	4613      	mov	r3, r2
 8001130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001132:	787b      	ldrb	r3, [r7, #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001138:	887a      	ldrh	r2, [r7, #2]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800113e:	e003      	b.n	8001148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	611a      	str	r2, [r3, #16]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	460b      	mov	r3, r1
 800115c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001164:	887a      	ldrh	r2, [r7, #2]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	041a      	lsls	r2, r3, #16
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	43d9      	mvns	r1, r3
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	400b      	ands	r3, r1
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	611a      	str	r2, [r3, #16]
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e272      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8087 	beq.w	80012b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a4:	4b92      	ldr	r3, [pc, #584]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d00c      	beq.n	80011ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011b0:	4b8f      	ldr	r3, [pc, #572]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d112      	bne.n	80011e2 <HAL_RCC_OscConfig+0x5e>
 80011bc:	4b8c      	ldr	r3, [pc, #560]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011c8:	d10b      	bne.n	80011e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ca:	4b89      	ldr	r3, [pc, #548]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d06c      	beq.n	80012b0 <HAL_RCC_OscConfig+0x12c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d168      	bne.n	80012b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e24c      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011ea:	d106      	bne.n	80011fa <HAL_RCC_OscConfig+0x76>
 80011ec:	4b80      	ldr	r3, [pc, #512]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a7f      	ldr	r2, [pc, #508]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80011f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e02e      	b.n	8001258 <HAL_RCC_OscConfig+0xd4>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10c      	bne.n	800121c <HAL_RCC_OscConfig+0x98>
 8001202:	4b7b      	ldr	r3, [pc, #492]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a7a      	ldr	r2, [pc, #488]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	4b78      	ldr	r3, [pc, #480]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a77      	ldr	r2, [pc, #476]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e01d      	b.n	8001258 <HAL_RCC_OscConfig+0xd4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0xbc>
 8001226:	4b72      	ldr	r3, [pc, #456]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a71      	ldr	r2, [pc, #452]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6f      	ldr	r3, [pc, #444]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6e      	ldr	r2, [pc, #440]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0xd4>
 8001240:	4b6b      	ldr	r3, [pc, #428]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a6a      	ldr	r2, [pc, #424]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b68      	ldr	r3, [pc, #416]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a67      	ldr	r2, [pc, #412]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcb2 	bl	8000bc8 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcae 	bl	8000bc8 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	@ 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e200      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b5d      	ldr	r3, [pc, #372]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0xe4>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fc9e 	bl	8000bc8 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc9a 	bl	8000bc8 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1ec      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	4b53      	ldr	r3, [pc, #332]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0x10c>
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d063      	beq.n	8001386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012be:	4b4c      	ldr	r3, [pc, #304]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ca:	4b49      	ldr	r3, [pc, #292]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d11c      	bne.n	8001310 <HAL_RCC_OscConfig+0x18c>
 80012d6:	4b46      	ldr	r3, [pc, #280]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	4b43      	ldr	r3, [pc, #268]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x176>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1c0      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4939      	ldr	r1, [pc, #228]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	e03a      	b.n	8001386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d020      	beq.n	800135a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001318:	4b36      	ldr	r3, [pc, #216]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fc53 	bl	8000bc8 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fc4f 	bl	8000bc8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1a1      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4927      	ldr	r1, [pc, #156]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <HAL_RCC_OscConfig+0x270>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001360:	f7ff fc32 	bl	8000bc8 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fc2e 	bl	8000bc8 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e180      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d03a      	beq.n	8001408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d019      	beq.n	80013ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_RCC_OscConfig+0x274>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a0:	f7ff fc12 	bl	8000bc8 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc0e 	bl	8000bc8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e160      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fa9c 	bl	8001904 <RCC_Delay>
 80013cc:	e01c      	b.n	8001408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_RCC_OscConfig+0x274>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fbf8 	bl	8000bc8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013da:	e00f      	b.n	80013fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbf4 	bl	8000bc8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d908      	bls.n	80013fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e146      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	42420000 	.word	0x42420000
 80013f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fc:	4b92      	ldr	r3, [pc, #584]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e9      	bne.n	80013dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0304 	and.w	r3, r3, #4
 8001410:	2b00      	cmp	r3, #0
 8001412:	f000 80a6 	beq.w	8001562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800141a:	4b8b      	ldr	r3, [pc, #556]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10d      	bne.n	8001442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b88      	ldr	r3, [pc, #544]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	4a87      	ldr	r2, [pc, #540]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b85      	ldr	r3, [pc, #532]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001442:	4b82      	ldr	r3, [pc, #520]	@ (800164c <HAL_RCC_OscConfig+0x4c8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144e:	4b7f      	ldr	r3, [pc, #508]	@ (800164c <HAL_RCC_OscConfig+0x4c8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7e      	ldr	r2, [pc, #504]	@ (800164c <HAL_RCC_OscConfig+0x4c8>)
 8001454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800145a:	f7ff fbb5 	bl	8000bc8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001462:	f7ff fbb1 	bl	8000bc8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b64      	cmp	r3, #100	@ 0x64
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e103      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001474:	4b75      	ldr	r3, [pc, #468]	@ (800164c <HAL_RCC_OscConfig+0x4c8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d106      	bne.n	8001496 <HAL_RCC_OscConfig+0x312>
 8001488:	4b6f      	ldr	r3, [pc, #444]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	4a6e      	ldr	r2, [pc, #440]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	6213      	str	r3, [r2, #32]
 8001494:	e02d      	b.n	80014f2 <HAL_RCC_OscConfig+0x36e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0x334>
 800149e:	4b6a      	ldr	r3, [pc, #424]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4a69      	ldr	r2, [pc, #420]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014a4:	f023 0301 	bic.w	r3, r3, #1
 80014a8:	6213      	str	r3, [r2, #32]
 80014aa:	4b67      	ldr	r3, [pc, #412]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	4a66      	ldr	r2, [pc, #408]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	f023 0304 	bic.w	r3, r3, #4
 80014b4:	6213      	str	r3, [r2, #32]
 80014b6:	e01c      	b.n	80014f2 <HAL_RCC_OscConfig+0x36e>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d10c      	bne.n	80014da <HAL_RCC_OscConfig+0x356>
 80014c0:	4b61      	ldr	r3, [pc, #388]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a60      	ldr	r2, [pc, #384]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014c6:	f043 0304 	orr.w	r3, r3, #4
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	e00b      	b.n	80014f2 <HAL_RCC_OscConfig+0x36e>
 80014da:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	4a5a      	ldr	r2, [pc, #360]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6213      	str	r3, [r2, #32]
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a57      	ldr	r2, [pc, #348]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80014ec:	f023 0304 	bic.w	r3, r3, #4
 80014f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d015      	beq.n	8001526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb65 	bl	8000bc8 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	e00a      	b.n	8001518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001502:	f7ff fb61 	bl	8000bc8 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001510:	4293      	cmp	r3, r2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0b1      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001518:	4b4b      	ldr	r3, [pc, #300]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0ee      	beq.n	8001502 <HAL_RCC_OscConfig+0x37e>
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb4f 	bl	8000bc8 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fb4b 	bl	8000bc8 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e09b      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001544:	4b40      	ldr	r3, [pc, #256]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1ee      	bne.n	800152e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d105      	bne.n	8001562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001556:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	4a3b      	ldr	r2, [pc, #236]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800155c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	2b00      	cmp	r3, #0
 8001568:	f000 8087 	beq.w	800167a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800156c:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d061      	beq.n	800163c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d146      	bne.n	800160e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <HAL_RCC_OscConfig+0x4cc>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001586:	f7ff fb1f 	bl	8000bc8 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800158e:	f7ff fb1b 	bl	8000bc8 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e06d      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a0:	4b29      	ldr	r3, [pc, #164]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b4:	d108      	bne.n	80015c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015b6:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	4921      	ldr	r1, [pc, #132]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a19      	ldr	r1, [r3, #32]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	430b      	orrs	r3, r1
 80015da:	491b      	ldr	r1, [pc, #108]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e6:	f7ff faef 	bl	8000bc8 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff faeb 	bl	8000bc8 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e03d      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001600:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x46a>
 800160c:	e035      	b.n	800167a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <HAL_RCC_OscConfig+0x4cc>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fad8 	bl	8000bc8 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fad4 	bl	8000bc8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e026      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x498>
 800163a:	e01e      	b.n	800167a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e019      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
 8001648:	40021000 	.word	0x40021000
 800164c:	40007000 	.word	0x40007000
 8001650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001654:	4b0b      	ldr	r3, [pc, #44]	@ (8001684 <HAL_RCC_OscConfig+0x500>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	429a      	cmp	r2, r3
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	429a      	cmp	r2, r3
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0d0      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800169c:	4b6a      	ldr	r3, [pc, #424]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d910      	bls.n	80016cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b67      	ldr	r3, [pc, #412]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 0207 	bic.w	r2, r3, #7
 80016b2:	4965      	ldr	r1, [pc, #404]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ba:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	683a      	ldr	r2, [r7, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e0b8      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d020      	beq.n	800171a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016e4:	4b59      	ldr	r3, [pc, #356]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a58      	ldr	r2, [pc, #352]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0308 	and.w	r3, r3, #8
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a52      	ldr	r2, [pc, #328]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001708:	4b50      	ldr	r3, [pc, #320]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	494d      	ldr	r1, [pc, #308]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	4313      	orrs	r3, r2
 8001718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d040      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	4b47      	ldr	r3, [pc, #284]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d115      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e07f      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001746:	4b41      	ldr	r3, [pc, #260]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e073      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e06b      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001766:	4b39      	ldr	r3, [pc, #228]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f023 0203 	bic.w	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4936      	ldr	r1, [pc, #216]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001778:	f7ff fa26 	bl	8000bc8 <HAL_GetTick>
 800177c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177e:	e00a      	b.n	8001796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001780:	f7ff fa22 	bl	8000bc8 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e053      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001796:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 020c 	and.w	r2, r3, #12
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d1eb      	bne.n	8001780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017a8:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d210      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f023 0207 	bic.w	r2, r3, #7
 80017be:	4922      	ldr	r1, [pc, #136]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e032      	b.n	800183e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017e4:	4b19      	ldr	r3, [pc, #100]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	4916      	ldr	r1, [pc, #88]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	490e      	ldr	r1, [pc, #56]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001816:	f000 f821 	bl	800185c <HAL_RCC_GetSysClockFreq>
 800181a:	4602      	mov	r2, r0
 800181c:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	490a      	ldr	r1, [pc, #40]	@ (8001850 <HAL_RCC_ClockConfig+0x1c8>)
 8001828:	5ccb      	ldrb	r3, [r1, r3]
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <HAL_RCC_ClockConfig+0x1cc>)
 8001830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001832:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <HAL_RCC_ClockConfig+0x1d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f984 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40022000 	.word	0x40022000
 800184c:	40021000 	.word	0x40021000
 8001850:	080021c8 	.word	0x080021c8
 8001854:	20000000 	.word	0x20000000
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001876:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b04      	cmp	r3, #4
 8001884:	d002      	beq.n	800188c <HAL_RCC_GetSysClockFreq+0x30>
 8001886:	2b08      	cmp	r3, #8
 8001888:	d003      	beq.n	8001892 <HAL_RCC_GetSysClockFreq+0x36>
 800188a:	e027      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800188c:	4b19      	ldr	r3, [pc, #100]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800188e:	613b      	str	r3, [r7, #16]
      break;
 8001890:	e027      	b.n	80018e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	4a17      	ldr	r2, [pc, #92]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800189c:	5cd3      	ldrb	r3, [r2, r3]
 800189e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	0c5b      	lsrs	r3, r3, #17
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80018b6:	5cd3      	ldrb	r3, [r2, r3]
 80018b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018be:	fb03 f202 	mul.w	r2, r3, r2
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e004      	b.n	80018d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80018d0:	fb02 f303 	mul.w	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	613b      	str	r3, [r7, #16]
      break;
 80018da:	e002      	b.n	80018e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80018de:	613b      	str	r3, [r7, #16]
      break;
 80018e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e2:	693b      	ldr	r3, [r7, #16]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	080021d8 	.word	0x080021d8
 80018fc:	080021e8 	.word	0x080021e8
 8001900:	003d0900 	.word	0x003d0900

08001904 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800190c:	4b0a      	ldr	r3, [pc, #40]	@ (8001938 <RCC_Delay+0x34>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <RCC_Delay+0x38>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0a5b      	lsrs	r3, r3, #9
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	fb02 f303 	mul.w	r3, r2, r3
 800191e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001920:	bf00      	nop
  }
  while (Delay --);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1e5a      	subs	r2, r3, #1
 8001926:	60fa      	str	r2, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f9      	bne.n	8001920 <RCC_Delay+0x1c>
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000000 	.word	0x20000000
 800193c:	10624dd3 	.word	0x10624dd3

08001940 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d07d      	beq.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001960:	4b4f      	ldr	r3, [pc, #316]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10d      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001976:	61d3      	str	r3, [r2, #28]
 8001978:	4b49      	ldr	r3, [pc, #292]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001984:	2301      	movs	r3, #1
 8001986:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b46      	ldr	r3, [pc, #280]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d118      	bne.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001994:	4b43      	ldr	r3, [pc, #268]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a42      	ldr	r2, [pc, #264]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a0:	f7ff f912 	bl	8000bc8 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a6:	e008      	b.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7ff f90e 	bl	8000bc8 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	@ 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e06d      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ba:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0f0      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019c6:	4b36      	ldr	r3, [pc, #216]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d02e      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d027      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019e4:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019fa:	4a29      	ldr	r2, [pc, #164]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d014      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f8dd 	bl	8000bc8 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a10:	e00a      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f7ff f8d9 	bl	8000bc8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e036      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ee      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4917      	ldr	r1, [pc, #92]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d105      	bne.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a4c:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a64:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	490b      	ldr	r1, [pc, #44]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d008      	beq.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001a82:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4904      	ldr	r1, [pc, #16]	@ (8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	42420440 	.word	0x42420440

08001aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e041      	b.n	8001b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7fe ffaa 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2202      	movs	r2, #2
 8001adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4610      	mov	r0, r2
 8001aec:	f000 f936 	bl	8001d5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_TIM_ConfigClockSource+0x1c>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0b4      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x186>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2202      	movs	r2, #2
 8001b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001b84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b9e:	d03e      	beq.n	8001c1e <HAL_TIM_ConfigClockSource+0xd4>
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ba4:	f200 8087 	bhi.w	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bac:	f000 8086 	beq.w	8001cbc <HAL_TIM_ConfigClockSource+0x172>
 8001bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bb4:	d87f      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb6:	2b70      	cmp	r3, #112	@ 0x70
 8001bb8:	d01a      	beq.n	8001bf0 <HAL_TIM_ConfigClockSource+0xa6>
 8001bba:	2b70      	cmp	r3, #112	@ 0x70
 8001bbc:	d87b      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bbe:	2b60      	cmp	r3, #96	@ 0x60
 8001bc0:	d050      	beq.n	8001c64 <HAL_TIM_ConfigClockSource+0x11a>
 8001bc2:	2b60      	cmp	r3, #96	@ 0x60
 8001bc4:	d877      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bc6:	2b50      	cmp	r3, #80	@ 0x50
 8001bc8:	d03c      	beq.n	8001c44 <HAL_TIM_ConfigClockSource+0xfa>
 8001bca:	2b50      	cmp	r3, #80	@ 0x50
 8001bcc:	d873      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bce:	2b40      	cmp	r3, #64	@ 0x40
 8001bd0:	d058      	beq.n	8001c84 <HAL_TIM_ConfigClockSource+0x13a>
 8001bd2:	2b40      	cmp	r3, #64	@ 0x40
 8001bd4:	d86f      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bd6:	2b30      	cmp	r3, #48	@ 0x30
 8001bd8:	d064      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bda:	2b30      	cmp	r3, #48	@ 0x30
 8001bdc:	d86b      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bde:	2b20      	cmp	r3, #32
 8001be0:	d060      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001be2:	2b20      	cmp	r3, #32
 8001be4:	d867      	bhi.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d05c      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bea:	2b10      	cmp	r3, #16
 8001bec:	d05a      	beq.n	8001ca4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bee:	e062      	b.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c00:	f000 fa16 	bl	8002030 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	609a      	str	r2, [r3, #8]
      break;
 8001c1c:	e04f      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c2e:	f000 f9ff 	bl	8002030 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c40:	609a      	str	r2, [r3, #8]
      break;
 8001c42:	e03c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c50:	461a      	mov	r2, r3
 8001c52:	f000 f976 	bl	8001f42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2150      	movs	r1, #80	@ 0x50
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f9cd 	bl	8001ffc <TIM_ITRx_SetConfig>
      break;
 8001c62:	e02c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c70:	461a      	mov	r2, r3
 8001c72:	f000 f994 	bl	8001f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2160      	movs	r1, #96	@ 0x60
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f000 f9bd 	bl	8001ffc <TIM_ITRx_SetConfig>
      break;
 8001c82:	e01c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c90:	461a      	mov	r2, r3
 8001c92:	f000 f956 	bl	8001f42 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2140      	movs	r1, #64	@ 0x40
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f9ad 	bl	8001ffc <TIM_ITRx_SetConfig>
      break;
 8001ca2:	e00c      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 f9a4 	bl	8001ffc <TIM_ITRx_SetConfig>
      break;
 8001cb4:	e003      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cba:	e000      	b.n	8001cbe <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e031      	b.n	8001d54 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8001d00:	6839      	ldr	r1, [r7, #0]
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f88c 	bl	8001e20 <TIM_SlaveTimer_SetConfig>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d009      	beq.n	8001d22 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e018      	b.n	8001d54 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d30:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d40:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a29      	ldr	r2, [pc, #164]	@ (8001e14 <TIM_Base_SetConfig+0xb8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00b      	beq.n	8001d8c <TIM_Base_SetConfig+0x30>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d7a:	d007      	beq.n	8001d8c <TIM_Base_SetConfig+0x30>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a26      	ldr	r2, [pc, #152]	@ (8001e18 <TIM_Base_SetConfig+0xbc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d003      	beq.n	8001d8c <TIM_Base_SetConfig+0x30>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <TIM_Base_SetConfig+0xc0>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d108      	bne.n	8001d9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e14 <TIM_Base_SetConfig+0xb8>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00b      	beq.n	8001dbe <TIM_Base_SetConfig+0x62>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dac:	d007      	beq.n	8001dbe <TIM_Base_SetConfig+0x62>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a19      	ldr	r2, [pc, #100]	@ (8001e18 <TIM_Base_SetConfig+0xbc>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d003      	beq.n	8001dbe <TIM_Base_SetConfig+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <TIM_Base_SetConfig+0xc0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d108      	bne.n	8001dd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a07      	ldr	r2, [pc, #28]	@ (8001e14 <TIM_Base_SetConfig+0xb8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d103      	bne.n	8001e04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	615a      	str	r2, [r3, #20]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr
 8001e14:	40012c00 	.word	0x40012c00
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40000800 	.word	0x40000800

08001e20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e3c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	f023 0307 	bic.w	r3, r3, #7
 8001e4e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b70      	cmp	r3, #112	@ 0x70
 8001e68:	d01a      	beq.n	8001ea0 <TIM_SlaveTimer_SetConfig+0x80>
 8001e6a:	2b70      	cmp	r3, #112	@ 0x70
 8001e6c:	d860      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e6e:	2b60      	cmp	r3, #96	@ 0x60
 8001e70:	d054      	beq.n	8001f1c <TIM_SlaveTimer_SetConfig+0xfc>
 8001e72:	2b60      	cmp	r3, #96	@ 0x60
 8001e74:	d85c      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e76:	2b50      	cmp	r3, #80	@ 0x50
 8001e78:	d046      	beq.n	8001f08 <TIM_SlaveTimer_SetConfig+0xe8>
 8001e7a:	2b50      	cmp	r3, #80	@ 0x50
 8001e7c:	d858      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e7e:	2b40      	cmp	r3, #64	@ 0x40
 8001e80:	d019      	beq.n	8001eb6 <TIM_SlaveTimer_SetConfig+0x96>
 8001e82:	2b40      	cmp	r3, #64	@ 0x40
 8001e84:	d854      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e86:	2b30      	cmp	r3, #48	@ 0x30
 8001e88:	d055      	beq.n	8001f36 <TIM_SlaveTimer_SetConfig+0x116>
 8001e8a:	2b30      	cmp	r3, #48	@ 0x30
 8001e8c:	d850      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d051      	beq.n	8001f36 <TIM_SlaveTimer_SetConfig+0x116>
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d84c      	bhi.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d04d      	beq.n	8001f36 <TIM_SlaveTimer_SetConfig+0x116>
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d04b      	beq.n	8001f36 <TIM_SlaveTimer_SetConfig+0x116>
 8001e9e:	e047      	b.n	8001f30 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8001eb0:	f000 f8be 	bl	8002030 <TIM_ETR_SetConfig>
      break;
 8001eb4:	e040      	b.n	8001f38 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d101      	bne.n	8001ec2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e03b      	b.n	8001f3a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ee8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	621a      	str	r2, [r3, #32]
      break;
 8001f06:	e017      	b.n	8001f38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f14:	461a      	mov	r2, r3
 8001f16:	f000 f814 	bl	8001f42 <TIM_TI1_ConfigInputStage>
      break;
 8001f1a:	e00d      	b.n	8001f38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f000 f838 	bl	8001f9e <TIM_TI2_ConfigInputStage>
      break;
 8001f2e:	e003      	b.n	8001f38 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	75fb      	strb	r3, [r7, #23]
      break;
 8001f34:	e000      	b.n	8001f38 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8001f36:	bf00      	nop
  }

  return status;
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b087      	sub	sp, #28
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f023 0201 	bic.w	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f023 030a 	bic.w	r3, r3, #10
 8001f7e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	621a      	str	r2, [r3, #32]
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b087      	sub	sp, #28
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	f023 0210 	bic.w	r2, r3, #16
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	031b      	lsls	r3, r3, #12
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	621a      	str	r2, [r3, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	371c      	adds	r7, #28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002012:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	f043 0307 	orr.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	609a      	str	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800204a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	021a      	lsls	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	431a      	orrs	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	4313      	orrs	r3, r2
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	609a      	str	r2, [r3, #8]
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002084:	2302      	movs	r3, #2
 8002086:	e046      	b.n	8002116 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a16      	ldr	r2, [pc, #88]	@ (8002120 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00e      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d4:	d009      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a10      	ldr	r2, [pc, #64]	@ (8002128 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10c      	bne.n	8002104 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40012c00 	.word	0x40012c00
 8002124:	40000400 	.word	0x40000400
 8002128:	40000800 	.word	0x40000800

0800212c <memset>:
 800212c:	4603      	mov	r3, r0
 800212e:	4402      	add	r2, r0
 8002130:	4293      	cmp	r3, r2
 8002132:	d100      	bne.n	8002136 <memset+0xa>
 8002134:	4770      	bx	lr
 8002136:	f803 1b01 	strb.w	r1, [r3], #1
 800213a:	e7f9      	b.n	8002130 <memset+0x4>

0800213c <__libc_init_array>:
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	2600      	movs	r6, #0
 8002140:	4d0c      	ldr	r5, [pc, #48]	@ (8002174 <__libc_init_array+0x38>)
 8002142:	4c0d      	ldr	r4, [pc, #52]	@ (8002178 <__libc_init_array+0x3c>)
 8002144:	1b64      	subs	r4, r4, r5
 8002146:	10a4      	asrs	r4, r4, #2
 8002148:	42a6      	cmp	r6, r4
 800214a:	d109      	bne.n	8002160 <__libc_init_array+0x24>
 800214c:	f000 f81a 	bl	8002184 <_init>
 8002150:	2600      	movs	r6, #0
 8002152:	4d0a      	ldr	r5, [pc, #40]	@ (800217c <__libc_init_array+0x40>)
 8002154:	4c0a      	ldr	r4, [pc, #40]	@ (8002180 <__libc_init_array+0x44>)
 8002156:	1b64      	subs	r4, r4, r5
 8002158:	10a4      	asrs	r4, r4, #2
 800215a:	42a6      	cmp	r6, r4
 800215c:	d105      	bne.n	800216a <__libc_init_array+0x2e>
 800215e:	bd70      	pop	{r4, r5, r6, pc}
 8002160:	f855 3b04 	ldr.w	r3, [r5], #4
 8002164:	4798      	blx	r3
 8002166:	3601      	adds	r6, #1
 8002168:	e7ee      	b.n	8002148 <__libc_init_array+0xc>
 800216a:	f855 3b04 	ldr.w	r3, [r5], #4
 800216e:	4798      	blx	r3
 8002170:	3601      	adds	r6, #1
 8002172:	e7f2      	b.n	800215a <__libc_init_array+0x1e>
 8002174:	080021ec 	.word	0x080021ec
 8002178:	080021ec 	.word	0x080021ec
 800217c:	080021ec 	.word	0x080021ec
 8002180:	080021f0 	.word	0x080021f0

08002184 <_init>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr

08002190 <_fini>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	bf00      	nop
 8002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002196:	bc08      	pop	{r3}
 8002198:	469e      	mov	lr, r3
 800219a:	4770      	bx	lr
