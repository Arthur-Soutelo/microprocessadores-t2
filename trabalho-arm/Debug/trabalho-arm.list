
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009494  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  080095a8  080095a8  0000a5a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b30  08009b30  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b38  08009b38  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009b40  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200001dc  08009d1c  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08009d1c  0000b45c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b829  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002466  00000000  00000000  00016a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00018e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c7  00000000  00000000  00019b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019940  00000000  00000000  0001a527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8b5  00000000  00000000  00033e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3da  00000000  00000000  0004371c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2af6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004938  00000000  00000000  000d2b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d7474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800958c 	.word	0x0800958c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800958c 	.word	0x0800958c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000
 800117c:	00000000 	.word	0x00000000

08001180 <Read_Temperature>:
#include "ambient.h"

// Temperature read function using floating-point calculation
float Read_Temperature(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 800118a:	2010      	movs	r0, #16
 800118c:	f000 f83e 	bl	800120c <read_adc_value>
 8001190:	60f8      	str	r0, [r7, #12]

    // Convert ADC value to voltage
	float adcVoltage = (adcValue / 4095.0) * 3.3; // Assuming 12-bit resolution and 3.3V reference
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	a315      	add	r3, pc, #84	@ (adr r3, 80011f0 <Read_Temperature+0x70>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fac5 	bl	800072c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	a313      	add	r3, pc, #76	@ (adr r3, 80011f8 <Read_Temperature+0x78>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc84 	bl	8000ac8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]

	// Temperature calculation
	// Temperature = (Vadc - V25) / Slope + T25
	// T25 = 25°C (reference temperature)

	float temperature = ((adcVoltage - VOLTAGE_AT_25C) / AVG_SLOPE) + 25;
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <Read_Temperature+0x80>)
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f7ff fcd2 	bl	8000b70 <__aeabi_fsub>
 80011cc:	4603      	mov	r3, r0
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <Read_Temperature+0x84>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe8b 	bl	8000eec <__aeabi_fdiv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	490b      	ldr	r1, [pc, #44]	@ (8001208 <Read_Temperature+0x88>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcca 	bl	8000b74 <__addsf3>
 80011e0:	4603      	mov	r3, r0
 80011e2:	607b      	str	r3, [r7, #4]

    return temperature;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40affe00 	.word	0x40affe00
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	3fb70a3d 	.word	0x3fb70a3d
 8001204:	4089999a 	.word	0x4089999a
 8001208:	41c80000 	.word	0x41c80000

0800120c <read_adc_value>:


uint32_t read_adc_value(uint32_t channel) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;  // Adjust as needed
 800122c:	2305      	movs	r3, #5
 800122e:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <read_adc_value+0x6c>)
 8001238:	f001 fe3a 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <read_adc_value+0x3c>
        // Handle error
        return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e012      	b.n	800126e <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <read_adc_value+0x6c>)
 800124a:	f001 fc45 	bl	8002ad8 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800124e:	f04f 31ff 	mov.w	r1, #4294967295
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <read_adc_value+0x6c>)
 8001254:	f001 fd1a 	bl	8002c8c <HAL_ADC_PollForConversion>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <read_adc_value+0x6c>)
 8001260:	f001 fe1a 	bl	8002e98 <HAL_ADC_GetValue>
 8001264:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <read_adc_value+0x6c>)
 8001268:	f001 fce4 	bl	8002c34 <HAL_ADC_Stop>

    return adcValue;
 800126c:	697b      	ldr	r3, [r7, #20]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f8 	.word	0x200001f8

0800127c <read_light_inside>:

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
}

float read_light_inside(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]

    // Read LDR1 value from PA0 (ADC1_IN0)
    adcValue = read_adc_value(ADC_CHANNEL_1);
 8001286:	2001      	movs	r0, #1
 8001288:	f7ff ffc0 	bl	800120c <read_adc_value>
 800128c:	6078      	str	r0, [r7, #4]

   // Convert ADC value to a percentage of light intensity
   float lightIntensity = (float)adcValue / ADC_FULL_SCALE;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fd20 	bl	8000cd4 <__aeabi_ui2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <read_light_inside+0x3c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe27 	bl	8000eec <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	603b      	str	r3, [r7, #0]

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012a8:	f7ff fc62 	bl	8000b70 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	457ff000 	.word	0x457ff000
 80012bc:	00000000 	.word	0x00000000

080012c0 <Regulate_Light_Intensity>:


void Regulate_Light_Intensity(void) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
    // Passo 1: Calcular a porcentagem do LDR
    float ldr_percentage = read_light_inside();
 80012c6:	f7ff ffd9 	bl	800127c <read_light_inside>
 80012ca:	6178      	str	r0, [r7, #20]

    // Obter o ciclo de trabalho atual do PWM
    uint32_t current_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 80012cc:	4b46      	ldr	r3, [pc, #280]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d2:	613b      	str	r3, [r7, #16]

    if (ldr_percentage < LDR_MIN_THRESHOLD - LDR_DEAD_ZONE) {
 80012d4:	6978      	ldr	r0, [r7, #20]
 80012d6:	f7ff f8a7 	bl	8000428 <__aeabi_f2d>
 80012da:	a33f      	add	r3, pc, #252	@ (adr r3, 80013d8 <Regulate_Light_Intensity+0x118>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fb6c 	bl	80009bc <__aeabi_dcmplt>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <Regulate_Light_Intensity+0x42>
        // Aumentar a intensidade da luz (aumentar o ciclo de trabalho do PWM) se estiver abaixo do limite
        if (current_compare < (htim4.Init.Period - PWM_STEP_SIZE)) {
 80012ea:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	3b02      	subs	r3, #2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d25b      	bcs.n	80013ae <Regulate_Light_Intensity+0xee>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare + PWM_STEP_SIZE);
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	3202      	adds	r2, #2
 80012fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001300:	e055      	b.n	80013ae <Regulate_Light_Intensity+0xee>
        }
    } else if (ldr_percentage > LDR_MAX_THRESHOLD + LDR_DEAD_ZONE) {
 8001302:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001306:	6978      	ldr	r0, [r7, #20]
 8001308:	f7ff fef8 	bl	80010fc <__aeabi_fcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00d      	beq.n	800132e <Regulate_Light_Intensity+0x6e>
        // Diminuir a intensidade da luz (diminuir o ciclo de trabalho do PWM) se estiver acima do limite
    	if (current_compare > PWM_STEP_SIZE) {
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d905      	bls.n	8001324 <Regulate_Light_Intensity+0x64>
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare - PWM_STEP_SIZE);
 8001318:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	3a02      	subs	r2, #2
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
 8001322:	e044      	b.n	80013ae <Regulate_Light_Intensity+0xee>
    	} else {
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001324:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	641a      	str	r2, [r3, #64]	@ 0x40
 800132c:	e03f      	b.n	80013ae <Regulate_Light_Intensity+0xee>
    	}
    } else {
        // Se a leitura do LDR estiver dentro da faixa desejada, verifique a resposta do ajuste
        // Faça um ajuste pequeno para verificar a resposta
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
									current_compare - PWM_ADJUSTMENT_STEP : 0;
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b02      	cmp	r3, #2
 8001332:	bf38      	it	cc
 8001334:	2302      	movcc	r3, #2
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
 8001336:	3b02      	subs	r3, #2
 8001338:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, adjusted_compare);
 800133a:	4b2b      	ldr	r3, [pc, #172]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(ADJUSTMENT_DELAY);  // Aguarde um curto período para estabilizar a leitura
 8001342:	2032      	movs	r0, #50	@ 0x32
 8001344:	f001 facc 	bl	80028e0 <HAL_Delay>

        // Leia o LDR após o ajuste
        float new_ldr_percentage = read_light_inside();
 8001348:	f7ff ff98 	bl	800127c <read_light_inside>
 800134c:	60b8      	str	r0, [r7, #8]

        // Se o LDR ainda estiver dentro da faixa, considere o ajuste como adequado
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 800134e:	68b8      	ldr	r0, [r7, #8]
 8001350:	f7ff f86a 	bl	8000428 <__aeabi_f2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	6978      	ldr	r0, [r7, #20]
 800135a:	f7ff f865 	bl	8000428 <__aeabi_f2d>
 800135e:	a320      	add	r3, pc, #128	@ (adr r3, 80013e0 <Regulate_Light_Intensity+0x120>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7fe ff00 	bl	8000168 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4620      	mov	r0, r4
 800136e:	4629      	mov	r1, r5
 8001370:	f7ff fb38 	bl	80009e4 <__aeabi_dcmpge>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d015      	beq.n	80013a6 <Regulate_Light_Intensity+0xe6>
            new_ldr_percentage <= ldr_percentage + LDR_DEAD_ZONE) {
 800137a:	68b8      	ldr	r0, [r7, #8]
 800137c:	f7ff f854 	bl	8000428 <__aeabi_f2d>
 8001380:	4604      	mov	r4, r0
 8001382:	460d      	mov	r5, r1
 8001384:	6978      	ldr	r0, [r7, #20]
 8001386:	f7ff f84f 	bl	8000428 <__aeabi_f2d>
 800138a:	a315      	add	r3, pc, #84	@ (adr r3, 80013e0 <Regulate_Light_Intensity+0x120>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7fe feec 	bl	800016c <__adddf3>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff fb18 	bl	80009d0 <__aeabi_dcmple>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <Regulate_Light_Intensity+0xee>
            // Se o LDR não mudou significativamente, o ajuste foi adequado
        } else {
            // Se o LDR mudou significativamente, ajuste o PWM de volta ao valor anterior
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare);
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    // Garantir que o ciclo de trabalho do PWM permaneça dentro da faixa válida (0 a ARR)
	uint32_t final_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	607b      	str	r3, [r7, #4]
	if (final_compare > htim4.Init.Period) {
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d904      	bls.n	80013ca <Regulate_Light_Intensity+0x10a>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, htim4.Init.Period);
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <Regulate_Light_Intensity+0x128>)
 80013c6:	68d2      	ldr	r2, [r2, #12]
 80013c8:	641a      	str	r2, [r3, #64]	@ 0x40
	} else if (final_compare < 0) {
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
	}

}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdb0      	pop	{r4, r5, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	f3af 8000 	nop.w
 80013d8:	99999999 	.word	0x99999999
 80013dc:	3fe19999 	.word	0x3fe19999
 80013e0:	9999999a 	.word	0x9999999a
 80013e4:	3fa99999 	.word	0x3fa99999
 80013e8:	200002b4 	.word	0x200002b4

080013ec <debounce>:
#include "main.h"
#include "keypad.h"
#include "lcd.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	460a      	mov	r2, r1
 80013f6:	71fb      	strb	r3, [r7, #7]
 80013f8:	4613      	mov	r3, r2
 80013fa:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 8001400:	2301      	movs	r3, #1
 8001402:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d822      	bhi.n	8001454 <debounce+0x68>
 800140e:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <debounce+0x28>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001425 	.word	0x08001425
 8001418:	08001431 	.word	0x08001431
 800141c:	0800143d 	.word	0x0800143d
 8001420:	08001449 	.word	0x08001449
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <debounce+0xac>)
 8001426:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 8001428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800142c:	81fb      	strh	r3, [r7, #14]
            break;
 800142e:	e013      	b.n	8001458 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <debounce+0xac>)
 8001432:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001438:	81fb      	strh	r3, [r7, #14]
            break;
 800143a:	e00d      	b.n	8001458 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <debounce+0xac>)
 800143e:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 8001440:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001444:	81fb      	strh	r3, [r7, #14]
            break;
 8001446:	e007      	b.n	8001458 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 8001448:	4b13      	ldr	r3, [pc, #76]	@ (8001498 <debounce+0xac>)
 800144a:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 800144c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001450:	81fb      	strh	r3, [r7, #14]
            break;
 8001452:	e001      	b.n	8001458 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 8001454:	2301      	movs	r3, #1
 8001456:	e01a      	b.n	800148e <debounce+0xa2>
    }

    while (count < 7) {
 8001458:	e015      	b.n	8001486 <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fa40 	bl	80028e0 <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	4619      	mov	r1, r3
 8001464:	6938      	ldr	r0, [r7, #16]
 8001466:	f002 faa9 	bl	80039bc <HAL_GPIO_ReadPin>
 800146a:	4603      	mov	r3, r0
 800146c:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 800146e:	7d7a      	ldrb	r2, [r7, #21]
 8001470:	7dbb      	ldrb	r3, [r7, #22]
 8001472:	429a      	cmp	r2, r3
 8001474:	d103      	bne.n	800147e <debounce+0x92>
            count++;
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	3301      	adds	r3, #1
 800147a:	75fb      	strb	r3, [r7, #23]
 800147c:	e001      	b.n	8001482 <debounce+0x96>
        } else {
            count = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 8001482:	7d7b      	ldrb	r3, [r7, #21]
 8001484:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b06      	cmp	r3, #6
 800148a:	d9e6      	bls.n	800145a <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 800148c:	7d7b      	ldrb	r3, [r7, #21]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40010c00 	.word	0x40010c00

0800149c <keypad_init>:

void keypad_init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
    // Initialize all columns to high
    HAL_GPIO_WritePin(KEYPAD_COL1_GPIO_Port, KEYPAD_COL1_Pin, GPIO_PIN_SET);
 80014a0:	2201      	movs	r2, #1
 80014a2:	2101      	movs	r1, #1
 80014a4:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <keypad_init+0x34>)
 80014a6:	f002 faa0 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2102      	movs	r1, #2
 80014ae:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <keypad_init+0x34>)
 80014b0:	f002 fa9b 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
 80014b4:	2201      	movs	r2, #1
 80014b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <keypad_init+0x34>)
 80014bc:	f002 fa95 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
 80014c0:	2201      	movs	r2, #1
 80014c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014c6:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <keypad_init+0x34>)
 80014c8:	f002 fa8f 	bl	80039ea <HAL_GPIO_WritePin>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40010c00 	.word	0x40010c00

080014d4 <keypad_getkey>:

char keypad_getkey(void) {
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b089      	sub	sp, #36	@ 0x24
 80014d8:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 80014da:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <keypad_getkey+0xdc>)
 80014dc:	1d3c      	adds	r4, r7, #4
 80014de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 80014e4:	2300      	movs	r3, #0
 80014e6:	77bb      	strb	r3, [r7, #30]
 80014e8:	e059      	b.n	800159e <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 80014ea:	7fbb      	ldrb	r3, [r7, #30]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d821      	bhi.n	8001534 <keypad_getkey+0x60>
 80014f0:	a201      	add	r2, pc, #4	@ (adr r2, 80014f8 <keypad_getkey+0x24>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	08001509 	.word	0x08001509
 80014fc:	08001513 	.word	0x08001513
 8001500:	0800151d 	.word	0x0800151d
 8001504:	08001529 	.word	0x08001529
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 8001508:	4b2a      	ldr	r3, [pc, #168]	@ (80015b4 <keypad_getkey+0xe0>)
 800150a:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 800150c:	2301      	movs	r3, #1
 800150e:	82fb      	strh	r3, [r7, #22]
                break;
 8001510:	e015      	b.n	800153e <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 8001512:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <keypad_getkey+0xe0>)
 8001514:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 8001516:	2302      	movs	r3, #2
 8001518:	82fb      	strh	r3, [r7, #22]
                break;
 800151a:	e010      	b.n	800153e <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 800151c:	4b25      	ldr	r3, [pc, #148]	@ (80015b4 <keypad_getkey+0xe0>)
 800151e:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 8001520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001524:	82fb      	strh	r3, [r7, #22]
                break;
 8001526:	e00a      	b.n	800153e <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <keypad_getkey+0xe0>)
 800152a:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 800152c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001530:	82fb      	strh	r3, [r7, #22]
                break;
 8001532:	e004      	b.n	800153e <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	82fb      	strh	r3, [r7, #22]
                break;
 800153c:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	2200      	movs	r2, #0
 8001542:	4619      	mov	r1, r3
 8001544:	69b8      	ldr	r0, [r7, #24]
 8001546:	f002 fa50 	bl	80039ea <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 800154a:	2300      	movs	r3, #0
 800154c:	77fb      	strb	r3, [r7, #31]
 800154e:	e01a      	b.n	8001586 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 8001550:	7fba      	ldrb	r2, [r7, #30]
 8001552:	7ffb      	ldrb	r3, [r7, #31]
 8001554:	4611      	mov	r1, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff48 	bl	80013ec <debounce>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10e      	bne.n	8001580 <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8001562:	8afb      	ldrh	r3, [r7, #22]
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	69b8      	ldr	r0, [r7, #24]
 800156a:	f002 fa3e 	bl	80039ea <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	7fbb      	ldrb	r3, [r7, #30]
 8001572:	0092      	lsls	r2, r2, #2
 8001574:	3220      	adds	r2, #32
 8001576:	443a      	add	r2, r7
 8001578:	4413      	add	r3, r2
 800157a:	3b1c      	subs	r3, #28
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	e012      	b.n	80015a6 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	3301      	adds	r3, #1
 8001584:	77fb      	strb	r3, [r7, #31]
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d9e1      	bls.n	8001550 <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	2201      	movs	r2, #1
 8001590:	4619      	mov	r1, r3
 8001592:	69b8      	ldr	r0, [r7, #24]
 8001594:	f002 fa29 	bl	80039ea <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8001598:	7fbb      	ldrb	r3, [r7, #30]
 800159a:	3301      	adds	r3, #1
 800159c:	77bb      	strb	r3, [r7, #30]
 800159e:	7fbb      	ldrb	r3, [r7, #30]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d9a2      	bls.n	80014ea <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	@ 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd90      	pop	{r4, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080095a8 	.word	0x080095a8
 80015b4:	40010c00 	.word	0x40010c00

080015b8 <read_temperature_keypad>:

float read_temperature_keypad(char *buffer) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	char key;
	short index = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	81fb      	strh	r3, [r7, #14]
	float temperature_value;

	// Initialize buffer
	memset(buffer, 0, 2 + 1);
 80015c4:	2203      	movs	r2, #3
 80015c6:	2100      	movs	r1, #0
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f005 fa96 	bl	8006afa <memset>

	while (index < 2) {
 80015ce:	e03b      	b.n	8001648 <read_temperature_keypad+0x90>
		key = keypad_getkey();
 80015d0:	f7ff ff80 	bl	80014d4 <keypad_getkey>
 80015d4:	4603      	mov	r3, r0
 80015d6:	737b      	strb	r3, [r7, #13]
		if (key != 0) { // Check if a key is pressed
 80015d8:	7b7b      	ldrb	r3, [r7, #13]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d034      	beq.n	8001648 <read_temperature_keypad+0x90>
			if (key >= '0' && key <= '9') { // Check if the key is a digit
 80015de:	7b7b      	ldrb	r3, [r7, #13]
 80015e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80015e2:	d917      	bls.n	8001614 <read_temperature_keypad+0x5c>
 80015e4:	7b7b      	ldrb	r3, [r7, #13]
 80015e6:	2b39      	cmp	r3, #57	@ 0x39
 80015e8:	d814      	bhi.n	8001614 <read_temperature_keypad+0x5c>
				buffer[index++] = key; // Store the digit in the buffer
 80015ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015ee:	b293      	uxth	r3, r2
 80015f0:	3301      	adds	r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	81fb      	strh	r3, [r7, #14]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	7b7a      	ldrb	r2, [r7, #13]
 80015fc:	701a      	strb	r2, [r3, #0]
				//write_data_LCD(key);
				clear_display();
 80015fe:	f000 f9d0 	bl	80019a2 <clear_display>
				write_string_line(1,"Digite o Valor:");
 8001602:	492f      	ldr	r1, [pc, #188]	@ (80016c0 <read_temperature_keypad+0x108>)
 8001604:	2001      	movs	r0, #1
 8001606:	f000 f9b2 	bl	800196e <write_string_line>
				write_string_line(2,buffer);
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2002      	movs	r0, #2
 800160e:	f000 f9ae 	bl	800196e <write_string_line>
 8001612:	e016      	b.n	8001642 <read_temperature_keypad+0x8a>
				} else if (key == '#') { // Use '#' as an enter key
 8001614:	7b7b      	ldrb	r3, [r7, #13]
 8001616:	2b23      	cmp	r3, #35	@ 0x23
 8001618:	d01b      	beq.n	8001652 <read_temperature_keypad+0x9a>
				break; // Exit loop when '#' is pressed
				} else if (key == '*') { // Use '*' to cancel input
 800161a:	7b7b      	ldrb	r3, [r7, #13]
 800161c:	2b2a      	cmp	r3, #42	@ 0x2a
 800161e:	d110      	bne.n	8001642 <read_temperature_keypad+0x8a>
				// Optionally, clear the buffer
				memset(buffer, 0, 2 + 1);
 8001620:	2203      	movs	r2, #3
 8001622:	2100      	movs	r1, #0
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f005 fa68 	bl	8006afa <memset>
				index = 0; // Reset index
 800162a:	2300      	movs	r3, #0
 800162c:	81fb      	strh	r3, [r7, #14]
				clear_display();
 800162e:	f000 f9b8 	bl	80019a2 <clear_display>
				write_string_line(1,"Digite o Valor:");
 8001632:	4923      	ldr	r1, [pc, #140]	@ (80016c0 <read_temperature_keypad+0x108>)
 8001634:	2001      	movs	r0, #1
 8001636:	f000 f99a 	bl	800196e <write_string_line>
				write_string_line(2,buffer);
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	2002      	movs	r0, #2
 800163e:	f000 f996 	bl	800196e <write_string_line>
			}
			// Add a small delay to debounce
			HAL_Delay(100);
 8001642:	2064      	movs	r0, #100	@ 0x64
 8001644:	f001 f94c 	bl	80028e0 <HAL_Delay>
	while (index < 2) {
 8001648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800164c:	2b01      	cmp	r3, #1
 800164e:	ddbf      	ble.n	80015d0 <read_temperature_keypad+0x18>
 8001650:	e000      	b.n	8001654 <read_temperature_keypad+0x9c>
				break; // Exit loop when '#' is pressed
 8001652:	bf00      	nop
		}
	}
	buffer[index] = '\0'; // Null-terminate the card number
 8001654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]

	temperature_value = atof(buffer);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f003 fec1 	bl	80053e8 <atof>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa2b 	bl	8000ac8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	60bb      	str	r3, [r7, #8]
	if (temperature_value >= 19.0 && temperature_value <= 32.0) {
 8001676:	4913      	ldr	r1, [pc, #76]	@ (80016c4 <read_temperature_keypad+0x10c>)
 8001678:	68b8      	ldr	r0, [r7, #8]
 800167a:	f7ff fd35 	bl	80010e8 <__aeabi_fcmpge>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <read_temperature_keypad+0xe0>
 8001684:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	f7ff fd23 	bl	80010d4 <__aeabi_fcmple>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <read_temperature_keypad+0xe0>
		return temperature_value;
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	e00e      	b.n	80016b6 <read_temperature_keypad+0xfe>
		} else {
		clear_display();
 8001698:	f000 f983 	bl	80019a2 <clear_display>
		write_string_line(1,"Valor Invalido!");
 800169c:	490a      	ldr	r1, [pc, #40]	@ (80016c8 <read_temperature_keypad+0x110>)
 800169e:	2001      	movs	r0, #1
 80016a0:	f000 f965 	bl	800196e <write_string_line>
		write_string_line(2," 19 < Temp < 32");
 80016a4:	4909      	ldr	r1, [pc, #36]	@ (80016cc <read_temperature_keypad+0x114>)
 80016a6:	2002      	movs	r0, #2
 80016a8:	f000 f961 	bl	800196e <write_string_line>
		HAL_Delay(2000); // Exibe a mensagem de erro por 2 segundos
 80016ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016b0:	f001 f916 	bl	80028e0 <HAL_Delay>
		return 30.0; // Reseta o valor para 30.0
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <read_temperature_keypad+0x118>)
	}

}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	080095b8 	.word	0x080095b8
 80016c4:	41980000 	.word	0x41980000
 80016c8:	080095c8 	.word	0x080095c8
 80016cc:	080095d8 	.word	0x080095d8
 80016d0:	41f00000 	.word	0x41f00000

080016d4 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2108      	movs	r1, #8
 80016e2:	4841      	ldr	r0, [pc, #260]	@ (80017e8 <write_command_LCD+0x114>)
 80016e4:	f002 f981 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2110      	movs	r1, #16
 80016ec:	483e      	ldr	r0, [pc, #248]	@ (80017e8 <write_command_LCD+0x114>)
 80016ee:	f002 f97c 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	111b      	asrs	r3, r3, #4
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001704:	4839      	ldr	r0, [pc, #228]	@ (80017ec <write_command_LCD+0x118>)
 8001706:	f002 f970 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	115b      	asrs	r3, r3, #5
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800171c:	4833      	ldr	r0, [pc, #204]	@ (80017ec <write_command_LCD+0x118>)
 800171e:	f002 f964 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	119b      	asrs	r3, r3, #6
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001734:	482d      	ldr	r0, [pc, #180]	@ (80017ec <write_command_LCD+0x118>)
 8001736:	f002 f958 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	09db      	lsrs	r3, r3, #7
 800173e:	b2db      	uxtb	r3, r3
 8001740:	461a      	mov	r2, r3
 8001742:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001746:	4829      	ldr	r0, [pc, #164]	@ (80017ec <write_command_LCD+0x118>)
 8001748:	f002 f94f 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800174c:	2001      	movs	r0, #1
 800174e:	f001 f8c7 	bl	80028e0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <write_command_LCD+0x114>)
 8001758:	f002 f947 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(2);
 800175c:	2002      	movs	r0, #2
 800175e:	f001 f8bf 	bl	80028e0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	2110      	movs	r1, #16
 8001766:	4820      	ldr	r0, [pc, #128]	@ (80017e8 <write_command_LCD+0x114>)
 8001768:	f002 f93f 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	461a      	mov	r2, r3
 8001776:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800177a:	481c      	ldr	r0, [pc, #112]	@ (80017ec <write_command_LCD+0x118>)
 800177c:	f002 f935 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	105b      	asrs	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001792:	4816      	ldr	r0, [pc, #88]	@ (80017ec <write_command_LCD+0x118>)
 8001794:	f002 f929 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	109b      	asrs	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017aa:	4810      	ldr	r0, [pc, #64]	@ (80017ec <write_command_LCD+0x118>)
 80017ac:	f002 f91d 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	10db      	asrs	r3, r3, #3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017c2:	480a      	ldr	r0, [pc, #40]	@ (80017ec <write_command_LCD+0x118>)
 80017c4:	f002 f911 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f001 f889 	bl	80028e0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2110      	movs	r1, #16
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <write_command_LCD+0x114>)
 80017d4:	f002 f909 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80017d8:	2002      	movs	r0, #2
 80017da:	f001 f881 	bl	80028e0 <HAL_Delay>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40010800 	.word	0x40010800

080017f0 <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	2108      	movs	r1, #8
 80017fe:	4841      	ldr	r0, [pc, #260]	@ (8001904 <write_data_LCD+0x114>)
 8001800:	f002 f8f3 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001804:	2201      	movs	r2, #1
 8001806:	2110      	movs	r1, #16
 8001808:	483e      	ldr	r0, [pc, #248]	@ (8001904 <write_data_LCD+0x114>)
 800180a:	f002 f8ee 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	111b      	asrs	r3, r3, #4
 8001812:	b2db      	uxtb	r3, r3
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001820:	4839      	ldr	r0, [pc, #228]	@ (8001908 <write_data_LCD+0x118>)
 8001822:	f002 f8e2 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	115b      	asrs	r3, r3, #5
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001838:	4833      	ldr	r0, [pc, #204]	@ (8001908 <write_data_LCD+0x118>)
 800183a:	f002 f8d6 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	119b      	asrs	r3, r3, #6
 8001842:	b2db      	uxtb	r3, r3
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	b2db      	uxtb	r3, r3
 800184a:	461a      	mov	r2, r3
 800184c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001850:	482d      	ldr	r0, [pc, #180]	@ (8001908 <write_data_LCD+0x118>)
 8001852:	f002 f8ca 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	09db      	lsrs	r3, r3, #7
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001862:	4829      	ldr	r0, [pc, #164]	@ (8001908 <write_data_LCD+0x118>)
 8001864:	f002 f8c1 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001868:	2001      	movs	r0, #1
 800186a:	f001 f839 	bl	80028e0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	2110      	movs	r1, #16
 8001872:	4824      	ldr	r0, [pc, #144]	@ (8001904 <write_data_LCD+0x114>)
 8001874:	f002 f8b9 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001878:	2002      	movs	r0, #2
 800187a:	f001 f831 	bl	80028e0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2110      	movs	r1, #16
 8001882:	4820      	ldr	r0, [pc, #128]	@ (8001904 <write_data_LCD+0x114>)
 8001884:	f002 f8b1 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	461a      	mov	r2, r3
 8001892:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001896:	481c      	ldr	r0, [pc, #112]	@ (8001908 <write_data_LCD+0x118>)
 8001898:	f002 f8a7 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	461a      	mov	r2, r3
 80018aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018ae:	4816      	ldr	r0, [pc, #88]	@ (8001908 <write_data_LCD+0x118>)
 80018b0:	f002 f89b 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	109b      	asrs	r3, r3, #2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018c6:	4810      	ldr	r0, [pc, #64]	@ (8001908 <write_data_LCD+0x118>)
 80018c8:	f002 f88f 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	10db      	asrs	r3, r3, #3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	461a      	mov	r2, r3
 80018da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018de:	480a      	ldr	r0, [pc, #40]	@ (8001908 <write_data_LCD+0x118>)
 80018e0:	f002 f883 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80018e4:	2001      	movs	r0, #1
 80018e6:	f000 fffb 	bl	80028e0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2110      	movs	r1, #16
 80018ee:	4805      	ldr	r0, [pc, #20]	@ (8001904 <write_data_LCD+0x114>)
 80018f0:	f002 f87b 	bl	80039ea <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80018f4:	2002      	movs	r0, #2
 80018f6:	f000 fff3 	bl	80028e0 <HAL_Delay>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40010800 	.word	0x40010800

0800190c <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 8001910:	2032      	movs	r0, #50	@ 0x32
 8001912:	f000 ffe5 	bl	80028e0 <HAL_Delay>
    write_command_LCD(0x33);
 8001916:	2033      	movs	r0, #51	@ 0x33
 8001918:	f7ff fedc 	bl	80016d4 <write_command_LCD>
    write_command_LCD(0x32);
 800191c:	2032      	movs	r0, #50	@ 0x32
 800191e:	f7ff fed9 	bl	80016d4 <write_command_LCD>
    write_command_LCD(0x28);
 8001922:	2028      	movs	r0, #40	@ 0x28
 8001924:	f7ff fed6 	bl	80016d4 <write_command_LCD>
    write_command_LCD(0x0C);
 8001928:	200c      	movs	r0, #12
 800192a:	f7ff fed3 	bl	80016d4 <write_command_LCD>
    write_command_LCD(0x06);
 800192e:	2006      	movs	r0, #6
 8001930:	f7ff fed0 	bl	80016d4 <write_command_LCD>
    write_command_LCD(0x01);
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fecd 	bl	80016d4 <write_command_LCD>
    HAL_Delay(2);
 800193a:	2002      	movs	r0, #2
 800193c:	f000 ffd0 	bl	80028e0 <HAL_Delay>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
    while (*text) {
 800194c:	e006      	b.n	800195c <write_string_LCD+0x18>
        write_data_LCD(*text++);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff4a 	bl	80017f0 <write_data_LCD>
    while (*text) {
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f4      	bne.n	800194e <write_string_LCD+0xa>
    }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <write_string_line>:

void write_string_line(char line, const char *text) {
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	6039      	str	r1, [r7, #0]
 8001978:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d103      	bne.n	8001988 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8001980:	2080      	movs	r0, #128	@ 0x80
 8001982:	f7ff fea7 	bl	80016d4 <write_command_LCD>
 8001986:	e005      	b.n	8001994 <write_string_line+0x26>
    } else if (line == 2) {
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d102      	bne.n	8001994 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 800198e:	20c0      	movs	r0, #192	@ 0xc0
 8001990:	f7ff fea0 	bl	80016d4 <write_command_LCD>
    }
    write_string_LCD(text);
 8001994:	6838      	ldr	r0, [r7, #0]
 8001996:	f7ff ffd5 	bl	8001944 <write_string_LCD>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <clear_display>:

void clear_display(void) {
 80019a2:	b580      	push	{r7, lr}
 80019a4:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fe94 	bl	80016d4 <write_command_LCD>
    HAL_Delay(2);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f000 ff97 	bl	80028e0 <HAL_Delay>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <navigate_options>:

// Function to display options and navigate between them
char navigate_options(const char *options[], char num_options) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
    short current_option = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	81fb      	strh	r3, [r7, #14]
    clear_display();
 80019c8:	f7ff ffeb 	bl	80019a2 <clear_display>
    write_string_line(1, options[current_option]);
 80019cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff ffc7 	bl	800196e <write_string_line>
    write_string_line(2, "<-B  A->   [#OK]");
 80019e0:	492a      	ldr	r1, [pc, #168]	@ (8001a8c <navigate_options+0xd4>)
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff ffc3 	bl	800196e <write_string_line>
    char key;
    while (1) {
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 80019e8:	f7ff fd74 	bl	80014d4 <keypad_getkey>
 80019ec:	4603      	mov	r3, r0
 80019ee:	737b      	strb	r3, [r7, #13]
        if (key != 0) {
 80019f0:	7b7b      	ldrb	r3, [r7, #13]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f8      	beq.n	80019e8 <navigate_options+0x30>
            switch (key) {
 80019f6:	7b7b      	ldrb	r3, [r7, #13]
 80019f8:	2b42      	cmp	r3, #66	@ 0x42
 80019fa:	d006      	beq.n	8001a0a <navigate_options+0x52>
 80019fc:	2b42      	cmp	r3, #66	@ 0x42
 80019fe:	dc3f      	bgt.n	8001a80 <navigate_options+0xc8>
 8001a00:	2b23      	cmp	r3, #35	@ 0x23
 8001a02:	d03a      	beq.n	8001a7a <navigate_options+0xc2>
 8001a04:	2b41      	cmp	r3, #65	@ 0x41
 8001a06:	d01d      	beq.n	8001a44 <navigate_options+0x8c>
                    write_string_line(2, "<-B  A->   [#OK]");
                    break;
                case '#':
                    return current_option;
                default:
                    break;
 8001a08:	e03a      	b.n	8001a80 <navigate_options+0xc8>
                    current_option = (current_option - 1 + num_options) % num_options;
 8001a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	4413      	add	r3, r2
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a1a:	fb01 f202 	mul.w	r2, r1, r2
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001a22:	f7ff ffbe 	bl	80019a2 <clear_display>
                    write_string_line(1, options[current_option]);
 8001a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4619      	mov	r1, r3
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff ff9a 	bl	800196e <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001a3a:	4914      	ldr	r1, [pc, #80]	@ (8001a8c <navigate_options+0xd4>)
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f7ff ff96 	bl	800196e <write_string_line>
                    break;
 8001a42:	e01e      	b.n	8001a82 <navigate_options+0xca>
                    current_option = (current_option + 1) % num_options;
 8001a44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	78fa      	ldrb	r2, [r7, #3]
 8001a4c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
 8001a54:	1a9b      	subs	r3, r3, r2
 8001a56:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001a58:	f7ff ffa3 	bl	80019a2 <clear_display>
                    write_string_line(1, options[current_option]);
 8001a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	f7ff ff7f 	bl	800196e <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001a70:	4906      	ldr	r1, [pc, #24]	@ (8001a8c <navigate_options+0xd4>)
 8001a72:	2002      	movs	r0, #2
 8001a74:	f7ff ff7b 	bl	800196e <write_string_line>
                    break;
 8001a78:	e003      	b.n	8001a82 <navigate_options+0xca>
                    return current_option;
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	e001      	b.n	8001a84 <navigate_options+0xcc>
                    break;
 8001a80:	bf00      	nop
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 8001a82:	e7b1      	b.n	80019e8 <navigate_options+0x30>
            }
        }
    }
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	080095e8 	.word	0x080095e8

08001a90 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrupt handler for TIM2 Channel 1 and Channel 2

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a28      	ldr	r2, [pc, #160]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d14a      	bne.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
    {
    	timeout++;
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001aaa:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001aac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ab0:	4825      	ldr	r0, [pc, #148]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ab2:	f001 ffb2 	bl	8003a1a <HAL_GPIO_TogglePin>

    	elapsed_time++;
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b22      	ldr	r3, [pc, #136]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ac2:	701a      	strb	r2, [r3, #0]
    	if(elapsed_time >= tempo_irrigacao && flag_irrigacao_em_andamento == 1){
 8001ac4:	4b21      	ldr	r3, [pc, #132]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	4b21      	ldr	r3, [pc, #132]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d30c      	bcc.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x5e>
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x5e>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2108      	movs	r1, #8
 8001ae0:	481d      	ldr	r0, [pc, #116]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ae2:	f001 ff82 	bl	80039ea <HAL_GPIO_WritePin>
    		flag_irrigacao_em_andamento=0;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
 8001aec:	e024      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
    	}
    	else if(elapsed_time < tempo_irrigacao && flag_irrigacao_em_andamento == 0){
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d20f      	bcs.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <HAL_TIM_PeriodElapsedCallback+0x8e>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2108      	movs	r1, #8
 8001b0a:	4813      	ldr	r0, [pc, #76]	@ (8001b58 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001b0c:	f001 ff6d 	bl	80039ea <HAL_GPIO_WritePin>
    		elapsed_time=0;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
    		flag_irrigacao_em_andamento=1;
 8001b16:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	e00c      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
    	}
    	else if(elapsed_time >= 60 && flag_irrigacao_em_andamento == 0){
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b3b      	cmp	r3, #59	@ 0x3b
 8001b26:	d907      	bls.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001b28:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
			elapsed_time=0;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
		}
    }
}
 8001b36:	e7ff      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40000400 	.word	0x40000400
 8001b44:	20000304 	.word	0x20000304
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	200002fc 	.word	0x200002fc
 8001b50:	20000000 	.word	0x20000000
 8001b54:	200002fd 	.word	0x200002fd
 8001b58:	40010800 	.word	0x40010800

08001b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b62:	f000 fe5b 	bl	800281c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b66:	f000 f843 	bl	8001bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6a:	f000 f9c5 	bl	8001ef8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b6e:	f000 f9a5 	bl	8001ebc <MX_DMA_Init>
  MX_ADC1_Init();
 8001b72:	f000 f899 	bl	8001ca8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001b76:	f000 f8d5 	bl	8001d24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b7a:	f000 f921 	bl	8001dc0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);

  /* Enable interrupt by timer 3*/
  HAL_TIM_Base_Start_IT(&htim3);
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <main+0x84>)
 8001b80:	f002 fd1c 	bl	80045bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001b84:	210c      	movs	r1, #12
 8001b86:	4817      	ldr	r0, [pc, #92]	@ (8001be4 <main+0x88>)
 8001b88:	f002 fdc2 	bl	8004710 <HAL_TIM_PWM_Start>

  init_LCD();
 8001b8c:	f7ff febe 	bl	800190c <init_LCD>
  keypad_init();
 8001b90:	f7ff fc84 	bl	800149c <keypad_init>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 8001b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b98:	4813      	ldr	r0, [pc, #76]	@ (8001be8 <main+0x8c>)
 8001b9a:	f001 ff3e 	bl	8003a1a <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  menu_main();
 8001b9e:	f000 fbcf 	bl	8002340 <menu_main>
  while (1)
  {
	 char key = keypad_getkey();
 8001ba2:	f7ff fc97 	bl	80014d4 <keypad_getkey>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
	 if(key != 0){
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <main+0x58>
		 menu_selection();
 8001bb0:	f000 fae6 	bl	8002180 <menu_selection>
	 }

	 Regulate_Light_Intensity();
 8001bb4:	f7ff fb84 	bl	80012c0 <Regulate_Light_Intensity>

	 float light = read_light_inside();
 8001bb8:	f7ff fb60 	bl	800127c <read_light_inside>
 8001bbc:	6138      	str	r0, [r7, #16]
	 char buffer[16];
	 sprintf(buffer, "%.2f", light);
 8001bbe:	6938      	ldr	r0, [r7, #16]
 8001bc0:	f7fe fc32 	bl	8000428 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4638      	mov	r0, r7
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <main+0x90>)
 8001bcc:	f004 ff32 	bl	8006a34 <siprintf>
	 clear_display();
 8001bd0:	f7ff fee7 	bl	80019a2 <clear_display>
	 write_string_line(1,buffer);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff fec8 	bl	800196e <write_string_line>
  {
 8001bde:	e7e0      	b.n	8001ba2 <main+0x46>
 8001be0:	2000026c 	.word	0x2000026c
 8001be4:	200002b4 	.word	0x200002b4
 8001be8:	40011000 	.word	0x40011000
 8001bec:	080095fc 	.word	0x080095fc

08001bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b094      	sub	sp, #80	@ 0x50
 8001bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfa:	2228      	movs	r2, #40	@ 0x28
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 ff7b 	bl	8006afa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c32:	2302      	movs	r3, #2
 8001c34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c3c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 ff00 	bl	8003a4c <HAL_RCC_OscConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c52:	f000 fba7 	bl	80023a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c56:	230f      	movs	r3, #15
 8001c58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2102      	movs	r1, #2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f002 f96c 	bl	8003f50 <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001c7e:	f000 fb91 	bl	80023a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c82:	2302      	movs	r3, #2
 8001c84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001c86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c8a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fad8 	bl	8004244 <HAL_RCCEx_PeriphCLKConfig>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c9a:	f000 fb83 	bl	80023a4 <Error_Handler>
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3750      	adds	r7, #80	@ 0x50
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001cba:	4a19      	ldr	r2, [pc, #100]	@ (8001d20 <MX_ADC1_Init+0x78>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001cd2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001cd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd8:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ce4:	480d      	ldr	r0, [pc, #52]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001ce6:	f000 fe1f 	bl	8002928 <HAL_ADC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001cf0:	f000 fb58 	bl	80023a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001cf4:	2310      	movs	r3, #16
 8001cf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_ADC1_Init+0x74>)
 8001d06:	f001 f8d3 	bl	8002eb0 <HAL_ADC_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001d10:	f000 fb48 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200001f8 	.word	0x200001f8
 8001d20:	40012400 	.word	0x40012400

08001d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d38:	463b      	mov	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d40:	4b1d      	ldr	r3, [pc, #116]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <MX_TIM3_Init+0x98>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d48:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d50:	2210      	movs	r2, #16
 8001d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001d54:	4b18      	ldr	r3, [pc, #96]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d64:	2280      	movs	r2, #128	@ 0x80
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d6a:	f002 fbd7 	bl	800451c <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001d74:	f000 fb16 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4619      	mov	r1, r3
 8001d84:	480c      	ldr	r0, [pc, #48]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001d86:	f002 ff2f 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001d90:	f000 fb08 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	@ (8001db8 <MX_TIM3_Init+0x94>)
 8001da2:	f003 fab1 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001dac:	f000 fafa 	bl	80023a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000026c 	.word	0x2000026c
 8001dbc:	40000400 	.word	0x40000400

08001dc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08e      	sub	sp, #56	@ 0x38
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001df0:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001df2:	4a31      	ldr	r2, [pc, #196]	@ (8001eb8 <MX_TIM4_Init+0xf8>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001df6:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001df8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001dfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 119;
 8001e04:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e06:	2277      	movs	r2, #119	@ 0x77
 8001e08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e16:	4827      	ldr	r0, [pc, #156]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e18:	f002 fb80 	bl	800451c <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001e22:	f000 fabf 	bl	80023a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e2c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e30:	4619      	mov	r1, r3
 8001e32:	4820      	ldr	r0, [pc, #128]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e34:	f002 fed8 	bl	8004be8 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001e3e:	f000 fab1 	bl	80023a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e42:	481c      	ldr	r0, [pc, #112]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e44:	f002 fc0c 	bl	8004660 <HAL_TIM_PWM_Init>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001e4e:	f000 faa9 	bl	80023a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4814      	ldr	r0, [pc, #80]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e62:	f003 fa51 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001e6c:	f000 fa9a 	bl	80023a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e70:	2360      	movs	r3, #96	@ 0x60
 8001e72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 8001e74:	233c      	movs	r3, #60	@ 0x3c
 8001e76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	220c      	movs	r2, #12
 8001e84:	4619      	mov	r1, r3
 8001e86:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e88:	f002 fdec 	bl	8004a64 <HAL_TIM_PWM_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001e92:	f000 fa87 	bl	80023a4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ea4:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ea6:	4803      	ldr	r0, [pc, #12]	@ (8001eb4 <MX_TIM4_Init+0xf4>)
 8001ea8:	f000 fb56 	bl	8002558 <HAL_TIM_MspPostInit>

}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	@ 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002b4 	.word	0x200002b4
 8001eb8:	40000800 	.word	0x40000800

08001ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <MX_DMA_Init+0x38>)
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8001ef4 <MX_DMA_Init+0x38>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6153      	str	r3, [r2, #20]
 8001ece:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <MX_DMA_Init+0x38>)
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	200b      	movs	r0, #11
 8001ee0:	f001 fa51 	bl	8003386 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ee4:	200b      	movs	r0, #11
 8001ee6:	f001 fa6a 	bl	80033be <HAL_NVIC_EnableIRQ>

}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efe:	f107 0310 	add.w	r3, r7, #16
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	4a3e      	ldr	r2, [pc, #248]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6193      	str	r3, [r2, #24]
 8001f18:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f24:	4b39      	ldr	r3, [pc, #228]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a38      	ldr	r2, [pc, #224]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f2a:	f043 0320 	orr.w	r3, r3, #32
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3c:	4b33      	ldr	r3, [pc, #204]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a32      	ldr	r2, [pc, #200]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b30      	ldr	r3, [pc, #192]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b2d      	ldr	r3, [pc, #180]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a2c      	ldr	r2, [pc, #176]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b2a      	ldr	r3, [pc, #168]	@ (800200c <MX_GPIO_Init+0x114>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f72:	4827      	ldr	r0, [pc, #156]	@ (8002010 <MX_GPIO_Init+0x118>)
 8001f74:	f001 fd39 	bl	80039ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f641 6108 	movw	r1, #7688	@ 0x1e08
 8001f7e:	4825      	ldr	r0, [pc, #148]	@ (8002014 <MX_GPIO_Init+0x11c>)
 8001f80:	f001 fd33 	bl	80039ea <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8001f84:	2200      	movs	r2, #0
 8001f86:	f640 411b 	movw	r1, #3099	@ 0xc1b
 8001f8a:	4823      	ldr	r0, [pc, #140]	@ (8002018 <MX_GPIO_Init+0x120>)
 8001f8c:	f001 fd2d 	bl	80039ea <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4819      	ldr	r0, [pc, #100]	@ (8002010 <MX_GPIO_Init+0x118>)
 8001faa:	f001 fb83 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRRIGACAO_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001fae:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8001fb2:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4813      	ldr	r0, [pc, #76]	@ (8002014 <MX_GPIO_Init+0x11c>)
 8001fc8:	f001 fb74 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8001fcc:	f640 431b 	movw	r3, #3099	@ 0xc1b
 8001fd0:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0310 	add.w	r3, r7, #16
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <MX_GPIO_Init+0x120>)
 8001fe6:	f001 fb65 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 8001fea:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	@ (8002018 <MX_GPIO_Init+0x120>)
 8002000:	f001 fb58 	bl	80036b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002004:	bf00      	nop
 8002006:	3720      	adds	r7, #32
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40021000 	.word	0x40021000
 8002010:	40011000 	.word	0x40011000
 8002014:	40010800 	.word	0x40010800
 8002018:	40010c00 	.word	0x40010c00

0800201c <select_params>:

/* USER CODE BEGIN 4 */

void select_params(void){
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

	switch(variedade){
 8002020:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <select_params+0x154>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d069      	beq.n	80020fc <select_params+0xe0>
 8002028:	2b02      	cmp	r3, #2
 800202a:	f300 809d 	bgt.w	8002168 <select_params+0x14c>
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <select_params+0x1c>
 8002032:	2b01      	cmp	r3, #1
 8002034:	d031      	beq.n	800209a <select_params+0x7e>
				tempo_irrigacao = 10;
			}
			break;
	}

}
 8002036:	e097      	b.n	8002168 <select_params+0x14c>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 8002038:	4b4e      	ldr	r3, [pc, #312]	@ (8002174 <select_params+0x158>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <select_params+0x34>
 8002040:	4b4d      	ldr	r3, [pc, #308]	@ (8002178 <select_params+0x15c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d103      	bne.n	8002050 <select_params+0x34>
				tempo_irrigacao = 17;
 8002048:	4b4c      	ldr	r3, [pc, #304]	@ (800217c <select_params+0x160>)
 800204a:	2211      	movs	r2, #17
 800204c:	701a      	strb	r2, [r3, #0]
 800204e:	e023      	b.n	8002098 <select_params+0x7c>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 8002050:	4b48      	ldr	r3, [pc, #288]	@ (8002174 <select_params+0x158>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d107      	bne.n	8002068 <select_params+0x4c>
 8002058:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <select_params+0x15c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d103      	bne.n	8002068 <select_params+0x4c>
				tempo_irrigacao = 15;
 8002060:	4b46      	ldr	r3, [pc, #280]	@ (800217c <select_params+0x160>)
 8002062:	220f      	movs	r2, #15
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e017      	b.n	8002098 <select_params+0x7c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 8002068:	4b42      	ldr	r3, [pc, #264]	@ (8002174 <select_params+0x158>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d107      	bne.n	8002080 <select_params+0x64>
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <select_params+0x15c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d103      	bne.n	8002080 <select_params+0x64>
				tempo_irrigacao = 10;
 8002078:	4b40      	ldr	r3, [pc, #256]	@ (800217c <select_params+0x160>)
 800207a:	220a      	movs	r2, #10
 800207c:	701a      	strb	r2, [r3, #0]
 800207e:	e00b      	b.n	8002098 <select_params+0x7c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 8002080:	4b3c      	ldr	r3, [pc, #240]	@ (8002174 <select_params+0x158>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d16a      	bne.n	800215e <select_params+0x142>
 8002088:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <select_params+0x15c>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d166      	bne.n	800215e <select_params+0x142>
				tempo_irrigacao = 7;
 8002090:	4b3a      	ldr	r3, [pc, #232]	@ (800217c <select_params+0x160>)
 8002092:	2207      	movs	r2, #7
 8002094:	701a      	strb	r2, [r3, #0]
			break;
 8002096:	e062      	b.n	800215e <select_params+0x142>
 8002098:	e061      	b.n	800215e <select_params+0x142>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 800209a:	4b36      	ldr	r3, [pc, #216]	@ (8002174 <select_params+0x158>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d107      	bne.n	80020b2 <select_params+0x96>
 80020a2:	4b35      	ldr	r3, [pc, #212]	@ (8002178 <select_params+0x15c>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d103      	bne.n	80020b2 <select_params+0x96>
				tempo_irrigacao = 13;
 80020aa:	4b34      	ldr	r3, [pc, #208]	@ (800217c <select_params+0x160>)
 80020ac:	220d      	movs	r2, #13
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e023      	b.n	80020fa <select_params+0xde>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 80020b2:	4b30      	ldr	r3, [pc, #192]	@ (8002174 <select_params+0x158>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <select_params+0xae>
 80020ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002178 <select_params+0x15c>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <select_params+0xae>
				tempo_irrigacao = 10;
 80020c2:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <select_params+0x160>)
 80020c4:	220a      	movs	r2, #10
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e017      	b.n	80020fa <select_params+0xde>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 80020ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002174 <select_params+0x158>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <select_params+0xc6>
 80020d2:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <select_params+0x15c>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d103      	bne.n	80020e2 <select_params+0xc6>
				tempo_irrigacao = 6;
 80020da:	4b28      	ldr	r3, [pc, #160]	@ (800217c <select_params+0x160>)
 80020dc:	2206      	movs	r2, #6
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e00b      	b.n	80020fa <select_params+0xde>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <select_params+0x158>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d13b      	bne.n	8002162 <select_params+0x146>
 80020ea:	4b23      	ldr	r3, [pc, #140]	@ (8002178 <select_params+0x15c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d137      	bne.n	8002162 <select_params+0x146>
				tempo_irrigacao = 3;
 80020f2:	4b22      	ldr	r3, [pc, #136]	@ (800217c <select_params+0x160>)
 80020f4:	2203      	movs	r2, #3
 80020f6:	701a      	strb	r2, [r3, #0]
			break;
 80020f8:	e033      	b.n	8002162 <select_params+0x146>
 80020fa:	e032      	b.n	8002162 <select_params+0x146>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 80020fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002174 <select_params+0x158>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <select_params+0xf8>
 8002104:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <select_params+0x15c>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d103      	bne.n	8002114 <select_params+0xf8>
				tempo_irrigacao = 19;
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <select_params+0x160>)
 800210e:	2213      	movs	r2, #19
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e023      	b.n	800215c <select_params+0x140>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 8002114:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <select_params+0x158>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <select_params+0x110>
 800211c:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <select_params+0x15c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d103      	bne.n	800212c <select_params+0x110>
				tempo_irrigacao = 17;
 8002124:	4b15      	ldr	r3, [pc, #84]	@ (800217c <select_params+0x160>)
 8002126:	2211      	movs	r2, #17
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e017      	b.n	800215c <select_params+0x140>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <select_params+0x158>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <select_params+0x128>
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <select_params+0x15c>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d103      	bne.n	8002144 <select_params+0x128>
				tempo_irrigacao = 13;
 800213c:	4b0f      	ldr	r3, [pc, #60]	@ (800217c <select_params+0x160>)
 800213e:	220d      	movs	r2, #13
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e00b      	b.n	800215c <select_params+0x140>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <select_params+0x158>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <select_params+0x14a>
 800214c:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <select_params+0x15c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <select_params+0x14a>
				tempo_irrigacao = 10;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <select_params+0x160>)
 8002156:	220a      	movs	r2, #10
 8002158:	701a      	strb	r2, [r3, #0]
			break;
 800215a:	e004      	b.n	8002166 <select_params+0x14a>
 800215c:	e003      	b.n	8002166 <select_params+0x14a>
			break;
 800215e:	bf00      	nop
 8002160:	e002      	b.n	8002168 <select_params+0x14c>
			break;
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <select_params+0x14c>
			break;
 8002166:	bf00      	nop
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	200002ff 	.word	0x200002ff
 8002174:	20000001 	.word	0x20000001
 8002178:	200002fe 	.word	0x200002fe
 800217c:	20000000 	.word	0x20000000

08002180 <menu_selection>:

void menu_selection(void){
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
	const char *options[] = {" Mudar Temp " "\xDF" "C", "  Mudar Planta", "      Sair"};
 8002186:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <menu_selection+0x64>)
 8002188:	463b      	mov	r3, r7
 800218a:	ca07      	ldmia	r2, {r0, r1, r2}
 800218c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char num_options = sizeof(options) / sizeof(options[0]);
 8002190:	2303      	movs	r3, #3
 8002192:	73fb      	strb	r3, [r7, #15]
	char option = navigate_options(options, num_options);
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	463b      	mov	r3, r7
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc0c 	bl	80019b8 <navigate_options>
 80021a0:	4603      	mov	r3, r0
 80021a2:	73bb      	strb	r3, [r7, #14]
	switch(option){
 80021a4:	7bbb      	ldrb	r3, [r7, #14]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d014      	beq.n	80021d4 <menu_selection+0x54>
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	dc15      	bgt.n	80021da <menu_selection+0x5a>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <menu_selection+0x38>
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d007      	beq.n	80021c6 <menu_selection+0x46>
			break;
		case 2:
			menu_main();
			break;
	}
}
 80021b6:	e010      	b.n	80021da <menu_selection+0x5a>
			menu_temperature_selection();
 80021b8:	f000 f816 	bl	80021e8 <menu_temperature_selection>
			menu_main();
 80021bc:	f000 f8c0 	bl	8002340 <menu_main>
			select_params();
 80021c0:	f7ff ff2c 	bl	800201c <select_params>
			break;
 80021c4:	e009      	b.n	80021da <menu_selection+0x5a>
			menu_plant_selection();
 80021c6:	f000 f843 	bl	8002250 <menu_plant_selection>
			menu_main();
 80021ca:	f000 f8b9 	bl	8002340 <menu_main>
			select_params();
 80021ce:	f7ff ff25 	bl	800201c <select_params>
			break;
 80021d2:	e002      	b.n	80021da <menu_selection+0x5a>
			menu_main();
 80021d4:	f000 f8b4 	bl	8002340 <menu_main>
			break;
 80021d8:	bf00      	nop
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	08009630 	.word	0x08009630

080021e8 <menu_temperature_selection>:

void menu_temperature_selection(void){
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
	clear_display();
 80021ee:	f7ff fbd8 	bl	80019a2 <clear_display>
	write_string_line(1,"Digite o Valor:");
 80021f2:	4912      	ldr	r1, [pc, #72]	@ (800223c <menu_temperature_selection+0x54>)
 80021f4:	2001      	movs	r0, #1
 80021f6:	f7ff fbba 	bl	800196e <write_string_line>
	char buffer[3];
	temperatura_limite = read_temperature_keypad(buffer);
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f9db 	bl	80015b8 <read_temperature_keypad>
 8002202:	4603      	mov	r3, r0
 8002204:	4a0e      	ldr	r2, [pc, #56]	@ (8002240 <menu_temperature_selection+0x58>)
 8002206:	6013      	str	r3, [r2, #0]
	clear_display();
 8002208:	f7ff fbcb 	bl	80019a2 <clear_display>
	write_string_line(1, "Temp Selecionada");
 800220c:	490d      	ldr	r1, [pc, #52]	@ (8002244 <menu_temperature_selection+0x5c>)
 800220e:	2001      	movs	r0, #1
 8002210:	f7ff fbad 	bl	800196e <write_string_line>
	write_string_line(2, "      ");
 8002214:	490c      	ldr	r1, [pc, #48]	@ (8002248 <menu_temperature_selection+0x60>)
 8002216:	2002      	movs	r0, #2
 8002218:	f7ff fba9 	bl	800196e <write_string_line>
	write_string_LCD(buffer);
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fb90 	bl	8001944 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 8002224:	4809      	ldr	r0, [pc, #36]	@ (800224c <menu_temperature_selection+0x64>)
 8002226:	f7ff fb8d 	bl	8001944 <write_string_LCD>
	HAL_Delay(3000);
 800222a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800222e:	f000 fb57 	bl	80028e0 <HAL_Delay>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	0800963c 	.word	0x0800963c
 8002240:	20000004 	.word	0x20000004
 8002244:	0800964c 	.word	0x0800964c
 8002248:	08009660 	.word	0x08009660
 800224c:	08009668 	.word	0x08009668

08002250 <menu_plant_selection>:

void menu_plant_selection(void){
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
	const char *options[] = {"     Alface", "    Pimentao", "    Morango"};
 8002256:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <menu_plant_selection+0x60>)
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	ca07      	ldmia	r2, {r0, r1, r2}
 800225e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char num_options = sizeof(options) / sizeof(options[0]);
 8002262:	2303      	movs	r3, #3
 8002264:	77fb      	strb	r3, [r7, #31]
	variedade = navigate_options(options, num_options);
 8002266:	7ffa      	ldrb	r2, [r7, #31]
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fba2 	bl	80019b8 <navigate_options>
 8002274:	4603      	mov	r3, r0
 8002276:	461a      	mov	r2, r3
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <menu_plant_selection+0x64>)
 800227a:	701a      	strb	r2, [r3, #0]
	char buffer[16];
	get_name(variedade, buffer);
 800227c:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <menu_plant_selection+0x64>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	463a      	mov	r2, r7
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f819 	bl	80022bc <get_name>
	clear_display();
 800228a:	f7ff fb8a 	bl	80019a2 <clear_display>
	write_string_line(1, buffer);
 800228e:	463b      	mov	r3, r7
 8002290:	4619      	mov	r1, r3
 8002292:	2001      	movs	r0, #1
 8002294:	f7ff fb6b 	bl	800196e <write_string_line>
	write_string_line(2, "  Selecionado");
 8002298:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <menu_plant_selection+0x68>)
 800229a:	2002      	movs	r0, #2
 800229c:	f7ff fb67 	bl	800196e <write_string_line>
	HAL_Delay(3000);
 80022a0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80022a4:	f000 fb1c 	bl	80028e0 <HAL_Delay>
}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	080096a4 	.word	0x080096a4
 80022b4:	200002ff 	.word	0x200002ff
 80022b8:	0800966c 	.word	0x0800966c

080022bc <get_name>:

void get_name(char code, char* buffer) {
 80022bc:	b490      	push	{r4, r7}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	6039      	str	r1, [r7, #0]
 80022c6:	71fb      	strb	r3, [r7, #7]
    switch(code) {
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d01a      	beq.n	8002304 <get_name+0x48>
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	dc21      	bgt.n	8002316 <get_name+0x5a>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <get_name+0x20>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d009      	beq.n	80022ee <get_name+0x32>
 80022da:	e01c      	b.n	8002316 <get_name+0x5a>
        case 0:
            strcpy(buffer, "     Alface");
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <get_name+0x74>)
 80022e0:	461c      	mov	r4, r3
 80022e2:	4613      	mov	r3, r2
 80022e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022e6:	6020      	str	r0, [r4, #0]
 80022e8:	6061      	str	r1, [r4, #4]
 80022ea:	60a2      	str	r2, [r4, #8]
            break;
 80022ec:	e01b      	b.n	8002326 <get_name+0x6a>
        case 1:
            strcpy(buffer, "    Pimentao");
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	4a10      	ldr	r2, [pc, #64]	@ (8002334 <get_name+0x78>)
 80022f2:	461c      	mov	r4, r3
 80022f4:	4613      	mov	r3, r2
 80022f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80022f8:	6020      	str	r0, [r4, #0]
 80022fa:	6061      	str	r1, [r4, #4]
 80022fc:	60a2      	str	r2, [r4, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	7323      	strb	r3, [r4, #12]
            break;
 8002302:	e010      	b.n	8002326 <get_name+0x6a>
        case 2:
            strcpy(buffer, "    Morango");
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	4a0c      	ldr	r2, [pc, #48]	@ (8002338 <get_name+0x7c>)
 8002308:	461c      	mov	r4, r3
 800230a:	4613      	mov	r3, r2
 800230c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800230e:	6020      	str	r0, [r4, #0]
 8002310:	6061      	str	r1, [r4, #4]
 8002312:	60a2      	str	r2, [r4, #8]
            break;
 8002314:	e007      	b.n	8002326 <get_name+0x6a>
        default:
            strcpy(buffer, "Unknown"); // Handle unexpected code values
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	4908      	ldr	r1, [pc, #32]	@ (800233c <get_name+0x80>)
 800231a:	461a      	mov	r2, r3
 800231c:	460b      	mov	r3, r1
 800231e:	cb03      	ldmia	r3!, {r0, r1}
 8002320:	6010      	str	r0, [r2, #0]
 8002322:	6051      	str	r1, [r2, #4]
            break;
 8002324:	bf00      	nop
    }
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bc90      	pop	{r4, r7}
 800232e:	4770      	bx	lr
 8002330:	0800967c 	.word	0x0800967c
 8002334:	08009688 	.word	0x08009688
 8002338:	08009698 	.word	0x08009698
 800233c:	080096b0 	.word	0x080096b0

08002340 <menu_main>:

void menu_main(void){
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
	char buffer [16];
	temperatura_atual = Read_Temperature();
 8002346:	f7fe ff1b 	bl	8001180 <Read_Temperature>
 800234a:	4603      	mov	r3, r0
 800234c:	4a10      	ldr	r2, [pc, #64]	@ (8002390 <menu_main+0x50>)
 800234e:	6013      	str	r3, [r2, #0]
	sprintf(buffer, "%.2f", temperatura_atual);  // Convert float to string with 2 decimal places
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <menu_main+0x50>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f867 	bl	8000428 <__aeabi_f2d>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4638      	mov	r0, r7
 8002360:	490c      	ldr	r1, [pc, #48]	@ (8002394 <menu_main+0x54>)
 8002362:	f004 fb67 	bl	8006a34 <siprintf>
	clear_display();
 8002366:	f7ff fb1c 	bl	80019a2 <clear_display>
	write_string_line(1,"   Smart-fARM");
 800236a:	490b      	ldr	r1, [pc, #44]	@ (8002398 <menu_main+0x58>)
 800236c:	2001      	movs	r0, #1
 800236e:	f7ff fafe 	bl	800196e <write_string_line>
	write_string_line(2,"    ");
 8002372:	490a      	ldr	r1, [pc, #40]	@ (800239c <menu_main+0x5c>)
 8002374:	2002      	movs	r0, #2
 8002376:	f7ff fafa 	bl	800196e <write_string_line>
	write_string_LCD(buffer);
 800237a:	463b      	mov	r3, r7
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff fae1 	bl	8001944 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 8002382:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <menu_main+0x60>)
 8002384:	f7ff fade 	bl	8001944 <write_string_LCD>
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000300 	.word	0x20000300
 8002394:	080095fc 	.word	0x080095fc
 8002398:	080096b8 	.word	0x080096b8
 800239c:	080096c8 	.word	0x080096c8
 80023a0:	08009668 	.word	0x08009668

080023a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ac:	bf00      	nop
 80023ae:	e7fd      	b.n	80023ac <Error_Handler+0x8>

080023b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023b6:	4b15      	ldr	r3, [pc, #84]	@ (800240c <HAL_MspInit+0x5c>)
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	4a14      	ldr	r2, [pc, #80]	@ (800240c <HAL_MspInit+0x5c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6193      	str	r3, [r2, #24]
 80023c2:	4b12      	ldr	r3, [pc, #72]	@ (800240c <HAL_MspInit+0x5c>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b0f      	ldr	r3, [pc, #60]	@ (800240c <HAL_MspInit+0x5c>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a0e      	ldr	r2, [pc, #56]	@ (800240c <HAL_MspInit+0x5c>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b0c      	ldr	r3, [pc, #48]	@ (800240c <HAL_MspInit+0x5c>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_MspInit+0x60>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	4a04      	ldr	r2, [pc, #16]	@ (8002410 <HAL_MspInit+0x60>)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000

08002414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a28      	ldr	r2, [pc, #160]	@ (80024d0 <HAL_ADC_MspInit+0xbc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d149      	bne.n	80024c8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002434:	4b27      	ldr	r3, [pc, #156]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	4a26      	ldr	r2, [pc, #152]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 800243a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243e:	6193      	str	r3, [r2, #24]
 8002440:	4b24      	ldr	r3, [pc, #144]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800244c:	4b21      	ldr	r3, [pc, #132]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a20      	ldr	r2, [pc, #128]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 8002452:	f043 0304 	orr.w	r3, r3, #4
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_ADC_MspInit+0xc0>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8002464:	2303      	movs	r3, #3
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002468:	2303      	movs	r3, #3
 800246a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4819      	ldr	r0, [pc, #100]	@ (80024d8 <HAL_ADC_MspInit+0xc4>)
 8002474:	f001 f91e 	bl	80036b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 800247a:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <HAL_ADC_MspInit+0xcc>)
 800247c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247e:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 8002480:	2200      	movs	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002484:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 8002492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002496:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002498:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 800249a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80024ac:	480b      	ldr	r0, [pc, #44]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 80024ae:	f000 ffa1 	bl	80033f4 <HAL_DMA_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80024b8:	f7ff ff74 	bl	80023a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 80024c0:	621a      	str	r2, [r3, #32]
 80024c2:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <HAL_ADC_MspInit+0xc8>)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80024c8:	bf00      	nop
 80024ca:	3720      	adds	r7, #32
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40012400 	.word	0x40012400
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800
 80024dc:	20000228 	.word	0x20000228
 80024e0:	40020008 	.word	0x40020008

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a16      	ldr	r2, [pc, #88]	@ (800254c <HAL_TIM_Base_MspInit+0x68>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d114      	bne.n	8002520 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024f6:	4b16      	ldr	r3, [pc, #88]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	4a15      	ldr	r2, [pc, #84]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	61d3      	str	r3, [r2, #28]
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	201d      	movs	r0, #29
 8002514:	f000 ff37 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002518:	201d      	movs	r0, #29
 800251a:	f000 ff50 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800251e:	e010      	b.n	8002542 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0b      	ldr	r2, [pc, #44]	@ (8002554 <HAL_TIM_Base_MspInit+0x70>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10b      	bne.n	8002542 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800252a:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a08      	ldr	r2, [pc, #32]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 8002530:	f043 0304 	orr.w	r3, r3, #4
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_TIM_Base_MspInit+0x6c>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40000400 	.word	0x40000400
 8002550:	40021000 	.word	0x40021000
 8002554:	40000800 	.word	0x40000800

08002558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <HAL_TIM_MspPostInit+0x5c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d118      	bne.n	80025aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002578:	4b0f      	ldr	r3, [pc, #60]	@ (80025b8 <HAL_TIM_MspPostInit+0x60>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a0e      	ldr	r2, [pc, #56]	@ (80025b8 <HAL_TIM_MspPostInit+0x60>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6193      	str	r3, [r2, #24]
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <HAL_TIM_MspPostInit+0x60>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8002590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2302      	movs	r3, #2
 800259c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 0310 	add.w	r3, r7, #16
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	@ (80025bc <HAL_TIM_MspPostInit+0x64>)
 80025a6:	f001 f885 	bl	80036b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80025aa:	bf00      	nop
 80025ac:	3720      	adds	r7, #32
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40000800 	.word	0x40000800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010c00 	.word	0x40010c00

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <NMI_Handler+0x4>

080025c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025cc:	bf00      	nop
 80025ce:	e7fd      	b.n	80025cc <HardFault_Handler+0x4>

080025d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <MemManage_Handler+0x4>

080025d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025dc:	bf00      	nop
 80025de:	e7fd      	b.n	80025dc <BusFault_Handler+0x4>

080025e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <UsageFault_Handler+0x4>

080025e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002610:	f000 f94a 	bl	80028a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}

08002618 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800261c:	4802      	ldr	r0, [pc, #8]	@ (8002628 <DMA1_Channel1_IRQHandler+0x10>)
 800261e:	f000 ff43 	bl	80034a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000228 	.word	0x20000228

0800262c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <TIM3_IRQHandler+0x10>)
 8002632:	f002 f90f 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2000026c 	.word	0x2000026c

08002640 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  return 1;
 8002644:	2301      	movs	r3, #1
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <_kill>:

int _kill(int pid, int sig)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002658:	f004 fab4 	bl	8006bc4 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	2216      	movs	r2, #22
 8002660:	601a      	str	r2, [r3, #0]
  return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <_exit>:

void _exit (int status)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002676:	f04f 31ff 	mov.w	r1, #4294967295
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7ff ffe7 	bl	800264e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <_exit+0x12>

08002684 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	e00a      	b.n	80026ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002696:	f3af 8000 	nop.w
 800269a:	4601      	mov	r1, r0
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	60ba      	str	r2, [r7, #8]
 80026a2:	b2ca      	uxtb	r2, r1
 80026a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	3301      	adds	r3, #1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbf0      	blt.n	8002696 <_read+0x12>
  }

  return len;
 80026b4:	687b      	ldr	r3, [r7, #4]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e009      	b.n	80026e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	60ba      	str	r2, [r7, #8]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	3301      	adds	r3, #1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	dbf1      	blt.n	80026d0 <_write+0x12>
  }
  return len;
 80026ec:	687b      	ldr	r3, [r7, #4]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <_close>:

int _close(int file)
{
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800271c:	605a      	str	r2, [r3, #4]
  return 0;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <_isatty>:

int _isatty(int file)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002732:	2301      	movs	r3, #1
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
	...

08002758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <_sbrk+0x5c>)
 8002762:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <_sbrk+0x60>)
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800276c:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <_sbrk+0x64>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d102      	bne.n	800277a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <_sbrk+0x64>)
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <_sbrk+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <_sbrk+0x64>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d207      	bcs.n	8002798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002788:	f004 fa1c 	bl	8006bc4 <__errno>
 800278c:	4603      	mov	r3, r0
 800278e:	220c      	movs	r2, #12
 8002790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	e009      	b.n	80027ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002798:	4b08      	ldr	r3, [pc, #32]	@ (80027bc <_sbrk+0x64>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <_sbrk+0x64>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4413      	add	r3, r2
 80027a6:	4a05      	ldr	r2, [pc, #20]	@ (80027bc <_sbrk+0x64>)
 80027a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027aa:	68fb      	ldr	r3, [r7, #12]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	20005000 	.word	0x20005000
 80027b8:	00000400 	.word	0x00000400
 80027bc:	20000308 	.word	0x20000308
 80027c0:	20000460 	.word	0x20000460

080027c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027d0:	f7ff fff8 	bl	80027c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480b      	ldr	r0, [pc, #44]	@ (8002804 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027d6:	490c      	ldr	r1, [pc, #48]	@ (8002808 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027d8:	4a0c      	ldr	r2, [pc, #48]	@ (800280c <LoopFillZerobss+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027ec:	4c09      	ldr	r4, [pc, #36]	@ (8002814 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027fa:	f004 f9e9 	bl	8006bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027fe:	f7ff f9ad 	bl	8001b5c <main>
  bx lr
 8002802:	4770      	bx	lr
  ldr r0, =_sdata
 8002804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002808:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800280c:	08009b40 	.word	0x08009b40
  ldr r2, =_sbss
 8002810:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002814:	2000045c 	.word	0x2000045c

08002818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002818:	e7fe      	b.n	8002818 <ADC1_2_IRQHandler>
	...

0800281c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002820:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_Init+0x28>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_Init+0x28>)
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800282c:	2003      	movs	r0, #3
 800282e:	f000 fd9f 	bl	8003370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002832:	200f      	movs	r0, #15
 8002834:	f000 f808 	bl	8002848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7ff fdba 	bl	80023b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_InitTick+0x54>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_InitTick+0x58>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fdb7 	bl	80033da <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e00e      	b.n	8002894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d80a      	bhi.n	8002892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800287c:	2200      	movs	r2, #0
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f000 fd7f 	bl	8003386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002888:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <HAL_InitTick+0x5c>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e000      	b.n	8002894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000008 	.word	0x20000008
 80028a0:	20000010 	.word	0x20000010
 80028a4:	2000000c 	.word	0x2000000c

080028a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_IncTick+0x1c>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b05      	ldr	r3, [pc, #20]	@ (80028c8 <HAL_IncTick+0x20>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	4a03      	ldr	r2, [pc, #12]	@ (80028c8 <HAL_IncTick+0x20>)
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000010 	.word	0x20000010
 80028c8:	2000030c 	.word	0x2000030c

080028cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return uwTick;
 80028d0:	4b02      	ldr	r3, [pc, #8]	@ (80028dc <HAL_GetTick+0x10>)
 80028d2:	681b      	ldr	r3, [r3, #0]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	2000030c 	.word	0x2000030c

080028e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff fff0 	bl	80028cc <HAL_GetTick>
 80028ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d005      	beq.n	8002906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_Delay+0x44>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	461a      	mov	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002906:	bf00      	nop
 8002908:	f7ff ffe0 	bl	80028cc <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	429a      	cmp	r2, r3
 8002916:	d8f7      	bhi.n	8002908 <HAL_Delay+0x28>
  {
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	20000010 	.word	0x20000010

08002928 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0be      	b.n	8002ac8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d109      	bne.n	800296c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fd54 	bl	8002414 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fbf1 	bl	8003154 <ADC_ConversionStop_Disable>
 8002972:	4603      	mov	r3, r0
 8002974:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8099 	bne.w	8002ab6 <HAL_ADC_Init+0x18e>
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 8095 	bne.w	8002ab6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002994:	f023 0302 	bic.w	r3, r3, #2
 8002998:	f043 0202 	orr.w	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7b1b      	ldrb	r3, [r3, #12]
 80029ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c0:	d003      	beq.n	80029ca <HAL_ADC_Init+0xa2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d102      	bne.n	80029d0 <HAL_ADC_Init+0xa8>
 80029ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ce:	e000      	b.n	80029d2 <HAL_ADC_Init+0xaa>
 80029d0:	2300      	movs	r3, #0
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7d1b      	ldrb	r3, [r3, #20]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d119      	bne.n	8002a14 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7b1b      	ldrb	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	035a      	lsls	r2, r3, #13
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ad0 <HAL_ADC_Init+0x1a8>)
 8002a30:	4013      	ands	r3, r2
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a44:	d003      	beq.n	8002a4e <HAL_ADC_Init+0x126>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	051b      	lsls	r3, r3, #20
 8002a56:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <HAL_ADC_Init+0x1ac>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a86:	f023 0303 	bic.w	r3, r3, #3
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a92:	e018      	b.n	8002ac6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	f023 0312 	bic.w	r3, r3, #18
 8002a9c:	f043 0210 	orr.w	r2, r3, #16
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ab4:	e007      	b.n	8002ac6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002ac6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	ffe1f7fd 	.word	0xffe1f7fd
 8002ad4:	ff1f0efe 	.word	0xff1f0efe

08002ad8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_ADC_Start+0x1a>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e098      	b.n	8002c24 <HAL_ADC_Start+0x14c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fad0 	bl	80030a0 <ADC_Enable>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8087 	bne.w	8002c1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a41      	ldr	r2, [pc, #260]	@ (8002c2c <HAL_ADC_Start+0x154>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d105      	bne.n	8002b36 <HAL_ADC_Start+0x5e>
 8002b2a:	4b41      	ldr	r3, [pc, #260]	@ (8002c30 <HAL_ADC_Start+0x158>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d115      	bne.n	8002b62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d026      	beq.n	8002b9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b58:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b60:	e01d      	b.n	8002b9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2f      	ldr	r2, [pc, #188]	@ (8002c30 <HAL_ADC_Start+0x158>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_ADC_Start+0xaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <HAL_ADC_Start+0x154>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d10d      	bne.n	8002b9e <HAL_ADC_Start+0xc6>
 8002b82:	4b2b      	ldr	r3, [pc, #172]	@ (8002c30 <HAL_ADC_Start+0x158>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	f023 0206 	bic.w	r2, r3, #6
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bb6:	e002      	b.n	8002bbe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f06f 0202 	mvn.w	r2, #2
 8002bce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002bda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002bde:	d113      	bne.n	8002c08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002be4:	4a11      	ldr	r2, [pc, #68]	@ (8002c2c <HAL_ADC_Start+0x154>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002bea:	4b11      	ldr	r3, [pc, #68]	@ (8002c30 <HAL_ADC_Start+0x158>)
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d108      	bne.n	8002c08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	e00c      	b.n	8002c22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	e003      	b.n	8002c22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40012800 	.word	0x40012800
 8002c30:	40012400 	.word	0x40012400

08002c34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Stop+0x1a>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e01a      	b.n	8002c84 <HAL_ADC_Stop+0x50>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fa7c 	bl	8003154 <ADC_ConversionStop_Disable>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ca2:	f7ff fe13 	bl	80028cc <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	f043 0220 	orr.w	r2, r3, #32
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0d3      	b.n	8002e76 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d131      	bne.n	8002d40 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d12a      	bne.n	8002d40 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002cea:	e021      	b.n	8002d30 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d01d      	beq.n	8002d30 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_ADC_PollForConversion+0x7e>
 8002cfa:	f7ff fde7 	bl	80028cc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d212      	bcs.n	8002d30 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0a2      	b.n	8002e76 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0d6      	beq.n	8002cec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d3e:	e070      	b.n	8002e22 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002d40:	4b4f      	ldr	r3, [pc, #316]	@ (8002e80 <HAL_ADC_PollForConversion+0x1f4>)
 8002d42:	681c      	ldr	r4, [r3, #0]
 8002d44:	2002      	movs	r0, #2
 8002d46:	f001 fb33 	bl	80043b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_ADC_PollForConversion+0x1f8>)
 8002d58:	400b      	ands	r3, r1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d118      	bne.n	8002d90 <HAL_ADC_PollForConversion+0x104>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	4b48      	ldr	r3, [pc, #288]	@ (8002e88 <HAL_ADC_PollForConversion+0x1fc>)
 8002d66:	400b      	ands	r3, r1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <HAL_ADC_PollForConversion+0x104>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <HAL_ADC_PollForConversion+0x200>)
 8002d74:	400b      	ands	r3, r1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x100>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68d9      	ldr	r1, [r3, #12]
 8002d80:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <HAL_ADC_PollForConversion+0x204>)
 8002d82:	400b      	ands	r3, r1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x100>
 8002d88:	2314      	movs	r3, #20
 8002d8a:	e020      	b.n	8002dce <HAL_ADC_PollForConversion+0x142>
 8002d8c:	2329      	movs	r3, #41	@ 0x29
 8002d8e:	e01e      	b.n	8002dce <HAL_ADC_PollForConversion+0x142>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6919      	ldr	r1, [r3, #16]
 8002d96:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_ADC_PollForConversion+0x200>)
 8002d98:	400b      	ands	r3, r1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_ADC_PollForConversion+0x120>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68d9      	ldr	r1, [r3, #12]
 8002da4:	4b3a      	ldr	r3, [pc, #232]	@ (8002e90 <HAL_ADC_PollForConversion+0x204>)
 8002da6:	400b      	ands	r3, r1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <HAL_ADC_PollForConversion+0x13c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6919      	ldr	r1, [r3, #16]
 8002db2:	4b38      	ldr	r3, [pc, #224]	@ (8002e94 <HAL_ADC_PollForConversion+0x208>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_ADC_PollForConversion+0x140>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68d9      	ldr	r1, [r3, #12]
 8002dc0:	4b34      	ldr	r3, [pc, #208]	@ (8002e94 <HAL_ADC_PollForConversion+0x208>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_PollForConversion+0x140>
 8002dc8:	2354      	movs	r3, #84	@ 0x54
 8002dca:	e000      	b.n	8002dce <HAL_ADC_PollForConversion+0x142>
 8002dcc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002dce:	fb02 f303 	mul.w	r3, r2, r3
 8002dd2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002dd4:	e021      	b.n	8002e1a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ddc:	d01a      	beq.n	8002e14 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_ADC_PollForConversion+0x168>
 8002de4:	f7ff fd72 	bl	80028cc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d20f      	bcs.n	8002e14 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d90b      	bls.n	8002e14 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	f043 0204 	orr.w	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e030      	b.n	8002e76 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3301      	adds	r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d8d9      	bhi.n	8002dd6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0212 	mvn.w	r2, #18
 8002e2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002e42:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002e46:	d115      	bne.n	8002e74 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d111      	bne.n	8002e74 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd90      	pop	{r4, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000008 	.word	0x20000008
 8002e84:	24924924 	.word	0x24924924
 8002e88:	00924924 	.word	0x00924924
 8002e8c:	12492492 	.word	0x12492492
 8002e90:	00492492 	.word	0x00492492
 8002e94:	00249249 	.word	0x00249249

08002e98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_ADC_ConfigChannel+0x20>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e0dc      	b.n	800308a <HAL_ADC_ConfigChannel+0x1da>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d81c      	bhi.n	8002f1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	221f      	movs	r2, #31
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4019      	ands	r1, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b05      	subs	r3, #5
 8002f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f18:	e03c      	b.n	8002f94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d81c      	bhi.n	8002f5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	3b23      	subs	r3, #35	@ 0x23
 8002f34:	221f      	movs	r2, #31
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	4019      	ands	r1, r3
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b23      	subs	r3, #35	@ 0x23
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f5a:	e01b      	b.n	8002f94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3b41      	subs	r3, #65	@ 0x41
 8002f6e:	221f      	movs	r2, #31
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	4019      	ands	r1, r3
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	3b41      	subs	r3, #65	@ 0x41
 8002f88:	fa00 f203 	lsl.w	r2, r0, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d91c      	bls.n	8002fd6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	3b1e      	subs	r3, #30
 8002fae:	2207      	movs	r2, #7
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	4019      	ands	r1, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6898      	ldr	r0, [r3, #8]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b1e      	subs	r3, #30
 8002fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	e019      	b.n	800300a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6919      	ldr	r1, [r3, #16]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	2207      	movs	r2, #7
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	4019      	ands	r1, r3
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6898      	ldr	r0, [r3, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	4413      	add	r3, r2
 8002ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b10      	cmp	r3, #16
 8003010:	d003      	beq.n	800301a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003016:	2b11      	cmp	r3, #17
 8003018:	d132      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_ADC_ConfigChannel+0x1e4>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d125      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d126      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003040:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b10      	cmp	r3, #16
 8003048:	d11a      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_ADC_ConfigChannel+0x1e8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_ADC_ConfigChannel+0x1ec>)
 8003050:	fba2 2303 	umull	r2, r3, r2, r3
 8003054:	0c9a      	lsrs	r2, r3, #18
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003060:	e002      	b.n	8003068 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3b01      	subs	r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f9      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x1b2>
 800306e:	e007      	b.n	8003080 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	40012400 	.word	0x40012400
 8003098:	20000008 	.word	0x20000008
 800309c:	431bde83 	.word	0x431bde83

080030a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d040      	beq.n	8003140 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <ADC_Enable+0xac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003150 <ADC_Enable+0xb0>)
 80030d4:	fba2 2303 	umull	r2, r3, r2, r3
 80030d8:	0c9b      	lsrs	r3, r3, #18
 80030da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030dc:	e002      	b.n	80030e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f9      	bne.n	80030de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80030ea:	f7ff fbef 	bl	80028cc <HAL_GetTick>
 80030ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80030f0:	e01f      	b.n	8003132 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030f2:	f7ff fbeb 	bl	80028cc <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d918      	bls.n	8003132 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b01      	cmp	r3, #1
 800310c:	d011      	beq.n	8003132 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003112:	f043 0210 	orr.w	r2, r3, #16
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d1d8      	bne.n	80030f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	20000008 	.word	0x20000008
 8003150:	431bde83 	.word	0x431bde83

08003154 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d12e      	bne.n	80031cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800317e:	f7ff fba5 	bl	80028cc <HAL_GetTick>
 8003182:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003184:	e01b      	b.n	80031be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003186:	f7ff fba1 	bl	80028cc <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d914      	bls.n	80031be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	f043 0210 	orr.w	r2, r3, #16
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e007      	b.n	80031ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d0dc      	beq.n	8003186 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <__NVIC_SetPriorityGrouping+0x44>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f4:	4013      	ands	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320a:	4a04      	ldr	r2, [pc, #16]	@ (800321c <__NVIC_SetPriorityGrouping+0x44>)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	60d3      	str	r3, [r2, #12]
}
 8003210:	bf00      	nop
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003224:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <__NVIC_GetPriorityGrouping+0x18>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0a1b      	lsrs	r3, r3, #8
 800322a:	f003 0307 	and.w	r3, r3, #7
}
 800322e:	4618      	mov	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	2b00      	cmp	r3, #0
 800324c:	db0b      	blt.n	8003266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4906      	ldr	r1, [pc, #24]	@ (8003270 <__NVIC_EnableIRQ+0x34>)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	095b      	lsrs	r3, r3, #5
 800325c:	2001      	movs	r0, #1
 800325e:	fa00 f202 	lsl.w	r2, r0, r2
 8003262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	db0a      	blt.n	800329e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	490c      	ldr	r1, [pc, #48]	@ (80032c0 <__NVIC_SetPriority+0x4c>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	0112      	lsls	r2, r2, #4
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	440b      	add	r3, r1
 8003298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800329c:	e00a      	b.n	80032b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4908      	ldr	r1, [pc, #32]	@ (80032c4 <__NVIC_SetPriority+0x50>)
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	3b04      	subs	r3, #4
 80032ac:	0112      	lsls	r2, r2, #4
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	440b      	add	r3, r1
 80032b2:	761a      	strb	r2, [r3, #24]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	e000e100 	.word	0xe000e100
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b089      	sub	sp, #36	@ 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f1c3 0307 	rsb	r3, r3, #7
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	bf28      	it	cs
 80032e6:	2304      	movcs	r3, #4
 80032e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2b06      	cmp	r3, #6
 80032f0:	d902      	bls.n	80032f8 <NVIC_EncodePriority+0x30>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3b03      	subs	r3, #3
 80032f6:	e000      	b.n	80032fa <NVIC_EncodePriority+0x32>
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	401a      	ands	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003310:	f04f 31ff 	mov.w	r1, #4294967295
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43d9      	mvns	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	4313      	orrs	r3, r2
         );
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	@ 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800333c:	d301      	bcc.n	8003342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <SysTick_Config+0x40>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334a:	210f      	movs	r1, #15
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f7ff ff90 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <SysTick_Config+0x40>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	4b04      	ldr	r3, [pc, #16]	@ (800336c <SysTick_Config+0x40>)
 800335c:	2207      	movs	r2, #7
 800335e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff2d 	bl	80031d8 <__NVIC_SetPriorityGrouping>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003398:	f7ff ff42 	bl	8003220 <__NVIC_GetPriorityGrouping>
 800339c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff ff90 	bl	80032c8 <NVIC_EncodePriority>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff5f 	bl	8003274 <__NVIC_SetPriority>
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff35 	bl	800323c <__NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffa2 	bl	800332c <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
	...

080033f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e043      	b.n	8003492 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4b22      	ldr	r3, [pc, #136]	@ (800349c <HAL_DMA_Init+0xa8>)
 8003412:	4413      	add	r3, r2
 8003414:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <HAL_DMA_Init+0xac>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	091b      	lsrs	r3, r3, #4
 800341c:	009a      	lsls	r2, r3, #2
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a1f      	ldr	r2, [pc, #124]	@ (80034a4 <HAL_DMA_Init+0xb0>)
 8003426:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800343e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003442:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800344c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	bffdfff8 	.word	0xbffdfff8
 80034a0:	cccccccd 	.word	0xcccccccd
 80034a4:	40020000 	.word	0x40020000

080034a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2204      	movs	r2, #4
 80034c6:	409a      	lsls	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d04f      	beq.n	8003570 <HAL_DMA_IRQHandler+0xc8>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04a      	beq.n	8003570 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0204 	bic.w	r2, r2, #4
 80034f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a66      	ldr	r2, [pc, #408]	@ (8003698 <HAL_DMA_IRQHandler+0x1f0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d029      	beq.n	8003556 <HAL_DMA_IRQHandler+0xae>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a65      	ldr	r2, [pc, #404]	@ (800369c <HAL_DMA_IRQHandler+0x1f4>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMA_IRQHandler+0xaa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a63      	ldr	r2, [pc, #396]	@ (80036a0 <HAL_DMA_IRQHandler+0x1f8>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01a      	beq.n	800354c <HAL_DMA_IRQHandler+0xa4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a62      	ldr	r2, [pc, #392]	@ (80036a4 <HAL_DMA_IRQHandler+0x1fc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d012      	beq.n	8003546 <HAL_DMA_IRQHandler+0x9e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a60      	ldr	r2, [pc, #384]	@ (80036a8 <HAL_DMA_IRQHandler+0x200>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00a      	beq.n	8003540 <HAL_DMA_IRQHandler+0x98>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a5f      	ldr	r2, [pc, #380]	@ (80036ac <HAL_DMA_IRQHandler+0x204>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d102      	bne.n	800353a <HAL_DMA_IRQHandler+0x92>
 8003534:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003538:	e00e      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 800353a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800353e:	e00b      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 8003540:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003544:	e008      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 8003546:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800354a:	e005      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 800354c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003550:	e002      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 8003552:	2340      	movs	r3, #64	@ 0x40
 8003554:	e000      	b.n	8003558 <HAL_DMA_IRQHandler+0xb0>
 8003556:	2304      	movs	r3, #4
 8003558:	4a55      	ldr	r2, [pc, #340]	@ (80036b0 <HAL_DMA_IRQHandler+0x208>)
 800355a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8094 	beq.w	800368e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800356e:	e08e      	b.n	800368e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003574:	2202      	movs	r2, #2
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4013      	ands	r3, r2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d056      	beq.n	800362e <HAL_DMA_IRQHandler+0x186>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d051      	beq.n	800362e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 020a 	bic.w	r2, r2, #10
 80035a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a38      	ldr	r2, [pc, #224]	@ (8003698 <HAL_DMA_IRQHandler+0x1f0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d029      	beq.n	800360e <HAL_DMA_IRQHandler+0x166>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a37      	ldr	r2, [pc, #220]	@ (800369c <HAL_DMA_IRQHandler+0x1f4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d022      	beq.n	800360a <HAL_DMA_IRQHandler+0x162>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <HAL_DMA_IRQHandler+0x1f8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01a      	beq.n	8003604 <HAL_DMA_IRQHandler+0x15c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a34      	ldr	r2, [pc, #208]	@ (80036a4 <HAL_DMA_IRQHandler+0x1fc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d012      	beq.n	80035fe <HAL_DMA_IRQHandler+0x156>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a32      	ldr	r2, [pc, #200]	@ (80036a8 <HAL_DMA_IRQHandler+0x200>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00a      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x150>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a31      	ldr	r2, [pc, #196]	@ (80036ac <HAL_DMA_IRQHandler+0x204>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d102      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x14a>
 80035ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80035f0:	e00e      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 80035f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035f6:	e00b      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 80035f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035fc:	e008      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 80035fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003602:	e005      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 8003604:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003608:	e002      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 800360a:	2320      	movs	r3, #32
 800360c:	e000      	b.n	8003610 <HAL_DMA_IRQHandler+0x168>
 800360e:	2302      	movs	r3, #2
 8003610:	4a27      	ldr	r2, [pc, #156]	@ (80036b0 <HAL_DMA_IRQHandler+0x208>)
 8003612:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d034      	beq.n	800368e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800362c:	e02f      	b.n	800368e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	2208      	movs	r2, #8
 8003634:	409a      	lsls	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d028      	beq.n	8003690 <HAL_DMA_IRQHandler+0x1e8>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d023      	beq.n	8003690 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 020e 	bic.w	r2, r2, #14
 8003656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003660:	2101      	movs	r1, #1
 8003662:	fa01 f202 	lsl.w	r2, r1, r2
 8003666:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
    }
  }
  return;
 800368e:	bf00      	nop
 8003690:	bf00      	nop
}
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40020008 	.word	0x40020008
 800369c:	4002001c 	.word	0x4002001c
 80036a0:	40020030 	.word	0x40020030
 80036a4:	40020044 	.word	0x40020044
 80036a8:	40020058 	.word	0x40020058
 80036ac:	4002006c 	.word	0x4002006c
 80036b0:	40020000 	.word	0x40020000

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b08b      	sub	sp, #44	@ 0x2c
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e169      	b.n	800399c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036c8:	2201      	movs	r2, #1
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	f040 8158 	bne.w	8003996 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a9a      	ldr	r2, [pc, #616]	@ (8003954 <HAL_GPIO_Init+0x2a0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d05e      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 80036f0:	4a98      	ldr	r2, [pc, #608]	@ (8003954 <HAL_GPIO_Init+0x2a0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d875      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 80036f6:	4a98      	ldr	r2, [pc, #608]	@ (8003958 <HAL_GPIO_Init+0x2a4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d058      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 80036fc:	4a96      	ldr	r2, [pc, #600]	@ (8003958 <HAL_GPIO_Init+0x2a4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d86f      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 8003702:	4a96      	ldr	r2, [pc, #600]	@ (800395c <HAL_GPIO_Init+0x2a8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d052      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003708:	4a94      	ldr	r2, [pc, #592]	@ (800395c <HAL_GPIO_Init+0x2a8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d869      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800370e:	4a94      	ldr	r2, [pc, #592]	@ (8003960 <HAL_GPIO_Init+0x2ac>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d04c      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003714:	4a92      	ldr	r2, [pc, #584]	@ (8003960 <HAL_GPIO_Init+0x2ac>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d863      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800371a:	4a92      	ldr	r2, [pc, #584]	@ (8003964 <HAL_GPIO_Init+0x2b0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d046      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
 8003720:	4a90      	ldr	r2, [pc, #576]	@ (8003964 <HAL_GPIO_Init+0x2b0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d85d      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 8003726:	2b12      	cmp	r3, #18
 8003728:	d82a      	bhi.n	8003780 <HAL_GPIO_Init+0xcc>
 800372a:	2b12      	cmp	r3, #18
 800372c:	d859      	bhi.n	80037e2 <HAL_GPIO_Init+0x12e>
 800372e:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <HAL_GPIO_Init+0x80>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	080037af 	.word	0x080037af
 8003738:	08003789 	.word	0x08003789
 800373c:	0800379b 	.word	0x0800379b
 8003740:	080037dd 	.word	0x080037dd
 8003744:	080037e3 	.word	0x080037e3
 8003748:	080037e3 	.word	0x080037e3
 800374c:	080037e3 	.word	0x080037e3
 8003750:	080037e3 	.word	0x080037e3
 8003754:	080037e3 	.word	0x080037e3
 8003758:	080037e3 	.word	0x080037e3
 800375c:	080037e3 	.word	0x080037e3
 8003760:	080037e3 	.word	0x080037e3
 8003764:	080037e3 	.word	0x080037e3
 8003768:	080037e3 	.word	0x080037e3
 800376c:	080037e3 	.word	0x080037e3
 8003770:	080037e3 	.word	0x080037e3
 8003774:	080037e3 	.word	0x080037e3
 8003778:	08003791 	.word	0x08003791
 800377c:	080037a5 	.word	0x080037a5
 8003780:	4a79      	ldr	r2, [pc, #484]	@ (8003968 <HAL_GPIO_Init+0x2b4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003786:	e02c      	b.n	80037e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	623b      	str	r3, [r7, #32]
          break;
 800378e:	e029      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	3304      	adds	r3, #4
 8003796:	623b      	str	r3, [r7, #32]
          break;
 8003798:	e024      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	3308      	adds	r3, #8
 80037a0:	623b      	str	r3, [r7, #32]
          break;
 80037a2:	e01f      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	330c      	adds	r3, #12
 80037aa:	623b      	str	r3, [r7, #32]
          break;
 80037ac:	e01a      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037b6:	2304      	movs	r3, #4
 80037b8:	623b      	str	r3, [r7, #32]
          break;
 80037ba:	e013      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037c4:	2308      	movs	r3, #8
 80037c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	611a      	str	r2, [r3, #16]
          break;
 80037ce:	e009      	b.n	80037e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037d0:	2308      	movs	r3, #8
 80037d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	615a      	str	r2, [r3, #20]
          break;
 80037da:	e003      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80037dc:	2300      	movs	r3, #0
 80037de:	623b      	str	r3, [r7, #32]
          break;
 80037e0:	e000      	b.n	80037e4 <HAL_GPIO_Init+0x130>
          break;
 80037e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2bff      	cmp	r3, #255	@ 0xff
 80037e8:	d801      	bhi.n	80037ee <HAL_GPIO_Init+0x13a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_Init+0x13e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3304      	adds	r3, #4
 80037f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2bff      	cmp	r3, #255	@ 0xff
 80037f8:	d802      	bhi.n	8003800 <HAL_GPIO_Init+0x14c>
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	e002      	b.n	8003806 <HAL_GPIO_Init+0x152>
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	3b08      	subs	r3, #8
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	210f      	movs	r1, #15
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	401a      	ands	r2, r3
 8003818:	6a39      	ldr	r1, [r7, #32]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	431a      	orrs	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 80b1 	beq.w	8003996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003834:	4b4d      	ldr	r3, [pc, #308]	@ (800396c <HAL_GPIO_Init+0x2b8>)
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4a4c      	ldr	r2, [pc, #304]	@ (800396c <HAL_GPIO_Init+0x2b8>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6193      	str	r3, [r2, #24]
 8003840:	4b4a      	ldr	r3, [pc, #296]	@ (800396c <HAL_GPIO_Init+0x2b8>)
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800384c:	4a48      	ldr	r2, [pc, #288]	@ (8003970 <HAL_GPIO_Init+0x2bc>)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4013      	ands	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	@ (8003974 <HAL_GPIO_Init+0x2c0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_GPIO_Init+0x1ec>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a3f      	ldr	r2, [pc, #252]	@ (8003978 <HAL_GPIO_Init+0x2c4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00d      	beq.n	800389c <HAL_GPIO_Init+0x1e8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3e      	ldr	r2, [pc, #248]	@ (800397c <HAL_GPIO_Init+0x2c8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x1e4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3d      	ldr	r2, [pc, #244]	@ (8003980 <HAL_GPIO_Init+0x2cc>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_GPIO_Init+0x1e0>
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003894:	2304      	movs	r3, #4
 8003896:	e004      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 8003898:	2302      	movs	r3, #2
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <HAL_GPIO_Init+0x1ee>
 80038a0:	2300      	movs	r3, #0
 80038a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a4:	f002 0203 	and.w	r2, r2, #3
 80038a8:	0092      	lsls	r2, r2, #2
 80038aa:	4093      	lsls	r3, r2
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038b2:	492f      	ldr	r1, [pc, #188]	@ (8003970 <HAL_GPIO_Init+0x2bc>)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	3302      	adds	r3, #2
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d006      	beq.n	80038da <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	492c      	ldr	r1, [pc, #176]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	4928      	ldr	r1, [pc, #160]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80038f4:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	4922      	ldr	r1, [pc, #136]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60cb      	str	r3, [r1, #12]
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003902:	4b20      	ldr	r3, [pc, #128]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	43db      	mvns	r3, r3
 800390a:	491e      	ldr	r1, [pc, #120]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 800390c:	4013      	ands	r3, r2
 800390e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800391c:	4b19      	ldr	r3, [pc, #100]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4918      	ldr	r1, [pc, #96]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800392a:	4b16      	ldr	r3, [pc, #88]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	43db      	mvns	r3, r3
 8003932:	4914      	ldr	r1, [pc, #80]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 8003934:	4013      	ands	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d021      	beq.n	8003988 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003944:	4b0f      	ldr	r3, [pc, #60]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	490e      	ldr	r1, [pc, #56]	@ (8003984 <HAL_GPIO_Init+0x2d0>)
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
 8003950:	e021      	b.n	8003996 <HAL_GPIO_Init+0x2e2>
 8003952:	bf00      	nop
 8003954:	10320000 	.word	0x10320000
 8003958:	10310000 	.word	0x10310000
 800395c:	10220000 	.word	0x10220000
 8003960:	10210000 	.word	0x10210000
 8003964:	10120000 	.word	0x10120000
 8003968:	10110000 	.word	0x10110000
 800396c:	40021000 	.word	0x40021000
 8003970:	40010000 	.word	0x40010000
 8003974:	40010800 	.word	0x40010800
 8003978:	40010c00 	.word	0x40010c00
 800397c:	40011000 	.word	0x40011000
 8003980:	40011400 	.word	0x40011400
 8003984:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_GPIO_Init+0x304>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	43db      	mvns	r3, r3
 8003990:	4909      	ldr	r1, [pc, #36]	@ (80039b8 <HAL_GPIO_Init+0x304>)
 8003992:	4013      	ands	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	3301      	adds	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f47f ae8e 	bne.w	80036c8 <HAL_GPIO_Init+0x14>
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	372c      	adds	r7, #44	@ 0x2c
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	887b      	ldrh	r3, [r7, #2]
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e001      	b.n	80039de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039da:	2300      	movs	r3, #0
 80039dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	807b      	strh	r3, [r7, #2]
 80039f6:	4613      	mov	r3, r2
 80039f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039fa:	787b      	ldrb	r3, [r7, #1]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a00:	887a      	ldrh	r2, [r7, #2]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a06:	e003      	b.n	8003a10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a08:	887b      	ldrh	r3, [r7, #2]
 8003a0a:	041a      	lsls	r2, r3, #16
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	611a      	str	r2, [r3, #16]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b085      	sub	sp, #20
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	041a      	lsls	r2, r3, #16
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	611a      	str	r2, [r3, #16]
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e272      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8087 	beq.w	8003b7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a6c:	4b92      	ldr	r3, [pc, #584]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a78:	4b8f      	ldr	r3, [pc, #572]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d112      	bne.n	8003aaa <HAL_RCC_OscConfig+0x5e>
 8003a84:	4b8c      	ldr	r3, [pc, #560]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a90:	d10b      	bne.n	8003aaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a92:	4b89      	ldr	r3, [pc, #548]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d06c      	beq.n	8003b78 <HAL_RCC_OscConfig+0x12c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d168      	bne.n	8003b78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e24c      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ab2:	d106      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x76>
 8003ab4:	4b80      	ldr	r3, [pc, #512]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a7f      	ldr	r2, [pc, #508]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003aba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	e02e      	b.n	8003b20 <HAL_RCC_OscConfig+0xd4>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x98>
 8003aca:	4b7b      	ldr	r3, [pc, #492]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a7a      	ldr	r2, [pc, #488]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	4b78      	ldr	r3, [pc, #480]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a77      	ldr	r2, [pc, #476]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	e01d      	b.n	8003b20 <HAL_RCC_OscConfig+0xd4>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCC_OscConfig+0xbc>
 8003aee:	4b72      	ldr	r3, [pc, #456]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a71      	ldr	r2, [pc, #452]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6e      	ldr	r2, [pc, #440]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0xd4>
 8003b08:	4b6b      	ldr	r3, [pc, #428]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b12:	6013      	str	r3, [r2, #0]
 8003b14:	4b68      	ldr	r3, [pc, #416]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a67      	ldr	r2, [pc, #412]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d013      	beq.n	8003b50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b28:	f7fe fed0 	bl	80028cc <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fe fecc 	bl	80028cc <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	@ 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e200      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	4b5d      	ldr	r3, [pc, #372]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f0      	beq.n	8003b30 <HAL_RCC_OscConfig+0xe4>
 8003b4e:	e014      	b.n	8003b7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe febc 	bl	80028cc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe feb8 	bl	80028cc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e1ec      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b6a:	4b53      	ldr	r3, [pc, #332]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x10c>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d063      	beq.n	8003c4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b86:	4b4c      	ldr	r3, [pc, #304]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b92:	4b49      	ldr	r3, [pc, #292]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x18c>
 8003b9e:	4b46      	ldr	r3, [pc, #280]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d116      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003baa:	4b43      	ldr	r3, [pc, #268]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x176>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d001      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e1c0      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4939      	ldr	r1, [pc, #228]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	e03a      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d020      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be0:	4b36      	ldr	r3, [pc, #216]	@ (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7fe fe71 	bl	80028cc <HAL_GetTick>
 8003bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bec:	e008      	b.n	8003c00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bee:	f7fe fe6d 	bl	80028cc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e1a1      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f0      	beq.n	8003bee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	4927      	ldr	r1, [pc, #156]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
 8003c20:	e015      	b.n	8003c4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c22:	4b26      	ldr	r3, [pc, #152]	@ (8003cbc <HAL_RCC_OscConfig+0x270>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe fe50 	bl	80028cc <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c30:	f7fe fe4c 	bl	80028cc <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e180      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	4b1d      	ldr	r3, [pc, #116]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f0      	bne.n	8003c30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0308 	and.w	r3, r3, #8
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03a      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d019      	beq.n	8003c96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c62:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c68:	f7fe fe30 	bl	80028cc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c70:	f7fe fe2c 	bl	80028cc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e160      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f0      	beq.n	8003c70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f000 faba 	bl	8004208 <RCC_Delay>
 8003c94:	e01c      	b.n	8003cd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_RCC_OscConfig+0x274>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7fe fe16 	bl	80028cc <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca2:	e00f      	b.n	8003cc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fe fe12 	bl	80028cc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d908      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e146      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	42420000 	.word	0x42420000
 8003cc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	4b92      	ldr	r3, [pc, #584]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e9      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a6 	beq.w	8003e2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce2:	4b8b      	ldr	r3, [pc, #556]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	4b88      	ldr	r3, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	4a87      	ldr	r2, [pc, #540]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]
 8003cfa:	4b85      	ldr	r3, [pc, #532]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b82      	ldr	r3, [pc, #520]	@ (8003f14 <HAL_RCC_OscConfig+0x4c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b7f      	ldr	r3, [pc, #508]	@ (8003f14 <HAL_RCC_OscConfig+0x4c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x4c8>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fe fdd3 	bl	80028cc <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2a:	f7fe fdcf 	bl	80028cc <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	@ 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e103      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	4b75      	ldr	r3, [pc, #468]	@ (8003f14 <HAL_RCC_OscConfig+0x4c8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d106      	bne.n	8003d5e <HAL_RCC_OscConfig+0x312>
 8003d50:	4b6f      	ldr	r3, [pc, #444]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a6e      	ldr	r2, [pc, #440]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e02d      	b.n	8003dba <HAL_RCC_OscConfig+0x36e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCC_OscConfig+0x334>
 8003d66:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	4a69      	ldr	r2, [pc, #420]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	f023 0301 	bic.w	r3, r3, #1
 8003d70:	6213      	str	r3, [r2, #32]
 8003d72:	4b67      	ldr	r3, [pc, #412]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4a66      	ldr	r2, [pc, #408]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d78:	f023 0304 	bic.w	r3, r3, #4
 8003d7c:	6213      	str	r3, [r2, #32]
 8003d7e:	e01c      	b.n	8003dba <HAL_RCC_OscConfig+0x36e>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x356>
 8003d88:	4b61      	ldr	r3, [pc, #388]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	4a60      	ldr	r2, [pc, #384]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	6213      	str	r3, [r2, #32]
 8003d94:	4b5e      	ldr	r3, [pc, #376]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	4a5d      	ldr	r2, [pc, #372]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	6213      	str	r3, [r2, #32]
 8003da0:	e00b      	b.n	8003dba <HAL_RCC_OscConfig+0x36e>
 8003da2:	4b5b      	ldr	r3, [pc, #364]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4a5a      	ldr	r2, [pc, #360]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	6213      	str	r3, [r2, #32]
 8003dae:	4b58      	ldr	r3, [pc, #352]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4a57      	ldr	r2, [pc, #348]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003db4:	f023 0304 	bic.w	r3, r3, #4
 8003db8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d015      	beq.n	8003dee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe fd83 	bl	80028cc <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fe fd7f 	bl	80028cc <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0b1      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de0:	4b4b      	ldr	r3, [pc, #300]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0ee      	beq.n	8003dca <HAL_RCC_OscConfig+0x37e>
 8003dec:	e014      	b.n	8003e18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fd6d 	bl	80028cc <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	e00a      	b.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fe fd69 	bl	80028cc <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e09b      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0c:	4b40      	ldr	r3, [pc, #256]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ee      	bne.n	8003df6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e1e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	4a3b      	ldr	r2, [pc, #236]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8087 	beq.w	8003f42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e34:	4b36      	ldr	r3, [pc, #216]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d061      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d146      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b33      	ldr	r3, [pc, #204]	@ (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fe fd3d 	bl	80028cc <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e56:	f7fe fd39 	bl	80028cc <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e06d      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e68:	4b29      	ldr	r3, [pc, #164]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e7c:	d108      	bne.n	8003e90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	4921      	ldr	r1, [pc, #132]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e90:	4b1f      	ldr	r3, [pc, #124]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a19      	ldr	r1, [r3, #32]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	491b      	ldr	r1, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fe fd0d 	bl	80028cc <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb6:	f7fe fd09 	bl	80028cc <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e03d      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec8:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x46a>
 8003ed4:	e035      	b.n	8003f42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	4b10      	ldr	r3, [pc, #64]	@ (8003f18 <HAL_RCC_OscConfig+0x4cc>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003edc:	f7fe fcf6 	bl	80028cc <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fe fcf2 	bl	80028cc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e026      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_OscConfig+0x4c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x498>
 8003f02:	e01e      	b.n	8003f42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e019      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40007000 	.word	0x40007000
 8003f18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f4c <HAL_RCC_OscConfig+0x500>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000

08003f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0d0      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f64:	4b6a      	ldr	r3, [pc, #424]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d910      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f72:	4b67      	ldr	r3, [pc, #412]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 0207 	bic.w	r2, r3, #7
 8003f7a:	4965      	ldr	r1, [pc, #404]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003fb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003fce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d040      	beq.n	8004070 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d115      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	4b41      	ldr	r3, [pc, #260]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e073      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401e:	4b3d      	ldr	r3, [pc, #244]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e06b      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b39      	ldr	r3, [pc, #228]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4936      	ldr	r1, [pc, #216]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fe fc44 	bl	80028cc <HAL_GetTick>
 8004044:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fe fc40 	bl	80028cc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e053      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d210      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4922      	ldr	r1, [pc, #136]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	@ (8004110 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ca:	4b12      	ldr	r3, [pc, #72]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004114 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	@ (8004118 <HAL_RCC_ClockConfig+0x1c8>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	@ (800411c <HAL_RCC_ClockConfig+0x1cc>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_ClockConfig+0x1d0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fe fba2 	bl	8002848 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40022000 	.word	0x40022000
 8004114:	40021000 	.word	0x40021000
 8004118:	080096d0 	.word	0x080096d0
 800411c:	20000008 	.word	0x20000008
 8004120:	2000000c 	.word	0x2000000c

08004124 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800413e:	4b1e      	ldr	r3, [pc, #120]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b04      	cmp	r3, #4
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x30>
 800414e:	2b08      	cmp	r3, #8
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x36>
 8004152:	e027      	b.n	80041a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004154:	4b19      	ldr	r3, [pc, #100]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004156:	613b      	str	r3, [r7, #16]
      break;
 8004158:	e027      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004164:	5cd3      	ldrb	r3, [r2, r3]
 8004166:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d010      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004172:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	0c5b      	lsrs	r3, r3, #17
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a0d      	ldr	r2, [pc, #52]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004186:	fb03 f202 	mul.w	r2, r3, r2
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	e004      	b.n	800419e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a0c      	ldr	r2, [pc, #48]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004198:	fb02 f303 	mul.w	r3, r2, r3
 800419c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	613b      	str	r3, [r7, #16]
      break;
 80041a2:	e002      	b.n	80041aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x98>)
 80041a6:	613b      	str	r3, [r7, #16]
      break;
 80041a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041aa:	693b      	ldr	r3, [r7, #16]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	371c      	adds	r7, #28
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000
 80041bc:	007a1200 	.word	0x007a1200
 80041c0:	080096e8 	.word	0x080096e8
 80041c4:	080096f8 	.word	0x080096f8
 80041c8:	003d0900 	.word	0x003d0900

080041cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b02      	ldr	r3, [pc, #8]	@ (80041dc <HAL_RCC_GetHCLKFreq+0x10>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bc80      	pop	{r7}
 80041da:	4770      	bx	lr
 80041dc:	20000008 	.word	0x20000008

080041e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041e4:	f7ff fff2 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b05      	ldr	r3, [pc, #20]	@ (8004200 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	0adb      	lsrs	r3, r3, #11
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	4903      	ldr	r1, [pc, #12]	@ (8004204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f6:	5ccb      	ldrb	r3, [r1, r3]
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	40021000 	.word	0x40021000
 8004204:	080096e0 	.word	0x080096e0

08004208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004210:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <RCC_Delay+0x34>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0a      	ldr	r2, [pc, #40]	@ (8004240 <RCC_Delay+0x38>)
 8004216:	fba2 2303 	umull	r2, r3, r2, r3
 800421a:	0a5b      	lsrs	r3, r3, #9
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004224:	bf00      	nop
  }
  while (Delay --);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	60fa      	str	r2, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f9      	bne.n	8004224 <RCC_Delay+0x1c>
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	20000008 	.word	0x20000008
 8004240:	10624dd3 	.word	0x10624dd3

08004244 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d07d      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004260:	2300      	movs	r3, #0
 8004262:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004264:	4b4f      	ldr	r3, [pc, #316]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10d      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004270:	4b4c      	ldr	r3, [pc, #304]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004272:	69db      	ldr	r3, [r3, #28]
 8004274:	4a4b      	ldr	r2, [pc, #300]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004276:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800427a:	61d3      	str	r3, [r2, #28]
 800427c:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	4b46      	ldr	r3, [pc, #280]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004294:	2b00      	cmp	r3, #0
 8004296:	d118      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004298:	4b43      	ldr	r3, [pc, #268]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a42      	ldr	r2, [pc, #264]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a4:	f7fe fb12 	bl	80028cc <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	e008      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fe fb0e 	bl	80028cc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	@ 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e06d      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042be:	4b3a      	ldr	r3, [pc, #232]	@ (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042ca:	4b36      	ldr	r3, [pc, #216]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d02e      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d027      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042e8:	4b2e      	ldr	r3, [pc, #184]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f2:	4b2e      	ldr	r3, [pc, #184]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042f8:	4b2c      	ldr	r3, [pc, #176]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042fe:	4a29      	ldr	r2, [pc, #164]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fe fadd 	bl	80028cc <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004314:	e00a      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004316:	f7fe fad9 	bl	80028cc <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004324:	4293      	cmp	r3, r2
 8004326:	d901      	bls.n	800432c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e036      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	4b1d      	ldr	r3, [pc, #116]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ee      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004338:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4917      	ldr	r1, [pc, #92]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004346:	4313      	orrs	r3, r2
 8004348:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4a13      	ldr	r2, [pc, #76]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004368:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	490b      	ldr	r1, [pc, #44]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0310 	and.w	r3, r3, #16
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004386:	4b07      	ldr	r3, [pc, #28]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	4904      	ldr	r1, [pc, #16]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42420440 	.word	0x42420440

080043b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	2300      	movs	r3, #0
 80043be:	61fb      	str	r3, [r7, #28]
 80043c0:	2300      	movs	r3, #0
 80043c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	f200 808a 	bhi.w	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d045      	beq.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d075      	beq.n	80044d2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80043e6:	e082      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80043e8:	4b46      	ldr	r3, [pc, #280]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043ee:	4b45      	ldr	r3, [pc, #276]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d07b      	beq.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	0c9b      	lsrs	r3, r3, #18
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a41      	ldr	r2, [pc, #260]	@ (8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d015      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004412:	4b3c      	ldr	r3, [pc, #240]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	0c5b      	lsrs	r3, r3, #17
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	4a3b      	ldr	r2, [pc, #236]	@ (800450c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800441e:	5cd3      	ldrb	r3, [r2, r3]
 8004420:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800442c:	4a38      	ldr	r2, [pc, #224]	@ (8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	fbb2 f2f3 	udiv	r2, r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e004      	b.n	8004448 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	4a34      	ldr	r2, [pc, #208]	@ (8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004448:	4b2e      	ldr	r3, [pc, #184]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004454:	d102      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	61bb      	str	r3, [r7, #24]
      break;
 800445a:	e04a      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4a2d      	ldr	r2, [pc, #180]	@ (8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
      break;
 800446a:	e042      	b.n	80044f2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800446c:	4b25      	ldr	r3, [pc, #148]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447c:	d108      	bne.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004488:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e01f      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449a:	d109      	bne.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800449c:	4b19      	ldr	r3, [pc, #100]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80044a8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e00f      	b.n	80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044ba:	d11c      	bne.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044bc:	4b11      	ldr	r3, [pc, #68]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80044c8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80044cc:	61bb      	str	r3, [r7, #24]
      break;
 80044ce:	e012      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80044d0:	e011      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80044d2:	f7ff fe85 	bl	80041e0 <HAL_RCC_GetPCLK2Freq>
 80044d6:	4602      	mov	r2, r0
 80044d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0b9b      	lsrs	r3, r3, #14
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	61bb      	str	r3, [r7, #24]
      break;
 80044ec:	e004      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80044f6:	bf00      	nop
    }
  }
  return (frequency);
 80044f8:	69bb      	ldr	r3, [r7, #24]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	080096fc 	.word	0x080096fc
 800450c:	0800970c 	.word	0x0800970c
 8004510:	007a1200 	.word	0x007a1200
 8004514:	003d0900 	.word	0x003d0900
 8004518:	aaaaaaab 	.word	0xaaaaaaab

0800451c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e041      	b.n	80045b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd ffce 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f000 fc30 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e03a      	b.n	800464a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_TIM_Base_Start_IT+0x98>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00e      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x58>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d009      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x58>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a14      	ldr	r2, [pc, #80]	@ (8004658 <HAL_TIM_Base_Start_IT+0x9c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x58>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a13      	ldr	r2, [pc, #76]	@ (800465c <HAL_TIM_Base_Start_IT+0xa0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d111      	bne.n	8004638 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b06      	cmp	r3, #6
 8004624:	d010      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	e007      	b.n	8004648 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800

08004660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f839 	bl	80046fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f000 fb8e 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x24>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e022      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b04      	cmp	r3, #4
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start+0x3e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e015      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x58>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e05e      	b.n	8004840 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x82>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004790:	e013      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a0:	e00b      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047b0:	e003      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd7c 	bl	80052c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004848 <HAL_TIM_PWM_Start+0x138>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d107      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a18      	ldr	r2, [pc, #96]	@ (8004848 <HAL_TIM_PWM_Start+0x138>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIM_PWM_Start+0xfa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f4:	d009      	beq.n	800480a <HAL_TIM_PWM_Start+0xfa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a14      	ldr	r2, [pc, #80]	@ (800484c <HAL_TIM_PWM_Start+0x13c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIM_PWM_Start+0xfa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a12      	ldr	r2, [pc, #72]	@ (8004850 <HAL_TIM_PWM_Start+0x140>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d111      	bne.n	800482e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d010      	beq.n	800483e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	e007      	b.n	800483e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40012c00 	.word	0x40012c00
 800484c:	40000400 	.word	0x40000400
 8004850:	40000800 	.word	0x40000800

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fa76 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fa69 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fa78 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fa4c 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa3f 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fa4e 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa22 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fa15 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fa24 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2208      	movs	r2, #8
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f9f8 	bl	8004d88 <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f9eb 	bl	8004d76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f9fa 	bl	8004d9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd f85c 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049e2:	2b80      	cmp	r3, #128	@ 0x80
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f0:	2b80      	cmp	r3, #128	@ 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fce9 	bl	80053d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0e:	2b40      	cmp	r3, #64	@ 0x40
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9be 	bl	8004dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0220 	mvn.w	r2, #32
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fcb4 	bl	80053c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ae      	b.n	8004be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	f200 809f 	bhi.w	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a92:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004acd 	.word	0x08004acd
 8004a9c:	08004bd1 	.word	0x08004bd1
 8004aa0:	08004bd1 	.word	0x08004bd1
 8004aa4:	08004bd1 	.word	0x08004bd1
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004bd1 	.word	0x08004bd1
 8004ab0:	08004bd1 	.word	0x08004bd1
 8004ab4:	08004bd1 	.word	0x08004bd1
 8004ab8:	08004b4f 	.word	0x08004b4f
 8004abc:	08004bd1 	.word	0x08004bd1
 8004ac0:	08004bd1 	.word	0x08004bd1
 8004ac4:	08004bd1 	.word	0x08004bd1
 8004ac8:	08004b8f 	.word	0x08004b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 f9d6 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6999      	ldr	r1, [r3, #24]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	619a      	str	r2, [r3, #24]
      break;
 8004b0a:	e064      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 fa1c 	bl	8004f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6999      	ldr	r1, [r3, #24]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	021a      	lsls	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	619a      	str	r2, [r3, #24]
      break;
 8004b4c:	e043      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 fa65 	bl	8005024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f042 0208 	orr.w	r2, r2, #8
 8004b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69da      	ldr	r2, [r3, #28]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0204 	bic.w	r2, r2, #4
 8004b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	61da      	str	r2, [r3, #28]
      break;
 8004b8c:	e023      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 faaf 	bl	80050f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
      break;
 8004bce:	e002      	b.n	8004bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3718      	adds	r7, #24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0x1c>
 8004c00:	2302      	movs	r3, #2
 8004c02:	e0b4      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x186>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0xd4>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x172>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c54:	2b70      	cmp	r3, #112	@ 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xa6>
 8004c58:	2b70      	cmp	r3, #112	@ 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c5c:	2b60      	cmp	r3, #96	@ 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x11a>
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c64:	2b50      	cmp	r3, #80	@ 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c68:	2b50      	cmp	r3, #80	@ 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x13a>
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c74:	2b30      	cmp	r3, #48	@ 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c78:	2b30      	cmp	r3, #48	@ 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	f000 faf0 	bl	8005282 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	f000 fad9 	bl	8005282 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fa50 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	@ 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 faa7 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fa6e 	bl	80051f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	@ 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fa97 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fa30 	bl	8005194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	@ 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fa87 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 fa7e 	bl	800524e <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
	...

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a29      	ldr	r2, [pc, #164]	@ (8004e78 <TIM_Base_SetConfig+0xb8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x30>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x30>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <TIM_Base_SetConfig+0xbc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x30>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a25      	ldr	r2, [pc, #148]	@ (8004e80 <TIM_Base_SetConfig+0xc0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a1c      	ldr	r2, [pc, #112]	@ (8004e78 <TIM_Base_SetConfig+0xb8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0x62>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0x62>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a19      	ldr	r2, [pc, #100]	@ (8004e7c <TIM_Base_SetConfig+0xbc>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0x62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a18      	ldr	r2, [pc, #96]	@ (8004e80 <TIM_Base_SetConfig+0xc0>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a07      	ldr	r2, [pc, #28]	@ (8004e78 <TIM_Base_SetConfig+0xb8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]
}
 8004e6e:	bf00      	nop
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40000400 	.word	0x40000400
 8004e80:	40000800 	.word	0x40000800

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0201 	bic.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a13      	ldr	r2, [pc, #76]	@ (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00

08004f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 0210 	bic.w	r2, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1d      	ldr	r2, [pc, #116]	@ (8005020 <TIM_OC2_SetConfig+0xd0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <TIM_OC2_SetConfig+0xd0>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	bc80      	pop	{r7}
 800501e:	4770      	bx	lr
 8005020:	40012c00 	.word	0x40012c00

08005024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0303 	bic.w	r3, r3, #3
 800505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800506c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <TIM_OC3_SetConfig+0xd0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d10d      	bne.n	800509e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800509c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a14      	ldr	r2, [pc, #80]	@ (80050f4 <TIM_OC3_SetConfig+0xd0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d113      	bne.n	80050ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	621a      	str	r2, [r3, #32]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00

080050f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800512e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0f      	ldr	r2, [pc, #60]	@ (8005190 <TIM_OC4_SetConfig+0x98>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d109      	bne.n	800516c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800515e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	019b      	lsls	r3, r3, #6
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	40012c00 	.word	0x40012c00

08005194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	011b      	lsls	r3, r3, #4
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f023 030a 	bic.w	r3, r3, #10
 80051d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0210 	bic.w	r2, r3, #16
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	031b      	lsls	r3, r3, #12
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	621a      	str	r2, [r3, #32]
}
 8005244:	bf00      	nop
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524e:	b480      	push	{r7}
 8005250:	b085      	sub	sp, #20
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005264:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	f043 0307 	orr.w	r3, r3, #7
 8005270:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr

08005282 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005282:	b480      	push	{r7}
 8005284:	b087      	sub	sp, #28
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800529c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	021a      	lsls	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	609a      	str	r2, [r3, #8]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	2201      	movs	r2, #1
 80052d4:	fa02 f303 	lsl.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1a      	ldr	r2, [r3, #32]
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	43db      	mvns	r3, r3
 80052e2:	401a      	ands	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	fa01 f303 	lsl.w	r3, r1, r3
 80052f8:	431a      	orrs	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800531c:	2302      	movs	r3, #2
 800531e:	e046      	b.n	80053ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a16      	ldr	r2, [pc, #88]	@ (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d009      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a12      	ldr	r2, [pc, #72]	@ (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a10      	ldr	r2, [pc, #64]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10c      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	4313      	orrs	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800

080053c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <atof>:
 80053e8:	2100      	movs	r1, #0
 80053ea:	f000 bdf9 	b.w	8005fe0 <strtod>

080053ee <sulp>:
 80053ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053f2:	460f      	mov	r7, r1
 80053f4:	4690      	mov	r8, r2
 80053f6:	f003 fa43 	bl	8008880 <__ulp>
 80053fa:	4604      	mov	r4, r0
 80053fc:	460d      	mov	r5, r1
 80053fe:	f1b8 0f00 	cmp.w	r8, #0
 8005402:	d011      	beq.n	8005428 <sulp+0x3a>
 8005404:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005408:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800540c:	2b00      	cmp	r3, #0
 800540e:	dd0b      	ble.n	8005428 <sulp+0x3a>
 8005410:	2400      	movs	r4, #0
 8005412:	051b      	lsls	r3, r3, #20
 8005414:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005418:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800541c:	4622      	mov	r2, r4
 800541e:	462b      	mov	r3, r5
 8005420:	f7fb f85a 	bl	80004d8 <__aeabi_dmul>
 8005424:	4604      	mov	r4, r0
 8005426:	460d      	mov	r5, r1
 8005428:	4620      	mov	r0, r4
 800542a:	4629      	mov	r1, r5
 800542c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005430 <_strtod_l>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	b09f      	sub	sp, #124	@ 0x7c
 8005436:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005438:	2200      	movs	r2, #0
 800543a:	460c      	mov	r4, r1
 800543c:	921a      	str	r2, [sp, #104]	@ 0x68
 800543e:	f04f 0a00 	mov.w	sl, #0
 8005442:	f04f 0b00 	mov.w	fp, #0
 8005446:	460a      	mov	r2, r1
 8005448:	9005      	str	r0, [sp, #20]
 800544a:	9219      	str	r2, [sp, #100]	@ 0x64
 800544c:	7811      	ldrb	r1, [r2, #0]
 800544e:	292b      	cmp	r1, #43	@ 0x2b
 8005450:	d048      	beq.n	80054e4 <_strtod_l+0xb4>
 8005452:	d836      	bhi.n	80054c2 <_strtod_l+0x92>
 8005454:	290d      	cmp	r1, #13
 8005456:	d830      	bhi.n	80054ba <_strtod_l+0x8a>
 8005458:	2908      	cmp	r1, #8
 800545a:	d830      	bhi.n	80054be <_strtod_l+0x8e>
 800545c:	2900      	cmp	r1, #0
 800545e:	d039      	beq.n	80054d4 <_strtod_l+0xa4>
 8005460:	2200      	movs	r2, #0
 8005462:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005464:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005466:	782a      	ldrb	r2, [r5, #0]
 8005468:	2a30      	cmp	r2, #48	@ 0x30
 800546a:	f040 80b1 	bne.w	80055d0 <_strtod_l+0x1a0>
 800546e:	786a      	ldrb	r2, [r5, #1]
 8005470:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005474:	2a58      	cmp	r2, #88	@ 0x58
 8005476:	d16c      	bne.n	8005552 <_strtod_l+0x122>
 8005478:	9302      	str	r3, [sp, #8]
 800547a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800547c:	4a8e      	ldr	r2, [pc, #568]	@ (80056b8 <_strtod_l+0x288>)
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	ab1a      	add	r3, sp, #104	@ 0x68
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	9805      	ldr	r0, [sp, #20]
 8005486:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005488:	a919      	add	r1, sp, #100	@ 0x64
 800548a:	f002 faed 	bl	8007a68 <__gethex>
 800548e:	f010 060f 	ands.w	r6, r0, #15
 8005492:	4604      	mov	r4, r0
 8005494:	d005      	beq.n	80054a2 <_strtod_l+0x72>
 8005496:	2e06      	cmp	r6, #6
 8005498:	d126      	bne.n	80054e8 <_strtod_l+0xb8>
 800549a:	2300      	movs	r3, #0
 800549c:	3501      	adds	r5, #1
 800549e:	9519      	str	r5, [sp, #100]	@ 0x64
 80054a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80054a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8584 	bne.w	8005fb2 <_strtod_l+0xb82>
 80054aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054ac:	b1bb      	cbz	r3, 80054de <_strtod_l+0xae>
 80054ae:	4650      	mov	r0, sl
 80054b0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80054b4:	b01f      	add	sp, #124	@ 0x7c
 80054b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ba:	2920      	cmp	r1, #32
 80054bc:	d1d0      	bne.n	8005460 <_strtod_l+0x30>
 80054be:	3201      	adds	r2, #1
 80054c0:	e7c3      	b.n	800544a <_strtod_l+0x1a>
 80054c2:	292d      	cmp	r1, #45	@ 0x2d
 80054c4:	d1cc      	bne.n	8005460 <_strtod_l+0x30>
 80054c6:	2101      	movs	r1, #1
 80054c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80054ca:	1c51      	adds	r1, r2, #1
 80054cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80054ce:	7852      	ldrb	r2, [r2, #1]
 80054d0:	2a00      	cmp	r2, #0
 80054d2:	d1c7      	bne.n	8005464 <_strtod_l+0x34>
 80054d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80054d6:	9419      	str	r4, [sp, #100]	@ 0x64
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f040 8568 	bne.w	8005fae <_strtod_l+0xb7e>
 80054de:	4650      	mov	r0, sl
 80054e0:	4659      	mov	r1, fp
 80054e2:	e7e7      	b.n	80054b4 <_strtod_l+0x84>
 80054e4:	2100      	movs	r1, #0
 80054e6:	e7ef      	b.n	80054c8 <_strtod_l+0x98>
 80054e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80054ea:	b13a      	cbz	r2, 80054fc <_strtod_l+0xcc>
 80054ec:	2135      	movs	r1, #53	@ 0x35
 80054ee:	a81c      	add	r0, sp, #112	@ 0x70
 80054f0:	f003 fab6 	bl	8008a60 <__copybits>
 80054f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054f6:	9805      	ldr	r0, [sp, #20]
 80054f8:	f002 fe90 	bl	800821c <_Bfree>
 80054fc:	3e01      	subs	r6, #1
 80054fe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005500:	2e04      	cmp	r6, #4
 8005502:	d806      	bhi.n	8005512 <_strtod_l+0xe2>
 8005504:	e8df f006 	tbb	[pc, r6]
 8005508:	201d0314 	.word	0x201d0314
 800550c:	14          	.byte	0x14
 800550d:	00          	.byte	0x00
 800550e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005512:	05e1      	lsls	r1, r4, #23
 8005514:	bf48      	it	mi
 8005516:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800551a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800551e:	0d1b      	lsrs	r3, r3, #20
 8005520:	051b      	lsls	r3, r3, #20
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1bd      	bne.n	80054a2 <_strtod_l+0x72>
 8005526:	f001 fb4d 	bl	8006bc4 <__errno>
 800552a:	2322      	movs	r3, #34	@ 0x22
 800552c:	6003      	str	r3, [r0, #0]
 800552e:	e7b8      	b.n	80054a2 <_strtod_l+0x72>
 8005530:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005534:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005538:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800553c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005540:	e7e7      	b.n	8005512 <_strtod_l+0xe2>
 8005542:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80056bc <_strtod_l+0x28c>
 8005546:	e7e4      	b.n	8005512 <_strtod_l+0xe2>
 8005548:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800554c:	f04f 3aff 	mov.w	sl, #4294967295
 8005550:	e7df      	b.n	8005512 <_strtod_l+0xe2>
 8005552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	9219      	str	r2, [sp, #100]	@ 0x64
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b30      	cmp	r3, #48	@ 0x30
 800555c:	d0f9      	beq.n	8005552 <_strtod_l+0x122>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d09f      	beq.n	80054a2 <_strtod_l+0x72>
 8005562:	2301      	movs	r3, #1
 8005564:	9309      	str	r3, [sp, #36]	@ 0x24
 8005566:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005568:	220a      	movs	r2, #10
 800556a:	930c      	str	r3, [sp, #48]	@ 0x30
 800556c:	2300      	movs	r3, #0
 800556e:	461f      	mov	r7, r3
 8005570:	9308      	str	r3, [sp, #32]
 8005572:	930a      	str	r3, [sp, #40]	@ 0x28
 8005574:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005576:	7805      	ldrb	r5, [r0, #0]
 8005578:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800557c:	b2d9      	uxtb	r1, r3
 800557e:	2909      	cmp	r1, #9
 8005580:	d928      	bls.n	80055d4 <_strtod_l+0x1a4>
 8005582:	2201      	movs	r2, #1
 8005584:	494e      	ldr	r1, [pc, #312]	@ (80056c0 <_strtod_l+0x290>)
 8005586:	f001 fac0 	bl	8006b0a <strncmp>
 800558a:	2800      	cmp	r0, #0
 800558c:	d032      	beq.n	80055f4 <_strtod_l+0x1c4>
 800558e:	2000      	movs	r0, #0
 8005590:	462a      	mov	r2, r5
 8005592:	4681      	mov	r9, r0
 8005594:	463d      	mov	r5, r7
 8005596:	4603      	mov	r3, r0
 8005598:	2a65      	cmp	r2, #101	@ 0x65
 800559a:	d001      	beq.n	80055a0 <_strtod_l+0x170>
 800559c:	2a45      	cmp	r2, #69	@ 0x45
 800559e:	d114      	bne.n	80055ca <_strtod_l+0x19a>
 80055a0:	b91d      	cbnz	r5, 80055aa <_strtod_l+0x17a>
 80055a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055a4:	4302      	orrs	r2, r0
 80055a6:	d095      	beq.n	80054d4 <_strtod_l+0xa4>
 80055a8:	2500      	movs	r5, #0
 80055aa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80055ac:	1c62      	adds	r2, r4, #1
 80055ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80055b0:	7862      	ldrb	r2, [r4, #1]
 80055b2:	2a2b      	cmp	r2, #43	@ 0x2b
 80055b4:	d077      	beq.n	80056a6 <_strtod_l+0x276>
 80055b6:	2a2d      	cmp	r2, #45	@ 0x2d
 80055b8:	d07b      	beq.n	80056b2 <_strtod_l+0x282>
 80055ba:	f04f 0c00 	mov.w	ip, #0
 80055be:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80055c2:	2909      	cmp	r1, #9
 80055c4:	f240 8082 	bls.w	80056cc <_strtod_l+0x29c>
 80055c8:	9419      	str	r4, [sp, #100]	@ 0x64
 80055ca:	f04f 0800 	mov.w	r8, #0
 80055ce:	e0a2      	b.n	8005716 <_strtod_l+0x2e6>
 80055d0:	2300      	movs	r3, #0
 80055d2:	e7c7      	b.n	8005564 <_strtod_l+0x134>
 80055d4:	2f08      	cmp	r7, #8
 80055d6:	bfd5      	itete	le
 80055d8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80055da:	9908      	ldrgt	r1, [sp, #32]
 80055dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80055e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80055e4:	f100 0001 	add.w	r0, r0, #1
 80055e8:	bfd4      	ite	le
 80055ea:	930a      	strle	r3, [sp, #40]	@ 0x28
 80055ec:	9308      	strgt	r3, [sp, #32]
 80055ee:	3701      	adds	r7, #1
 80055f0:	9019      	str	r0, [sp, #100]	@ 0x64
 80055f2:	e7bf      	b.n	8005574 <_strtod_l+0x144>
 80055f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055f6:	1c5a      	adds	r2, r3, #1
 80055f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80055fa:	785a      	ldrb	r2, [r3, #1]
 80055fc:	b37f      	cbz	r7, 800565e <_strtod_l+0x22e>
 80055fe:	4681      	mov	r9, r0
 8005600:	463d      	mov	r5, r7
 8005602:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005606:	2b09      	cmp	r3, #9
 8005608:	d912      	bls.n	8005630 <_strtod_l+0x200>
 800560a:	2301      	movs	r3, #1
 800560c:	e7c4      	b.n	8005598 <_strtod_l+0x168>
 800560e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005610:	3001      	adds	r0, #1
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	9219      	str	r2, [sp, #100]	@ 0x64
 8005616:	785a      	ldrb	r2, [r3, #1]
 8005618:	2a30      	cmp	r2, #48	@ 0x30
 800561a:	d0f8      	beq.n	800560e <_strtod_l+0x1de>
 800561c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005620:	2b08      	cmp	r3, #8
 8005622:	f200 84cb 	bhi.w	8005fbc <_strtod_l+0xb8c>
 8005626:	4681      	mov	r9, r0
 8005628:	2000      	movs	r0, #0
 800562a:	4605      	mov	r5, r0
 800562c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800562e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005630:	3a30      	subs	r2, #48	@ 0x30
 8005632:	f100 0301 	add.w	r3, r0, #1
 8005636:	d02a      	beq.n	800568e <_strtod_l+0x25e>
 8005638:	4499      	add	r9, r3
 800563a:	210a      	movs	r1, #10
 800563c:	462b      	mov	r3, r5
 800563e:	eb00 0c05 	add.w	ip, r0, r5
 8005642:	4563      	cmp	r3, ip
 8005644:	d10d      	bne.n	8005662 <_strtod_l+0x232>
 8005646:	1c69      	adds	r1, r5, #1
 8005648:	4401      	add	r1, r0
 800564a:	4428      	add	r0, r5
 800564c:	2808      	cmp	r0, #8
 800564e:	dc16      	bgt.n	800567e <_strtod_l+0x24e>
 8005650:	230a      	movs	r3, #10
 8005652:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005654:	fb03 2300 	mla	r3, r3, r0, r2
 8005658:	930a      	str	r3, [sp, #40]	@ 0x28
 800565a:	2300      	movs	r3, #0
 800565c:	e018      	b.n	8005690 <_strtod_l+0x260>
 800565e:	4638      	mov	r0, r7
 8005660:	e7da      	b.n	8005618 <_strtod_l+0x1e8>
 8005662:	2b08      	cmp	r3, #8
 8005664:	f103 0301 	add.w	r3, r3, #1
 8005668:	dc03      	bgt.n	8005672 <_strtod_l+0x242>
 800566a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800566c:	434e      	muls	r6, r1
 800566e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005670:	e7e7      	b.n	8005642 <_strtod_l+0x212>
 8005672:	2b10      	cmp	r3, #16
 8005674:	bfde      	ittt	le
 8005676:	9e08      	ldrle	r6, [sp, #32]
 8005678:	434e      	mulle	r6, r1
 800567a:	9608      	strle	r6, [sp, #32]
 800567c:	e7e1      	b.n	8005642 <_strtod_l+0x212>
 800567e:	280f      	cmp	r0, #15
 8005680:	dceb      	bgt.n	800565a <_strtod_l+0x22a>
 8005682:	230a      	movs	r3, #10
 8005684:	9808      	ldr	r0, [sp, #32]
 8005686:	fb03 2300 	mla	r3, r3, r0, r2
 800568a:	9308      	str	r3, [sp, #32]
 800568c:	e7e5      	b.n	800565a <_strtod_l+0x22a>
 800568e:	4629      	mov	r1, r5
 8005690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005692:	460d      	mov	r5, r1
 8005694:	1c50      	adds	r0, r2, #1
 8005696:	9019      	str	r0, [sp, #100]	@ 0x64
 8005698:	7852      	ldrb	r2, [r2, #1]
 800569a:	4618      	mov	r0, r3
 800569c:	e7b1      	b.n	8005602 <_strtod_l+0x1d2>
 800569e:	f04f 0900 	mov.w	r9, #0
 80056a2:	2301      	movs	r3, #1
 80056a4:	e77d      	b.n	80055a2 <_strtod_l+0x172>
 80056a6:	f04f 0c00 	mov.w	ip, #0
 80056aa:	1ca2      	adds	r2, r4, #2
 80056ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80056ae:	78a2      	ldrb	r2, [r4, #2]
 80056b0:	e785      	b.n	80055be <_strtod_l+0x18e>
 80056b2:	f04f 0c01 	mov.w	ip, #1
 80056b6:	e7f8      	b.n	80056aa <_strtod_l+0x27a>
 80056b8:	08009724 	.word	0x08009724
 80056bc:	7ff00000 	.word	0x7ff00000
 80056c0:	0800970e 	.word	0x0800970e
 80056c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80056c6:	1c51      	adds	r1, r2, #1
 80056c8:	9119      	str	r1, [sp, #100]	@ 0x64
 80056ca:	7852      	ldrb	r2, [r2, #1]
 80056cc:	2a30      	cmp	r2, #48	@ 0x30
 80056ce:	d0f9      	beq.n	80056c4 <_strtod_l+0x294>
 80056d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80056d4:	2908      	cmp	r1, #8
 80056d6:	f63f af78 	bhi.w	80055ca <_strtod_l+0x19a>
 80056da:	f04f 080a 	mov.w	r8, #10
 80056de:	3a30      	subs	r2, #48	@ 0x30
 80056e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80056e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80056e4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80056e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80056e8:	1c56      	adds	r6, r2, #1
 80056ea:	9619      	str	r6, [sp, #100]	@ 0x64
 80056ec:	7852      	ldrb	r2, [r2, #1]
 80056ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80056f2:	f1be 0f09 	cmp.w	lr, #9
 80056f6:	d939      	bls.n	800576c <_strtod_l+0x33c>
 80056f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80056fa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80056fe:	1a76      	subs	r6, r6, r1
 8005700:	2e08      	cmp	r6, #8
 8005702:	dc03      	bgt.n	800570c <_strtod_l+0x2dc>
 8005704:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005706:	4588      	cmp	r8, r1
 8005708:	bfa8      	it	ge
 800570a:	4688      	movge	r8, r1
 800570c:	f1bc 0f00 	cmp.w	ip, #0
 8005710:	d001      	beq.n	8005716 <_strtod_l+0x2e6>
 8005712:	f1c8 0800 	rsb	r8, r8, #0
 8005716:	2d00      	cmp	r5, #0
 8005718:	d14e      	bne.n	80057b8 <_strtod_l+0x388>
 800571a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800571c:	4308      	orrs	r0, r1
 800571e:	f47f aec0 	bne.w	80054a2 <_strtod_l+0x72>
 8005722:	2b00      	cmp	r3, #0
 8005724:	f47f aed6 	bne.w	80054d4 <_strtod_l+0xa4>
 8005728:	2a69      	cmp	r2, #105	@ 0x69
 800572a:	d028      	beq.n	800577e <_strtod_l+0x34e>
 800572c:	dc25      	bgt.n	800577a <_strtod_l+0x34a>
 800572e:	2a49      	cmp	r2, #73	@ 0x49
 8005730:	d025      	beq.n	800577e <_strtod_l+0x34e>
 8005732:	2a4e      	cmp	r2, #78	@ 0x4e
 8005734:	f47f aece 	bne.w	80054d4 <_strtod_l+0xa4>
 8005738:	499a      	ldr	r1, [pc, #616]	@ (80059a4 <_strtod_l+0x574>)
 800573a:	a819      	add	r0, sp, #100	@ 0x64
 800573c:	f002 fbb6 	bl	8007eac <__match>
 8005740:	2800      	cmp	r0, #0
 8005742:	f43f aec7 	beq.w	80054d4 <_strtod_l+0xa4>
 8005746:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	2b28      	cmp	r3, #40	@ 0x28
 800574c:	d12e      	bne.n	80057ac <_strtod_l+0x37c>
 800574e:	4996      	ldr	r1, [pc, #600]	@ (80059a8 <_strtod_l+0x578>)
 8005750:	aa1c      	add	r2, sp, #112	@ 0x70
 8005752:	a819      	add	r0, sp, #100	@ 0x64
 8005754:	f002 fbbe 	bl	8007ed4 <__hexnan>
 8005758:	2805      	cmp	r0, #5
 800575a:	d127      	bne.n	80057ac <_strtod_l+0x37c>
 800575c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800575e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005762:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005766:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800576a:	e69a      	b.n	80054a2 <_strtod_l+0x72>
 800576c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800576e:	fb08 2101 	mla	r1, r8, r1, r2
 8005772:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005776:	920e      	str	r2, [sp, #56]	@ 0x38
 8005778:	e7b5      	b.n	80056e6 <_strtod_l+0x2b6>
 800577a:	2a6e      	cmp	r2, #110	@ 0x6e
 800577c:	e7da      	b.n	8005734 <_strtod_l+0x304>
 800577e:	498b      	ldr	r1, [pc, #556]	@ (80059ac <_strtod_l+0x57c>)
 8005780:	a819      	add	r0, sp, #100	@ 0x64
 8005782:	f002 fb93 	bl	8007eac <__match>
 8005786:	2800      	cmp	r0, #0
 8005788:	f43f aea4 	beq.w	80054d4 <_strtod_l+0xa4>
 800578c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800578e:	4988      	ldr	r1, [pc, #544]	@ (80059b0 <_strtod_l+0x580>)
 8005790:	3b01      	subs	r3, #1
 8005792:	a819      	add	r0, sp, #100	@ 0x64
 8005794:	9319      	str	r3, [sp, #100]	@ 0x64
 8005796:	f002 fb89 	bl	8007eac <__match>
 800579a:	b910      	cbnz	r0, 80057a2 <_strtod_l+0x372>
 800579c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800579e:	3301      	adds	r3, #1
 80057a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80057a2:	f04f 0a00 	mov.w	sl, #0
 80057a6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80059b4 <_strtod_l+0x584>
 80057aa:	e67a      	b.n	80054a2 <_strtod_l+0x72>
 80057ac:	4882      	ldr	r0, [pc, #520]	@ (80059b8 <_strtod_l+0x588>)
 80057ae:	f001 fa53 	bl	8006c58 <nan>
 80057b2:	4682      	mov	sl, r0
 80057b4:	468b      	mov	fp, r1
 80057b6:	e674      	b.n	80054a2 <_strtod_l+0x72>
 80057b8:	eba8 0309 	sub.w	r3, r8, r9
 80057bc:	2f00      	cmp	r7, #0
 80057be:	bf08      	it	eq
 80057c0:	462f      	moveq	r7, r5
 80057c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80057c4:	2d10      	cmp	r5, #16
 80057c6:	462c      	mov	r4, r5
 80057c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ca:	bfa8      	it	ge
 80057cc:	2410      	movge	r4, #16
 80057ce:	f7fa fe09 	bl	80003e4 <__aeabi_ui2d>
 80057d2:	2d09      	cmp	r5, #9
 80057d4:	4682      	mov	sl, r0
 80057d6:	468b      	mov	fp, r1
 80057d8:	dc11      	bgt.n	80057fe <_strtod_l+0x3ce>
 80057da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f43f ae60 	beq.w	80054a2 <_strtod_l+0x72>
 80057e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e4:	dd76      	ble.n	80058d4 <_strtod_l+0x4a4>
 80057e6:	2b16      	cmp	r3, #22
 80057e8:	dc5d      	bgt.n	80058a6 <_strtod_l+0x476>
 80057ea:	4974      	ldr	r1, [pc, #464]	@ (80059bc <_strtod_l+0x58c>)
 80057ec:	4652      	mov	r2, sl
 80057ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80057f2:	465b      	mov	r3, fp
 80057f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057f8:	f7fa fe6e 	bl	80004d8 <__aeabi_dmul>
 80057fc:	e7d9      	b.n	80057b2 <_strtod_l+0x382>
 80057fe:	4b6f      	ldr	r3, [pc, #444]	@ (80059bc <_strtod_l+0x58c>)
 8005800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005804:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005808:	f7fa fe66 	bl	80004d8 <__aeabi_dmul>
 800580c:	4682      	mov	sl, r0
 800580e:	9808      	ldr	r0, [sp, #32]
 8005810:	468b      	mov	fp, r1
 8005812:	f7fa fde7 	bl	80003e4 <__aeabi_ui2d>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4650      	mov	r0, sl
 800581c:	4659      	mov	r1, fp
 800581e:	f7fa fca5 	bl	800016c <__adddf3>
 8005822:	2d0f      	cmp	r5, #15
 8005824:	4682      	mov	sl, r0
 8005826:	468b      	mov	fp, r1
 8005828:	ddd7      	ble.n	80057da <_strtod_l+0x3aa>
 800582a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800582c:	1b2c      	subs	r4, r5, r4
 800582e:	441c      	add	r4, r3
 8005830:	2c00      	cmp	r4, #0
 8005832:	f340 8096 	ble.w	8005962 <_strtod_l+0x532>
 8005836:	f014 030f 	ands.w	r3, r4, #15
 800583a:	d00a      	beq.n	8005852 <_strtod_l+0x422>
 800583c:	495f      	ldr	r1, [pc, #380]	@ (80059bc <_strtod_l+0x58c>)
 800583e:	4652      	mov	r2, sl
 8005840:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005848:	465b      	mov	r3, fp
 800584a:	f7fa fe45 	bl	80004d8 <__aeabi_dmul>
 800584e:	4682      	mov	sl, r0
 8005850:	468b      	mov	fp, r1
 8005852:	f034 040f 	bics.w	r4, r4, #15
 8005856:	d073      	beq.n	8005940 <_strtod_l+0x510>
 8005858:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800585c:	dd48      	ble.n	80058f0 <_strtod_l+0x4c0>
 800585e:	2400      	movs	r4, #0
 8005860:	46a0      	mov	r8, r4
 8005862:	46a1      	mov	r9, r4
 8005864:	940a      	str	r4, [sp, #40]	@ 0x28
 8005866:	2322      	movs	r3, #34	@ 0x22
 8005868:	f04f 0a00 	mov.w	sl, #0
 800586c:	9a05      	ldr	r2, [sp, #20]
 800586e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80059b4 <_strtod_l+0x584>
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005876:	2b00      	cmp	r3, #0
 8005878:	f43f ae13 	beq.w	80054a2 <_strtod_l+0x72>
 800587c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800587e:	9805      	ldr	r0, [sp, #20]
 8005880:	f002 fccc 	bl	800821c <_Bfree>
 8005884:	4649      	mov	r1, r9
 8005886:	9805      	ldr	r0, [sp, #20]
 8005888:	f002 fcc8 	bl	800821c <_Bfree>
 800588c:	4641      	mov	r1, r8
 800588e:	9805      	ldr	r0, [sp, #20]
 8005890:	f002 fcc4 	bl	800821c <_Bfree>
 8005894:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005896:	9805      	ldr	r0, [sp, #20]
 8005898:	f002 fcc0 	bl	800821c <_Bfree>
 800589c:	4621      	mov	r1, r4
 800589e:	9805      	ldr	r0, [sp, #20]
 80058a0:	f002 fcbc 	bl	800821c <_Bfree>
 80058a4:	e5fd      	b.n	80054a2 <_strtod_l+0x72>
 80058a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80058ac:	4293      	cmp	r3, r2
 80058ae:	dbbc      	blt.n	800582a <_strtod_l+0x3fa>
 80058b0:	4c42      	ldr	r4, [pc, #264]	@ (80059bc <_strtod_l+0x58c>)
 80058b2:	f1c5 050f 	rsb	r5, r5, #15
 80058b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80058ba:	4652      	mov	r2, sl
 80058bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058c0:	465b      	mov	r3, fp
 80058c2:	f7fa fe09 	bl	80004d8 <__aeabi_dmul>
 80058c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c8:	1b5d      	subs	r5, r3, r5
 80058ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80058ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80058d2:	e791      	b.n	80057f8 <_strtod_l+0x3c8>
 80058d4:	3316      	adds	r3, #22
 80058d6:	dba8      	blt.n	800582a <_strtod_l+0x3fa>
 80058d8:	4b38      	ldr	r3, [pc, #224]	@ (80059bc <_strtod_l+0x58c>)
 80058da:	eba9 0808 	sub.w	r8, r9, r8
 80058de:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80058e2:	4650      	mov	r0, sl
 80058e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80058e8:	4659      	mov	r1, fp
 80058ea:	f7fa ff1f 	bl	800072c <__aeabi_ddiv>
 80058ee:	e760      	b.n	80057b2 <_strtod_l+0x382>
 80058f0:	4b33      	ldr	r3, [pc, #204]	@ (80059c0 <_strtod_l+0x590>)
 80058f2:	4650      	mov	r0, sl
 80058f4:	9308      	str	r3, [sp, #32]
 80058f6:	2300      	movs	r3, #0
 80058f8:	4659      	mov	r1, fp
 80058fa:	461e      	mov	r6, r3
 80058fc:	1124      	asrs	r4, r4, #4
 80058fe:	2c01      	cmp	r4, #1
 8005900:	dc21      	bgt.n	8005946 <_strtod_l+0x516>
 8005902:	b10b      	cbz	r3, 8005908 <_strtod_l+0x4d8>
 8005904:	4682      	mov	sl, r0
 8005906:	468b      	mov	fp, r1
 8005908:	492d      	ldr	r1, [pc, #180]	@ (80059c0 <_strtod_l+0x590>)
 800590a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800590e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005912:	4652      	mov	r2, sl
 8005914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005918:	465b      	mov	r3, fp
 800591a:	f7fa fddd 	bl	80004d8 <__aeabi_dmul>
 800591e:	4b25      	ldr	r3, [pc, #148]	@ (80059b4 <_strtod_l+0x584>)
 8005920:	460a      	mov	r2, r1
 8005922:	400b      	ands	r3, r1
 8005924:	4927      	ldr	r1, [pc, #156]	@ (80059c4 <_strtod_l+0x594>)
 8005926:	4682      	mov	sl, r0
 8005928:	428b      	cmp	r3, r1
 800592a:	d898      	bhi.n	800585e <_strtod_l+0x42e>
 800592c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005930:	428b      	cmp	r3, r1
 8005932:	bf86      	itte	hi
 8005934:	f04f 3aff 	movhi.w	sl, #4294967295
 8005938:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80059c8 <_strtod_l+0x598>
 800593c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005940:	2300      	movs	r3, #0
 8005942:	9308      	str	r3, [sp, #32]
 8005944:	e07a      	b.n	8005a3c <_strtod_l+0x60c>
 8005946:	07e2      	lsls	r2, r4, #31
 8005948:	d505      	bpl.n	8005956 <_strtod_l+0x526>
 800594a:	9b08      	ldr	r3, [sp, #32]
 800594c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005950:	f7fa fdc2 	bl	80004d8 <__aeabi_dmul>
 8005954:	2301      	movs	r3, #1
 8005956:	9a08      	ldr	r2, [sp, #32]
 8005958:	3601      	adds	r6, #1
 800595a:	3208      	adds	r2, #8
 800595c:	1064      	asrs	r4, r4, #1
 800595e:	9208      	str	r2, [sp, #32]
 8005960:	e7cd      	b.n	80058fe <_strtod_l+0x4ce>
 8005962:	d0ed      	beq.n	8005940 <_strtod_l+0x510>
 8005964:	4264      	negs	r4, r4
 8005966:	f014 020f 	ands.w	r2, r4, #15
 800596a:	d00a      	beq.n	8005982 <_strtod_l+0x552>
 800596c:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <_strtod_l+0x58c>)
 800596e:	4650      	mov	r0, sl
 8005970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005974:	4659      	mov	r1, fp
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fed7 	bl	800072c <__aeabi_ddiv>
 800597e:	4682      	mov	sl, r0
 8005980:	468b      	mov	fp, r1
 8005982:	1124      	asrs	r4, r4, #4
 8005984:	d0dc      	beq.n	8005940 <_strtod_l+0x510>
 8005986:	2c1f      	cmp	r4, #31
 8005988:	dd20      	ble.n	80059cc <_strtod_l+0x59c>
 800598a:	2400      	movs	r4, #0
 800598c:	46a0      	mov	r8, r4
 800598e:	46a1      	mov	r9, r4
 8005990:	940a      	str	r4, [sp, #40]	@ 0x28
 8005992:	2322      	movs	r3, #34	@ 0x22
 8005994:	9a05      	ldr	r2, [sp, #20]
 8005996:	f04f 0a00 	mov.w	sl, #0
 800599a:	f04f 0b00 	mov.w	fp, #0
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e768      	b.n	8005874 <_strtod_l+0x444>
 80059a2:	bf00      	nop
 80059a4:	0800976d 	.word	0x0800976d
 80059a8:	08009710 	.word	0x08009710
 80059ac:	08009765 	.word	0x08009765
 80059b0:	0800979f 	.word	0x0800979f
 80059b4:	7ff00000 	.word	0x7ff00000
 80059b8:	08009b2d 	.word	0x08009b2d
 80059bc:	08009918 	.word	0x08009918
 80059c0:	080098f0 	.word	0x080098f0
 80059c4:	7ca00000 	.word	0x7ca00000
 80059c8:	7fefffff 	.word	0x7fefffff
 80059cc:	f014 0310 	ands.w	r3, r4, #16
 80059d0:	bf18      	it	ne
 80059d2:	236a      	movne	r3, #106	@ 0x6a
 80059d4:	4650      	mov	r0, sl
 80059d6:	9308      	str	r3, [sp, #32]
 80059d8:	4659      	mov	r1, fp
 80059da:	2300      	movs	r3, #0
 80059dc:	4ea9      	ldr	r6, [pc, #676]	@ (8005c84 <_strtod_l+0x854>)
 80059de:	07e2      	lsls	r2, r4, #31
 80059e0:	d504      	bpl.n	80059ec <_strtod_l+0x5bc>
 80059e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059e6:	f7fa fd77 	bl	80004d8 <__aeabi_dmul>
 80059ea:	2301      	movs	r3, #1
 80059ec:	1064      	asrs	r4, r4, #1
 80059ee:	f106 0608 	add.w	r6, r6, #8
 80059f2:	d1f4      	bne.n	80059de <_strtod_l+0x5ae>
 80059f4:	b10b      	cbz	r3, 80059fa <_strtod_l+0x5ca>
 80059f6:	4682      	mov	sl, r0
 80059f8:	468b      	mov	fp, r1
 80059fa:	9b08      	ldr	r3, [sp, #32]
 80059fc:	b1b3      	cbz	r3, 8005a2c <_strtod_l+0x5fc>
 80059fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005a02:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	4659      	mov	r1, fp
 8005a0a:	dd0f      	ble.n	8005a2c <_strtod_l+0x5fc>
 8005a0c:	2b1f      	cmp	r3, #31
 8005a0e:	dd57      	ble.n	8005ac0 <_strtod_l+0x690>
 8005a10:	2b34      	cmp	r3, #52	@ 0x34
 8005a12:	bfd8      	it	le
 8005a14:	f04f 33ff 	movle.w	r3, #4294967295
 8005a18:	f04f 0a00 	mov.w	sl, #0
 8005a1c:	bfcf      	iteee	gt
 8005a1e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005a22:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005a26:	4093      	lslle	r3, r2
 8005a28:	ea03 0b01 	andle.w	fp, r3, r1
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2300      	movs	r3, #0
 8005a30:	4650      	mov	r0, sl
 8005a32:	4659      	mov	r1, fp
 8005a34:	f7fa ffb8 	bl	80009a8 <__aeabi_dcmpeq>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1a6      	bne.n	800598a <_strtod_l+0x55a>
 8005a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a3e:	463a      	mov	r2, r7
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005a44:	462b      	mov	r3, r5
 8005a46:	9805      	ldr	r0, [sp, #20]
 8005a48:	f002 fc50 	bl	80082ec <__s2b>
 8005a4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f43f af05 	beq.w	800585e <_strtod_l+0x42e>
 8005a54:	2400      	movs	r4, #0
 8005a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a58:	eba9 0308 	sub.w	r3, r9, r8
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	bfa8      	it	ge
 8005a60:	2300      	movge	r3, #0
 8005a62:	46a0      	mov	r8, r4
 8005a64:	9312      	str	r3, [sp, #72]	@ 0x48
 8005a66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005a6a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a6e:	9805      	ldr	r0, [sp, #20]
 8005a70:	6859      	ldr	r1, [r3, #4]
 8005a72:	f002 fb93 	bl	800819c <_Balloc>
 8005a76:	4681      	mov	r9, r0
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f43f aef4 	beq.w	8005866 <_strtod_l+0x436>
 8005a7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a80:	300c      	adds	r0, #12
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	f103 010c 	add.w	r1, r3, #12
 8005a88:	3202      	adds	r2, #2
 8005a8a:	0092      	lsls	r2, r2, #2
 8005a8c:	f001 f8d5 	bl	8006c3a <memcpy>
 8005a90:	ab1c      	add	r3, sp, #112	@ 0x70
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	4652      	mov	r2, sl
 8005a9a:	465b      	mov	r3, fp
 8005a9c:	9805      	ldr	r0, [sp, #20]
 8005a9e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005aa2:	f002 ff55 	bl	8008950 <__d2b>
 8005aa6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f43f aedc 	beq.w	8005866 <_strtod_l+0x436>
 8005aae:	2101      	movs	r1, #1
 8005ab0:	9805      	ldr	r0, [sp, #20]
 8005ab2:	f002 fcb1 	bl	8008418 <__i2b>
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	b948      	cbnz	r0, 8005ace <_strtod_l+0x69e>
 8005aba:	f04f 0800 	mov.w	r8, #0
 8005abe:	e6d2      	b.n	8005866 <_strtod_l+0x436>
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	ea03 0a0a 	and.w	sl, r3, sl
 8005acc:	e7ae      	b.n	8005a2c <_strtod_l+0x5fc>
 8005ace:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005ad0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	bfab      	itete	ge
 8005ad6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005ad8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005ada:	18ef      	addge	r7, r5, r3
 8005adc:	1b5e      	sublt	r6, r3, r5
 8005ade:	9b08      	ldr	r3, [sp, #32]
 8005ae0:	bfa8      	it	ge
 8005ae2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005ae4:	eba5 0503 	sub.w	r5, r5, r3
 8005ae8:	4415      	add	r5, r2
 8005aea:	4b67      	ldr	r3, [pc, #412]	@ (8005c88 <_strtod_l+0x858>)
 8005aec:	f105 35ff 	add.w	r5, r5, #4294967295
 8005af0:	bfb8      	it	lt
 8005af2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005af4:	429d      	cmp	r5, r3
 8005af6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005afa:	da50      	bge.n	8005b9e <_strtod_l+0x76e>
 8005afc:	1b5b      	subs	r3, r3, r5
 8005afe:	2b1f      	cmp	r3, #31
 8005b00:	f04f 0101 	mov.w	r1, #1
 8005b04:	eba2 0203 	sub.w	r2, r2, r3
 8005b08:	dc3d      	bgt.n	8005b86 <_strtod_l+0x756>
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b10:	2300      	movs	r3, #0
 8005b12:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b14:	18bd      	adds	r5, r7, r2
 8005b16:	9b08      	ldr	r3, [sp, #32]
 8005b18:	42af      	cmp	r7, r5
 8005b1a:	4416      	add	r6, r2
 8005b1c:	441e      	add	r6, r3
 8005b1e:	463b      	mov	r3, r7
 8005b20:	bfa8      	it	ge
 8005b22:	462b      	movge	r3, r5
 8005b24:	42b3      	cmp	r3, r6
 8005b26:	bfa8      	it	ge
 8005b28:	4633      	movge	r3, r6
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfc2      	ittt	gt
 8005b2e:	1aed      	subgt	r5, r5, r3
 8005b30:	1af6      	subgt	r6, r6, r3
 8005b32:	1aff      	subgt	r7, r7, r3
 8005b34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	dd16      	ble.n	8005b68 <_strtod_l+0x738>
 8005b3a:	4641      	mov	r1, r8
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	9805      	ldr	r0, [sp, #20]
 8005b40:	f002 fd28 	bl	8008594 <__pow5mult>
 8005b44:	4680      	mov	r8, r0
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0b7      	beq.n	8005aba <_strtod_l+0x68a>
 8005b4a:	4601      	mov	r1, r0
 8005b4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b4e:	9805      	ldr	r0, [sp, #20]
 8005b50:	f002 fc78 	bl	8008444 <__multiply>
 8005b54:	900e      	str	r0, [sp, #56]	@ 0x38
 8005b56:	2800      	cmp	r0, #0
 8005b58:	f43f ae85 	beq.w	8005866 <_strtod_l+0x436>
 8005b5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b5e:	9805      	ldr	r0, [sp, #20]
 8005b60:	f002 fb5c 	bl	800821c <_Bfree>
 8005b64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	dc1d      	bgt.n	8005ba8 <_strtod_l+0x778>
 8005b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd23      	ble.n	8005bba <_strtod_l+0x78a>
 8005b72:	4649      	mov	r1, r9
 8005b74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005b76:	9805      	ldr	r0, [sp, #20]
 8005b78:	f002 fd0c 	bl	8008594 <__pow5mult>
 8005b7c:	4681      	mov	r9, r0
 8005b7e:	b9e0      	cbnz	r0, 8005bba <_strtod_l+0x78a>
 8005b80:	f04f 0900 	mov.w	r9, #0
 8005b84:	e66f      	b.n	8005866 <_strtod_l+0x436>
 8005b86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005b8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005b8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005b92:	35e2      	adds	r5, #226	@ 0xe2
 8005b94:	fa01 f305 	lsl.w	r3, r1, r5
 8005b98:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005b9c:	e7ba      	b.n	8005b14 <_strtod_l+0x6e4>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ba6:	e7b5      	b.n	8005b14 <_strtod_l+0x6e4>
 8005ba8:	462a      	mov	r2, r5
 8005baa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005bac:	9805      	ldr	r0, [sp, #20]
 8005bae:	f002 fd4b 	bl	8008648 <__lshift>
 8005bb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d1d9      	bne.n	8005b6c <_strtod_l+0x73c>
 8005bb8:	e655      	b.n	8005866 <_strtod_l+0x436>
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	dd07      	ble.n	8005bce <_strtod_l+0x79e>
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	4632      	mov	r2, r6
 8005bc2:	9805      	ldr	r0, [sp, #20]
 8005bc4:	f002 fd40 	bl	8008648 <__lshift>
 8005bc8:	4681      	mov	r9, r0
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0d8      	beq.n	8005b80 <_strtod_l+0x750>
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	dd08      	ble.n	8005be4 <_strtod_l+0x7b4>
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	9805      	ldr	r0, [sp, #20]
 8005bd8:	f002 fd36 	bl	8008648 <__lshift>
 8005bdc:	4680      	mov	r8, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f43f ae41 	beq.w	8005866 <_strtod_l+0x436>
 8005be4:	464a      	mov	r2, r9
 8005be6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005be8:	9805      	ldr	r0, [sp, #20]
 8005bea:	f002 fdb5 	bl	8008758 <__mdiff>
 8005bee:	4604      	mov	r4, r0
 8005bf0:	2800      	cmp	r0, #0
 8005bf2:	f43f ae38 	beq.w	8005866 <_strtod_l+0x436>
 8005bf6:	68c3      	ldr	r3, [r0, #12]
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60c3      	str	r3, [r0, #12]
 8005c00:	f002 fd8e 	bl	8008720 <__mcmp>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	da45      	bge.n	8005c94 <_strtod_l+0x864>
 8005c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c0a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c0e:	d16b      	bne.n	8005ce8 <_strtod_l+0x8b8>
 8005c10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d167      	bne.n	8005ce8 <_strtod_l+0x8b8>
 8005c18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c1c:	0d1b      	lsrs	r3, r3, #20
 8005c1e:	051b      	lsls	r3, r3, #20
 8005c20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005c24:	d960      	bls.n	8005ce8 <_strtod_l+0x8b8>
 8005c26:	6963      	ldr	r3, [r4, #20]
 8005c28:	b913      	cbnz	r3, 8005c30 <_strtod_l+0x800>
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	dd5b      	ble.n	8005ce8 <_strtod_l+0x8b8>
 8005c30:	4621      	mov	r1, r4
 8005c32:	2201      	movs	r2, #1
 8005c34:	9805      	ldr	r0, [sp, #20]
 8005c36:	f002 fd07 	bl	8008648 <__lshift>
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	f002 fd6f 	bl	8008720 <__mcmp>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	dd50      	ble.n	8005ce8 <_strtod_l+0x8b8>
 8005c46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c4a:	9a08      	ldr	r2, [sp, #32]
 8005c4c:	0d1b      	lsrs	r3, r3, #20
 8005c4e:	051b      	lsls	r3, r3, #20
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d06a      	beq.n	8005d2a <_strtod_l+0x8fa>
 8005c54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005c58:	d867      	bhi.n	8005d2a <_strtod_l+0x8fa>
 8005c5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005c5e:	f67f ae98 	bls.w	8005992 <_strtod_l+0x562>
 8005c62:	4650      	mov	r0, sl
 8005c64:	4659      	mov	r1, fp
 8005c66:	4b09      	ldr	r3, [pc, #36]	@ (8005c8c <_strtod_l+0x85c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f7fa fc35 	bl	80004d8 <__aeabi_dmul>
 8005c6e:	4b08      	ldr	r3, [pc, #32]	@ (8005c90 <_strtod_l+0x860>)
 8005c70:	4682      	mov	sl, r0
 8005c72:	400b      	ands	r3, r1
 8005c74:	468b      	mov	fp, r1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f47f ae00 	bne.w	800587c <_strtod_l+0x44c>
 8005c7c:	2322      	movs	r3, #34	@ 0x22
 8005c7e:	9a05      	ldr	r2, [sp, #20]
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e5fb      	b.n	800587c <_strtod_l+0x44c>
 8005c84:	08009738 	.word	0x08009738
 8005c88:	fffffc02 	.word	0xfffffc02
 8005c8c:	39500000 	.word	0x39500000
 8005c90:	7ff00000 	.word	0x7ff00000
 8005c94:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005c98:	d165      	bne.n	8005d66 <_strtod_l+0x936>
 8005c9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ca0:	b35a      	cbz	r2, 8005cfa <_strtod_l+0x8ca>
 8005ca2:	4a99      	ldr	r2, [pc, #612]	@ (8005f08 <_strtod_l+0xad8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d12b      	bne.n	8005d00 <_strtod_l+0x8d0>
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	4651      	mov	r1, sl
 8005cac:	b303      	cbz	r3, 8005cf0 <_strtod_l+0x8c0>
 8005cae:	465a      	mov	r2, fp
 8005cb0:	4b96      	ldr	r3, [pc, #600]	@ (8005f0c <_strtod_l+0xadc>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cbc:	d81b      	bhi.n	8005cf6 <_strtod_l+0x8c6>
 8005cbe:	0d1b      	lsrs	r3, r3, #20
 8005cc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d119      	bne.n	8005d00 <_strtod_l+0x8d0>
 8005ccc:	4b90      	ldr	r3, [pc, #576]	@ (8005f10 <_strtod_l+0xae0>)
 8005cce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d102      	bne.n	8005cda <_strtod_l+0x8aa>
 8005cd4:	3101      	adds	r1, #1
 8005cd6:	f43f adc6 	beq.w	8005866 <_strtod_l+0x436>
 8005cda:	f04f 0a00 	mov.w	sl, #0
 8005cde:	4b8b      	ldr	r3, [pc, #556]	@ (8005f0c <_strtod_l+0xadc>)
 8005ce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005ce8:	9b08      	ldr	r3, [sp, #32]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1b9      	bne.n	8005c62 <_strtod_l+0x832>
 8005cee:	e5c5      	b.n	800587c <_strtod_l+0x44c>
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf4:	e7e8      	b.n	8005cc8 <_strtod_l+0x898>
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	e7e6      	b.n	8005cc8 <_strtod_l+0x898>
 8005cfa:	ea53 030a 	orrs.w	r3, r3, sl
 8005cfe:	d0a2      	beq.n	8005c46 <_strtod_l+0x816>
 8005d00:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d02:	b1db      	cbz	r3, 8005d3c <_strtod_l+0x90c>
 8005d04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d06:	4213      	tst	r3, r2
 8005d08:	d0ee      	beq.n	8005ce8 <_strtod_l+0x8b8>
 8005d0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	4659      	mov	r1, fp
 8005d10:	9a08      	ldr	r2, [sp, #32]
 8005d12:	b1bb      	cbz	r3, 8005d44 <_strtod_l+0x914>
 8005d14:	f7ff fb6b 	bl	80053ee <sulp>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d20:	f7fa fa24 	bl	800016c <__adddf3>
 8005d24:	4682      	mov	sl, r0
 8005d26:	468b      	mov	fp, r1
 8005d28:	e7de      	b.n	8005ce8 <_strtod_l+0x8b8>
 8005d2a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005d2e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005d32:	f04f 3aff 	mov.w	sl, #4294967295
 8005d36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005d3a:	e7d5      	b.n	8005ce8 <_strtod_l+0x8b8>
 8005d3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d3e:	ea13 0f0a 	tst.w	r3, sl
 8005d42:	e7e1      	b.n	8005d08 <_strtod_l+0x8d8>
 8005d44:	f7ff fb53 	bl	80053ee <sulp>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d50:	f7fa fa0a 	bl	8000168 <__aeabi_dsub>
 8005d54:	2200      	movs	r2, #0
 8005d56:	2300      	movs	r3, #0
 8005d58:	4682      	mov	sl, r0
 8005d5a:	468b      	mov	fp, r1
 8005d5c:	f7fa fe24 	bl	80009a8 <__aeabi_dcmpeq>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d0c1      	beq.n	8005ce8 <_strtod_l+0x8b8>
 8005d64:	e615      	b.n	8005992 <_strtod_l+0x562>
 8005d66:	4641      	mov	r1, r8
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f002 fe49 	bl	8008a00 <__ratio>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d74:	4606      	mov	r6, r0
 8005d76:	460f      	mov	r7, r1
 8005d78:	f7fa fe2a 	bl	80009d0 <__aeabi_dcmple>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d06d      	beq.n	8005e5c <_strtod_l+0xa2c>
 8005d80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d178      	bne.n	8005e78 <_strtod_l+0xa48>
 8005d86:	f1ba 0f00 	cmp.w	sl, #0
 8005d8a:	d156      	bne.n	8005e3a <_strtod_l+0xa0a>
 8005d8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d158      	bne.n	8005e48 <_strtod_l+0xa18>
 8005d96:	2200      	movs	r2, #0
 8005d98:	4630      	mov	r0, r6
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	4b5d      	ldr	r3, [pc, #372]	@ (8005f14 <_strtod_l+0xae4>)
 8005d9e:	f7fa fe0d 	bl	80009bc <__aeabi_dcmplt>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d157      	bne.n	8005e56 <_strtod_l+0xa26>
 8005da6:	4630      	mov	r0, r6
 8005da8:	4639      	mov	r1, r7
 8005daa:	2200      	movs	r2, #0
 8005dac:	4b5a      	ldr	r3, [pc, #360]	@ (8005f18 <_strtod_l+0xae8>)
 8005dae:	f7fa fb93 	bl	80004d8 <__aeabi_dmul>
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005dba:	9606      	str	r6, [sp, #24]
 8005dbc:	9307      	str	r3, [sp, #28]
 8005dbe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc2:	4d52      	ldr	r5, [pc, #328]	@ (8005f0c <_strtod_l+0xadc>)
 8005dc4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dca:	401d      	ands	r5, r3
 8005dcc:	4b53      	ldr	r3, [pc, #332]	@ (8005f1c <_strtod_l+0xaec>)
 8005dce:	429d      	cmp	r5, r3
 8005dd0:	f040 80aa 	bne.w	8005f28 <_strtod_l+0xaf8>
 8005dd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005ddc:	4659      	mov	r1, fp
 8005dde:	f002 fd4f 	bl	8008880 <__ulp>
 8005de2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005de6:	f7fa fb77 	bl	80004d8 <__aeabi_dmul>
 8005dea:	4652      	mov	r2, sl
 8005dec:	465b      	mov	r3, fp
 8005dee:	f7fa f9bd 	bl	800016c <__adddf3>
 8005df2:	460b      	mov	r3, r1
 8005df4:	4945      	ldr	r1, [pc, #276]	@ (8005f0c <_strtod_l+0xadc>)
 8005df6:	4a4a      	ldr	r2, [pc, #296]	@ (8005f20 <_strtod_l+0xaf0>)
 8005df8:	4019      	ands	r1, r3
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	d942      	bls.n	8005e86 <_strtod_l+0xa56>
 8005e00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e02:	4b43      	ldr	r3, [pc, #268]	@ (8005f10 <_strtod_l+0xae0>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d103      	bne.n	8005e10 <_strtod_l+0x9e0>
 8005e08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f43f ad2b 	beq.w	8005866 <_strtod_l+0x436>
 8005e10:	f04f 3aff 	mov.w	sl, #4294967295
 8005e14:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005f10 <_strtod_l+0xae0>
 8005e18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e1a:	9805      	ldr	r0, [sp, #20]
 8005e1c:	f002 f9fe 	bl	800821c <_Bfree>
 8005e20:	4649      	mov	r1, r9
 8005e22:	9805      	ldr	r0, [sp, #20]
 8005e24:	f002 f9fa 	bl	800821c <_Bfree>
 8005e28:	4641      	mov	r1, r8
 8005e2a:	9805      	ldr	r0, [sp, #20]
 8005e2c:	f002 f9f6 	bl	800821c <_Bfree>
 8005e30:	4621      	mov	r1, r4
 8005e32:	9805      	ldr	r0, [sp, #20]
 8005e34:	f002 f9f2 	bl	800821c <_Bfree>
 8005e38:	e618      	b.n	8005a6c <_strtod_l+0x63c>
 8005e3a:	f1ba 0f01 	cmp.w	sl, #1
 8005e3e:	d103      	bne.n	8005e48 <_strtod_l+0xa18>
 8005e40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f43f ada5 	beq.w	8005992 <_strtod_l+0x562>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4b36      	ldr	r3, [pc, #216]	@ (8005f24 <_strtod_l+0xaf4>)
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e52:	4f30      	ldr	r7, [pc, #192]	@ (8005f14 <_strtod_l+0xae4>)
 8005e54:	e7b3      	b.n	8005dbe <_strtod_l+0x98e>
 8005e56:	2600      	movs	r6, #0
 8005e58:	4f2f      	ldr	r7, [pc, #188]	@ (8005f18 <_strtod_l+0xae8>)
 8005e5a:	e7ac      	b.n	8005db6 <_strtod_l+0x986>
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <_strtod_l+0xae8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	f7fa fb38 	bl	80004d8 <__aeabi_dmul>
 8005e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0a1      	beq.n	8005db6 <_strtod_l+0x986>
 8005e72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005e76:	e7a2      	b.n	8005dbe <_strtod_l+0x98e>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4b26      	ldr	r3, [pc, #152]	@ (8005f14 <_strtod_l+0xae4>)
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	461f      	mov	r7, r3
 8005e80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e84:	e79b      	b.n	8005dbe <_strtod_l+0x98e>
 8005e86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005e8a:	9b08      	ldr	r3, [sp, #32]
 8005e8c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1c1      	bne.n	8005e18 <_strtod_l+0x9e8>
 8005e94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005e98:	0d1b      	lsrs	r3, r3, #20
 8005e9a:	051b      	lsls	r3, r3, #20
 8005e9c:	429d      	cmp	r5, r3
 8005e9e:	d1bb      	bne.n	8005e18 <_strtod_l+0x9e8>
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	f7fb f934 	bl	8001110 <__aeabi_d2lz>
 8005ea8:	f7fa fae8 	bl	800047c <__aeabi_l2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa f958 	bl	8000168 <__aeabi_dsub>
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4602      	mov	r2, r0
 8005ebc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005ec0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec6:	ea46 060a 	orr.w	r6, r6, sl
 8005eca:	431e      	orrs	r6, r3
 8005ecc:	d069      	beq.n	8005fa2 <_strtod_l+0xb72>
 8005ece:	a30a      	add	r3, pc, #40	@ (adr r3, 8005ef8 <_strtod_l+0xac8>)
 8005ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed4:	f7fa fd72 	bl	80009bc <__aeabi_dcmplt>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	f47f accf 	bne.w	800587c <_strtod_l+0x44c>
 8005ede:	a308      	add	r3, pc, #32	@ (adr r3, 8005f00 <_strtod_l+0xad0>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ee8:	f7fa fd86 	bl	80009f8 <__aeabi_dcmpgt>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d093      	beq.n	8005e18 <_strtod_l+0x9e8>
 8005ef0:	e4c4      	b.n	800587c <_strtod_l+0x44c>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
 8005ef8:	94a03595 	.word	0x94a03595
 8005efc:	3fdfffff 	.word	0x3fdfffff
 8005f00:	35afe535 	.word	0x35afe535
 8005f04:	3fe00000 	.word	0x3fe00000
 8005f08:	000fffff 	.word	0x000fffff
 8005f0c:	7ff00000 	.word	0x7ff00000
 8005f10:	7fefffff 	.word	0x7fefffff
 8005f14:	3ff00000 	.word	0x3ff00000
 8005f18:	3fe00000 	.word	0x3fe00000
 8005f1c:	7fe00000 	.word	0x7fe00000
 8005f20:	7c9fffff 	.word	0x7c9fffff
 8005f24:	bff00000 	.word	0xbff00000
 8005f28:	9b08      	ldr	r3, [sp, #32]
 8005f2a:	b323      	cbz	r3, 8005f76 <_strtod_l+0xb46>
 8005f2c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005f30:	d821      	bhi.n	8005f76 <_strtod_l+0xb46>
 8005f32:	a327      	add	r3, pc, #156	@ (adr r3, 8005fd0 <_strtod_l+0xba0>)
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	4630      	mov	r0, r6
 8005f3a:	4639      	mov	r1, r7
 8005f3c:	f7fa fd48 	bl	80009d0 <__aeabi_dcmple>
 8005f40:	b1a0      	cbz	r0, 8005f6c <_strtod_l+0xb3c>
 8005f42:	4639      	mov	r1, r7
 8005f44:	4630      	mov	r0, r6
 8005f46:	f7fa fd9f 	bl	8000a88 <__aeabi_d2uiz>
 8005f4a:	2801      	cmp	r0, #1
 8005f4c:	bf38      	it	cc
 8005f4e:	2001      	movcc	r0, #1
 8005f50:	f7fa fa48 	bl	80003e4 <__aeabi_ui2d>
 8005f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f56:	4606      	mov	r6, r0
 8005f58:	460f      	mov	r7, r1
 8005f5a:	b9fb      	cbnz	r3, 8005f9c <_strtod_l+0xb6c>
 8005f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005f60:	9014      	str	r0, [sp, #80]	@ 0x50
 8005f62:	9315      	str	r3, [sp, #84]	@ 0x54
 8005f64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005f68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005f6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005f6e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005f72:	1b5b      	subs	r3, r3, r5
 8005f74:	9311      	str	r3, [sp, #68]	@ 0x44
 8005f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f7a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005f7e:	f002 fc7f 	bl	8008880 <__ulp>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4650      	mov	r0, sl
 8005f88:	4659      	mov	r1, fp
 8005f8a:	f7fa faa5 	bl	80004d8 <__aeabi_dmul>
 8005f8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005f92:	f7fa f8eb 	bl	800016c <__adddf3>
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	e776      	b.n	8005e8a <_strtod_l+0xa5a>
 8005f9c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005fa0:	e7e0      	b.n	8005f64 <_strtod_l+0xb34>
 8005fa2:	a30d      	add	r3, pc, #52	@ (adr r3, 8005fd8 <_strtod_l+0xba8>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa fd08 	bl	80009bc <__aeabi_dcmplt>
 8005fac:	e79e      	b.n	8005eec <_strtod_l+0xabc>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005fb4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f7ff ba77 	b.w	80054aa <_strtod_l+0x7a>
 8005fbc:	2a65      	cmp	r2, #101	@ 0x65
 8005fbe:	f43f ab6e 	beq.w	800569e <_strtod_l+0x26e>
 8005fc2:	2a45      	cmp	r2, #69	@ 0x45
 8005fc4:	f43f ab6b 	beq.w	800569e <_strtod_l+0x26e>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f7ff bba6 	b.w	800571a <_strtod_l+0x2ea>
 8005fce:	bf00      	nop
 8005fd0:	ffc00000 	.word	0xffc00000
 8005fd4:	41dfffff 	.word	0x41dfffff
 8005fd8:	94a03595 	.word	0x94a03595
 8005fdc:	3fcfffff 	.word	0x3fcfffff

08005fe0 <strtod>:
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	4601      	mov	r1, r0
 8005fe4:	4802      	ldr	r0, [pc, #8]	@ (8005ff0 <strtod+0x10>)
 8005fe6:	4b03      	ldr	r3, [pc, #12]	@ (8005ff4 <strtod+0x14>)
 8005fe8:	6800      	ldr	r0, [r0, #0]
 8005fea:	f7ff ba21 	b.w	8005430 <_strtod_l>
 8005fee:	bf00      	nop
 8005ff0:	2000018c 	.word	0x2000018c
 8005ff4:	20000020 	.word	0x20000020

08005ff8 <__cvt>:
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffe:	461d      	mov	r5, r3
 8006000:	bfbb      	ittet	lt
 8006002:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006006:	461d      	movlt	r5, r3
 8006008:	2300      	movge	r3, #0
 800600a:	232d      	movlt	r3, #45	@ 0x2d
 800600c:	b088      	sub	sp, #32
 800600e:	4614      	mov	r4, r2
 8006010:	bfb8      	it	lt
 8006012:	4614      	movlt	r4, r2
 8006014:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006016:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006018:	7013      	strb	r3, [r2, #0]
 800601a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800601c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006020:	f023 0820 	bic.w	r8, r3, #32
 8006024:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006028:	d005      	beq.n	8006036 <__cvt+0x3e>
 800602a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800602e:	d100      	bne.n	8006032 <__cvt+0x3a>
 8006030:	3601      	adds	r6, #1
 8006032:	2302      	movs	r3, #2
 8006034:	e000      	b.n	8006038 <__cvt+0x40>
 8006036:	2303      	movs	r3, #3
 8006038:	aa07      	add	r2, sp, #28
 800603a:	9204      	str	r2, [sp, #16]
 800603c:	aa06      	add	r2, sp, #24
 800603e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006042:	e9cd 3600 	strd	r3, r6, [sp]
 8006046:	4622      	mov	r2, r4
 8006048:	462b      	mov	r3, r5
 800604a:	f000 fe95 	bl	8006d78 <_dtoa_r>
 800604e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006052:	4607      	mov	r7, r0
 8006054:	d119      	bne.n	800608a <__cvt+0x92>
 8006056:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006058:	07db      	lsls	r3, r3, #31
 800605a:	d50e      	bpl.n	800607a <__cvt+0x82>
 800605c:	eb00 0906 	add.w	r9, r0, r6
 8006060:	2200      	movs	r2, #0
 8006062:	2300      	movs	r3, #0
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	f7fa fc9e 	bl	80009a8 <__aeabi_dcmpeq>
 800606c:	b108      	cbz	r0, 8006072 <__cvt+0x7a>
 800606e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006072:	2230      	movs	r2, #48	@ 0x30
 8006074:	9b07      	ldr	r3, [sp, #28]
 8006076:	454b      	cmp	r3, r9
 8006078:	d31e      	bcc.n	80060b8 <__cvt+0xc0>
 800607a:	4638      	mov	r0, r7
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006080:	1bdb      	subs	r3, r3, r7
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	b008      	add	sp, #32
 8006086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800608e:	eb00 0906 	add.w	r9, r0, r6
 8006092:	d1e5      	bne.n	8006060 <__cvt+0x68>
 8006094:	7803      	ldrb	r3, [r0, #0]
 8006096:	2b30      	cmp	r3, #48	@ 0x30
 8006098:	d10a      	bne.n	80060b0 <__cvt+0xb8>
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	4629      	mov	r1, r5
 80060a2:	f7fa fc81 	bl	80009a8 <__aeabi_dcmpeq>
 80060a6:	b918      	cbnz	r0, 80060b0 <__cvt+0xb8>
 80060a8:	f1c6 0601 	rsb	r6, r6, #1
 80060ac:	f8ca 6000 	str.w	r6, [sl]
 80060b0:	f8da 3000 	ldr.w	r3, [sl]
 80060b4:	4499      	add	r9, r3
 80060b6:	e7d3      	b.n	8006060 <__cvt+0x68>
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	9107      	str	r1, [sp, #28]
 80060bc:	701a      	strb	r2, [r3, #0]
 80060be:	e7d9      	b.n	8006074 <__cvt+0x7c>

080060c0 <__exponent>:
 80060c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c2:	2900      	cmp	r1, #0
 80060c4:	bfb6      	itet	lt
 80060c6:	232d      	movlt	r3, #45	@ 0x2d
 80060c8:	232b      	movge	r3, #43	@ 0x2b
 80060ca:	4249      	neglt	r1, r1
 80060cc:	2909      	cmp	r1, #9
 80060ce:	7002      	strb	r2, [r0, #0]
 80060d0:	7043      	strb	r3, [r0, #1]
 80060d2:	dd29      	ble.n	8006128 <__exponent+0x68>
 80060d4:	f10d 0307 	add.w	r3, sp, #7
 80060d8:	461d      	mov	r5, r3
 80060da:	270a      	movs	r7, #10
 80060dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80060e0:	461a      	mov	r2, r3
 80060e2:	fb07 1416 	mls	r4, r7, r6, r1
 80060e6:	3430      	adds	r4, #48	@ 0x30
 80060e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060ec:	460c      	mov	r4, r1
 80060ee:	2c63      	cmp	r4, #99	@ 0x63
 80060f0:	4631      	mov	r1, r6
 80060f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060f6:	dcf1      	bgt.n	80060dc <__exponent+0x1c>
 80060f8:	3130      	adds	r1, #48	@ 0x30
 80060fa:	1e94      	subs	r4, r2, #2
 80060fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006100:	4623      	mov	r3, r4
 8006102:	1c41      	adds	r1, r0, #1
 8006104:	42ab      	cmp	r3, r5
 8006106:	d30a      	bcc.n	800611e <__exponent+0x5e>
 8006108:	f10d 0309 	add.w	r3, sp, #9
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	42ac      	cmp	r4, r5
 8006110:	bf88      	it	hi
 8006112:	2300      	movhi	r3, #0
 8006114:	3302      	adds	r3, #2
 8006116:	4403      	add	r3, r0
 8006118:	1a18      	subs	r0, r3, r0
 800611a:	b003      	add	sp, #12
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006122:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006126:	e7ed      	b.n	8006104 <__exponent+0x44>
 8006128:	2330      	movs	r3, #48	@ 0x30
 800612a:	3130      	adds	r1, #48	@ 0x30
 800612c:	7083      	strb	r3, [r0, #2]
 800612e:	70c1      	strb	r1, [r0, #3]
 8006130:	1d03      	adds	r3, r0, #4
 8006132:	e7f1      	b.n	8006118 <__exponent+0x58>

08006134 <_printf_float>:
 8006134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006138:	b091      	sub	sp, #68	@ 0x44
 800613a:	460c      	mov	r4, r1
 800613c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006140:	4616      	mov	r6, r2
 8006142:	461f      	mov	r7, r3
 8006144:	4605      	mov	r5, r0
 8006146:	f000 fcf3 	bl	8006b30 <_localeconv_r>
 800614a:	6803      	ldr	r3, [r0, #0]
 800614c:	4618      	mov	r0, r3
 800614e:	9308      	str	r3, [sp, #32]
 8006150:	f7f9 fffe 	bl	8000150 <strlen>
 8006154:	2300      	movs	r3, #0
 8006156:	930e      	str	r3, [sp, #56]	@ 0x38
 8006158:	f8d8 3000 	ldr.w	r3, [r8]
 800615c:	9009      	str	r0, [sp, #36]	@ 0x24
 800615e:	3307      	adds	r3, #7
 8006160:	f023 0307 	bic.w	r3, r3, #7
 8006164:	f103 0208 	add.w	r2, r3, #8
 8006168:	f894 a018 	ldrb.w	sl, [r4, #24]
 800616c:	f8d4 b000 	ldr.w	fp, [r4]
 8006170:	f8c8 2000 	str.w	r2, [r8]
 8006174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006178:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800617c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006182:	f04f 32ff 	mov.w	r2, #4294967295
 8006186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800618a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800618e:	4b9c      	ldr	r3, [pc, #624]	@ (8006400 <_printf_float+0x2cc>)
 8006190:	f7fa fc3c 	bl	8000a0c <__aeabi_dcmpun>
 8006194:	bb70      	cbnz	r0, 80061f4 <_printf_float+0xc0>
 8006196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	4b98      	ldr	r3, [pc, #608]	@ (8006400 <_printf_float+0x2cc>)
 80061a0:	f7fa fc16 	bl	80009d0 <__aeabi_dcmple>
 80061a4:	bb30      	cbnz	r0, 80061f4 <_printf_float+0xc0>
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4640      	mov	r0, r8
 80061ac:	4649      	mov	r1, r9
 80061ae:	f7fa fc05 	bl	80009bc <__aeabi_dcmplt>
 80061b2:	b110      	cbz	r0, 80061ba <_printf_float+0x86>
 80061b4:	232d      	movs	r3, #45	@ 0x2d
 80061b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ba:	4a92      	ldr	r2, [pc, #584]	@ (8006404 <_printf_float+0x2d0>)
 80061bc:	4b92      	ldr	r3, [pc, #584]	@ (8006408 <_printf_float+0x2d4>)
 80061be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061c2:	bf94      	ite	ls
 80061c4:	4690      	movls	r8, r2
 80061c6:	4698      	movhi	r8, r3
 80061c8:	2303      	movs	r3, #3
 80061ca:	f04f 0900 	mov.w	r9, #0
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	f02b 0304 	bic.w	r3, fp, #4
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	4633      	mov	r3, r6
 80061d8:	4621      	mov	r1, r4
 80061da:	4628      	mov	r0, r5
 80061dc:	9700      	str	r7, [sp, #0]
 80061de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80061e0:	f000 f9d4 	bl	800658c <_printf_common>
 80061e4:	3001      	adds	r0, #1
 80061e6:	f040 8090 	bne.w	800630a <_printf_float+0x1d6>
 80061ea:	f04f 30ff 	mov.w	r0, #4294967295
 80061ee:	b011      	add	sp, #68	@ 0x44
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4642      	mov	r2, r8
 80061f6:	464b      	mov	r3, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	4649      	mov	r1, r9
 80061fc:	f7fa fc06 	bl	8000a0c <__aeabi_dcmpun>
 8006200:	b148      	cbz	r0, 8006216 <_printf_float+0xe2>
 8006202:	464b      	mov	r3, r9
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfb8      	it	lt
 8006208:	232d      	movlt	r3, #45	@ 0x2d
 800620a:	4a80      	ldr	r2, [pc, #512]	@ (800640c <_printf_float+0x2d8>)
 800620c:	bfb8      	it	lt
 800620e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006212:	4b7f      	ldr	r3, [pc, #508]	@ (8006410 <_printf_float+0x2dc>)
 8006214:	e7d3      	b.n	80061be <_printf_float+0x8a>
 8006216:	6863      	ldr	r3, [r4, #4]
 8006218:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	d13f      	bne.n	80062a0 <_printf_float+0x16c>
 8006220:	2306      	movs	r3, #6
 8006222:	6063      	str	r3, [r4, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800622a:	6023      	str	r3, [r4, #0]
 800622c:	9206      	str	r2, [sp, #24]
 800622e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006230:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006234:	aa0d      	add	r2, sp, #52	@ 0x34
 8006236:	9203      	str	r2, [sp, #12]
 8006238:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800623c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006240:	6863      	ldr	r3, [r4, #4]
 8006242:	4642      	mov	r2, r8
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	4628      	mov	r0, r5
 8006248:	464b      	mov	r3, r9
 800624a:	910a      	str	r1, [sp, #40]	@ 0x28
 800624c:	f7ff fed4 	bl	8005ff8 <__cvt>
 8006250:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006252:	4680      	mov	r8, r0
 8006254:	2947      	cmp	r1, #71	@ 0x47
 8006256:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006258:	d128      	bne.n	80062ac <_printf_float+0x178>
 800625a:	1cc8      	adds	r0, r1, #3
 800625c:	db02      	blt.n	8006264 <_printf_float+0x130>
 800625e:	6863      	ldr	r3, [r4, #4]
 8006260:	4299      	cmp	r1, r3
 8006262:	dd40      	ble.n	80062e6 <_printf_float+0x1b2>
 8006264:	f1aa 0a02 	sub.w	sl, sl, #2
 8006268:	fa5f fa8a 	uxtb.w	sl, sl
 800626c:	4652      	mov	r2, sl
 800626e:	3901      	subs	r1, #1
 8006270:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006274:	910d      	str	r1, [sp, #52]	@ 0x34
 8006276:	f7ff ff23 	bl	80060c0 <__exponent>
 800627a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800627c:	4681      	mov	r9, r0
 800627e:	1813      	adds	r3, r2, r0
 8006280:	2a01      	cmp	r2, #1
 8006282:	6123      	str	r3, [r4, #16]
 8006284:	dc02      	bgt.n	800628c <_printf_float+0x158>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	07d2      	lsls	r2, r2, #31
 800628a:	d501      	bpl.n	8006290 <_printf_float+0x15c>
 800628c:	3301      	adds	r3, #1
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006294:	2b00      	cmp	r3, #0
 8006296:	d09e      	beq.n	80061d6 <_printf_float+0xa2>
 8006298:	232d      	movs	r3, #45	@ 0x2d
 800629a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629e:	e79a      	b.n	80061d6 <_printf_float+0xa2>
 80062a0:	2947      	cmp	r1, #71	@ 0x47
 80062a2:	d1bf      	bne.n	8006224 <_printf_float+0xf0>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1bd      	bne.n	8006224 <_printf_float+0xf0>
 80062a8:	2301      	movs	r3, #1
 80062aa:	e7ba      	b.n	8006222 <_printf_float+0xee>
 80062ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062b0:	d9dc      	bls.n	800626c <_printf_float+0x138>
 80062b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062b6:	d118      	bne.n	80062ea <_printf_float+0x1b6>
 80062b8:	2900      	cmp	r1, #0
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	dd0b      	ble.n	80062d6 <_printf_float+0x1a2>
 80062be:	6121      	str	r1, [r4, #16]
 80062c0:	b913      	cbnz	r3, 80062c8 <_printf_float+0x194>
 80062c2:	6822      	ldr	r2, [r4, #0]
 80062c4:	07d0      	lsls	r0, r2, #31
 80062c6:	d502      	bpl.n	80062ce <_printf_float+0x19a>
 80062c8:	3301      	adds	r3, #1
 80062ca:	440b      	add	r3, r1
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062d4:	e7dc      	b.n	8006290 <_printf_float+0x15c>
 80062d6:	b913      	cbnz	r3, 80062de <_printf_float+0x1aa>
 80062d8:	6822      	ldr	r2, [r4, #0]
 80062da:	07d2      	lsls	r2, r2, #31
 80062dc:	d501      	bpl.n	80062e2 <_printf_float+0x1ae>
 80062de:	3302      	adds	r3, #2
 80062e0:	e7f4      	b.n	80062cc <_printf_float+0x198>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e7f2      	b.n	80062cc <_printf_float+0x198>
 80062e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062ec:	4299      	cmp	r1, r3
 80062ee:	db05      	blt.n	80062fc <_printf_float+0x1c8>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	6121      	str	r1, [r4, #16]
 80062f4:	07d8      	lsls	r0, r3, #31
 80062f6:	d5ea      	bpl.n	80062ce <_printf_float+0x19a>
 80062f8:	1c4b      	adds	r3, r1, #1
 80062fa:	e7e7      	b.n	80062cc <_printf_float+0x198>
 80062fc:	2900      	cmp	r1, #0
 80062fe:	bfcc      	ite	gt
 8006300:	2201      	movgt	r2, #1
 8006302:	f1c1 0202 	rsble	r2, r1, #2
 8006306:	4413      	add	r3, r2
 8006308:	e7e0      	b.n	80062cc <_printf_float+0x198>
 800630a:	6823      	ldr	r3, [r4, #0]
 800630c:	055a      	lsls	r2, r3, #21
 800630e:	d407      	bmi.n	8006320 <_printf_float+0x1ec>
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	4642      	mov	r2, r8
 8006314:	4631      	mov	r1, r6
 8006316:	4628      	mov	r0, r5
 8006318:	47b8      	blx	r7
 800631a:	3001      	adds	r0, #1
 800631c:	d12b      	bne.n	8006376 <_printf_float+0x242>
 800631e:	e764      	b.n	80061ea <_printf_float+0xb6>
 8006320:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006324:	f240 80dc 	bls.w	80064e0 <_printf_float+0x3ac>
 8006328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	f7fa fb3a 	bl	80009a8 <__aeabi_dcmpeq>
 8006334:	2800      	cmp	r0, #0
 8006336:	d033      	beq.n	80063a0 <_printf_float+0x26c>
 8006338:	2301      	movs	r3, #1
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	4a35      	ldr	r2, [pc, #212]	@ (8006414 <_printf_float+0x2e0>)
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af51 	beq.w	80061ea <_printf_float+0xb6>
 8006348:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800634c:	4543      	cmp	r3, r8
 800634e:	db02      	blt.n	8006356 <_printf_float+0x222>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	07d8      	lsls	r0, r3, #31
 8006354:	d50f      	bpl.n	8006376 <_printf_float+0x242>
 8006356:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800635a:	4631      	mov	r1, r6
 800635c:	4628      	mov	r0, r5
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	f43f af42 	beq.w	80061ea <_printf_float+0xb6>
 8006366:	f04f 0900 	mov.w	r9, #0
 800636a:	f108 38ff 	add.w	r8, r8, #4294967295
 800636e:	f104 0a1a 	add.w	sl, r4, #26
 8006372:	45c8      	cmp	r8, r9
 8006374:	dc09      	bgt.n	800638a <_printf_float+0x256>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	079b      	lsls	r3, r3, #30
 800637a:	f100 8102 	bmi.w	8006582 <_printf_float+0x44e>
 800637e:	68e0      	ldr	r0, [r4, #12]
 8006380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006382:	4298      	cmp	r0, r3
 8006384:	bfb8      	it	lt
 8006386:	4618      	movlt	r0, r3
 8006388:	e731      	b.n	80061ee <_printf_float+0xba>
 800638a:	2301      	movs	r3, #1
 800638c:	4652      	mov	r2, sl
 800638e:	4631      	mov	r1, r6
 8006390:	4628      	mov	r0, r5
 8006392:	47b8      	blx	r7
 8006394:	3001      	adds	r0, #1
 8006396:	f43f af28 	beq.w	80061ea <_printf_float+0xb6>
 800639a:	f109 0901 	add.w	r9, r9, #1
 800639e:	e7e8      	b.n	8006372 <_printf_float+0x23e>
 80063a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dc38      	bgt.n	8006418 <_printf_float+0x2e4>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	4a19      	ldr	r2, [pc, #100]	@ (8006414 <_printf_float+0x2e0>)
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f af1a 	beq.w	80061ea <_printf_float+0xb6>
 80063b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80063ba:	ea59 0303 	orrs.w	r3, r9, r3
 80063be:	d102      	bne.n	80063c6 <_printf_float+0x292>
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	07d9      	lsls	r1, r3, #31
 80063c4:	d5d7      	bpl.n	8006376 <_printf_float+0x242>
 80063c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f af0a 	beq.w	80061ea <_printf_float+0xb6>
 80063d6:	f04f 0a00 	mov.w	sl, #0
 80063da:	f104 0b1a 	add.w	fp, r4, #26
 80063de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063e0:	425b      	negs	r3, r3
 80063e2:	4553      	cmp	r3, sl
 80063e4:	dc01      	bgt.n	80063ea <_printf_float+0x2b6>
 80063e6:	464b      	mov	r3, r9
 80063e8:	e793      	b.n	8006312 <_printf_float+0x1de>
 80063ea:	2301      	movs	r3, #1
 80063ec:	465a      	mov	r2, fp
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f aef8 	beq.w	80061ea <_printf_float+0xb6>
 80063fa:	f10a 0a01 	add.w	sl, sl, #1
 80063fe:	e7ee      	b.n	80063de <_printf_float+0x2aa>
 8006400:	7fefffff 	.word	0x7fefffff
 8006404:	08009760 	.word	0x08009760
 8006408:	08009764 	.word	0x08009764
 800640c:	08009768 	.word	0x08009768
 8006410:	0800976c 	.word	0x0800976c
 8006414:	08009770 	.word	0x08009770
 8006418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800641a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800641e:	4553      	cmp	r3, sl
 8006420:	bfa8      	it	ge
 8006422:	4653      	movge	r3, sl
 8006424:	2b00      	cmp	r3, #0
 8006426:	4699      	mov	r9, r3
 8006428:	dc36      	bgt.n	8006498 <_printf_float+0x364>
 800642a:	f04f 0b00 	mov.w	fp, #0
 800642e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006432:	f104 021a 	add.w	r2, r4, #26
 8006436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006438:	930a      	str	r3, [sp, #40]	@ 0x28
 800643a:	eba3 0309 	sub.w	r3, r3, r9
 800643e:	455b      	cmp	r3, fp
 8006440:	dc31      	bgt.n	80064a6 <_printf_float+0x372>
 8006442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006444:	459a      	cmp	sl, r3
 8006446:	dc3a      	bgt.n	80064be <_printf_float+0x38a>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	07da      	lsls	r2, r3, #31
 800644c:	d437      	bmi.n	80064be <_printf_float+0x38a>
 800644e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006450:	ebaa 0903 	sub.w	r9, sl, r3
 8006454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006456:	ebaa 0303 	sub.w	r3, sl, r3
 800645a:	4599      	cmp	r9, r3
 800645c:	bfa8      	it	ge
 800645e:	4699      	movge	r9, r3
 8006460:	f1b9 0f00 	cmp.w	r9, #0
 8006464:	dc33      	bgt.n	80064ce <_printf_float+0x39a>
 8006466:	f04f 0800 	mov.w	r8, #0
 800646a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800646e:	f104 0b1a 	add.w	fp, r4, #26
 8006472:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006474:	ebaa 0303 	sub.w	r3, sl, r3
 8006478:	eba3 0309 	sub.w	r3, r3, r9
 800647c:	4543      	cmp	r3, r8
 800647e:	f77f af7a 	ble.w	8006376 <_printf_float+0x242>
 8006482:	2301      	movs	r3, #1
 8006484:	465a      	mov	r2, fp
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f aeac 	beq.w	80061ea <_printf_float+0xb6>
 8006492:	f108 0801 	add.w	r8, r8, #1
 8006496:	e7ec      	b.n	8006472 <_printf_float+0x33e>
 8006498:	4642      	mov	r2, r8
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d1c2      	bne.n	800642a <_printf_float+0x2f6>
 80064a4:	e6a1      	b.n	80061ea <_printf_float+0xb6>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	920a      	str	r2, [sp, #40]	@ 0x28
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae9a 	beq.w	80061ea <_printf_float+0xb6>
 80064b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064b8:	f10b 0b01 	add.w	fp, fp, #1
 80064bc:	e7bb      	b.n	8006436 <_printf_float+0x302>
 80064be:	4631      	mov	r1, r6
 80064c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	d1c0      	bne.n	800644e <_printf_float+0x31a>
 80064cc:	e68d      	b.n	80061ea <_printf_float+0xb6>
 80064ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064d0:	464b      	mov	r3, r9
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	4442      	add	r2, r8
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	d1c3      	bne.n	8006466 <_printf_float+0x332>
 80064de:	e684      	b.n	80061ea <_printf_float+0xb6>
 80064e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80064e4:	f1ba 0f01 	cmp.w	sl, #1
 80064e8:	dc01      	bgt.n	80064ee <_printf_float+0x3ba>
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d536      	bpl.n	800655c <_printf_float+0x428>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4642      	mov	r2, r8
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f ae76 	beq.w	80061ea <_printf_float+0xb6>
 80064fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae6e 	beq.w	80061ea <_printf_float+0xb6>
 800650e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800651a:	f7fa fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800651e:	b9c0      	cbnz	r0, 8006552 <_printf_float+0x41e>
 8006520:	4653      	mov	r3, sl
 8006522:	f108 0201 	add.w	r2, r8, #1
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	d10c      	bne.n	800654a <_printf_float+0x416>
 8006530:	e65b      	b.n	80061ea <_printf_float+0xb6>
 8006532:	2301      	movs	r3, #1
 8006534:	465a      	mov	r2, fp
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	f43f ae54 	beq.w	80061ea <_printf_float+0xb6>
 8006542:	f108 0801 	add.w	r8, r8, #1
 8006546:	45d0      	cmp	r8, sl
 8006548:	dbf3      	blt.n	8006532 <_printf_float+0x3fe>
 800654a:	464b      	mov	r3, r9
 800654c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006550:	e6e0      	b.n	8006314 <_printf_float+0x1e0>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	f104 0b1a 	add.w	fp, r4, #26
 800655a:	e7f4      	b.n	8006546 <_printf_float+0x412>
 800655c:	2301      	movs	r3, #1
 800655e:	4642      	mov	r2, r8
 8006560:	e7e1      	b.n	8006526 <_printf_float+0x3f2>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae3c 	beq.w	80061ea <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	4543      	cmp	r3, r8
 800657e:	dcf0      	bgt.n	8006562 <_printf_float+0x42e>
 8006580:	e6fd      	b.n	800637e <_printf_float+0x24a>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0919 	add.w	r9, r4, #25
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x442>

0800658c <_printf_common>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	4616      	mov	r6, r2
 8006592:	4698      	mov	r8, r3
 8006594:	688a      	ldr	r2, [r1, #8]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	4607      	mov	r7, r0
 800659a:	4293      	cmp	r3, r2
 800659c:	bfb8      	it	lt
 800659e:	4613      	movlt	r3, r2
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065a6:	460c      	mov	r4, r1
 80065a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065ac:	b10a      	cbz	r2, 80065b2 <_printf_common+0x26>
 80065ae:	3301      	adds	r3, #1
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	6833      	ldrmi	r3, [r6, #0]
 80065ba:	3302      	addmi	r3, #2
 80065bc:	6033      	strmi	r3, [r6, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	f015 0506 	ands.w	r5, r5, #6
 80065c4:	d106      	bne.n	80065d4 <_printf_common+0x48>
 80065c6:	f104 0a19 	add.w	sl, r4, #25
 80065ca:	68e3      	ldr	r3, [r4, #12]
 80065cc:	6832      	ldr	r2, [r6, #0]
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc2b      	bgt.n	800662c <_printf_common+0xa0>
 80065d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	3b00      	subs	r3, #0
 80065dc:	bf18      	it	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	0692      	lsls	r2, r2, #26
 80065e2:	d430      	bmi.n	8006646 <_printf_common+0xba>
 80065e4:	4641      	mov	r1, r8
 80065e6:	4638      	mov	r0, r7
 80065e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065ec:	47c8      	blx	r9
 80065ee:	3001      	adds	r0, #1
 80065f0:	d023      	beq.n	800663a <_printf_common+0xae>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	f003 0306 	and.w	r3, r3, #6
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	bf14      	ite	ne
 80065fe:	2500      	movne	r5, #0
 8006600:	6833      	ldreq	r3, [r6, #0]
 8006602:	f04f 0600 	mov.w	r6, #0
 8006606:	bf08      	it	eq
 8006608:	68e5      	ldreq	r5, [r4, #12]
 800660a:	f104 041a 	add.w	r4, r4, #26
 800660e:	bf08      	it	eq
 8006610:	1aed      	subeq	r5, r5, r3
 8006612:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006616:	bf08      	it	eq
 8006618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800661c:	4293      	cmp	r3, r2
 800661e:	bfc4      	itt	gt
 8006620:	1a9b      	subgt	r3, r3, r2
 8006622:	18ed      	addgt	r5, r5, r3
 8006624:	42b5      	cmp	r5, r6
 8006626:	d11a      	bne.n	800665e <_printf_common+0xd2>
 8006628:	2000      	movs	r0, #0
 800662a:	e008      	b.n	800663e <_printf_common+0xb2>
 800662c:	2301      	movs	r3, #1
 800662e:	4652      	mov	r2, sl
 8006630:	4641      	mov	r1, r8
 8006632:	4638      	mov	r0, r7
 8006634:	47c8      	blx	r9
 8006636:	3001      	adds	r0, #1
 8006638:	d103      	bne.n	8006642 <_printf_common+0xb6>
 800663a:	f04f 30ff 	mov.w	r0, #4294967295
 800663e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006642:	3501      	adds	r5, #1
 8006644:	e7c1      	b.n	80065ca <_printf_common+0x3e>
 8006646:	2030      	movs	r0, #48	@ 0x30
 8006648:	18e1      	adds	r1, r4, r3
 800664a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006654:	4422      	add	r2, r4
 8006656:	3302      	adds	r3, #2
 8006658:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800665c:	e7c2      	b.n	80065e4 <_printf_common+0x58>
 800665e:	2301      	movs	r3, #1
 8006660:	4622      	mov	r2, r4
 8006662:	4641      	mov	r1, r8
 8006664:	4638      	mov	r0, r7
 8006666:	47c8      	blx	r9
 8006668:	3001      	adds	r0, #1
 800666a:	d0e6      	beq.n	800663a <_printf_common+0xae>
 800666c:	3601      	adds	r6, #1
 800666e:	e7d9      	b.n	8006624 <_printf_common+0x98>

08006670 <_printf_i>:
 8006670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	7e0f      	ldrb	r7, [r1, #24]
 8006676:	4691      	mov	r9, r2
 8006678:	2f78      	cmp	r7, #120	@ 0x78
 800667a:	4680      	mov	r8, r0
 800667c:	460c      	mov	r4, r1
 800667e:	469a      	mov	sl, r3
 8006680:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006686:	d807      	bhi.n	8006698 <_printf_i+0x28>
 8006688:	2f62      	cmp	r7, #98	@ 0x62
 800668a:	d80a      	bhi.n	80066a2 <_printf_i+0x32>
 800668c:	2f00      	cmp	r7, #0
 800668e:	f000 80d3 	beq.w	8006838 <_printf_i+0x1c8>
 8006692:	2f58      	cmp	r7, #88	@ 0x58
 8006694:	f000 80ba 	beq.w	800680c <_printf_i+0x19c>
 8006698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800669c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066a0:	e03a      	b.n	8006718 <_printf_i+0xa8>
 80066a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066a6:	2b15      	cmp	r3, #21
 80066a8:	d8f6      	bhi.n	8006698 <_printf_i+0x28>
 80066aa:	a101      	add	r1, pc, #4	@ (adr r1, 80066b0 <_printf_i+0x40>)
 80066ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066b0:	08006709 	.word	0x08006709
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	08006699 	.word	0x08006699
 80066bc:	08006699 	.word	0x08006699
 80066c0:	08006699 	.word	0x08006699
 80066c4:	08006699 	.word	0x08006699
 80066c8:	0800671d 	.word	0x0800671d
 80066cc:	08006699 	.word	0x08006699
 80066d0:	08006699 	.word	0x08006699
 80066d4:	08006699 	.word	0x08006699
 80066d8:	08006699 	.word	0x08006699
 80066dc:	0800681f 	.word	0x0800681f
 80066e0:	08006747 	.word	0x08006747
 80066e4:	080067d9 	.word	0x080067d9
 80066e8:	08006699 	.word	0x08006699
 80066ec:	08006699 	.word	0x08006699
 80066f0:	08006841 	.word	0x08006841
 80066f4:	08006699 	.word	0x08006699
 80066f8:	08006747 	.word	0x08006747
 80066fc:	08006699 	.word	0x08006699
 8006700:	08006699 	.word	0x08006699
 8006704:	080067e1 	.word	0x080067e1
 8006708:	6833      	ldr	r3, [r6, #0]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6032      	str	r2, [r6, #0]
 8006710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006718:	2301      	movs	r3, #1
 800671a:	e09e      	b.n	800685a <_printf_i+0x1ea>
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	6820      	ldr	r0, [r4, #0]
 8006720:	1d19      	adds	r1, r3, #4
 8006722:	6031      	str	r1, [r6, #0]
 8006724:	0606      	lsls	r6, r0, #24
 8006726:	d501      	bpl.n	800672c <_printf_i+0xbc>
 8006728:	681d      	ldr	r5, [r3, #0]
 800672a:	e003      	b.n	8006734 <_printf_i+0xc4>
 800672c:	0645      	lsls	r5, r0, #25
 800672e:	d5fb      	bpl.n	8006728 <_printf_i+0xb8>
 8006730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006734:	2d00      	cmp	r5, #0
 8006736:	da03      	bge.n	8006740 <_printf_i+0xd0>
 8006738:	232d      	movs	r3, #45	@ 0x2d
 800673a:	426d      	negs	r5, r5
 800673c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006740:	230a      	movs	r3, #10
 8006742:	4859      	ldr	r0, [pc, #356]	@ (80068a8 <_printf_i+0x238>)
 8006744:	e011      	b.n	800676a <_printf_i+0xfa>
 8006746:	6821      	ldr	r1, [r4, #0]
 8006748:	6833      	ldr	r3, [r6, #0]
 800674a:	0608      	lsls	r0, r1, #24
 800674c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006750:	d402      	bmi.n	8006758 <_printf_i+0xe8>
 8006752:	0649      	lsls	r1, r1, #25
 8006754:	bf48      	it	mi
 8006756:	b2ad      	uxthmi	r5, r5
 8006758:	2f6f      	cmp	r7, #111	@ 0x6f
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	bf14      	ite	ne
 800675e:	230a      	movne	r3, #10
 8006760:	2308      	moveq	r3, #8
 8006762:	4851      	ldr	r0, [pc, #324]	@ (80068a8 <_printf_i+0x238>)
 8006764:	2100      	movs	r1, #0
 8006766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800676a:	6866      	ldr	r6, [r4, #4]
 800676c:	2e00      	cmp	r6, #0
 800676e:	bfa8      	it	ge
 8006770:	6821      	ldrge	r1, [r4, #0]
 8006772:	60a6      	str	r6, [r4, #8]
 8006774:	bfa4      	itt	ge
 8006776:	f021 0104 	bicge.w	r1, r1, #4
 800677a:	6021      	strge	r1, [r4, #0]
 800677c:	b90d      	cbnz	r5, 8006782 <_printf_i+0x112>
 800677e:	2e00      	cmp	r6, #0
 8006780:	d04b      	beq.n	800681a <_printf_i+0x1aa>
 8006782:	4616      	mov	r6, r2
 8006784:	fbb5 f1f3 	udiv	r1, r5, r3
 8006788:	fb03 5711 	mls	r7, r3, r1, r5
 800678c:	5dc7      	ldrb	r7, [r0, r7]
 800678e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006792:	462f      	mov	r7, r5
 8006794:	42bb      	cmp	r3, r7
 8006796:	460d      	mov	r5, r1
 8006798:	d9f4      	bls.n	8006784 <_printf_i+0x114>
 800679a:	2b08      	cmp	r3, #8
 800679c:	d10b      	bne.n	80067b6 <_printf_i+0x146>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	07df      	lsls	r7, r3, #31
 80067a2:	d508      	bpl.n	80067b6 <_printf_i+0x146>
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	6861      	ldr	r1, [r4, #4]
 80067a8:	4299      	cmp	r1, r3
 80067aa:	bfde      	ittt	le
 80067ac:	2330      	movle	r3, #48	@ 0x30
 80067ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067b6:	1b92      	subs	r2, r2, r6
 80067b8:	6122      	str	r2, [r4, #16]
 80067ba:	464b      	mov	r3, r9
 80067bc:	4621      	mov	r1, r4
 80067be:	4640      	mov	r0, r8
 80067c0:	f8cd a000 	str.w	sl, [sp]
 80067c4:	aa03      	add	r2, sp, #12
 80067c6:	f7ff fee1 	bl	800658c <_printf_common>
 80067ca:	3001      	adds	r0, #1
 80067cc:	d14a      	bne.n	8006864 <_printf_i+0x1f4>
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	b004      	add	sp, #16
 80067d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	f043 0320 	orr.w	r3, r3, #32
 80067de:	6023      	str	r3, [r4, #0]
 80067e0:	2778      	movs	r7, #120	@ 0x78
 80067e2:	4832      	ldr	r0, [pc, #200]	@ (80068ac <_printf_i+0x23c>)
 80067e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	6831      	ldr	r1, [r6, #0]
 80067ec:	061f      	lsls	r7, r3, #24
 80067ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80067f2:	d402      	bmi.n	80067fa <_printf_i+0x18a>
 80067f4:	065f      	lsls	r7, r3, #25
 80067f6:	bf48      	it	mi
 80067f8:	b2ad      	uxthmi	r5, r5
 80067fa:	6031      	str	r1, [r6, #0]
 80067fc:	07d9      	lsls	r1, r3, #31
 80067fe:	bf44      	itt	mi
 8006800:	f043 0320 	orrmi.w	r3, r3, #32
 8006804:	6023      	strmi	r3, [r4, #0]
 8006806:	b11d      	cbz	r5, 8006810 <_printf_i+0x1a0>
 8006808:	2310      	movs	r3, #16
 800680a:	e7ab      	b.n	8006764 <_printf_i+0xf4>
 800680c:	4826      	ldr	r0, [pc, #152]	@ (80068a8 <_printf_i+0x238>)
 800680e:	e7e9      	b.n	80067e4 <_printf_i+0x174>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	f023 0320 	bic.w	r3, r3, #32
 8006816:	6023      	str	r3, [r4, #0]
 8006818:	e7f6      	b.n	8006808 <_printf_i+0x198>
 800681a:	4616      	mov	r6, r2
 800681c:	e7bd      	b.n	800679a <_printf_i+0x12a>
 800681e:	6833      	ldr	r3, [r6, #0]
 8006820:	6825      	ldr	r5, [r4, #0]
 8006822:	1d18      	adds	r0, r3, #4
 8006824:	6961      	ldr	r1, [r4, #20]
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	062e      	lsls	r6, r5, #24
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	d501      	bpl.n	8006832 <_printf_i+0x1c2>
 800682e:	6019      	str	r1, [r3, #0]
 8006830:	e002      	b.n	8006838 <_printf_i+0x1c8>
 8006832:	0668      	lsls	r0, r5, #25
 8006834:	d5fb      	bpl.n	800682e <_printf_i+0x1be>
 8006836:	8019      	strh	r1, [r3, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	4616      	mov	r6, r2
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	e7bc      	b.n	80067ba <_printf_i+0x14a>
 8006840:	6833      	ldr	r3, [r6, #0]
 8006842:	2100      	movs	r1, #0
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	6032      	str	r2, [r6, #0]
 8006848:	681e      	ldr	r6, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	4630      	mov	r0, r6
 800684e:	f000 f9e6 	bl	8006c1e <memchr>
 8006852:	b108      	cbz	r0, 8006858 <_printf_i+0x1e8>
 8006854:	1b80      	subs	r0, r0, r6
 8006856:	6060      	str	r0, [r4, #4]
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	2300      	movs	r3, #0
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006862:	e7aa      	b.n	80067ba <_printf_i+0x14a>
 8006864:	4632      	mov	r2, r6
 8006866:	4649      	mov	r1, r9
 8006868:	4640      	mov	r0, r8
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	47d0      	blx	sl
 800686e:	3001      	adds	r0, #1
 8006870:	d0ad      	beq.n	80067ce <_printf_i+0x15e>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	079b      	lsls	r3, r3, #30
 8006876:	d413      	bmi.n	80068a0 <_printf_i+0x230>
 8006878:	68e0      	ldr	r0, [r4, #12]
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	4298      	cmp	r0, r3
 800687e:	bfb8      	it	lt
 8006880:	4618      	movlt	r0, r3
 8006882:	e7a6      	b.n	80067d2 <_printf_i+0x162>
 8006884:	2301      	movs	r3, #1
 8006886:	4632      	mov	r2, r6
 8006888:	4649      	mov	r1, r9
 800688a:	4640      	mov	r0, r8
 800688c:	47d0      	blx	sl
 800688e:	3001      	adds	r0, #1
 8006890:	d09d      	beq.n	80067ce <_printf_i+0x15e>
 8006892:	3501      	adds	r5, #1
 8006894:	68e3      	ldr	r3, [r4, #12]
 8006896:	9903      	ldr	r1, [sp, #12]
 8006898:	1a5b      	subs	r3, r3, r1
 800689a:	42ab      	cmp	r3, r5
 800689c:	dcf2      	bgt.n	8006884 <_printf_i+0x214>
 800689e:	e7eb      	b.n	8006878 <_printf_i+0x208>
 80068a0:	2500      	movs	r5, #0
 80068a2:	f104 0619 	add.w	r6, r4, #25
 80068a6:	e7f5      	b.n	8006894 <_printf_i+0x224>
 80068a8:	08009772 	.word	0x08009772
 80068ac:	08009783 	.word	0x08009783

080068b0 <std>:
 80068b0:	2300      	movs	r3, #0
 80068b2:	b510      	push	{r4, lr}
 80068b4:	4604      	mov	r4, r0
 80068b6:	e9c0 3300 	strd	r3, r3, [r0]
 80068ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068be:	6083      	str	r3, [r0, #8]
 80068c0:	8181      	strh	r1, [r0, #12]
 80068c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80068c4:	81c2      	strh	r2, [r0, #14]
 80068c6:	6183      	str	r3, [r0, #24]
 80068c8:	4619      	mov	r1, r3
 80068ca:	2208      	movs	r2, #8
 80068cc:	305c      	adds	r0, #92	@ 0x5c
 80068ce:	f000 f914 	bl	8006afa <memset>
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <std+0x58>)
 80068d4:	6224      	str	r4, [r4, #32]
 80068d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80068d8:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <std+0x5c>)
 80068da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <std+0x60>)
 80068de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <std+0x64>)
 80068e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80068e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <std+0x68>)
 80068e6:	429c      	cmp	r4, r3
 80068e8:	d006      	beq.n	80068f8 <std+0x48>
 80068ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068ee:	4294      	cmp	r4, r2
 80068f0:	d002      	beq.n	80068f8 <std+0x48>
 80068f2:	33d0      	adds	r3, #208	@ 0xd0
 80068f4:	429c      	cmp	r4, r3
 80068f6:	d105      	bne.n	8006904 <std+0x54>
 80068f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006900:	f000 b98a 	b.w	8006c18 <__retarget_lock_init_recursive>
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	08006a75 	.word	0x08006a75
 800690c:	08006a97 	.word	0x08006a97
 8006910:	08006acf 	.word	0x08006acf
 8006914:	08006af3 	.word	0x08006af3
 8006918:	20000310 	.word	0x20000310

0800691c <stdio_exit_handler>:
 800691c:	4a02      	ldr	r2, [pc, #8]	@ (8006928 <stdio_exit_handler+0xc>)
 800691e:	4903      	ldr	r1, [pc, #12]	@ (800692c <stdio_exit_handler+0x10>)
 8006920:	4803      	ldr	r0, [pc, #12]	@ (8006930 <stdio_exit_handler+0x14>)
 8006922:	f000 b869 	b.w	80069f8 <_fwalk_sglue>
 8006926:	bf00      	nop
 8006928:	20000014 	.word	0x20000014
 800692c:	08008eb1 	.word	0x08008eb1
 8006930:	20000190 	.word	0x20000190

08006934 <cleanup_stdio>:
 8006934:	6841      	ldr	r1, [r0, #4]
 8006936:	4b0c      	ldr	r3, [pc, #48]	@ (8006968 <cleanup_stdio+0x34>)
 8006938:	b510      	push	{r4, lr}
 800693a:	4299      	cmp	r1, r3
 800693c:	4604      	mov	r4, r0
 800693e:	d001      	beq.n	8006944 <cleanup_stdio+0x10>
 8006940:	f002 fab6 	bl	8008eb0 <_fflush_r>
 8006944:	68a1      	ldr	r1, [r4, #8]
 8006946:	4b09      	ldr	r3, [pc, #36]	@ (800696c <cleanup_stdio+0x38>)
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <cleanup_stdio+0x1e>
 800694c:	4620      	mov	r0, r4
 800694e:	f002 faaf 	bl	8008eb0 <_fflush_r>
 8006952:	68e1      	ldr	r1, [r4, #12]
 8006954:	4b06      	ldr	r3, [pc, #24]	@ (8006970 <cleanup_stdio+0x3c>)
 8006956:	4299      	cmp	r1, r3
 8006958:	d004      	beq.n	8006964 <cleanup_stdio+0x30>
 800695a:	4620      	mov	r0, r4
 800695c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006960:	f002 baa6 	b.w	8008eb0 <_fflush_r>
 8006964:	bd10      	pop	{r4, pc}
 8006966:	bf00      	nop
 8006968:	20000310 	.word	0x20000310
 800696c:	20000378 	.word	0x20000378
 8006970:	200003e0 	.word	0x200003e0

08006974 <global_stdio_init.part.0>:
 8006974:	b510      	push	{r4, lr}
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <global_stdio_init.part.0+0x30>)
 8006978:	4c0b      	ldr	r4, [pc, #44]	@ (80069a8 <global_stdio_init.part.0+0x34>)
 800697a:	4a0c      	ldr	r2, [pc, #48]	@ (80069ac <global_stdio_init.part.0+0x38>)
 800697c:	4620      	mov	r0, r4
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	2104      	movs	r1, #4
 8006982:	2200      	movs	r2, #0
 8006984:	f7ff ff94 	bl	80068b0 <std>
 8006988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800698c:	2201      	movs	r2, #1
 800698e:	2109      	movs	r1, #9
 8006990:	f7ff ff8e 	bl	80068b0 <std>
 8006994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006998:	2202      	movs	r2, #2
 800699a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800699e:	2112      	movs	r1, #18
 80069a0:	f7ff bf86 	b.w	80068b0 <std>
 80069a4:	20000448 	.word	0x20000448
 80069a8:	20000310 	.word	0x20000310
 80069ac:	0800691d 	.word	0x0800691d

080069b0 <__sfp_lock_acquire>:
 80069b0:	4801      	ldr	r0, [pc, #4]	@ (80069b8 <__sfp_lock_acquire+0x8>)
 80069b2:	f000 b932 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	20000451 	.word	0x20000451

080069bc <__sfp_lock_release>:
 80069bc:	4801      	ldr	r0, [pc, #4]	@ (80069c4 <__sfp_lock_release+0x8>)
 80069be:	f000 b92d 	b.w	8006c1c <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	20000451 	.word	0x20000451

080069c8 <__sinit>:
 80069c8:	b510      	push	{r4, lr}
 80069ca:	4604      	mov	r4, r0
 80069cc:	f7ff fff0 	bl	80069b0 <__sfp_lock_acquire>
 80069d0:	6a23      	ldr	r3, [r4, #32]
 80069d2:	b11b      	cbz	r3, 80069dc <__sinit+0x14>
 80069d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d8:	f7ff bff0 	b.w	80069bc <__sfp_lock_release>
 80069dc:	4b04      	ldr	r3, [pc, #16]	@ (80069f0 <__sinit+0x28>)
 80069de:	6223      	str	r3, [r4, #32]
 80069e0:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <__sinit+0x2c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1f5      	bne.n	80069d4 <__sinit+0xc>
 80069e8:	f7ff ffc4 	bl	8006974 <global_stdio_init.part.0>
 80069ec:	e7f2      	b.n	80069d4 <__sinit+0xc>
 80069ee:	bf00      	nop
 80069f0:	08006935 	.word	0x08006935
 80069f4:	20000448 	.word	0x20000448

080069f8 <_fwalk_sglue>:
 80069f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069fc:	4607      	mov	r7, r0
 80069fe:	4688      	mov	r8, r1
 8006a00:	4614      	mov	r4, r2
 8006a02:	2600      	movs	r6, #0
 8006a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a08:	f1b9 0901 	subs.w	r9, r9, #1
 8006a0c:	d505      	bpl.n	8006a1a <_fwalk_sglue+0x22>
 8006a0e:	6824      	ldr	r4, [r4, #0]
 8006a10:	2c00      	cmp	r4, #0
 8006a12:	d1f7      	bne.n	8006a04 <_fwalk_sglue+0xc>
 8006a14:	4630      	mov	r0, r6
 8006a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d907      	bls.n	8006a30 <_fwalk_sglue+0x38>
 8006a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a24:	3301      	adds	r3, #1
 8006a26:	d003      	beq.n	8006a30 <_fwalk_sglue+0x38>
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	47c0      	blx	r8
 8006a2e:	4306      	orrs	r6, r0
 8006a30:	3568      	adds	r5, #104	@ 0x68
 8006a32:	e7e9      	b.n	8006a08 <_fwalk_sglue+0x10>

08006a34 <siprintf>:
 8006a34:	b40e      	push	{r1, r2, r3}
 8006a36:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a3a:	b500      	push	{lr}
 8006a3c:	b09c      	sub	sp, #112	@ 0x70
 8006a3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	9006      	str	r0, [sp, #24]
 8006a44:	9107      	str	r1, [sp, #28]
 8006a46:	9104      	str	r1, [sp, #16]
 8006a48:	4808      	ldr	r0, [pc, #32]	@ (8006a6c <siprintf+0x38>)
 8006a4a:	4909      	ldr	r1, [pc, #36]	@ (8006a70 <siprintf+0x3c>)
 8006a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a50:	9105      	str	r1, [sp, #20]
 8006a52:	6800      	ldr	r0, [r0, #0]
 8006a54:	a902      	add	r1, sp, #8
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	f002 f8ae 	bl	8008bb8 <_svfiprintf_r>
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	b01c      	add	sp, #112	@ 0x70
 8006a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a68:	b003      	add	sp, #12
 8006a6a:	4770      	bx	lr
 8006a6c:	2000018c 	.word	0x2000018c
 8006a70:	ffff0208 	.word	0xffff0208

08006a74 <__sread>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	460c      	mov	r4, r1
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	f000 f87e 	bl	8006b7c <_read_r>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	bfab      	itete	ge
 8006a84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a86:	89a3      	ldrhlt	r3, [r4, #12]
 8006a88:	181b      	addge	r3, r3, r0
 8006a8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a8e:	bfac      	ite	ge
 8006a90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a92:	81a3      	strhlt	r3, [r4, #12]
 8006a94:	bd10      	pop	{r4, pc}

08006a96 <__swrite>:
 8006a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	461f      	mov	r7, r3
 8006a9c:	898b      	ldrh	r3, [r1, #12]
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	05db      	lsls	r3, r3, #23
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	d505      	bpl.n	8006ab4 <__swrite+0x1e>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	f000 f852 	bl	8006b58 <_lseek_r>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	4632      	mov	r2, r6
 8006ab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006abc:	81a3      	strh	r3, [r4, #12]
 8006abe:	4628      	mov	r0, r5
 8006ac0:	463b      	mov	r3, r7
 8006ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aca:	f000 b869 	b.w	8006ba0 <_write_r>

08006ace <__sseek>:
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 f83f 	bl	8006b58 <_lseek_r>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	bf15      	itete	ne
 8006ae0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ae2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ae6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aea:	81a3      	strheq	r3, [r4, #12]
 8006aec:	bf18      	it	ne
 8006aee:	81a3      	strhne	r3, [r4, #12]
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <__sclose>:
 8006af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af6:	f000 b81f 	b.w	8006b38 <_close_r>

08006afa <memset>:
 8006afa:	4603      	mov	r3, r0
 8006afc:	4402      	add	r2, r0
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d100      	bne.n	8006b04 <memset+0xa>
 8006b02:	4770      	bx	lr
 8006b04:	f803 1b01 	strb.w	r1, [r3], #1
 8006b08:	e7f9      	b.n	8006afe <memset+0x4>

08006b0a <strncmp>:
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	b16a      	cbz	r2, 8006b2a <strncmp+0x20>
 8006b0e:	3901      	subs	r1, #1
 8006b10:	1884      	adds	r4, r0, r2
 8006b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d103      	bne.n	8006b26 <strncmp+0x1c>
 8006b1e:	42a0      	cmp	r0, r4
 8006b20:	d001      	beq.n	8006b26 <strncmp+0x1c>
 8006b22:	2a00      	cmp	r2, #0
 8006b24:	d1f5      	bne.n	8006b12 <strncmp+0x8>
 8006b26:	1ad0      	subs	r0, r2, r3
 8006b28:	bd10      	pop	{r4, pc}
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	e7fc      	b.n	8006b28 <strncmp+0x1e>
	...

08006b30 <_localeconv_r>:
 8006b30:	4800      	ldr	r0, [pc, #0]	@ (8006b34 <_localeconv_r+0x4>)
 8006b32:	4770      	bx	lr
 8006b34:	20000110 	.word	0x20000110

08006b38 <_close_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	4d05      	ldr	r5, [pc, #20]	@ (8006b54 <_close_r+0x1c>)
 8006b3e:	4604      	mov	r4, r0
 8006b40:	4608      	mov	r0, r1
 8006b42:	602b      	str	r3, [r5, #0]
 8006b44:	f7fb fdd7 	bl	80026f6 <_close>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_close_r+0x1a>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_close_r+0x1a>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	2000044c 	.word	0x2000044c

08006b58 <_lseek_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	2200      	movs	r2, #0
 8006b62:	4d05      	ldr	r5, [pc, #20]	@ (8006b78 <_lseek_r+0x20>)
 8006b64:	602a      	str	r2, [r5, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f7fb fde9 	bl	800273e <_lseek>
 8006b6c:	1c43      	adds	r3, r0, #1
 8006b6e:	d102      	bne.n	8006b76 <_lseek_r+0x1e>
 8006b70:	682b      	ldr	r3, [r5, #0]
 8006b72:	b103      	cbz	r3, 8006b76 <_lseek_r+0x1e>
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	bd38      	pop	{r3, r4, r5, pc}
 8006b78:	2000044c 	.word	0x2000044c

08006b7c <_read_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4604      	mov	r4, r0
 8006b80:	4608      	mov	r0, r1
 8006b82:	4611      	mov	r1, r2
 8006b84:	2200      	movs	r2, #0
 8006b86:	4d05      	ldr	r5, [pc, #20]	@ (8006b9c <_read_r+0x20>)
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fb fd7a 	bl	8002684 <_read>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_read_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_read_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	2000044c 	.word	0x2000044c

08006ba0 <_write_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4d05      	ldr	r5, [pc, #20]	@ (8006bc0 <_write_r+0x20>)
 8006bac:	602a      	str	r2, [r5, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f7fb fd85 	bl	80026be <_write>
 8006bb4:	1c43      	adds	r3, r0, #1
 8006bb6:	d102      	bne.n	8006bbe <_write_r+0x1e>
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	b103      	cbz	r3, 8006bbe <_write_r+0x1e>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	bd38      	pop	{r3, r4, r5, pc}
 8006bc0:	2000044c 	.word	0x2000044c

08006bc4 <__errno>:
 8006bc4:	4b01      	ldr	r3, [pc, #4]	@ (8006bcc <__errno+0x8>)
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	2000018c 	.word	0x2000018c

08006bd0 <__libc_init_array>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	2600      	movs	r6, #0
 8006bd4:	4d0c      	ldr	r5, [pc, #48]	@ (8006c08 <__libc_init_array+0x38>)
 8006bd6:	4c0d      	ldr	r4, [pc, #52]	@ (8006c0c <__libc_init_array+0x3c>)
 8006bd8:	1b64      	subs	r4, r4, r5
 8006bda:	10a4      	asrs	r4, r4, #2
 8006bdc:	42a6      	cmp	r6, r4
 8006bde:	d109      	bne.n	8006bf4 <__libc_init_array+0x24>
 8006be0:	f002 fcd4 	bl	800958c <_init>
 8006be4:	2600      	movs	r6, #0
 8006be6:	4d0a      	ldr	r5, [pc, #40]	@ (8006c10 <__libc_init_array+0x40>)
 8006be8:	4c0a      	ldr	r4, [pc, #40]	@ (8006c14 <__libc_init_array+0x44>)
 8006bea:	1b64      	subs	r4, r4, r5
 8006bec:	10a4      	asrs	r4, r4, #2
 8006bee:	42a6      	cmp	r6, r4
 8006bf0:	d105      	bne.n	8006bfe <__libc_init_array+0x2e>
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf8:	4798      	blx	r3
 8006bfa:	3601      	adds	r6, #1
 8006bfc:	e7ee      	b.n	8006bdc <__libc_init_array+0xc>
 8006bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c02:	4798      	blx	r3
 8006c04:	3601      	adds	r6, #1
 8006c06:	e7f2      	b.n	8006bee <__libc_init_array+0x1e>
 8006c08:	08009b38 	.word	0x08009b38
 8006c0c:	08009b38 	.word	0x08009b38
 8006c10:	08009b38 	.word	0x08009b38
 8006c14:	08009b3c 	.word	0x08009b3c

08006c18 <__retarget_lock_init_recursive>:
 8006c18:	4770      	bx	lr

08006c1a <__retarget_lock_acquire_recursive>:
 8006c1a:	4770      	bx	lr

08006c1c <__retarget_lock_release_recursive>:
 8006c1c:	4770      	bx	lr

08006c1e <memchr>:
 8006c1e:	4603      	mov	r3, r0
 8006c20:	b510      	push	{r4, lr}
 8006c22:	b2c9      	uxtb	r1, r1
 8006c24:	4402      	add	r2, r0
 8006c26:	4293      	cmp	r3, r2
 8006c28:	4618      	mov	r0, r3
 8006c2a:	d101      	bne.n	8006c30 <memchr+0x12>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e003      	b.n	8006c38 <memchr+0x1a>
 8006c30:	7804      	ldrb	r4, [r0, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	428c      	cmp	r4, r1
 8006c36:	d1f6      	bne.n	8006c26 <memchr+0x8>
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <memcpy>:
 8006c3a:	440a      	add	r2, r1
 8006c3c:	4291      	cmp	r1, r2
 8006c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c42:	d100      	bne.n	8006c46 <memcpy+0xc>
 8006c44:	4770      	bx	lr
 8006c46:	b510      	push	{r4, lr}
 8006c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c4c:	4291      	cmp	r1, r2
 8006c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c52:	d1f9      	bne.n	8006c48 <memcpy+0xe>
 8006c54:	bd10      	pop	{r4, pc}
	...

08006c58 <nan>:
 8006c58:	2000      	movs	r0, #0
 8006c5a:	4901      	ldr	r1, [pc, #4]	@ (8006c60 <nan+0x8>)
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	7ff80000 	.word	0x7ff80000

08006c64 <quorem>:
 8006c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	6903      	ldr	r3, [r0, #16]
 8006c6a:	690c      	ldr	r4, [r1, #16]
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	42a3      	cmp	r3, r4
 8006c70:	db7e      	blt.n	8006d70 <quorem+0x10c>
 8006c72:	3c01      	subs	r4, #1
 8006c74:	00a3      	lsls	r3, r4, #2
 8006c76:	f100 0514 	add.w	r5, r0, #20
 8006c7a:	f101 0814 	add.w	r8, r1, #20
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c84:	9301      	str	r3, [sp, #4]
 8006c86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	429a      	cmp	r2, r3
 8006c92:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c9a:	d32e      	bcc.n	8006cfa <quorem+0x96>
 8006c9c:	f04f 0a00 	mov.w	sl, #0
 8006ca0:	46c4      	mov	ip, r8
 8006ca2:	46ae      	mov	lr, r5
 8006ca4:	46d3      	mov	fp, sl
 8006ca6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006caa:	b298      	uxth	r0, r3
 8006cac:	fb06 a000 	mla	r0, r6, r0, sl
 8006cb0:	0c1b      	lsrs	r3, r3, #16
 8006cb2:	0c02      	lsrs	r2, r0, #16
 8006cb4:	fb06 2303 	mla	r3, r6, r3, r2
 8006cb8:	f8de 2000 	ldr.w	r2, [lr]
 8006cbc:	b280      	uxth	r0, r0
 8006cbe:	b292      	uxth	r2, r2
 8006cc0:	1a12      	subs	r2, r2, r0
 8006cc2:	445a      	add	r2, fp
 8006cc4:	f8de 0000 	ldr.w	r0, [lr]
 8006cc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006cd2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cd6:	b292      	uxth	r2, r2
 8006cd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cdc:	45e1      	cmp	r9, ip
 8006cde:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ce2:	f84e 2b04 	str.w	r2, [lr], #4
 8006ce6:	d2de      	bcs.n	8006ca6 <quorem+0x42>
 8006ce8:	9b00      	ldr	r3, [sp, #0]
 8006cea:	58eb      	ldr	r3, [r5, r3]
 8006cec:	b92b      	cbnz	r3, 8006cfa <quorem+0x96>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	3b04      	subs	r3, #4
 8006cf2:	429d      	cmp	r5, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	d32f      	bcc.n	8006d58 <quorem+0xf4>
 8006cf8:	613c      	str	r4, [r7, #16]
 8006cfa:	4638      	mov	r0, r7
 8006cfc:	f001 fd10 	bl	8008720 <__mcmp>
 8006d00:	2800      	cmp	r0, #0
 8006d02:	db25      	blt.n	8006d50 <quorem+0xec>
 8006d04:	4629      	mov	r1, r5
 8006d06:	2000      	movs	r0, #0
 8006d08:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d0c:	f8d1 c000 	ldr.w	ip, [r1]
 8006d10:	fa1f fe82 	uxth.w	lr, r2
 8006d14:	fa1f f38c 	uxth.w	r3, ip
 8006d18:	eba3 030e 	sub.w	r3, r3, lr
 8006d1c:	4403      	add	r3, r0
 8006d1e:	0c12      	lsrs	r2, r2, #16
 8006d20:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d24:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2e:	45c1      	cmp	r9, r8
 8006d30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d34:	f841 3b04 	str.w	r3, [r1], #4
 8006d38:	d2e6      	bcs.n	8006d08 <quorem+0xa4>
 8006d3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d42:	b922      	cbnz	r2, 8006d4e <quorem+0xea>
 8006d44:	3b04      	subs	r3, #4
 8006d46:	429d      	cmp	r5, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	d30b      	bcc.n	8006d64 <quorem+0x100>
 8006d4c:	613c      	str	r4, [r7, #16]
 8006d4e:	3601      	adds	r6, #1
 8006d50:	4630      	mov	r0, r6
 8006d52:	b003      	add	sp, #12
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	d1cb      	bne.n	8006cf8 <quorem+0x94>
 8006d60:	3c01      	subs	r4, #1
 8006d62:	e7c6      	b.n	8006cf2 <quorem+0x8e>
 8006d64:	6812      	ldr	r2, [r2, #0]
 8006d66:	3b04      	subs	r3, #4
 8006d68:	2a00      	cmp	r2, #0
 8006d6a:	d1ef      	bne.n	8006d4c <quorem+0xe8>
 8006d6c:	3c01      	subs	r4, #1
 8006d6e:	e7ea      	b.n	8006d46 <quorem+0xe2>
 8006d70:	2000      	movs	r0, #0
 8006d72:	e7ee      	b.n	8006d52 <quorem+0xee>
 8006d74:	0000      	movs	r0, r0
	...

08006d78 <_dtoa_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4614      	mov	r4, r2
 8006d7e:	461d      	mov	r5, r3
 8006d80:	69c7      	ldr	r7, [r0, #28]
 8006d82:	b097      	sub	sp, #92	@ 0x5c
 8006d84:	4683      	mov	fp, r0
 8006d86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006d8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006d8c:	b97f      	cbnz	r7, 8006dae <_dtoa_r+0x36>
 8006d8e:	2010      	movs	r0, #16
 8006d90:	f001 f93c 	bl	800800c <malloc>
 8006d94:	4602      	mov	r2, r0
 8006d96:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d9a:	b920      	cbnz	r0, 8006da6 <_dtoa_r+0x2e>
 8006d9c:	21ef      	movs	r1, #239	@ 0xef
 8006d9e:	4ba8      	ldr	r3, [pc, #672]	@ (8007040 <_dtoa_r+0x2c8>)
 8006da0:	48a8      	ldr	r0, [pc, #672]	@ (8007044 <_dtoa_r+0x2cc>)
 8006da2:	f002 f8d7 	bl	8008f54 <__assert_func>
 8006da6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006daa:	6007      	str	r7, [r0, #0]
 8006dac:	60c7      	str	r7, [r0, #12]
 8006dae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006db2:	6819      	ldr	r1, [r3, #0]
 8006db4:	b159      	cbz	r1, 8006dce <_dtoa_r+0x56>
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	2301      	movs	r3, #1
 8006dba:	4093      	lsls	r3, r2
 8006dbc:	604a      	str	r2, [r1, #4]
 8006dbe:	608b      	str	r3, [r1, #8]
 8006dc0:	4658      	mov	r0, fp
 8006dc2:	f001 fa2b 	bl	800821c <_Bfree>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	1e2b      	subs	r3, r5, #0
 8006dd0:	bfaf      	iteee	ge
 8006dd2:	2300      	movge	r3, #0
 8006dd4:	2201      	movlt	r2, #1
 8006dd6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006dda:	9303      	strlt	r3, [sp, #12]
 8006ddc:	bfa8      	it	ge
 8006dde:	6033      	strge	r3, [r6, #0]
 8006de0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006de4:	4b98      	ldr	r3, [pc, #608]	@ (8007048 <_dtoa_r+0x2d0>)
 8006de6:	bfb8      	it	lt
 8006de8:	6032      	strlt	r2, [r6, #0]
 8006dea:	ea33 0308 	bics.w	r3, r3, r8
 8006dee:	d112      	bne.n	8006e16 <_dtoa_r+0x9e>
 8006df0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006df4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006dfc:	4323      	orrs	r3, r4
 8006dfe:	f000 8550 	beq.w	80078a2 <_dtoa_r+0xb2a>
 8006e02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800704c <_dtoa_r+0x2d4>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 8552 	beq.w	80078b2 <_dtoa_r+0xb3a>
 8006e0e:	f10a 0303 	add.w	r3, sl, #3
 8006e12:	f000 bd4c 	b.w	80078ae <_dtoa_r+0xb36>
 8006e16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e22:	2200      	movs	r2, #0
 8006e24:	2300      	movs	r3, #0
 8006e26:	f7f9 fdbf 	bl	80009a8 <__aeabi_dcmpeq>
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	b158      	cbz	r0, 8006e46 <_dtoa_r+0xce>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e36:	b113      	cbz	r3, 8006e3e <_dtoa_r+0xc6>
 8006e38:	4b85      	ldr	r3, [pc, #532]	@ (8007050 <_dtoa_r+0x2d8>)
 8006e3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007054 <_dtoa_r+0x2dc>
 8006e42:	f000 bd36 	b.w	80078b2 <_dtoa_r+0xb3a>
 8006e46:	ab14      	add	r3, sp, #80	@ 0x50
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	ab15      	add	r3, sp, #84	@ 0x54
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	4658      	mov	r0, fp
 8006e50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006e54:	f001 fd7c 	bl	8008950 <__d2b>
 8006e58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006e5c:	4681      	mov	r9, r0
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d077      	beq.n	8006f52 <_dtoa_r+0x1da>
 8006e62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e78:	9712      	str	r7, [sp, #72]	@ 0x48
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4b76      	ldr	r3, [pc, #472]	@ (8007058 <_dtoa_r+0x2e0>)
 8006e80:	f7f9 f972 	bl	8000168 <__aeabi_dsub>
 8006e84:	a368      	add	r3, pc, #416	@ (adr r3, 8007028 <_dtoa_r+0x2b0>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 fb25 	bl	80004d8 <__aeabi_dmul>
 8006e8e:	a368      	add	r3, pc, #416	@ (adr r3, 8007030 <_dtoa_r+0x2b8>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 f96a 	bl	800016c <__adddf3>
 8006e98:	4604      	mov	r4, r0
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	460d      	mov	r5, r1
 8006e9e:	f7f9 fab1 	bl	8000404 <__aeabi_i2d>
 8006ea2:	a365      	add	r3, pc, #404	@ (adr r3, 8007038 <_dtoa_r+0x2c0>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fb16 	bl	80004d8 <__aeabi_dmul>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 f95a 	bl	800016c <__adddf3>
 8006eb8:	4604      	mov	r4, r0
 8006eba:	460d      	mov	r5, r1
 8006ebc:	f7f9 fdbc 	bl	8000a38 <__aeabi_d2iz>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4607      	mov	r7, r0
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 fd77 	bl	80009bc <__aeabi_dcmplt>
 8006ece:	b140      	cbz	r0, 8006ee2 <_dtoa_r+0x16a>
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	f7f9 fa97 	bl	8000404 <__aeabi_i2d>
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	462b      	mov	r3, r5
 8006eda:	f7f9 fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8006ede:	b900      	cbnz	r0, 8006ee2 <_dtoa_r+0x16a>
 8006ee0:	3f01      	subs	r7, #1
 8006ee2:	2f16      	cmp	r7, #22
 8006ee4:	d853      	bhi.n	8006f8e <_dtoa_r+0x216>
 8006ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006eea:	4b5c      	ldr	r3, [pc, #368]	@ (800705c <_dtoa_r+0x2e4>)
 8006eec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef4:	f7f9 fd62 	bl	80009bc <__aeabi_dcmplt>
 8006ef8:	2800      	cmp	r0, #0
 8006efa:	d04a      	beq.n	8006f92 <_dtoa_r+0x21a>
 8006efc:	2300      	movs	r3, #0
 8006efe:	3f01      	subs	r7, #1
 8006f00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f04:	1b9b      	subs	r3, r3, r6
 8006f06:	1e5a      	subs	r2, r3, #1
 8006f08:	bf46      	itte	mi
 8006f0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f0e:	2300      	movmi	r3, #0
 8006f10:	f04f 0800 	movpl.w	r8, #0
 8006f14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f16:	bf48      	it	mi
 8006f18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006f1a:	2f00      	cmp	r7, #0
 8006f1c:	db3b      	blt.n	8006f96 <_dtoa_r+0x21e>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f20:	970e      	str	r7, [sp, #56]	@ 0x38
 8006f22:	443b      	add	r3, r7
 8006f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f26:	2300      	movs	r3, #0
 8006f28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f2c:	2b09      	cmp	r3, #9
 8006f2e:	d866      	bhi.n	8006ffe <_dtoa_r+0x286>
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	bfc4      	itt	gt
 8006f34:	3b04      	subgt	r3, #4
 8006f36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006f38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f3a:	bfc8      	it	gt
 8006f3c:	2400      	movgt	r4, #0
 8006f3e:	f1a3 0302 	sub.w	r3, r3, #2
 8006f42:	bfd8      	it	le
 8006f44:	2401      	movle	r4, #1
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d864      	bhi.n	8007014 <_dtoa_r+0x29c>
 8006f4a:	e8df f003 	tbb	[pc, r3]
 8006f4e:	382b      	.short	0x382b
 8006f50:	5636      	.short	0x5636
 8006f52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006f56:	441e      	add	r6, r3
 8006f58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	bfc1      	itttt	gt
 8006f60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f64:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f70:	bfd6      	itet	le
 8006f72:	f1c3 0320 	rsble	r3, r3, #32
 8006f76:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f7a:	fa04 f003 	lslle.w	r0, r4, r3
 8006f7e:	f7f9 fa31 	bl	80003e4 <__aeabi_ui2d>
 8006f82:	2201      	movs	r2, #1
 8006f84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f88:	3e01      	subs	r6, #1
 8006f8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006f8c:	e775      	b.n	8006e7a <_dtoa_r+0x102>
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e7b6      	b.n	8006f00 <_dtoa_r+0x188>
 8006f92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006f94:	e7b5      	b.n	8006f02 <_dtoa_r+0x18a>
 8006f96:	427b      	negs	r3, r7
 8006f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	eba8 0807 	sub.w	r8, r8, r7
 8006fa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006fa2:	e7c2      	b.n	8006f2a <_dtoa_r+0x1b2>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dc35      	bgt.n	800701a <_dtoa_r+0x2a2>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006fb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006fb8:	e00b      	b.n	8006fd2 <_dtoa_r+0x25a>
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e7f3      	b.n	8006fa6 <_dtoa_r+0x22e>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	9308      	str	r3, [sp, #32]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	9307      	str	r3, [sp, #28]
 8006fce:	bfb8      	it	lt
 8006fd0:	2301      	movlt	r3, #1
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006fda:	f102 0514 	add.w	r5, r2, #20
 8006fde:	429d      	cmp	r5, r3
 8006fe0:	d91f      	bls.n	8007022 <_dtoa_r+0x2aa>
 8006fe2:	6041      	str	r1, [r0, #4]
 8006fe4:	4658      	mov	r0, fp
 8006fe6:	f001 f8d9 	bl	800819c <_Balloc>
 8006fea:	4682      	mov	sl, r0
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d139      	bne.n	8007064 <_dtoa_r+0x2ec>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8007060 <_dtoa_r+0x2e8>)
 8006ff8:	e6d2      	b.n	8006da0 <_dtoa_r+0x28>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e7e0      	b.n	8006fc0 <_dtoa_r+0x248>
 8006ffe:	2401      	movs	r4, #1
 8007000:	2300      	movs	r3, #0
 8007002:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007004:	9320      	str	r3, [sp, #128]	@ 0x80
 8007006:	f04f 33ff 	mov.w	r3, #4294967295
 800700a:	2200      	movs	r2, #0
 800700c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007010:	2312      	movs	r3, #18
 8007012:	e7d0      	b.n	8006fb6 <_dtoa_r+0x23e>
 8007014:	2301      	movs	r3, #1
 8007016:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007018:	e7f5      	b.n	8007006 <_dtoa_r+0x28e>
 800701a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800701c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007020:	e7d7      	b.n	8006fd2 <_dtoa_r+0x25a>
 8007022:	3101      	adds	r1, #1
 8007024:	0052      	lsls	r2, r2, #1
 8007026:	e7d8      	b.n	8006fda <_dtoa_r+0x262>
 8007028:	636f4361 	.word	0x636f4361
 800702c:	3fd287a7 	.word	0x3fd287a7
 8007030:	8b60c8b3 	.word	0x8b60c8b3
 8007034:	3fc68a28 	.word	0x3fc68a28
 8007038:	509f79fb 	.word	0x509f79fb
 800703c:	3fd34413 	.word	0x3fd34413
 8007040:	080097a9 	.word	0x080097a9
 8007044:	080097c0 	.word	0x080097c0
 8007048:	7ff00000 	.word	0x7ff00000
 800704c:	080097a5 	.word	0x080097a5
 8007050:	08009771 	.word	0x08009771
 8007054:	08009770 	.word	0x08009770
 8007058:	3ff80000 	.word	0x3ff80000
 800705c:	08009918 	.word	0x08009918
 8007060:	08009818 	.word	0x08009818
 8007064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007068:	6018      	str	r0, [r3, #0]
 800706a:	9b07      	ldr	r3, [sp, #28]
 800706c:	2b0e      	cmp	r3, #14
 800706e:	f200 80a4 	bhi.w	80071ba <_dtoa_r+0x442>
 8007072:	2c00      	cmp	r4, #0
 8007074:	f000 80a1 	beq.w	80071ba <_dtoa_r+0x442>
 8007078:	2f00      	cmp	r7, #0
 800707a:	dd33      	ble.n	80070e4 <_dtoa_r+0x36c>
 800707c:	4b86      	ldr	r3, [pc, #536]	@ (8007298 <_dtoa_r+0x520>)
 800707e:	f007 020f 	and.w	r2, r7, #15
 8007082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007086:	05f8      	lsls	r0, r7, #23
 8007088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800708c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007090:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007094:	d516      	bpl.n	80070c4 <_dtoa_r+0x34c>
 8007096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800709a:	4b80      	ldr	r3, [pc, #512]	@ (800729c <_dtoa_r+0x524>)
 800709c:	2603      	movs	r6, #3
 800709e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070a2:	f7f9 fb43 	bl	800072c <__aeabi_ddiv>
 80070a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070aa:	f004 040f 	and.w	r4, r4, #15
 80070ae:	4d7b      	ldr	r5, [pc, #492]	@ (800729c <_dtoa_r+0x524>)
 80070b0:	b954      	cbnz	r4, 80070c8 <_dtoa_r+0x350>
 80070b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ba:	f7f9 fb37 	bl	800072c <__aeabi_ddiv>
 80070be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c2:	e028      	b.n	8007116 <_dtoa_r+0x39e>
 80070c4:	2602      	movs	r6, #2
 80070c6:	e7f2      	b.n	80070ae <_dtoa_r+0x336>
 80070c8:	07e1      	lsls	r1, r4, #31
 80070ca:	d508      	bpl.n	80070de <_dtoa_r+0x366>
 80070cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070d4:	f7f9 fa00 	bl	80004d8 <__aeabi_dmul>
 80070d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070dc:	3601      	adds	r6, #1
 80070de:	1064      	asrs	r4, r4, #1
 80070e0:	3508      	adds	r5, #8
 80070e2:	e7e5      	b.n	80070b0 <_dtoa_r+0x338>
 80070e4:	f000 80d2 	beq.w	800728c <_dtoa_r+0x514>
 80070e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ec:	427c      	negs	r4, r7
 80070ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007298 <_dtoa_r+0x520>)
 80070f0:	f004 020f 	and.w	r2, r4, #15
 80070f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fc:	f7f9 f9ec 	bl	80004d8 <__aeabi_dmul>
 8007100:	2602      	movs	r6, #2
 8007102:	2300      	movs	r3, #0
 8007104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007108:	4d64      	ldr	r5, [pc, #400]	@ (800729c <_dtoa_r+0x524>)
 800710a:	1124      	asrs	r4, r4, #4
 800710c:	2c00      	cmp	r4, #0
 800710e:	f040 80b2 	bne.w	8007276 <_dtoa_r+0x4fe>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1d3      	bne.n	80070be <_dtoa_r+0x346>
 8007116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800711a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711c:	2b00      	cmp	r3, #0
 800711e:	f000 80b7 	beq.w	8007290 <_dtoa_r+0x518>
 8007122:	2200      	movs	r2, #0
 8007124:	4620      	mov	r0, r4
 8007126:	4629      	mov	r1, r5
 8007128:	4b5d      	ldr	r3, [pc, #372]	@ (80072a0 <_dtoa_r+0x528>)
 800712a:	f7f9 fc47 	bl	80009bc <__aeabi_dcmplt>
 800712e:	2800      	cmp	r0, #0
 8007130:	f000 80ae 	beq.w	8007290 <_dtoa_r+0x518>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80aa 	beq.w	8007290 <_dtoa_r+0x518>
 800713c:	9b08      	ldr	r3, [sp, #32]
 800713e:	2b00      	cmp	r3, #0
 8007140:	dd37      	ble.n	80071b2 <_dtoa_r+0x43a>
 8007142:	1e7b      	subs	r3, r7, #1
 8007144:	4620      	mov	r0, r4
 8007146:	9304      	str	r3, [sp, #16]
 8007148:	2200      	movs	r2, #0
 800714a:	4629      	mov	r1, r5
 800714c:	4b55      	ldr	r3, [pc, #340]	@ (80072a4 <_dtoa_r+0x52c>)
 800714e:	f7f9 f9c3 	bl	80004d8 <__aeabi_dmul>
 8007152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007156:	9c08      	ldr	r4, [sp, #32]
 8007158:	3601      	adds	r6, #1
 800715a:	4630      	mov	r0, r6
 800715c:	f7f9 f952 	bl	8000404 <__aeabi_i2d>
 8007160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007164:	f7f9 f9b8 	bl	80004d8 <__aeabi_dmul>
 8007168:	2200      	movs	r2, #0
 800716a:	4b4f      	ldr	r3, [pc, #316]	@ (80072a8 <_dtoa_r+0x530>)
 800716c:	f7f8 fffe 	bl	800016c <__adddf3>
 8007170:	4605      	mov	r5, r0
 8007172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007176:	2c00      	cmp	r4, #0
 8007178:	f040 809a 	bne.w	80072b0 <_dtoa_r+0x538>
 800717c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	4b4a      	ldr	r3, [pc, #296]	@ (80072ac <_dtoa_r+0x534>)
 8007184:	f7f8 fff0 	bl	8000168 <__aeabi_dsub>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007190:	462a      	mov	r2, r5
 8007192:	4633      	mov	r3, r6
 8007194:	f7f9 fc30 	bl	80009f8 <__aeabi_dcmpgt>
 8007198:	2800      	cmp	r0, #0
 800719a:	f040 828e 	bne.w	80076ba <_dtoa_r+0x942>
 800719e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a2:	462a      	mov	r2, r5
 80071a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071a8:	f7f9 fc08 	bl	80009bc <__aeabi_dcmplt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	f040 8127 	bne.w	8007400 <_dtoa_r+0x688>
 80071b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80071ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f2c0 8163 	blt.w	8007488 <_dtoa_r+0x710>
 80071c2:	2f0e      	cmp	r7, #14
 80071c4:	f300 8160 	bgt.w	8007488 <_dtoa_r+0x710>
 80071c8:	4b33      	ldr	r3, [pc, #204]	@ (8007298 <_dtoa_r+0x520>)
 80071ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80071d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80071d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071d8:	2b00      	cmp	r3, #0
 80071da:	da03      	bge.n	80071e4 <_dtoa_r+0x46c>
 80071dc:	9b07      	ldr	r3, [sp, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f340 8100 	ble.w	80073e4 <_dtoa_r+0x66c>
 80071e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071e8:	4656      	mov	r6, sl
 80071ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f9 fa9b 	bl	800072c <__aeabi_ddiv>
 80071f6:	f7f9 fc1f 	bl	8000a38 <__aeabi_d2iz>
 80071fa:	4680      	mov	r8, r0
 80071fc:	f7f9 f902 	bl	8000404 <__aeabi_i2d>
 8007200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007204:	f7f9 f968 	bl	80004d8 <__aeabi_dmul>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f7f8 ffaa 	bl	8000168 <__aeabi_dsub>
 8007214:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007218:	9d07      	ldr	r5, [sp, #28]
 800721a:	f806 4b01 	strb.w	r4, [r6], #1
 800721e:	eba6 040a 	sub.w	r4, r6, sl
 8007222:	42a5      	cmp	r5, r4
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	f040 8116 	bne.w	8007458 <_dtoa_r+0x6e0>
 800722c:	f7f8 ff9e 	bl	800016c <__adddf3>
 8007230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007234:	4604      	mov	r4, r0
 8007236:	460d      	mov	r5, r1
 8007238:	f7f9 fbde 	bl	80009f8 <__aeabi_dcmpgt>
 800723c:	2800      	cmp	r0, #0
 800723e:	f040 80f8 	bne.w	8007432 <_dtoa_r+0x6ba>
 8007242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800724e:	b118      	cbz	r0, 8007258 <_dtoa_r+0x4e0>
 8007250:	f018 0f01 	tst.w	r8, #1
 8007254:	f040 80ed 	bne.w	8007432 <_dtoa_r+0x6ba>
 8007258:	4649      	mov	r1, r9
 800725a:	4658      	mov	r0, fp
 800725c:	f000 ffde 	bl	800821c <_Bfree>
 8007260:	2300      	movs	r3, #0
 8007262:	7033      	strb	r3, [r6, #0]
 8007264:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007266:	3701      	adds	r7, #1
 8007268:	601f      	str	r7, [r3, #0]
 800726a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800726c:	2b00      	cmp	r3, #0
 800726e:	f000 8320 	beq.w	80078b2 <_dtoa_r+0xb3a>
 8007272:	601e      	str	r6, [r3, #0]
 8007274:	e31d      	b.n	80078b2 <_dtoa_r+0xb3a>
 8007276:	07e2      	lsls	r2, r4, #31
 8007278:	d505      	bpl.n	8007286 <_dtoa_r+0x50e>
 800727a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800727e:	f7f9 f92b 	bl	80004d8 <__aeabi_dmul>
 8007282:	2301      	movs	r3, #1
 8007284:	3601      	adds	r6, #1
 8007286:	1064      	asrs	r4, r4, #1
 8007288:	3508      	adds	r5, #8
 800728a:	e73f      	b.n	800710c <_dtoa_r+0x394>
 800728c:	2602      	movs	r6, #2
 800728e:	e742      	b.n	8007116 <_dtoa_r+0x39e>
 8007290:	9c07      	ldr	r4, [sp, #28]
 8007292:	9704      	str	r7, [sp, #16]
 8007294:	e761      	b.n	800715a <_dtoa_r+0x3e2>
 8007296:	bf00      	nop
 8007298:	08009918 	.word	0x08009918
 800729c:	080098f0 	.word	0x080098f0
 80072a0:	3ff00000 	.word	0x3ff00000
 80072a4:	40240000 	.word	0x40240000
 80072a8:	401c0000 	.word	0x401c0000
 80072ac:	40140000 	.word	0x40140000
 80072b0:	4b70      	ldr	r3, [pc, #448]	@ (8007474 <_dtoa_r+0x6fc>)
 80072b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072bc:	4454      	add	r4, sl
 80072be:	2900      	cmp	r1, #0
 80072c0:	d045      	beq.n	800734e <_dtoa_r+0x5d6>
 80072c2:	2000      	movs	r0, #0
 80072c4:	496c      	ldr	r1, [pc, #432]	@ (8007478 <_dtoa_r+0x700>)
 80072c6:	f7f9 fa31 	bl	800072c <__aeabi_ddiv>
 80072ca:	4633      	mov	r3, r6
 80072cc:	462a      	mov	r2, r5
 80072ce:	f7f8 ff4b 	bl	8000168 <__aeabi_dsub>
 80072d2:	4656      	mov	r6, sl
 80072d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072dc:	f7f9 fbac 	bl	8000a38 <__aeabi_d2iz>
 80072e0:	4605      	mov	r5, r0
 80072e2:	f7f9 f88f 	bl	8000404 <__aeabi_i2d>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ee:	f7f8 ff3b 	bl	8000168 <__aeabi_dsub>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	3530      	adds	r5, #48	@ 0x30
 80072f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007300:	f806 5b01 	strb.w	r5, [r6], #1
 8007304:	f7f9 fb5a 	bl	80009bc <__aeabi_dcmplt>
 8007308:	2800      	cmp	r0, #0
 800730a:	d163      	bne.n	80073d4 <_dtoa_r+0x65c>
 800730c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007310:	2000      	movs	r0, #0
 8007312:	495a      	ldr	r1, [pc, #360]	@ (800747c <_dtoa_r+0x704>)
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800731c:	f7f9 fb4e 	bl	80009bc <__aeabi_dcmplt>
 8007320:	2800      	cmp	r0, #0
 8007322:	f040 8087 	bne.w	8007434 <_dtoa_r+0x6bc>
 8007326:	42a6      	cmp	r6, r4
 8007328:	f43f af43 	beq.w	80071b2 <_dtoa_r+0x43a>
 800732c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007330:	2200      	movs	r2, #0
 8007332:	4b53      	ldr	r3, [pc, #332]	@ (8007480 <_dtoa_r+0x708>)
 8007334:	f7f9 f8d0 	bl	80004d8 <__aeabi_dmul>
 8007338:	2200      	movs	r2, #0
 800733a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800733e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007342:	4b4f      	ldr	r3, [pc, #316]	@ (8007480 <_dtoa_r+0x708>)
 8007344:	f7f9 f8c8 	bl	80004d8 <__aeabi_dmul>
 8007348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800734c:	e7c4      	b.n	80072d8 <_dtoa_r+0x560>
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	f7f9 f8c1 	bl	80004d8 <__aeabi_dmul>
 8007356:	4656      	mov	r6, sl
 8007358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800735c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800735e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007362:	f7f9 fb69 	bl	8000a38 <__aeabi_d2iz>
 8007366:	4605      	mov	r5, r0
 8007368:	f7f9 f84c 	bl	8000404 <__aeabi_i2d>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007374:	f7f8 fef8 	bl	8000168 <__aeabi_dsub>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	3530      	adds	r5, #48	@ 0x30
 800737e:	f806 5b01 	strb.w	r5, [r6], #1
 8007382:	42a6      	cmp	r6, r4
 8007384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	d124      	bne.n	80073d8 <_dtoa_r+0x660>
 800738e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007392:	4b39      	ldr	r3, [pc, #228]	@ (8007478 <_dtoa_r+0x700>)
 8007394:	f7f8 feea 	bl	800016c <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a0:	f7f9 fb2a 	bl	80009f8 <__aeabi_dcmpgt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d145      	bne.n	8007434 <_dtoa_r+0x6bc>
 80073a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073ac:	2000      	movs	r0, #0
 80073ae:	4932      	ldr	r1, [pc, #200]	@ (8007478 <_dtoa_r+0x700>)
 80073b0:	f7f8 feda 	bl	8000168 <__aeabi_dsub>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073bc:	f7f9 fafe 	bl	80009bc <__aeabi_dcmplt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f43f aef6 	beq.w	80071b2 <_dtoa_r+0x43a>
 80073c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80073c8:	1e73      	subs	r3, r6, #1
 80073ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073d0:	2b30      	cmp	r3, #48	@ 0x30
 80073d2:	d0f8      	beq.n	80073c6 <_dtoa_r+0x64e>
 80073d4:	9f04      	ldr	r7, [sp, #16]
 80073d6:	e73f      	b.n	8007258 <_dtoa_r+0x4e0>
 80073d8:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <_dtoa_r+0x708>)
 80073da:	f7f9 f87d 	bl	80004d8 <__aeabi_dmul>
 80073de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e2:	e7bc      	b.n	800735e <_dtoa_r+0x5e6>
 80073e4:	d10c      	bne.n	8007400 <_dtoa_r+0x688>
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	2200      	movs	r2, #0
 80073ec:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <_dtoa_r+0x70c>)
 80073ee:	f7f9 f873 	bl	80004d8 <__aeabi_dmul>
 80073f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f6:	f7f9 faf5 	bl	80009e4 <__aeabi_dcmpge>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	f000 815b 	beq.w	80076b6 <_dtoa_r+0x93e>
 8007400:	2400      	movs	r4, #0
 8007402:	4625      	mov	r5, r4
 8007404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007406:	4656      	mov	r6, sl
 8007408:	43db      	mvns	r3, r3
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	2700      	movs	r7, #0
 800740e:	4621      	mov	r1, r4
 8007410:	4658      	mov	r0, fp
 8007412:	f000 ff03 	bl	800821c <_Bfree>
 8007416:	2d00      	cmp	r5, #0
 8007418:	d0dc      	beq.n	80073d4 <_dtoa_r+0x65c>
 800741a:	b12f      	cbz	r7, 8007428 <_dtoa_r+0x6b0>
 800741c:	42af      	cmp	r7, r5
 800741e:	d003      	beq.n	8007428 <_dtoa_r+0x6b0>
 8007420:	4639      	mov	r1, r7
 8007422:	4658      	mov	r0, fp
 8007424:	f000 fefa 	bl	800821c <_Bfree>
 8007428:	4629      	mov	r1, r5
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fef6 	bl	800821c <_Bfree>
 8007430:	e7d0      	b.n	80073d4 <_dtoa_r+0x65c>
 8007432:	9704      	str	r7, [sp, #16]
 8007434:	4633      	mov	r3, r6
 8007436:	461e      	mov	r6, r3
 8007438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800743c:	2a39      	cmp	r2, #57	@ 0x39
 800743e:	d107      	bne.n	8007450 <_dtoa_r+0x6d8>
 8007440:	459a      	cmp	sl, r3
 8007442:	d1f8      	bne.n	8007436 <_dtoa_r+0x6be>
 8007444:	9a04      	ldr	r2, [sp, #16]
 8007446:	3201      	adds	r2, #1
 8007448:	9204      	str	r2, [sp, #16]
 800744a:	2230      	movs	r2, #48	@ 0x30
 800744c:	f88a 2000 	strb.w	r2, [sl]
 8007450:	781a      	ldrb	r2, [r3, #0]
 8007452:	3201      	adds	r2, #1
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e7bd      	b.n	80073d4 <_dtoa_r+0x65c>
 8007458:	2200      	movs	r2, #0
 800745a:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <_dtoa_r+0x708>)
 800745c:	f7f9 f83c 	bl	80004d8 <__aeabi_dmul>
 8007460:	2200      	movs	r2, #0
 8007462:	2300      	movs	r3, #0
 8007464:	4604      	mov	r4, r0
 8007466:	460d      	mov	r5, r1
 8007468:	f7f9 fa9e 	bl	80009a8 <__aeabi_dcmpeq>
 800746c:	2800      	cmp	r0, #0
 800746e:	f43f aebc 	beq.w	80071ea <_dtoa_r+0x472>
 8007472:	e6f1      	b.n	8007258 <_dtoa_r+0x4e0>
 8007474:	08009918 	.word	0x08009918
 8007478:	3fe00000 	.word	0x3fe00000
 800747c:	3ff00000 	.word	0x3ff00000
 8007480:	40240000 	.word	0x40240000
 8007484:	40140000 	.word	0x40140000
 8007488:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800748a:	2a00      	cmp	r2, #0
 800748c:	f000 80db 	beq.w	8007646 <_dtoa_r+0x8ce>
 8007490:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007492:	2a01      	cmp	r2, #1
 8007494:	f300 80bf 	bgt.w	8007616 <_dtoa_r+0x89e>
 8007498:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800749a:	2a00      	cmp	r2, #0
 800749c:	f000 80b7 	beq.w	800760e <_dtoa_r+0x896>
 80074a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074a4:	4646      	mov	r6, r8
 80074a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074aa:	2101      	movs	r1, #1
 80074ac:	441a      	add	r2, r3
 80074ae:	4658      	mov	r0, fp
 80074b0:	4498      	add	r8, r3
 80074b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074b4:	f000 ffb0 	bl	8008418 <__i2b>
 80074b8:	4605      	mov	r5, r0
 80074ba:	b15e      	cbz	r6, 80074d4 <_dtoa_r+0x75c>
 80074bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd08      	ble.n	80074d4 <_dtoa_r+0x75c>
 80074c2:	42b3      	cmp	r3, r6
 80074c4:	bfa8      	it	ge
 80074c6:	4633      	movge	r3, r6
 80074c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074ca:	eba8 0803 	sub.w	r8, r8, r3
 80074ce:	1af6      	subs	r6, r6, r3
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d6:	b1f3      	cbz	r3, 8007516 <_dtoa_r+0x79e>
 80074d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 80b7 	beq.w	800764e <_dtoa_r+0x8d6>
 80074e0:	b18c      	cbz	r4, 8007506 <_dtoa_r+0x78e>
 80074e2:	4629      	mov	r1, r5
 80074e4:	4622      	mov	r2, r4
 80074e6:	4658      	mov	r0, fp
 80074e8:	f001 f854 	bl	8008594 <__pow5mult>
 80074ec:	464a      	mov	r2, r9
 80074ee:	4601      	mov	r1, r0
 80074f0:	4605      	mov	r5, r0
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 ffa6 	bl	8008444 <__multiply>
 80074f8:	4649      	mov	r1, r9
 80074fa:	9004      	str	r0, [sp, #16]
 80074fc:	4658      	mov	r0, fp
 80074fe:	f000 fe8d 	bl	800821c <_Bfree>
 8007502:	9b04      	ldr	r3, [sp, #16]
 8007504:	4699      	mov	r9, r3
 8007506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007508:	1b1a      	subs	r2, r3, r4
 800750a:	d004      	beq.n	8007516 <_dtoa_r+0x79e>
 800750c:	4649      	mov	r1, r9
 800750e:	4658      	mov	r0, fp
 8007510:	f001 f840 	bl	8008594 <__pow5mult>
 8007514:	4681      	mov	r9, r0
 8007516:	2101      	movs	r1, #1
 8007518:	4658      	mov	r0, fp
 800751a:	f000 ff7d 	bl	8008418 <__i2b>
 800751e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007520:	4604      	mov	r4, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 81c9 	beq.w	80078ba <_dtoa_r+0xb42>
 8007528:	461a      	mov	r2, r3
 800752a:	4601      	mov	r1, r0
 800752c:	4658      	mov	r0, fp
 800752e:	f001 f831 	bl	8008594 <__pow5mult>
 8007532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007534:	4604      	mov	r4, r0
 8007536:	2b01      	cmp	r3, #1
 8007538:	f300 808f 	bgt.w	800765a <_dtoa_r+0x8e2>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 8087 	bne.w	8007652 <_dtoa_r+0x8da>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 8083 	bne.w	8007656 <_dtoa_r+0x8de>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007556:	0d1b      	lsrs	r3, r3, #20
 8007558:	051b      	lsls	r3, r3, #20
 800755a:	b12b      	cbz	r3, 8007568 <_dtoa_r+0x7f0>
 800755c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800755e:	f108 0801 	add.w	r8, r8, #1
 8007562:	3301      	adds	r3, #1
 8007564:	9309      	str	r3, [sp, #36]	@ 0x24
 8007566:	2301      	movs	r3, #1
 8007568:	930a      	str	r3, [sp, #40]	@ 0x28
 800756a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 81aa 	beq.w	80078c6 <_dtoa_r+0xb4e>
 8007572:	6923      	ldr	r3, [r4, #16]
 8007574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007578:	6918      	ldr	r0, [r3, #16]
 800757a:	f000 ff01 	bl	8008380 <__hi0bits>
 800757e:	f1c0 0020 	rsb	r0, r0, #32
 8007582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007584:	4418      	add	r0, r3
 8007586:	f010 001f 	ands.w	r0, r0, #31
 800758a:	d071      	beq.n	8007670 <_dtoa_r+0x8f8>
 800758c:	f1c0 0320 	rsb	r3, r0, #32
 8007590:	2b04      	cmp	r3, #4
 8007592:	dd65      	ble.n	8007660 <_dtoa_r+0x8e8>
 8007594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007596:	f1c0 001c 	rsb	r0, r0, #28
 800759a:	4403      	add	r3, r0
 800759c:	4480      	add	r8, r0
 800759e:	4406      	add	r6, r0
 80075a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a2:	f1b8 0f00 	cmp.w	r8, #0
 80075a6:	dd05      	ble.n	80075b4 <_dtoa_r+0x83c>
 80075a8:	4649      	mov	r1, r9
 80075aa:	4642      	mov	r2, r8
 80075ac:	4658      	mov	r0, fp
 80075ae:	f001 f84b 	bl	8008648 <__lshift>
 80075b2:	4681      	mov	r9, r0
 80075b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	dd05      	ble.n	80075c6 <_dtoa_r+0x84e>
 80075ba:	4621      	mov	r1, r4
 80075bc:	461a      	mov	r2, r3
 80075be:	4658      	mov	r0, fp
 80075c0:	f001 f842 	bl	8008648 <__lshift>
 80075c4:	4604      	mov	r4, r0
 80075c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d053      	beq.n	8007674 <_dtoa_r+0x8fc>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4648      	mov	r0, r9
 80075d0:	f001 f8a6 	bl	8008720 <__mcmp>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	da4d      	bge.n	8007674 <_dtoa_r+0x8fc>
 80075d8:	1e7b      	subs	r3, r7, #1
 80075da:	4649      	mov	r1, r9
 80075dc:	9304      	str	r3, [sp, #16]
 80075de:	220a      	movs	r2, #10
 80075e0:	2300      	movs	r3, #0
 80075e2:	4658      	mov	r0, fp
 80075e4:	f000 fe3c 	bl	8008260 <__multadd>
 80075e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075ea:	4681      	mov	r9, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 816c 	beq.w	80078ca <_dtoa_r+0xb52>
 80075f2:	2300      	movs	r3, #0
 80075f4:	4629      	mov	r1, r5
 80075f6:	220a      	movs	r2, #10
 80075f8:	4658      	mov	r0, fp
 80075fa:	f000 fe31 	bl	8008260 <__multadd>
 80075fe:	9b08      	ldr	r3, [sp, #32]
 8007600:	4605      	mov	r5, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	dc61      	bgt.n	80076ca <_dtoa_r+0x952>
 8007606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007608:	2b02      	cmp	r3, #2
 800760a:	dc3b      	bgt.n	8007684 <_dtoa_r+0x90c>
 800760c:	e05d      	b.n	80076ca <_dtoa_r+0x952>
 800760e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007610:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007614:	e746      	b.n	80074a4 <_dtoa_r+0x72c>
 8007616:	9b07      	ldr	r3, [sp, #28]
 8007618:	1e5c      	subs	r4, r3, #1
 800761a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761c:	42a3      	cmp	r3, r4
 800761e:	bfbf      	itttt	lt
 8007620:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007622:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007624:	1ae3      	sublt	r3, r4, r3
 8007626:	18d2      	addlt	r2, r2, r3
 8007628:	bfa8      	it	ge
 800762a:	1b1c      	subge	r4, r3, r4
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	bfbe      	ittt	lt
 8007630:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007632:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007634:	2400      	movlt	r4, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	bfb5      	itete	lt
 800763a:	eba8 0603 	sublt.w	r6, r8, r3
 800763e:	4646      	movge	r6, r8
 8007640:	2300      	movlt	r3, #0
 8007642:	9b07      	ldrge	r3, [sp, #28]
 8007644:	e730      	b.n	80074a8 <_dtoa_r+0x730>
 8007646:	4646      	mov	r6, r8
 8007648:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800764a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800764c:	e735      	b.n	80074ba <_dtoa_r+0x742>
 800764e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007650:	e75c      	b.n	800750c <_dtoa_r+0x794>
 8007652:	2300      	movs	r3, #0
 8007654:	e788      	b.n	8007568 <_dtoa_r+0x7f0>
 8007656:	9b02      	ldr	r3, [sp, #8]
 8007658:	e786      	b.n	8007568 <_dtoa_r+0x7f0>
 800765a:	2300      	movs	r3, #0
 800765c:	930a      	str	r3, [sp, #40]	@ 0x28
 800765e:	e788      	b.n	8007572 <_dtoa_r+0x7fa>
 8007660:	d09f      	beq.n	80075a2 <_dtoa_r+0x82a>
 8007662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007664:	331c      	adds	r3, #28
 8007666:	441a      	add	r2, r3
 8007668:	4498      	add	r8, r3
 800766a:	441e      	add	r6, r3
 800766c:	9209      	str	r2, [sp, #36]	@ 0x24
 800766e:	e798      	b.n	80075a2 <_dtoa_r+0x82a>
 8007670:	4603      	mov	r3, r0
 8007672:	e7f6      	b.n	8007662 <_dtoa_r+0x8ea>
 8007674:	9b07      	ldr	r3, [sp, #28]
 8007676:	9704      	str	r7, [sp, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	dc20      	bgt.n	80076be <_dtoa_r+0x946>
 800767c:	9308      	str	r3, [sp, #32]
 800767e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007680:	2b02      	cmp	r3, #2
 8007682:	dd1e      	ble.n	80076c2 <_dtoa_r+0x94a>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	2b00      	cmp	r3, #0
 8007688:	f47f aebc 	bne.w	8007404 <_dtoa_r+0x68c>
 800768c:	4621      	mov	r1, r4
 800768e:	2205      	movs	r2, #5
 8007690:	4658      	mov	r0, fp
 8007692:	f000 fde5 	bl	8008260 <__multadd>
 8007696:	4601      	mov	r1, r0
 8007698:	4604      	mov	r4, r0
 800769a:	4648      	mov	r0, r9
 800769c:	f001 f840 	bl	8008720 <__mcmp>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f77f aeaf 	ble.w	8007404 <_dtoa_r+0x68c>
 80076a6:	2331      	movs	r3, #49	@ 0x31
 80076a8:	4656      	mov	r6, sl
 80076aa:	f806 3b01 	strb.w	r3, [r6], #1
 80076ae:	9b04      	ldr	r3, [sp, #16]
 80076b0:	3301      	adds	r3, #1
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	e6aa      	b.n	800740c <_dtoa_r+0x694>
 80076b6:	9c07      	ldr	r4, [sp, #28]
 80076b8:	9704      	str	r7, [sp, #16]
 80076ba:	4625      	mov	r5, r4
 80076bc:	e7f3      	b.n	80076a6 <_dtoa_r+0x92e>
 80076be:	9b07      	ldr	r3, [sp, #28]
 80076c0:	9308      	str	r3, [sp, #32]
 80076c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8104 	beq.w	80078d2 <_dtoa_r+0xb5a>
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	dd05      	ble.n	80076da <_dtoa_r+0x962>
 80076ce:	4629      	mov	r1, r5
 80076d0:	4632      	mov	r2, r6
 80076d2:	4658      	mov	r0, fp
 80076d4:	f000 ffb8 	bl	8008648 <__lshift>
 80076d8:	4605      	mov	r5, r0
 80076da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d05a      	beq.n	8007796 <_dtoa_r+0xa1e>
 80076e0:	4658      	mov	r0, fp
 80076e2:	6869      	ldr	r1, [r5, #4]
 80076e4:	f000 fd5a 	bl	800819c <_Balloc>
 80076e8:	4606      	mov	r6, r0
 80076ea:	b928      	cbnz	r0, 80076f8 <_dtoa_r+0x980>
 80076ec:	4602      	mov	r2, r0
 80076ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80076f2:	4b83      	ldr	r3, [pc, #524]	@ (8007900 <_dtoa_r+0xb88>)
 80076f4:	f7ff bb54 	b.w	8006da0 <_dtoa_r+0x28>
 80076f8:	692a      	ldr	r2, [r5, #16]
 80076fa:	f105 010c 	add.w	r1, r5, #12
 80076fe:	3202      	adds	r2, #2
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	300c      	adds	r0, #12
 8007704:	f7ff fa99 	bl	8006c3a <memcpy>
 8007708:	2201      	movs	r2, #1
 800770a:	4631      	mov	r1, r6
 800770c:	4658      	mov	r0, fp
 800770e:	f000 ff9b 	bl	8008648 <__lshift>
 8007712:	462f      	mov	r7, r5
 8007714:	4605      	mov	r5, r0
 8007716:	f10a 0301 	add.w	r3, sl, #1
 800771a:	9307      	str	r3, [sp, #28]
 800771c:	9b08      	ldr	r3, [sp, #32]
 800771e:	4453      	add	r3, sl
 8007720:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	930a      	str	r3, [sp, #40]	@ 0x28
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	4621      	mov	r1, r4
 800772e:	3b01      	subs	r3, #1
 8007730:	4648      	mov	r0, r9
 8007732:	9302      	str	r3, [sp, #8]
 8007734:	f7ff fa96 	bl	8006c64 <quorem>
 8007738:	4639      	mov	r1, r7
 800773a:	9008      	str	r0, [sp, #32]
 800773c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007740:	4648      	mov	r0, r9
 8007742:	f000 ffed 	bl	8008720 <__mcmp>
 8007746:	462a      	mov	r2, r5
 8007748:	9009      	str	r0, [sp, #36]	@ 0x24
 800774a:	4621      	mov	r1, r4
 800774c:	4658      	mov	r0, fp
 800774e:	f001 f803 	bl	8008758 <__mdiff>
 8007752:	68c2      	ldr	r2, [r0, #12]
 8007754:	4606      	mov	r6, r0
 8007756:	bb02      	cbnz	r2, 800779a <_dtoa_r+0xa22>
 8007758:	4601      	mov	r1, r0
 800775a:	4648      	mov	r0, r9
 800775c:	f000 ffe0 	bl	8008720 <__mcmp>
 8007760:	4602      	mov	r2, r0
 8007762:	4631      	mov	r1, r6
 8007764:	4658      	mov	r0, fp
 8007766:	920c      	str	r2, [sp, #48]	@ 0x30
 8007768:	f000 fd58 	bl	800821c <_Bfree>
 800776c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800776e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007770:	9e07      	ldr	r6, [sp, #28]
 8007772:	ea43 0102 	orr.w	r1, r3, r2
 8007776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007778:	4319      	orrs	r1, r3
 800777a:	d110      	bne.n	800779e <_dtoa_r+0xa26>
 800777c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007780:	d029      	beq.n	80077d6 <_dtoa_r+0xa5e>
 8007782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	dd02      	ble.n	800778e <_dtoa_r+0xa16>
 8007788:	9b08      	ldr	r3, [sp, #32]
 800778a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800778e:	9b02      	ldr	r3, [sp, #8]
 8007790:	f883 8000 	strb.w	r8, [r3]
 8007794:	e63b      	b.n	800740e <_dtoa_r+0x696>
 8007796:	4628      	mov	r0, r5
 8007798:	e7bb      	b.n	8007712 <_dtoa_r+0x99a>
 800779a:	2201      	movs	r2, #1
 800779c:	e7e1      	b.n	8007762 <_dtoa_r+0x9ea>
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	db04      	blt.n	80077ae <_dtoa_r+0xa36>
 80077a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80077a6:	430b      	orrs	r3, r1
 80077a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077aa:	430b      	orrs	r3, r1
 80077ac:	d120      	bne.n	80077f0 <_dtoa_r+0xa78>
 80077ae:	2a00      	cmp	r2, #0
 80077b0:	dded      	ble.n	800778e <_dtoa_r+0xa16>
 80077b2:	4649      	mov	r1, r9
 80077b4:	2201      	movs	r2, #1
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 ff46 	bl	8008648 <__lshift>
 80077bc:	4621      	mov	r1, r4
 80077be:	4681      	mov	r9, r0
 80077c0:	f000 ffae 	bl	8008720 <__mcmp>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	dc03      	bgt.n	80077d0 <_dtoa_r+0xa58>
 80077c8:	d1e1      	bne.n	800778e <_dtoa_r+0xa16>
 80077ca:	f018 0f01 	tst.w	r8, #1
 80077ce:	d0de      	beq.n	800778e <_dtoa_r+0xa16>
 80077d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077d4:	d1d8      	bne.n	8007788 <_dtoa_r+0xa10>
 80077d6:	2339      	movs	r3, #57	@ 0x39
 80077d8:	9a02      	ldr	r2, [sp, #8]
 80077da:	7013      	strb	r3, [r2, #0]
 80077dc:	4633      	mov	r3, r6
 80077de:	461e      	mov	r6, r3
 80077e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	2a39      	cmp	r2, #57	@ 0x39
 80077e8:	d052      	beq.n	8007890 <_dtoa_r+0xb18>
 80077ea:	3201      	adds	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
 80077ee:	e60e      	b.n	800740e <_dtoa_r+0x696>
 80077f0:	2a00      	cmp	r2, #0
 80077f2:	dd07      	ble.n	8007804 <_dtoa_r+0xa8c>
 80077f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077f8:	d0ed      	beq.n	80077d6 <_dtoa_r+0xa5e>
 80077fa:	9a02      	ldr	r2, [sp, #8]
 80077fc:	f108 0301 	add.w	r3, r8, #1
 8007800:	7013      	strb	r3, [r2, #0]
 8007802:	e604      	b.n	800740e <_dtoa_r+0x696>
 8007804:	9b07      	ldr	r3, [sp, #28]
 8007806:	9a07      	ldr	r2, [sp, #28]
 8007808:	f803 8c01 	strb.w	r8, [r3, #-1]
 800780c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800780e:	4293      	cmp	r3, r2
 8007810:	d028      	beq.n	8007864 <_dtoa_r+0xaec>
 8007812:	4649      	mov	r1, r9
 8007814:	2300      	movs	r3, #0
 8007816:	220a      	movs	r2, #10
 8007818:	4658      	mov	r0, fp
 800781a:	f000 fd21 	bl	8008260 <__multadd>
 800781e:	42af      	cmp	r7, r5
 8007820:	4681      	mov	r9, r0
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	f04f 020a 	mov.w	r2, #10
 800782a:	4639      	mov	r1, r7
 800782c:	4658      	mov	r0, fp
 800782e:	d107      	bne.n	8007840 <_dtoa_r+0xac8>
 8007830:	f000 fd16 	bl	8008260 <__multadd>
 8007834:	4607      	mov	r7, r0
 8007836:	4605      	mov	r5, r0
 8007838:	9b07      	ldr	r3, [sp, #28]
 800783a:	3301      	adds	r3, #1
 800783c:	9307      	str	r3, [sp, #28]
 800783e:	e774      	b.n	800772a <_dtoa_r+0x9b2>
 8007840:	f000 fd0e 	bl	8008260 <__multadd>
 8007844:	4629      	mov	r1, r5
 8007846:	4607      	mov	r7, r0
 8007848:	2300      	movs	r3, #0
 800784a:	220a      	movs	r2, #10
 800784c:	4658      	mov	r0, fp
 800784e:	f000 fd07 	bl	8008260 <__multadd>
 8007852:	4605      	mov	r5, r0
 8007854:	e7f0      	b.n	8007838 <_dtoa_r+0xac0>
 8007856:	9b08      	ldr	r3, [sp, #32]
 8007858:	2700      	movs	r7, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	bfcc      	ite	gt
 800785e:	461e      	movgt	r6, r3
 8007860:	2601      	movle	r6, #1
 8007862:	4456      	add	r6, sl
 8007864:	4649      	mov	r1, r9
 8007866:	2201      	movs	r2, #1
 8007868:	4658      	mov	r0, fp
 800786a:	f000 feed 	bl	8008648 <__lshift>
 800786e:	4621      	mov	r1, r4
 8007870:	4681      	mov	r9, r0
 8007872:	f000 ff55 	bl	8008720 <__mcmp>
 8007876:	2800      	cmp	r0, #0
 8007878:	dcb0      	bgt.n	80077dc <_dtoa_r+0xa64>
 800787a:	d102      	bne.n	8007882 <_dtoa_r+0xb0a>
 800787c:	f018 0f01 	tst.w	r8, #1
 8007880:	d1ac      	bne.n	80077dc <_dtoa_r+0xa64>
 8007882:	4633      	mov	r3, r6
 8007884:	461e      	mov	r6, r3
 8007886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800788a:	2a30      	cmp	r2, #48	@ 0x30
 800788c:	d0fa      	beq.n	8007884 <_dtoa_r+0xb0c>
 800788e:	e5be      	b.n	800740e <_dtoa_r+0x696>
 8007890:	459a      	cmp	sl, r3
 8007892:	d1a4      	bne.n	80077de <_dtoa_r+0xa66>
 8007894:	9b04      	ldr	r3, [sp, #16]
 8007896:	3301      	adds	r3, #1
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	2331      	movs	r3, #49	@ 0x31
 800789c:	f88a 3000 	strb.w	r3, [sl]
 80078a0:	e5b5      	b.n	800740e <_dtoa_r+0x696>
 80078a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007904 <_dtoa_r+0xb8c>
 80078a8:	b11b      	cbz	r3, 80078b2 <_dtoa_r+0xb3a>
 80078aa:	f10a 0308 	add.w	r3, sl, #8
 80078ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4650      	mov	r0, sl
 80078b4:	b017      	add	sp, #92	@ 0x5c
 80078b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078bc:	2b01      	cmp	r3, #1
 80078be:	f77f ae3d 	ble.w	800753c <_dtoa_r+0x7c4>
 80078c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c6:	2001      	movs	r0, #1
 80078c8:	e65b      	b.n	8007582 <_dtoa_r+0x80a>
 80078ca:	9b08      	ldr	r3, [sp, #32]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f77f aed6 	ble.w	800767e <_dtoa_r+0x906>
 80078d2:	4656      	mov	r6, sl
 80078d4:	4621      	mov	r1, r4
 80078d6:	4648      	mov	r0, r9
 80078d8:	f7ff f9c4 	bl	8006c64 <quorem>
 80078dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078e0:	9b08      	ldr	r3, [sp, #32]
 80078e2:	f806 8b01 	strb.w	r8, [r6], #1
 80078e6:	eba6 020a 	sub.w	r2, r6, sl
 80078ea:	4293      	cmp	r3, r2
 80078ec:	ddb3      	ble.n	8007856 <_dtoa_r+0xade>
 80078ee:	4649      	mov	r1, r9
 80078f0:	2300      	movs	r3, #0
 80078f2:	220a      	movs	r2, #10
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fcb3 	bl	8008260 <__multadd>
 80078fa:	4681      	mov	r9, r0
 80078fc:	e7ea      	b.n	80078d4 <_dtoa_r+0xb5c>
 80078fe:	bf00      	nop
 8007900:	08009818 	.word	0x08009818
 8007904:	0800979c 	.word	0x0800979c

08007908 <_free_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4605      	mov	r5, r0
 800790c:	2900      	cmp	r1, #0
 800790e:	d040      	beq.n	8007992 <_free_r+0x8a>
 8007910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007914:	1f0c      	subs	r4, r1, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	bfb8      	it	lt
 800791a:	18e4      	addlt	r4, r4, r3
 800791c:	f000 fc32 	bl	8008184 <__malloc_lock>
 8007920:	4a1c      	ldr	r2, [pc, #112]	@ (8007994 <_free_r+0x8c>)
 8007922:	6813      	ldr	r3, [r2, #0]
 8007924:	b933      	cbnz	r3, 8007934 <_free_r+0x2c>
 8007926:	6063      	str	r3, [r4, #4]
 8007928:	6014      	str	r4, [r2, #0]
 800792a:	4628      	mov	r0, r5
 800792c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007930:	f000 bc2e 	b.w	8008190 <__malloc_unlock>
 8007934:	42a3      	cmp	r3, r4
 8007936:	d908      	bls.n	800794a <_free_r+0x42>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	1821      	adds	r1, r4, r0
 800793c:	428b      	cmp	r3, r1
 800793e:	bf01      	itttt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	1809      	addeq	r1, r1, r0
 8007946:	6021      	streq	r1, [r4, #0]
 8007948:	e7ed      	b.n	8007926 <_free_r+0x1e>
 800794a:	461a      	mov	r2, r3
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	b10b      	cbz	r3, 8007954 <_free_r+0x4c>
 8007950:	42a3      	cmp	r3, r4
 8007952:	d9fa      	bls.n	800794a <_free_r+0x42>
 8007954:	6811      	ldr	r1, [r2, #0]
 8007956:	1850      	adds	r0, r2, r1
 8007958:	42a0      	cmp	r0, r4
 800795a:	d10b      	bne.n	8007974 <_free_r+0x6c>
 800795c:	6820      	ldr	r0, [r4, #0]
 800795e:	4401      	add	r1, r0
 8007960:	1850      	adds	r0, r2, r1
 8007962:	4283      	cmp	r3, r0
 8007964:	6011      	str	r1, [r2, #0]
 8007966:	d1e0      	bne.n	800792a <_free_r+0x22>
 8007968:	6818      	ldr	r0, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	4408      	add	r0, r1
 800796e:	6010      	str	r0, [r2, #0]
 8007970:	6053      	str	r3, [r2, #4]
 8007972:	e7da      	b.n	800792a <_free_r+0x22>
 8007974:	d902      	bls.n	800797c <_free_r+0x74>
 8007976:	230c      	movs	r3, #12
 8007978:	602b      	str	r3, [r5, #0]
 800797a:	e7d6      	b.n	800792a <_free_r+0x22>
 800797c:	6820      	ldr	r0, [r4, #0]
 800797e:	1821      	adds	r1, r4, r0
 8007980:	428b      	cmp	r3, r1
 8007982:	bf01      	itttt	eq
 8007984:	6819      	ldreq	r1, [r3, #0]
 8007986:	685b      	ldreq	r3, [r3, #4]
 8007988:	1809      	addeq	r1, r1, r0
 800798a:	6021      	streq	r1, [r4, #0]
 800798c:	6063      	str	r3, [r4, #4]
 800798e:	6054      	str	r4, [r2, #4]
 8007990:	e7cb      	b.n	800792a <_free_r+0x22>
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000458 	.word	0x20000458

08007998 <rshift>:
 8007998:	6903      	ldr	r3, [r0, #16]
 800799a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800799e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079a2:	f100 0414 	add.w	r4, r0, #20
 80079a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079aa:	dd46      	ble.n	8007a3a <rshift+0xa2>
 80079ac:	f011 011f 	ands.w	r1, r1, #31
 80079b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079b8:	d10c      	bne.n	80079d4 <rshift+0x3c>
 80079ba:	4629      	mov	r1, r5
 80079bc:	f100 0710 	add.w	r7, r0, #16
 80079c0:	42b1      	cmp	r1, r6
 80079c2:	d335      	bcc.n	8007a30 <rshift+0x98>
 80079c4:	1a9b      	subs	r3, r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	1eea      	subs	r2, r5, #3
 80079ca:	4296      	cmp	r6, r2
 80079cc:	bf38      	it	cc
 80079ce:	2300      	movcc	r3, #0
 80079d0:	4423      	add	r3, r4
 80079d2:	e015      	b.n	8007a00 <rshift+0x68>
 80079d4:	46a1      	mov	r9, r4
 80079d6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079da:	f1c1 0820 	rsb	r8, r1, #32
 80079de:	40cf      	lsrs	r7, r1
 80079e0:	f105 0e04 	add.w	lr, r5, #4
 80079e4:	4576      	cmp	r6, lr
 80079e6:	46f4      	mov	ip, lr
 80079e8:	d816      	bhi.n	8007a18 <rshift+0x80>
 80079ea:	1a9a      	subs	r2, r3, r2
 80079ec:	0092      	lsls	r2, r2, #2
 80079ee:	3a04      	subs	r2, #4
 80079f0:	3501      	adds	r5, #1
 80079f2:	42ae      	cmp	r6, r5
 80079f4:	bf38      	it	cc
 80079f6:	2200      	movcc	r2, #0
 80079f8:	18a3      	adds	r3, r4, r2
 80079fa:	50a7      	str	r7, [r4, r2]
 80079fc:	b107      	cbz	r7, 8007a00 <rshift+0x68>
 80079fe:	3304      	adds	r3, #4
 8007a00:	42a3      	cmp	r3, r4
 8007a02:	eba3 0204 	sub.w	r2, r3, r4
 8007a06:	bf08      	it	eq
 8007a08:	2300      	moveq	r3, #0
 8007a0a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a0e:	6102      	str	r2, [r0, #16]
 8007a10:	bf08      	it	eq
 8007a12:	6143      	streq	r3, [r0, #20]
 8007a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a18:	f8dc c000 	ldr.w	ip, [ip]
 8007a1c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a20:	ea4c 0707 	orr.w	r7, ip, r7
 8007a24:	f849 7b04 	str.w	r7, [r9], #4
 8007a28:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a2c:	40cf      	lsrs	r7, r1
 8007a2e:	e7d9      	b.n	80079e4 <rshift+0x4c>
 8007a30:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a34:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a38:	e7c2      	b.n	80079c0 <rshift+0x28>
 8007a3a:	4623      	mov	r3, r4
 8007a3c:	e7e0      	b.n	8007a00 <rshift+0x68>

08007a3e <__hexdig_fun>:
 8007a3e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007a42:	2b09      	cmp	r3, #9
 8007a44:	d802      	bhi.n	8007a4c <__hexdig_fun+0xe>
 8007a46:	3820      	subs	r0, #32
 8007a48:	b2c0      	uxtb	r0, r0
 8007a4a:	4770      	bx	lr
 8007a4c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007a50:	2b05      	cmp	r3, #5
 8007a52:	d801      	bhi.n	8007a58 <__hexdig_fun+0x1a>
 8007a54:	3847      	subs	r0, #71	@ 0x47
 8007a56:	e7f7      	b.n	8007a48 <__hexdig_fun+0xa>
 8007a58:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007a5c:	2b05      	cmp	r3, #5
 8007a5e:	d801      	bhi.n	8007a64 <__hexdig_fun+0x26>
 8007a60:	3827      	subs	r0, #39	@ 0x27
 8007a62:	e7f1      	b.n	8007a48 <__hexdig_fun+0xa>
 8007a64:	2000      	movs	r0, #0
 8007a66:	4770      	bx	lr

08007a68 <__gethex>:
 8007a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a6c:	468a      	mov	sl, r1
 8007a6e:	4690      	mov	r8, r2
 8007a70:	b085      	sub	sp, #20
 8007a72:	9302      	str	r3, [sp, #8]
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	9001      	str	r0, [sp, #4]
 8007a78:	1c9c      	adds	r4, r3, #2
 8007a7a:	46a1      	mov	r9, r4
 8007a7c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a80:	2830      	cmp	r0, #48	@ 0x30
 8007a82:	d0fa      	beq.n	8007a7a <__gethex+0x12>
 8007a84:	eba9 0303 	sub.w	r3, r9, r3
 8007a88:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a8c:	f7ff ffd7 	bl	8007a3e <__hexdig_fun>
 8007a90:	4605      	mov	r5, r0
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d168      	bne.n	8007b68 <__gethex+0x100>
 8007a96:	2201      	movs	r2, #1
 8007a98:	4648      	mov	r0, r9
 8007a9a:	499f      	ldr	r1, [pc, #636]	@ (8007d18 <__gethex+0x2b0>)
 8007a9c:	f7ff f835 	bl	8006b0a <strncmp>
 8007aa0:	4607      	mov	r7, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d167      	bne.n	8007b76 <__gethex+0x10e>
 8007aa6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007aaa:	4626      	mov	r6, r4
 8007aac:	f7ff ffc7 	bl	8007a3e <__hexdig_fun>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	d062      	beq.n	8007b7a <__gethex+0x112>
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	7818      	ldrb	r0, [r3, #0]
 8007ab8:	4699      	mov	r9, r3
 8007aba:	2830      	cmp	r0, #48	@ 0x30
 8007abc:	f103 0301 	add.w	r3, r3, #1
 8007ac0:	d0f9      	beq.n	8007ab6 <__gethex+0x4e>
 8007ac2:	f7ff ffbc 	bl	8007a3e <__hexdig_fun>
 8007ac6:	fab0 f580 	clz	r5, r0
 8007aca:	f04f 0b01 	mov.w	fp, #1
 8007ace:	096d      	lsrs	r5, r5, #5
 8007ad0:	464a      	mov	r2, r9
 8007ad2:	4616      	mov	r6, r2
 8007ad4:	7830      	ldrb	r0, [r6, #0]
 8007ad6:	3201      	adds	r2, #1
 8007ad8:	f7ff ffb1 	bl	8007a3e <__hexdig_fun>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	d1f8      	bne.n	8007ad2 <__gethex+0x6a>
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	498c      	ldr	r1, [pc, #560]	@ (8007d18 <__gethex+0x2b0>)
 8007ae6:	f7ff f810 	bl	8006b0a <strncmp>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d13f      	bne.n	8007b6e <__gethex+0x106>
 8007aee:	b944      	cbnz	r4, 8007b02 <__gethex+0x9a>
 8007af0:	1c74      	adds	r4, r6, #1
 8007af2:	4622      	mov	r2, r4
 8007af4:	4616      	mov	r6, r2
 8007af6:	7830      	ldrb	r0, [r6, #0]
 8007af8:	3201      	adds	r2, #1
 8007afa:	f7ff ffa0 	bl	8007a3e <__hexdig_fun>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d1f8      	bne.n	8007af4 <__gethex+0x8c>
 8007b02:	1ba4      	subs	r4, r4, r6
 8007b04:	00a7      	lsls	r7, r4, #2
 8007b06:	7833      	ldrb	r3, [r6, #0]
 8007b08:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007b0c:	2b50      	cmp	r3, #80	@ 0x50
 8007b0e:	d13e      	bne.n	8007b8e <__gethex+0x126>
 8007b10:	7873      	ldrb	r3, [r6, #1]
 8007b12:	2b2b      	cmp	r3, #43	@ 0x2b
 8007b14:	d033      	beq.n	8007b7e <__gethex+0x116>
 8007b16:	2b2d      	cmp	r3, #45	@ 0x2d
 8007b18:	d034      	beq.n	8007b84 <__gethex+0x11c>
 8007b1a:	2400      	movs	r4, #0
 8007b1c:	1c71      	adds	r1, r6, #1
 8007b1e:	7808      	ldrb	r0, [r1, #0]
 8007b20:	f7ff ff8d 	bl	8007a3e <__hexdig_fun>
 8007b24:	1e43      	subs	r3, r0, #1
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b18      	cmp	r3, #24
 8007b2a:	d830      	bhi.n	8007b8e <__gethex+0x126>
 8007b2c:	f1a0 0210 	sub.w	r2, r0, #16
 8007b30:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b34:	f7ff ff83 	bl	8007a3e <__hexdig_fun>
 8007b38:	f100 3cff 	add.w	ip, r0, #4294967295
 8007b3c:	fa5f fc8c 	uxtb.w	ip, ip
 8007b40:	f1bc 0f18 	cmp.w	ip, #24
 8007b44:	f04f 030a 	mov.w	r3, #10
 8007b48:	d91e      	bls.n	8007b88 <__gethex+0x120>
 8007b4a:	b104      	cbz	r4, 8007b4e <__gethex+0xe6>
 8007b4c:	4252      	negs	r2, r2
 8007b4e:	4417      	add	r7, r2
 8007b50:	f8ca 1000 	str.w	r1, [sl]
 8007b54:	b1ed      	cbz	r5, 8007b92 <__gethex+0x12a>
 8007b56:	f1bb 0f00 	cmp.w	fp, #0
 8007b5a:	bf0c      	ite	eq
 8007b5c:	2506      	moveq	r5, #6
 8007b5e:	2500      	movne	r5, #0
 8007b60:	4628      	mov	r0, r5
 8007b62:	b005      	add	sp, #20
 8007b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b68:	2500      	movs	r5, #0
 8007b6a:	462c      	mov	r4, r5
 8007b6c:	e7b0      	b.n	8007ad0 <__gethex+0x68>
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	d1c7      	bne.n	8007b02 <__gethex+0x9a>
 8007b72:	4627      	mov	r7, r4
 8007b74:	e7c7      	b.n	8007b06 <__gethex+0x9e>
 8007b76:	464e      	mov	r6, r9
 8007b78:	462f      	mov	r7, r5
 8007b7a:	2501      	movs	r5, #1
 8007b7c:	e7c3      	b.n	8007b06 <__gethex+0x9e>
 8007b7e:	2400      	movs	r4, #0
 8007b80:	1cb1      	adds	r1, r6, #2
 8007b82:	e7cc      	b.n	8007b1e <__gethex+0xb6>
 8007b84:	2401      	movs	r4, #1
 8007b86:	e7fb      	b.n	8007b80 <__gethex+0x118>
 8007b88:	fb03 0002 	mla	r0, r3, r2, r0
 8007b8c:	e7ce      	b.n	8007b2c <__gethex+0xc4>
 8007b8e:	4631      	mov	r1, r6
 8007b90:	e7de      	b.n	8007b50 <__gethex+0xe8>
 8007b92:	4629      	mov	r1, r5
 8007b94:	eba6 0309 	sub.w	r3, r6, r9
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	2b07      	cmp	r3, #7
 8007b9c:	dc0a      	bgt.n	8007bb4 <__gethex+0x14c>
 8007b9e:	9801      	ldr	r0, [sp, #4]
 8007ba0:	f000 fafc 	bl	800819c <_Balloc>
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	b940      	cbnz	r0, 8007bba <__gethex+0x152>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	21e4      	movs	r1, #228	@ 0xe4
 8007bac:	4b5b      	ldr	r3, [pc, #364]	@ (8007d1c <__gethex+0x2b4>)
 8007bae:	485c      	ldr	r0, [pc, #368]	@ (8007d20 <__gethex+0x2b8>)
 8007bb0:	f001 f9d0 	bl	8008f54 <__assert_func>
 8007bb4:	3101      	adds	r1, #1
 8007bb6:	105b      	asrs	r3, r3, #1
 8007bb8:	e7ef      	b.n	8007b9a <__gethex+0x132>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f100 0a14 	add.w	sl, r0, #20
 8007bc0:	4655      	mov	r5, sl
 8007bc2:	469b      	mov	fp, r3
 8007bc4:	45b1      	cmp	r9, r6
 8007bc6:	d337      	bcc.n	8007c38 <__gethex+0x1d0>
 8007bc8:	f845 bb04 	str.w	fp, [r5], #4
 8007bcc:	eba5 050a 	sub.w	r5, r5, sl
 8007bd0:	10ad      	asrs	r5, r5, #2
 8007bd2:	6125      	str	r5, [r4, #16]
 8007bd4:	4658      	mov	r0, fp
 8007bd6:	f000 fbd3 	bl	8008380 <__hi0bits>
 8007bda:	016d      	lsls	r5, r5, #5
 8007bdc:	f8d8 6000 	ldr.w	r6, [r8]
 8007be0:	1a2d      	subs	r5, r5, r0
 8007be2:	42b5      	cmp	r5, r6
 8007be4:	dd54      	ble.n	8007c90 <__gethex+0x228>
 8007be6:	1bad      	subs	r5, r5, r6
 8007be8:	4629      	mov	r1, r5
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 ff5b 	bl	8008aa6 <__any_on>
 8007bf0:	4681      	mov	r9, r0
 8007bf2:	b178      	cbz	r0, 8007c14 <__gethex+0x1ac>
 8007bf4:	f04f 0901 	mov.w	r9, #1
 8007bf8:	1e6b      	subs	r3, r5, #1
 8007bfa:	1159      	asrs	r1, r3, #5
 8007bfc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007c00:	f003 021f 	and.w	r2, r3, #31
 8007c04:	fa09 f202 	lsl.w	r2, r9, r2
 8007c08:	420a      	tst	r2, r1
 8007c0a:	d003      	beq.n	8007c14 <__gethex+0x1ac>
 8007c0c:	454b      	cmp	r3, r9
 8007c0e:	dc36      	bgt.n	8007c7e <__gethex+0x216>
 8007c10:	f04f 0902 	mov.w	r9, #2
 8007c14:	4629      	mov	r1, r5
 8007c16:	4620      	mov	r0, r4
 8007c18:	f7ff febe 	bl	8007998 <rshift>
 8007c1c:	442f      	add	r7, r5
 8007c1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c22:	42bb      	cmp	r3, r7
 8007c24:	da42      	bge.n	8007cac <__gethex+0x244>
 8007c26:	4621      	mov	r1, r4
 8007c28:	9801      	ldr	r0, [sp, #4]
 8007c2a:	f000 faf7 	bl	800821c <_Bfree>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c32:	25a3      	movs	r5, #163	@ 0xa3
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	e793      	b.n	8007b60 <__gethex+0xf8>
 8007c38:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007c3c:	2a2e      	cmp	r2, #46	@ 0x2e
 8007c3e:	d012      	beq.n	8007c66 <__gethex+0x1fe>
 8007c40:	2b20      	cmp	r3, #32
 8007c42:	d104      	bne.n	8007c4e <__gethex+0x1e6>
 8007c44:	f845 bb04 	str.w	fp, [r5], #4
 8007c48:	f04f 0b00 	mov.w	fp, #0
 8007c4c:	465b      	mov	r3, fp
 8007c4e:	7830      	ldrb	r0, [r6, #0]
 8007c50:	9303      	str	r3, [sp, #12]
 8007c52:	f7ff fef4 	bl	8007a3e <__hexdig_fun>
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	f000 000f 	and.w	r0, r0, #15
 8007c5c:	4098      	lsls	r0, r3
 8007c5e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007c62:	3304      	adds	r3, #4
 8007c64:	e7ae      	b.n	8007bc4 <__gethex+0x15c>
 8007c66:	45b1      	cmp	r9, r6
 8007c68:	d8ea      	bhi.n	8007c40 <__gethex+0x1d8>
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	492a      	ldr	r1, [pc, #168]	@ (8007d18 <__gethex+0x2b0>)
 8007c70:	9303      	str	r3, [sp, #12]
 8007c72:	f7fe ff4a 	bl	8006b0a <strncmp>
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d1e1      	bne.n	8007c40 <__gethex+0x1d8>
 8007c7c:	e7a2      	b.n	8007bc4 <__gethex+0x15c>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	1ea9      	subs	r1, r5, #2
 8007c82:	f000 ff10 	bl	8008aa6 <__any_on>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d0c2      	beq.n	8007c10 <__gethex+0x1a8>
 8007c8a:	f04f 0903 	mov.w	r9, #3
 8007c8e:	e7c1      	b.n	8007c14 <__gethex+0x1ac>
 8007c90:	da09      	bge.n	8007ca6 <__gethex+0x23e>
 8007c92:	1b75      	subs	r5, r6, r5
 8007c94:	4621      	mov	r1, r4
 8007c96:	462a      	mov	r2, r5
 8007c98:	9801      	ldr	r0, [sp, #4]
 8007c9a:	f000 fcd5 	bl	8008648 <__lshift>
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	1b7f      	subs	r7, r7, r5
 8007ca2:	f100 0a14 	add.w	sl, r0, #20
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	e7b8      	b.n	8007c1e <__gethex+0x1b6>
 8007cac:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007cb0:	42bd      	cmp	r5, r7
 8007cb2:	dd6f      	ble.n	8007d94 <__gethex+0x32c>
 8007cb4:	1bed      	subs	r5, r5, r7
 8007cb6:	42ae      	cmp	r6, r5
 8007cb8:	dc34      	bgt.n	8007d24 <__gethex+0x2bc>
 8007cba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d022      	beq.n	8007d08 <__gethex+0x2a0>
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d024      	beq.n	8007d10 <__gethex+0x2a8>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d115      	bne.n	8007cf6 <__gethex+0x28e>
 8007cca:	42ae      	cmp	r6, r5
 8007ccc:	d113      	bne.n	8007cf6 <__gethex+0x28e>
 8007cce:	2e01      	cmp	r6, #1
 8007cd0:	d10b      	bne.n	8007cea <__gethex+0x282>
 8007cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007cd6:	9a02      	ldr	r2, [sp, #8]
 8007cd8:	2562      	movs	r5, #98	@ 0x62
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	2301      	movs	r3, #1
 8007cde:	6123      	str	r3, [r4, #16]
 8007ce0:	f8ca 3000 	str.w	r3, [sl]
 8007ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ce6:	601c      	str	r4, [r3, #0]
 8007ce8:	e73a      	b.n	8007b60 <__gethex+0xf8>
 8007cea:	4620      	mov	r0, r4
 8007cec:	1e71      	subs	r1, r6, #1
 8007cee:	f000 feda 	bl	8008aa6 <__any_on>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d1ed      	bne.n	8007cd2 <__gethex+0x26a>
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	9801      	ldr	r0, [sp, #4]
 8007cfa:	f000 fa8f 	bl	800821c <_Bfree>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d02:	2550      	movs	r5, #80	@ 0x50
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	e72b      	b.n	8007b60 <__gethex+0xf8>
 8007d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1f3      	bne.n	8007cf6 <__gethex+0x28e>
 8007d0e:	e7e0      	b.n	8007cd2 <__gethex+0x26a>
 8007d10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1dd      	bne.n	8007cd2 <__gethex+0x26a>
 8007d16:	e7ee      	b.n	8007cf6 <__gethex+0x28e>
 8007d18:	0800970e 	.word	0x0800970e
 8007d1c:	08009818 	.word	0x08009818
 8007d20:	08009829 	.word	0x08009829
 8007d24:	1e6f      	subs	r7, r5, #1
 8007d26:	f1b9 0f00 	cmp.w	r9, #0
 8007d2a:	d130      	bne.n	8007d8e <__gethex+0x326>
 8007d2c:	b127      	cbz	r7, 8007d38 <__gethex+0x2d0>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 feb8 	bl	8008aa6 <__any_on>
 8007d36:	4681      	mov	r9, r0
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	1b76      	subs	r6, r6, r5
 8007d3e:	2502      	movs	r5, #2
 8007d40:	117a      	asrs	r2, r7, #5
 8007d42:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007d46:	f007 071f 	and.w	r7, r7, #31
 8007d4a:	40bb      	lsls	r3, r7
 8007d4c:	4213      	tst	r3, r2
 8007d4e:	4620      	mov	r0, r4
 8007d50:	bf18      	it	ne
 8007d52:	f049 0902 	orrne.w	r9, r9, #2
 8007d56:	f7ff fe1f 	bl	8007998 <rshift>
 8007d5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d047      	beq.n	8007df4 <__gethex+0x38c>
 8007d64:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d015      	beq.n	8007d98 <__gethex+0x330>
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d017      	beq.n	8007da0 <__gethex+0x338>
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d109      	bne.n	8007d88 <__gethex+0x320>
 8007d74:	f019 0f02 	tst.w	r9, #2
 8007d78:	d006      	beq.n	8007d88 <__gethex+0x320>
 8007d7a:	f8da 3000 	ldr.w	r3, [sl]
 8007d7e:	ea49 0903 	orr.w	r9, r9, r3
 8007d82:	f019 0f01 	tst.w	r9, #1
 8007d86:	d10e      	bne.n	8007da6 <__gethex+0x33e>
 8007d88:	f045 0510 	orr.w	r5, r5, #16
 8007d8c:	e032      	b.n	8007df4 <__gethex+0x38c>
 8007d8e:	f04f 0901 	mov.w	r9, #1
 8007d92:	e7d1      	b.n	8007d38 <__gethex+0x2d0>
 8007d94:	2501      	movs	r5, #1
 8007d96:	e7e2      	b.n	8007d5e <__gethex+0x2f6>
 8007d98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d9a:	f1c3 0301 	rsb	r3, r3, #1
 8007d9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <__gethex+0x320>
 8007da6:	f04f 0c00 	mov.w	ip, #0
 8007daa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007dae:	f104 0314 	add.w	r3, r4, #20
 8007db2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007db6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007dc4:	d01b      	beq.n	8007dfe <__gethex+0x396>
 8007dc6:	3201      	adds	r2, #1
 8007dc8:	6002      	str	r2, [r0, #0]
 8007dca:	2d02      	cmp	r5, #2
 8007dcc:	f104 0314 	add.w	r3, r4, #20
 8007dd0:	d13c      	bne.n	8007e4c <__gethex+0x3e4>
 8007dd2:	f8d8 2000 	ldr.w	r2, [r8]
 8007dd6:	3a01      	subs	r2, #1
 8007dd8:	42b2      	cmp	r2, r6
 8007dda:	d109      	bne.n	8007df0 <__gethex+0x388>
 8007ddc:	2201      	movs	r2, #1
 8007dde:	1171      	asrs	r1, r6, #5
 8007de0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007de4:	f006 061f 	and.w	r6, r6, #31
 8007de8:	fa02 f606 	lsl.w	r6, r2, r6
 8007dec:	421e      	tst	r6, r3
 8007dee:	d13a      	bne.n	8007e66 <__gethex+0x3fe>
 8007df0:	f045 0520 	orr.w	r5, r5, #32
 8007df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007df6:	601c      	str	r4, [r3, #0]
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	601f      	str	r7, [r3, #0]
 8007dfc:	e6b0      	b.n	8007b60 <__gethex+0xf8>
 8007dfe:	4299      	cmp	r1, r3
 8007e00:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e04:	d8d9      	bhi.n	8007dba <__gethex+0x352>
 8007e06:	68a3      	ldr	r3, [r4, #8]
 8007e08:	459b      	cmp	fp, r3
 8007e0a:	db17      	blt.n	8007e3c <__gethex+0x3d4>
 8007e0c:	6861      	ldr	r1, [r4, #4]
 8007e0e:	9801      	ldr	r0, [sp, #4]
 8007e10:	3101      	adds	r1, #1
 8007e12:	f000 f9c3 	bl	800819c <_Balloc>
 8007e16:	4681      	mov	r9, r0
 8007e18:	b918      	cbnz	r0, 8007e22 <__gethex+0x3ba>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	2184      	movs	r1, #132	@ 0x84
 8007e1e:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <__gethex+0x41c>)
 8007e20:	e6c5      	b.n	8007bae <__gethex+0x146>
 8007e22:	6922      	ldr	r2, [r4, #16]
 8007e24:	f104 010c 	add.w	r1, r4, #12
 8007e28:	3202      	adds	r2, #2
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	300c      	adds	r0, #12
 8007e2e:	f7fe ff04 	bl	8006c3a <memcpy>
 8007e32:	4621      	mov	r1, r4
 8007e34:	9801      	ldr	r0, [sp, #4]
 8007e36:	f000 f9f1 	bl	800821c <_Bfree>
 8007e3a:	464c      	mov	r4, r9
 8007e3c:	6923      	ldr	r3, [r4, #16]
 8007e3e:	1c5a      	adds	r2, r3, #1
 8007e40:	6122      	str	r2, [r4, #16]
 8007e42:	2201      	movs	r2, #1
 8007e44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e48:	615a      	str	r2, [r3, #20]
 8007e4a:	e7be      	b.n	8007dca <__gethex+0x362>
 8007e4c:	6922      	ldr	r2, [r4, #16]
 8007e4e:	455a      	cmp	r2, fp
 8007e50:	dd0b      	ble.n	8007e6a <__gethex+0x402>
 8007e52:	2101      	movs	r1, #1
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff fd9f 	bl	8007998 <rshift>
 8007e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e5e:	3701      	adds	r7, #1
 8007e60:	42bb      	cmp	r3, r7
 8007e62:	f6ff aee0 	blt.w	8007c26 <__gethex+0x1be>
 8007e66:	2501      	movs	r5, #1
 8007e68:	e7c2      	b.n	8007df0 <__gethex+0x388>
 8007e6a:	f016 061f 	ands.w	r6, r6, #31
 8007e6e:	d0fa      	beq.n	8007e66 <__gethex+0x3fe>
 8007e70:	4453      	add	r3, sl
 8007e72:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e76:	f000 fa83 	bl	8008380 <__hi0bits>
 8007e7a:	f1c6 0620 	rsb	r6, r6, #32
 8007e7e:	42b0      	cmp	r0, r6
 8007e80:	dbe7      	blt.n	8007e52 <__gethex+0x3ea>
 8007e82:	e7f0      	b.n	8007e66 <__gethex+0x3fe>
 8007e84:	08009818 	.word	0x08009818

08007e88 <L_shift>:
 8007e88:	f1c2 0208 	rsb	r2, r2, #8
 8007e8c:	0092      	lsls	r2, r2, #2
 8007e8e:	b570      	push	{r4, r5, r6, lr}
 8007e90:	f1c2 0620 	rsb	r6, r2, #32
 8007e94:	6843      	ldr	r3, [r0, #4]
 8007e96:	6804      	ldr	r4, [r0, #0]
 8007e98:	fa03 f506 	lsl.w	r5, r3, r6
 8007e9c:	432c      	orrs	r4, r5
 8007e9e:	40d3      	lsrs	r3, r2
 8007ea0:	6004      	str	r4, [r0, #0]
 8007ea2:	f840 3f04 	str.w	r3, [r0, #4]!
 8007ea6:	4288      	cmp	r0, r1
 8007ea8:	d3f4      	bcc.n	8007e94 <L_shift+0xc>
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}

08007eac <__match>:
 8007eac:	b530      	push	{r4, r5, lr}
 8007eae:	6803      	ldr	r3, [r0, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb6:	b914      	cbnz	r4, 8007ebe <__match+0x12>
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	bd30      	pop	{r4, r5, pc}
 8007ebe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ec2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007ec6:	2d19      	cmp	r5, #25
 8007ec8:	bf98      	it	ls
 8007eca:	3220      	addls	r2, #32
 8007ecc:	42a2      	cmp	r2, r4
 8007ece:	d0f0      	beq.n	8007eb2 <__match+0x6>
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	e7f3      	b.n	8007ebc <__match+0x10>

08007ed4 <__hexnan>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	2500      	movs	r5, #0
 8007eda:	680b      	ldr	r3, [r1, #0]
 8007edc:	4682      	mov	sl, r0
 8007ede:	115e      	asrs	r6, r3, #5
 8007ee0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007ee4:	f013 031f 	ands.w	r3, r3, #31
 8007ee8:	bf18      	it	ne
 8007eea:	3604      	addne	r6, #4
 8007eec:	1f37      	subs	r7, r6, #4
 8007eee:	4690      	mov	r8, r2
 8007ef0:	46b9      	mov	r9, r7
 8007ef2:	463c      	mov	r4, r7
 8007ef4:	46ab      	mov	fp, r5
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	6801      	ldr	r1, [r0, #0]
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f00:	9502      	str	r5, [sp, #8]
 8007f02:	784a      	ldrb	r2, [r1, #1]
 8007f04:	1c4b      	adds	r3, r1, #1
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	b342      	cbz	r2, 8007f5c <__hexnan+0x88>
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	9105      	str	r1, [sp, #20]
 8007f0e:	9204      	str	r2, [sp, #16]
 8007f10:	f7ff fd95 	bl	8007a3e <__hexdig_fun>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d151      	bne.n	8007fbc <__hexnan+0xe8>
 8007f18:	9a04      	ldr	r2, [sp, #16]
 8007f1a:	9905      	ldr	r1, [sp, #20]
 8007f1c:	2a20      	cmp	r2, #32
 8007f1e:	d818      	bhi.n	8007f52 <__hexnan+0x7e>
 8007f20:	9b02      	ldr	r3, [sp, #8]
 8007f22:	459b      	cmp	fp, r3
 8007f24:	dd13      	ble.n	8007f4e <__hexnan+0x7a>
 8007f26:	454c      	cmp	r4, r9
 8007f28:	d206      	bcs.n	8007f38 <__hexnan+0x64>
 8007f2a:	2d07      	cmp	r5, #7
 8007f2c:	dc04      	bgt.n	8007f38 <__hexnan+0x64>
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4649      	mov	r1, r9
 8007f32:	4620      	mov	r0, r4
 8007f34:	f7ff ffa8 	bl	8007e88 <L_shift>
 8007f38:	4544      	cmp	r4, r8
 8007f3a:	d952      	bls.n	8007fe2 <__hexnan+0x10e>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f1a4 0904 	sub.w	r9, r4, #4
 8007f42:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f46:	461d      	mov	r5, r3
 8007f48:	464c      	mov	r4, r9
 8007f4a:	f8cd b008 	str.w	fp, [sp, #8]
 8007f4e:	9903      	ldr	r1, [sp, #12]
 8007f50:	e7d7      	b.n	8007f02 <__hexnan+0x2e>
 8007f52:	2a29      	cmp	r2, #41	@ 0x29
 8007f54:	d157      	bne.n	8008006 <__hexnan+0x132>
 8007f56:	3102      	adds	r1, #2
 8007f58:	f8ca 1000 	str.w	r1, [sl]
 8007f5c:	f1bb 0f00 	cmp.w	fp, #0
 8007f60:	d051      	beq.n	8008006 <__hexnan+0x132>
 8007f62:	454c      	cmp	r4, r9
 8007f64:	d206      	bcs.n	8007f74 <__hexnan+0xa0>
 8007f66:	2d07      	cmp	r5, #7
 8007f68:	dc04      	bgt.n	8007f74 <__hexnan+0xa0>
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff ff8a 	bl	8007e88 <L_shift>
 8007f74:	4544      	cmp	r4, r8
 8007f76:	d936      	bls.n	8007fe6 <__hexnan+0x112>
 8007f78:	4623      	mov	r3, r4
 8007f7a:	f1a8 0204 	sub.w	r2, r8, #4
 8007f7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f82:	429f      	cmp	r7, r3
 8007f84:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f88:	d2f9      	bcs.n	8007f7e <__hexnan+0xaa>
 8007f8a:	1b3b      	subs	r3, r7, r4
 8007f8c:	f023 0303 	bic.w	r3, r3, #3
 8007f90:	3304      	adds	r3, #4
 8007f92:	3401      	adds	r4, #1
 8007f94:	3e03      	subs	r6, #3
 8007f96:	42b4      	cmp	r4, r6
 8007f98:	bf88      	it	hi
 8007f9a:	2304      	movhi	r3, #4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	4443      	add	r3, r8
 8007fa0:	f843 2b04 	str.w	r2, [r3], #4
 8007fa4:	429f      	cmp	r7, r3
 8007fa6:	d2fb      	bcs.n	8007fa0 <__hexnan+0xcc>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	b91b      	cbnz	r3, 8007fb4 <__hexnan+0xe0>
 8007fac:	4547      	cmp	r7, r8
 8007fae:	d128      	bne.n	8008002 <__hexnan+0x12e>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	603b      	str	r3, [r7, #0]
 8007fb4:	2005      	movs	r0, #5
 8007fb6:	b007      	add	sp, #28
 8007fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbc:	3501      	adds	r5, #1
 8007fbe:	2d08      	cmp	r5, #8
 8007fc0:	f10b 0b01 	add.w	fp, fp, #1
 8007fc4:	dd06      	ble.n	8007fd4 <__hexnan+0x100>
 8007fc6:	4544      	cmp	r4, r8
 8007fc8:	d9c1      	bls.n	8007f4e <__hexnan+0x7a>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2501      	movs	r5, #1
 8007fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fd2:	3c04      	subs	r4, #4
 8007fd4:	6822      	ldr	r2, [r4, #0]
 8007fd6:	f000 000f 	and.w	r0, r0, #15
 8007fda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007fde:	6020      	str	r0, [r4, #0]
 8007fe0:	e7b5      	b.n	8007f4e <__hexnan+0x7a>
 8007fe2:	2508      	movs	r5, #8
 8007fe4:	e7b3      	b.n	8007f4e <__hexnan+0x7a>
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0dd      	beq.n	8007fa8 <__hexnan+0xd4>
 8007fec:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff0:	f1c3 0320 	rsb	r3, r3, #32
 8007ff4:	40da      	lsrs	r2, r3
 8007ff6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	f846 3c04 	str.w	r3, [r6, #-4]
 8008000:	e7d2      	b.n	8007fa8 <__hexnan+0xd4>
 8008002:	3f04      	subs	r7, #4
 8008004:	e7d0      	b.n	8007fa8 <__hexnan+0xd4>
 8008006:	2004      	movs	r0, #4
 8008008:	e7d5      	b.n	8007fb6 <__hexnan+0xe2>
	...

0800800c <malloc>:
 800800c:	4b02      	ldr	r3, [pc, #8]	@ (8008018 <malloc+0xc>)
 800800e:	4601      	mov	r1, r0
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	f000 b825 	b.w	8008060 <_malloc_r>
 8008016:	bf00      	nop
 8008018:	2000018c 	.word	0x2000018c

0800801c <sbrk_aligned>:
 800801c:	b570      	push	{r4, r5, r6, lr}
 800801e:	4e0f      	ldr	r6, [pc, #60]	@ (800805c <sbrk_aligned+0x40>)
 8008020:	460c      	mov	r4, r1
 8008022:	6831      	ldr	r1, [r6, #0]
 8008024:	4605      	mov	r5, r0
 8008026:	b911      	cbnz	r1, 800802e <sbrk_aligned+0x12>
 8008028:	f000 ff84 	bl	8008f34 <_sbrk_r>
 800802c:	6030      	str	r0, [r6, #0]
 800802e:	4621      	mov	r1, r4
 8008030:	4628      	mov	r0, r5
 8008032:	f000 ff7f 	bl	8008f34 <_sbrk_r>
 8008036:	1c43      	adds	r3, r0, #1
 8008038:	d103      	bne.n	8008042 <sbrk_aligned+0x26>
 800803a:	f04f 34ff 	mov.w	r4, #4294967295
 800803e:	4620      	mov	r0, r4
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	1cc4      	adds	r4, r0, #3
 8008044:	f024 0403 	bic.w	r4, r4, #3
 8008048:	42a0      	cmp	r0, r4
 800804a:	d0f8      	beq.n	800803e <sbrk_aligned+0x22>
 800804c:	1a21      	subs	r1, r4, r0
 800804e:	4628      	mov	r0, r5
 8008050:	f000 ff70 	bl	8008f34 <_sbrk_r>
 8008054:	3001      	adds	r0, #1
 8008056:	d1f2      	bne.n	800803e <sbrk_aligned+0x22>
 8008058:	e7ef      	b.n	800803a <sbrk_aligned+0x1e>
 800805a:	bf00      	nop
 800805c:	20000454 	.word	0x20000454

08008060 <_malloc_r>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	1ccd      	adds	r5, r1, #3
 8008066:	f025 0503 	bic.w	r5, r5, #3
 800806a:	3508      	adds	r5, #8
 800806c:	2d0c      	cmp	r5, #12
 800806e:	bf38      	it	cc
 8008070:	250c      	movcc	r5, #12
 8008072:	2d00      	cmp	r5, #0
 8008074:	4606      	mov	r6, r0
 8008076:	db01      	blt.n	800807c <_malloc_r+0x1c>
 8008078:	42a9      	cmp	r1, r5
 800807a:	d904      	bls.n	8008086 <_malloc_r+0x26>
 800807c:	230c      	movs	r3, #12
 800807e:	6033      	str	r3, [r6, #0]
 8008080:	2000      	movs	r0, #0
 8008082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800815c <_malloc_r+0xfc>
 800808a:	f000 f87b 	bl	8008184 <__malloc_lock>
 800808e:	f8d8 3000 	ldr.w	r3, [r8]
 8008092:	461c      	mov	r4, r3
 8008094:	bb44      	cbnz	r4, 80080e8 <_malloc_r+0x88>
 8008096:	4629      	mov	r1, r5
 8008098:	4630      	mov	r0, r6
 800809a:	f7ff ffbf 	bl	800801c <sbrk_aligned>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	4604      	mov	r4, r0
 80080a2:	d158      	bne.n	8008156 <_malloc_r+0xf6>
 80080a4:	f8d8 4000 	ldr.w	r4, [r8]
 80080a8:	4627      	mov	r7, r4
 80080aa:	2f00      	cmp	r7, #0
 80080ac:	d143      	bne.n	8008136 <_malloc_r+0xd6>
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d04b      	beq.n	800814a <_malloc_r+0xea>
 80080b2:	6823      	ldr	r3, [r4, #0]
 80080b4:	4639      	mov	r1, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	eb04 0903 	add.w	r9, r4, r3
 80080bc:	f000 ff3a 	bl	8008f34 <_sbrk_r>
 80080c0:	4581      	cmp	r9, r0
 80080c2:	d142      	bne.n	800814a <_malloc_r+0xea>
 80080c4:	6821      	ldr	r1, [r4, #0]
 80080c6:	4630      	mov	r0, r6
 80080c8:	1a6d      	subs	r5, r5, r1
 80080ca:	4629      	mov	r1, r5
 80080cc:	f7ff ffa6 	bl	800801c <sbrk_aligned>
 80080d0:	3001      	adds	r0, #1
 80080d2:	d03a      	beq.n	800814a <_malloc_r+0xea>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	442b      	add	r3, r5
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	f8d8 3000 	ldr.w	r3, [r8]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	bb62      	cbnz	r2, 800813c <_malloc_r+0xdc>
 80080e2:	f8c8 7000 	str.w	r7, [r8]
 80080e6:	e00f      	b.n	8008108 <_malloc_r+0xa8>
 80080e8:	6822      	ldr	r2, [r4, #0]
 80080ea:	1b52      	subs	r2, r2, r5
 80080ec:	d420      	bmi.n	8008130 <_malloc_r+0xd0>
 80080ee:	2a0b      	cmp	r2, #11
 80080f0:	d917      	bls.n	8008122 <_malloc_r+0xc2>
 80080f2:	1961      	adds	r1, r4, r5
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	6025      	str	r5, [r4, #0]
 80080f8:	bf18      	it	ne
 80080fa:	6059      	strne	r1, [r3, #4]
 80080fc:	6863      	ldr	r3, [r4, #4]
 80080fe:	bf08      	it	eq
 8008100:	f8c8 1000 	streq.w	r1, [r8]
 8008104:	5162      	str	r2, [r4, r5]
 8008106:	604b      	str	r3, [r1, #4]
 8008108:	4630      	mov	r0, r6
 800810a:	f000 f841 	bl	8008190 <__malloc_unlock>
 800810e:	f104 000b 	add.w	r0, r4, #11
 8008112:	1d23      	adds	r3, r4, #4
 8008114:	f020 0007 	bic.w	r0, r0, #7
 8008118:	1ac2      	subs	r2, r0, r3
 800811a:	bf1c      	itt	ne
 800811c:	1a1b      	subne	r3, r3, r0
 800811e:	50a3      	strne	r3, [r4, r2]
 8008120:	e7af      	b.n	8008082 <_malloc_r+0x22>
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	42a3      	cmp	r3, r4
 8008126:	bf0c      	ite	eq
 8008128:	f8c8 2000 	streq.w	r2, [r8]
 800812c:	605a      	strne	r2, [r3, #4]
 800812e:	e7eb      	b.n	8008108 <_malloc_r+0xa8>
 8008130:	4623      	mov	r3, r4
 8008132:	6864      	ldr	r4, [r4, #4]
 8008134:	e7ae      	b.n	8008094 <_malloc_r+0x34>
 8008136:	463c      	mov	r4, r7
 8008138:	687f      	ldr	r7, [r7, #4]
 800813a:	e7b6      	b.n	80080aa <_malloc_r+0x4a>
 800813c:	461a      	mov	r2, r3
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	42a3      	cmp	r3, r4
 8008142:	d1fb      	bne.n	800813c <_malloc_r+0xdc>
 8008144:	2300      	movs	r3, #0
 8008146:	6053      	str	r3, [r2, #4]
 8008148:	e7de      	b.n	8008108 <_malloc_r+0xa8>
 800814a:	230c      	movs	r3, #12
 800814c:	4630      	mov	r0, r6
 800814e:	6033      	str	r3, [r6, #0]
 8008150:	f000 f81e 	bl	8008190 <__malloc_unlock>
 8008154:	e794      	b.n	8008080 <_malloc_r+0x20>
 8008156:	6005      	str	r5, [r0, #0]
 8008158:	e7d6      	b.n	8008108 <_malloc_r+0xa8>
 800815a:	bf00      	nop
 800815c:	20000458 	.word	0x20000458

08008160 <__ascii_mbtowc>:
 8008160:	b082      	sub	sp, #8
 8008162:	b901      	cbnz	r1, 8008166 <__ascii_mbtowc+0x6>
 8008164:	a901      	add	r1, sp, #4
 8008166:	b142      	cbz	r2, 800817a <__ascii_mbtowc+0x1a>
 8008168:	b14b      	cbz	r3, 800817e <__ascii_mbtowc+0x1e>
 800816a:	7813      	ldrb	r3, [r2, #0]
 800816c:	600b      	str	r3, [r1, #0]
 800816e:	7812      	ldrb	r2, [r2, #0]
 8008170:	1e10      	subs	r0, r2, #0
 8008172:	bf18      	it	ne
 8008174:	2001      	movne	r0, #1
 8008176:	b002      	add	sp, #8
 8008178:	4770      	bx	lr
 800817a:	4610      	mov	r0, r2
 800817c:	e7fb      	b.n	8008176 <__ascii_mbtowc+0x16>
 800817e:	f06f 0001 	mvn.w	r0, #1
 8008182:	e7f8      	b.n	8008176 <__ascii_mbtowc+0x16>

08008184 <__malloc_lock>:
 8008184:	4801      	ldr	r0, [pc, #4]	@ (800818c <__malloc_lock+0x8>)
 8008186:	f7fe bd48 	b.w	8006c1a <__retarget_lock_acquire_recursive>
 800818a:	bf00      	nop
 800818c:	20000450 	.word	0x20000450

08008190 <__malloc_unlock>:
 8008190:	4801      	ldr	r0, [pc, #4]	@ (8008198 <__malloc_unlock+0x8>)
 8008192:	f7fe bd43 	b.w	8006c1c <__retarget_lock_release_recursive>
 8008196:	bf00      	nop
 8008198:	20000450 	.word	0x20000450

0800819c <_Balloc>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	69c6      	ldr	r6, [r0, #28]
 80081a0:	4604      	mov	r4, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	b976      	cbnz	r6, 80081c4 <_Balloc+0x28>
 80081a6:	2010      	movs	r0, #16
 80081a8:	f7ff ff30 	bl	800800c <malloc>
 80081ac:	4602      	mov	r2, r0
 80081ae:	61e0      	str	r0, [r4, #28]
 80081b0:	b920      	cbnz	r0, 80081bc <_Balloc+0x20>
 80081b2:	216b      	movs	r1, #107	@ 0x6b
 80081b4:	4b17      	ldr	r3, [pc, #92]	@ (8008214 <_Balloc+0x78>)
 80081b6:	4818      	ldr	r0, [pc, #96]	@ (8008218 <_Balloc+0x7c>)
 80081b8:	f000 fecc 	bl	8008f54 <__assert_func>
 80081bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081c0:	6006      	str	r6, [r0, #0]
 80081c2:	60c6      	str	r6, [r0, #12]
 80081c4:	69e6      	ldr	r6, [r4, #28]
 80081c6:	68f3      	ldr	r3, [r6, #12]
 80081c8:	b183      	cbz	r3, 80081ec <_Balloc+0x50>
 80081ca:	69e3      	ldr	r3, [r4, #28]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081d2:	b9b8      	cbnz	r0, 8008204 <_Balloc+0x68>
 80081d4:	2101      	movs	r1, #1
 80081d6:	fa01 f605 	lsl.w	r6, r1, r5
 80081da:	1d72      	adds	r2, r6, #5
 80081dc:	4620      	mov	r0, r4
 80081de:	0092      	lsls	r2, r2, #2
 80081e0:	f000 fed6 	bl	8008f90 <_calloc_r>
 80081e4:	b160      	cbz	r0, 8008200 <_Balloc+0x64>
 80081e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081ea:	e00e      	b.n	800820a <_Balloc+0x6e>
 80081ec:	2221      	movs	r2, #33	@ 0x21
 80081ee:	2104      	movs	r1, #4
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fecd 	bl	8008f90 <_calloc_r>
 80081f6:	69e3      	ldr	r3, [r4, #28]
 80081f8:	60f0      	str	r0, [r6, #12]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e4      	bne.n	80081ca <_Balloc+0x2e>
 8008200:	2000      	movs	r0, #0
 8008202:	bd70      	pop	{r4, r5, r6, pc}
 8008204:	6802      	ldr	r2, [r0, #0]
 8008206:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800820a:	2300      	movs	r3, #0
 800820c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008210:	e7f7      	b.n	8008202 <_Balloc+0x66>
 8008212:	bf00      	nop
 8008214:	080097a9 	.word	0x080097a9
 8008218:	08009889 	.word	0x08009889

0800821c <_Bfree>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	69c6      	ldr	r6, [r0, #28]
 8008220:	4605      	mov	r5, r0
 8008222:	460c      	mov	r4, r1
 8008224:	b976      	cbnz	r6, 8008244 <_Bfree+0x28>
 8008226:	2010      	movs	r0, #16
 8008228:	f7ff fef0 	bl	800800c <malloc>
 800822c:	4602      	mov	r2, r0
 800822e:	61e8      	str	r0, [r5, #28]
 8008230:	b920      	cbnz	r0, 800823c <_Bfree+0x20>
 8008232:	218f      	movs	r1, #143	@ 0x8f
 8008234:	4b08      	ldr	r3, [pc, #32]	@ (8008258 <_Bfree+0x3c>)
 8008236:	4809      	ldr	r0, [pc, #36]	@ (800825c <_Bfree+0x40>)
 8008238:	f000 fe8c 	bl	8008f54 <__assert_func>
 800823c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008240:	6006      	str	r6, [r0, #0]
 8008242:	60c6      	str	r6, [r0, #12]
 8008244:	b13c      	cbz	r4, 8008256 <_Bfree+0x3a>
 8008246:	69eb      	ldr	r3, [r5, #28]
 8008248:	6862      	ldr	r2, [r4, #4]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008250:	6021      	str	r1, [r4, #0]
 8008252:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008256:	bd70      	pop	{r4, r5, r6, pc}
 8008258:	080097a9 	.word	0x080097a9
 800825c:	08009889 	.word	0x08009889

08008260 <__multadd>:
 8008260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008264:	4607      	mov	r7, r0
 8008266:	460c      	mov	r4, r1
 8008268:	461e      	mov	r6, r3
 800826a:	2000      	movs	r0, #0
 800826c:	690d      	ldr	r5, [r1, #16]
 800826e:	f101 0c14 	add.w	ip, r1, #20
 8008272:	f8dc 3000 	ldr.w	r3, [ip]
 8008276:	3001      	adds	r0, #1
 8008278:	b299      	uxth	r1, r3
 800827a:	fb02 6101 	mla	r1, r2, r1, r6
 800827e:	0c1e      	lsrs	r6, r3, #16
 8008280:	0c0b      	lsrs	r3, r1, #16
 8008282:	fb02 3306 	mla	r3, r2, r6, r3
 8008286:	b289      	uxth	r1, r1
 8008288:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800828c:	4285      	cmp	r5, r0
 800828e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008292:	f84c 1b04 	str.w	r1, [ip], #4
 8008296:	dcec      	bgt.n	8008272 <__multadd+0x12>
 8008298:	b30e      	cbz	r6, 80082de <__multadd+0x7e>
 800829a:	68a3      	ldr	r3, [r4, #8]
 800829c:	42ab      	cmp	r3, r5
 800829e:	dc19      	bgt.n	80082d4 <__multadd+0x74>
 80082a0:	6861      	ldr	r1, [r4, #4]
 80082a2:	4638      	mov	r0, r7
 80082a4:	3101      	adds	r1, #1
 80082a6:	f7ff ff79 	bl	800819c <_Balloc>
 80082aa:	4680      	mov	r8, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__multadd+0x5a>
 80082ae:	4602      	mov	r2, r0
 80082b0:	21ba      	movs	r1, #186	@ 0xba
 80082b2:	4b0c      	ldr	r3, [pc, #48]	@ (80082e4 <__multadd+0x84>)
 80082b4:	480c      	ldr	r0, [pc, #48]	@ (80082e8 <__multadd+0x88>)
 80082b6:	f000 fe4d 	bl	8008f54 <__assert_func>
 80082ba:	6922      	ldr	r2, [r4, #16]
 80082bc:	f104 010c 	add.w	r1, r4, #12
 80082c0:	3202      	adds	r2, #2
 80082c2:	0092      	lsls	r2, r2, #2
 80082c4:	300c      	adds	r0, #12
 80082c6:	f7fe fcb8 	bl	8006c3a <memcpy>
 80082ca:	4621      	mov	r1, r4
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff ffa5 	bl	800821c <_Bfree>
 80082d2:	4644      	mov	r4, r8
 80082d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082d8:	3501      	adds	r5, #1
 80082da:	615e      	str	r6, [r3, #20]
 80082dc:	6125      	str	r5, [r4, #16]
 80082de:	4620      	mov	r0, r4
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	08009818 	.word	0x08009818
 80082e8:	08009889 	.word	0x08009889

080082ec <__s2b>:
 80082ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f0:	4615      	mov	r5, r2
 80082f2:	2209      	movs	r2, #9
 80082f4:	461f      	mov	r7, r3
 80082f6:	3308      	adds	r3, #8
 80082f8:	460c      	mov	r4, r1
 80082fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fe:	4606      	mov	r6, r0
 8008300:	2201      	movs	r2, #1
 8008302:	2100      	movs	r1, #0
 8008304:	429a      	cmp	r2, r3
 8008306:	db09      	blt.n	800831c <__s2b+0x30>
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ff47 	bl	800819c <_Balloc>
 800830e:	b940      	cbnz	r0, 8008322 <__s2b+0x36>
 8008310:	4602      	mov	r2, r0
 8008312:	21d3      	movs	r1, #211	@ 0xd3
 8008314:	4b18      	ldr	r3, [pc, #96]	@ (8008378 <__s2b+0x8c>)
 8008316:	4819      	ldr	r0, [pc, #100]	@ (800837c <__s2b+0x90>)
 8008318:	f000 fe1c 	bl	8008f54 <__assert_func>
 800831c:	0052      	lsls	r2, r2, #1
 800831e:	3101      	adds	r1, #1
 8008320:	e7f0      	b.n	8008304 <__s2b+0x18>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	2d09      	cmp	r5, #9
 8008326:	6143      	str	r3, [r0, #20]
 8008328:	f04f 0301 	mov.w	r3, #1
 800832c:	6103      	str	r3, [r0, #16]
 800832e:	dd16      	ble.n	800835e <__s2b+0x72>
 8008330:	f104 0909 	add.w	r9, r4, #9
 8008334:	46c8      	mov	r8, r9
 8008336:	442c      	add	r4, r5
 8008338:	f818 3b01 	ldrb.w	r3, [r8], #1
 800833c:	4601      	mov	r1, r0
 800833e:	220a      	movs	r2, #10
 8008340:	4630      	mov	r0, r6
 8008342:	3b30      	subs	r3, #48	@ 0x30
 8008344:	f7ff ff8c 	bl	8008260 <__multadd>
 8008348:	45a0      	cmp	r8, r4
 800834a:	d1f5      	bne.n	8008338 <__s2b+0x4c>
 800834c:	f1a5 0408 	sub.w	r4, r5, #8
 8008350:	444c      	add	r4, r9
 8008352:	1b2d      	subs	r5, r5, r4
 8008354:	1963      	adds	r3, r4, r5
 8008356:	42bb      	cmp	r3, r7
 8008358:	db04      	blt.n	8008364 <__s2b+0x78>
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	2509      	movs	r5, #9
 8008360:	340a      	adds	r4, #10
 8008362:	e7f6      	b.n	8008352 <__s2b+0x66>
 8008364:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008368:	4601      	mov	r1, r0
 800836a:	220a      	movs	r2, #10
 800836c:	4630      	mov	r0, r6
 800836e:	3b30      	subs	r3, #48	@ 0x30
 8008370:	f7ff ff76 	bl	8008260 <__multadd>
 8008374:	e7ee      	b.n	8008354 <__s2b+0x68>
 8008376:	bf00      	nop
 8008378:	08009818 	.word	0x08009818
 800837c:	08009889 	.word	0x08009889

08008380 <__hi0bits>:
 8008380:	4603      	mov	r3, r0
 8008382:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008386:	bf3a      	itte	cc
 8008388:	0403      	lslcc	r3, r0, #16
 800838a:	2010      	movcc	r0, #16
 800838c:	2000      	movcs	r0, #0
 800838e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008392:	bf3c      	itt	cc
 8008394:	021b      	lslcc	r3, r3, #8
 8008396:	3008      	addcc	r0, #8
 8008398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800839c:	bf3c      	itt	cc
 800839e:	011b      	lslcc	r3, r3, #4
 80083a0:	3004      	addcc	r0, #4
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a6:	bf3c      	itt	cc
 80083a8:	009b      	lslcc	r3, r3, #2
 80083aa:	3002      	addcc	r0, #2
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db05      	blt.n	80083bc <__hi0bits+0x3c>
 80083b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083b4:	f100 0001 	add.w	r0, r0, #1
 80083b8:	bf08      	it	eq
 80083ba:	2020      	moveq	r0, #32
 80083bc:	4770      	bx	lr

080083be <__lo0bits>:
 80083be:	6803      	ldr	r3, [r0, #0]
 80083c0:	4602      	mov	r2, r0
 80083c2:	f013 0007 	ands.w	r0, r3, #7
 80083c6:	d00b      	beq.n	80083e0 <__lo0bits+0x22>
 80083c8:	07d9      	lsls	r1, r3, #31
 80083ca:	d421      	bmi.n	8008410 <__lo0bits+0x52>
 80083cc:	0798      	lsls	r0, r3, #30
 80083ce:	bf49      	itett	mi
 80083d0:	085b      	lsrmi	r3, r3, #1
 80083d2:	089b      	lsrpl	r3, r3, #2
 80083d4:	2001      	movmi	r0, #1
 80083d6:	6013      	strmi	r3, [r2, #0]
 80083d8:	bf5c      	itt	pl
 80083da:	2002      	movpl	r0, #2
 80083dc:	6013      	strpl	r3, [r2, #0]
 80083de:	4770      	bx	lr
 80083e0:	b299      	uxth	r1, r3
 80083e2:	b909      	cbnz	r1, 80083e8 <__lo0bits+0x2a>
 80083e4:	2010      	movs	r0, #16
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	b2d9      	uxtb	r1, r3
 80083ea:	b909      	cbnz	r1, 80083f0 <__lo0bits+0x32>
 80083ec:	3008      	adds	r0, #8
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	0719      	lsls	r1, r3, #28
 80083f2:	bf04      	itt	eq
 80083f4:	091b      	lsreq	r3, r3, #4
 80083f6:	3004      	addeq	r0, #4
 80083f8:	0799      	lsls	r1, r3, #30
 80083fa:	bf04      	itt	eq
 80083fc:	089b      	lsreq	r3, r3, #2
 80083fe:	3002      	addeq	r0, #2
 8008400:	07d9      	lsls	r1, r3, #31
 8008402:	d403      	bmi.n	800840c <__lo0bits+0x4e>
 8008404:	085b      	lsrs	r3, r3, #1
 8008406:	f100 0001 	add.w	r0, r0, #1
 800840a:	d003      	beq.n	8008414 <__lo0bits+0x56>
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	4770      	bx	lr
 8008410:	2000      	movs	r0, #0
 8008412:	4770      	bx	lr
 8008414:	2020      	movs	r0, #32
 8008416:	4770      	bx	lr

08008418 <__i2b>:
 8008418:	b510      	push	{r4, lr}
 800841a:	460c      	mov	r4, r1
 800841c:	2101      	movs	r1, #1
 800841e:	f7ff febd 	bl	800819c <_Balloc>
 8008422:	4602      	mov	r2, r0
 8008424:	b928      	cbnz	r0, 8008432 <__i2b+0x1a>
 8008426:	f240 1145 	movw	r1, #325	@ 0x145
 800842a:	4b04      	ldr	r3, [pc, #16]	@ (800843c <__i2b+0x24>)
 800842c:	4804      	ldr	r0, [pc, #16]	@ (8008440 <__i2b+0x28>)
 800842e:	f000 fd91 	bl	8008f54 <__assert_func>
 8008432:	2301      	movs	r3, #1
 8008434:	6144      	str	r4, [r0, #20]
 8008436:	6103      	str	r3, [r0, #16]
 8008438:	bd10      	pop	{r4, pc}
 800843a:	bf00      	nop
 800843c:	08009818 	.word	0x08009818
 8008440:	08009889 	.word	0x08009889

08008444 <__multiply>:
 8008444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008448:	4614      	mov	r4, r2
 800844a:	690a      	ldr	r2, [r1, #16]
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	460f      	mov	r7, r1
 8008450:	429a      	cmp	r2, r3
 8008452:	bfa2      	ittt	ge
 8008454:	4623      	movge	r3, r4
 8008456:	460c      	movge	r4, r1
 8008458:	461f      	movge	r7, r3
 800845a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800845e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008462:	68a3      	ldr	r3, [r4, #8]
 8008464:	6861      	ldr	r1, [r4, #4]
 8008466:	eb0a 0609 	add.w	r6, sl, r9
 800846a:	42b3      	cmp	r3, r6
 800846c:	b085      	sub	sp, #20
 800846e:	bfb8      	it	lt
 8008470:	3101      	addlt	r1, #1
 8008472:	f7ff fe93 	bl	800819c <_Balloc>
 8008476:	b930      	cbnz	r0, 8008486 <__multiply+0x42>
 8008478:	4602      	mov	r2, r0
 800847a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800847e:	4b43      	ldr	r3, [pc, #268]	@ (800858c <__multiply+0x148>)
 8008480:	4843      	ldr	r0, [pc, #268]	@ (8008590 <__multiply+0x14c>)
 8008482:	f000 fd67 	bl	8008f54 <__assert_func>
 8008486:	f100 0514 	add.w	r5, r0, #20
 800848a:	462b      	mov	r3, r5
 800848c:	2200      	movs	r2, #0
 800848e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008492:	4543      	cmp	r3, r8
 8008494:	d321      	bcc.n	80084da <__multiply+0x96>
 8008496:	f107 0114 	add.w	r1, r7, #20
 800849a:	f104 0214 	add.w	r2, r4, #20
 800849e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80084a2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80084a6:	9302      	str	r3, [sp, #8]
 80084a8:	1b13      	subs	r3, r2, r4
 80084aa:	3b15      	subs	r3, #21
 80084ac:	f023 0303 	bic.w	r3, r3, #3
 80084b0:	3304      	adds	r3, #4
 80084b2:	f104 0715 	add.w	r7, r4, #21
 80084b6:	42ba      	cmp	r2, r7
 80084b8:	bf38      	it	cc
 80084ba:	2304      	movcc	r3, #4
 80084bc:	9301      	str	r3, [sp, #4]
 80084be:	9b02      	ldr	r3, [sp, #8]
 80084c0:	9103      	str	r1, [sp, #12]
 80084c2:	428b      	cmp	r3, r1
 80084c4:	d80c      	bhi.n	80084e0 <__multiply+0x9c>
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	dd03      	ble.n	80084d2 <__multiply+0x8e>
 80084ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d05a      	beq.n	8008588 <__multiply+0x144>
 80084d2:	6106      	str	r6, [r0, #16]
 80084d4:	b005      	add	sp, #20
 80084d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084da:	f843 2b04 	str.w	r2, [r3], #4
 80084de:	e7d8      	b.n	8008492 <__multiply+0x4e>
 80084e0:	f8b1 a000 	ldrh.w	sl, [r1]
 80084e4:	f1ba 0f00 	cmp.w	sl, #0
 80084e8:	d023      	beq.n	8008532 <__multiply+0xee>
 80084ea:	46a9      	mov	r9, r5
 80084ec:	f04f 0c00 	mov.w	ip, #0
 80084f0:	f104 0e14 	add.w	lr, r4, #20
 80084f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084f8:	f8d9 3000 	ldr.w	r3, [r9]
 80084fc:	fa1f fb87 	uxth.w	fp, r7
 8008500:	b29b      	uxth	r3, r3
 8008502:	fb0a 330b 	mla	r3, sl, fp, r3
 8008506:	4463      	add	r3, ip
 8008508:	f8d9 c000 	ldr.w	ip, [r9]
 800850c:	0c3f      	lsrs	r7, r7, #16
 800850e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008512:	fb0a c707 	mla	r7, sl, r7, ip
 8008516:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800851a:	b29b      	uxth	r3, r3
 800851c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008520:	4572      	cmp	r2, lr
 8008522:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008526:	f849 3b04 	str.w	r3, [r9], #4
 800852a:	d8e3      	bhi.n	80084f4 <__multiply+0xb0>
 800852c:	9b01      	ldr	r3, [sp, #4]
 800852e:	f845 c003 	str.w	ip, [r5, r3]
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	3104      	adds	r1, #4
 8008536:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800853a:	f1b9 0f00 	cmp.w	r9, #0
 800853e:	d021      	beq.n	8008584 <__multiply+0x140>
 8008540:	46ae      	mov	lr, r5
 8008542:	f04f 0a00 	mov.w	sl, #0
 8008546:	682b      	ldr	r3, [r5, #0]
 8008548:	f104 0c14 	add.w	ip, r4, #20
 800854c:	f8bc b000 	ldrh.w	fp, [ip]
 8008550:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008554:	b29b      	uxth	r3, r3
 8008556:	fb09 770b 	mla	r7, r9, fp, r7
 800855a:	4457      	add	r7, sl
 800855c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008560:	f84e 3b04 	str.w	r3, [lr], #4
 8008564:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800856c:	f8be 3000 	ldrh.w	r3, [lr]
 8008570:	4562      	cmp	r2, ip
 8008572:	fb09 330a 	mla	r3, r9, sl, r3
 8008576:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800857a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800857e:	d8e5      	bhi.n	800854c <__multiply+0x108>
 8008580:	9f01      	ldr	r7, [sp, #4]
 8008582:	51eb      	str	r3, [r5, r7]
 8008584:	3504      	adds	r5, #4
 8008586:	e79a      	b.n	80084be <__multiply+0x7a>
 8008588:	3e01      	subs	r6, #1
 800858a:	e79c      	b.n	80084c6 <__multiply+0x82>
 800858c:	08009818 	.word	0x08009818
 8008590:	08009889 	.word	0x08009889

08008594 <__pow5mult>:
 8008594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008598:	4615      	mov	r5, r2
 800859a:	f012 0203 	ands.w	r2, r2, #3
 800859e:	4607      	mov	r7, r0
 80085a0:	460e      	mov	r6, r1
 80085a2:	d007      	beq.n	80085b4 <__pow5mult+0x20>
 80085a4:	4c25      	ldr	r4, [pc, #148]	@ (800863c <__pow5mult+0xa8>)
 80085a6:	3a01      	subs	r2, #1
 80085a8:	2300      	movs	r3, #0
 80085aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ae:	f7ff fe57 	bl	8008260 <__multadd>
 80085b2:	4606      	mov	r6, r0
 80085b4:	10ad      	asrs	r5, r5, #2
 80085b6:	d03d      	beq.n	8008634 <__pow5mult+0xa0>
 80085b8:	69fc      	ldr	r4, [r7, #28]
 80085ba:	b97c      	cbnz	r4, 80085dc <__pow5mult+0x48>
 80085bc:	2010      	movs	r0, #16
 80085be:	f7ff fd25 	bl	800800c <malloc>
 80085c2:	4602      	mov	r2, r0
 80085c4:	61f8      	str	r0, [r7, #28]
 80085c6:	b928      	cbnz	r0, 80085d4 <__pow5mult+0x40>
 80085c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008640 <__pow5mult+0xac>)
 80085ce:	481d      	ldr	r0, [pc, #116]	@ (8008644 <__pow5mult+0xb0>)
 80085d0:	f000 fcc0 	bl	8008f54 <__assert_func>
 80085d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d8:	6004      	str	r4, [r0, #0]
 80085da:	60c4      	str	r4, [r0, #12]
 80085dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085e4:	b94c      	cbnz	r4, 80085fa <__pow5mult+0x66>
 80085e6:	f240 2171 	movw	r1, #625	@ 0x271
 80085ea:	4638      	mov	r0, r7
 80085ec:	f7ff ff14 	bl	8008418 <__i2b>
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80085f8:	6003      	str	r3, [r0, #0]
 80085fa:	f04f 0900 	mov.w	r9, #0
 80085fe:	07eb      	lsls	r3, r5, #31
 8008600:	d50a      	bpl.n	8008618 <__pow5mult+0x84>
 8008602:	4631      	mov	r1, r6
 8008604:	4622      	mov	r2, r4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ff1c 	bl	8008444 <__multiply>
 800860c:	4680      	mov	r8, r0
 800860e:	4631      	mov	r1, r6
 8008610:	4638      	mov	r0, r7
 8008612:	f7ff fe03 	bl	800821c <_Bfree>
 8008616:	4646      	mov	r6, r8
 8008618:	106d      	asrs	r5, r5, #1
 800861a:	d00b      	beq.n	8008634 <__pow5mult+0xa0>
 800861c:	6820      	ldr	r0, [r4, #0]
 800861e:	b938      	cbnz	r0, 8008630 <__pow5mult+0x9c>
 8008620:	4622      	mov	r2, r4
 8008622:	4621      	mov	r1, r4
 8008624:	4638      	mov	r0, r7
 8008626:	f7ff ff0d 	bl	8008444 <__multiply>
 800862a:	6020      	str	r0, [r4, #0]
 800862c:	f8c0 9000 	str.w	r9, [r0]
 8008630:	4604      	mov	r4, r0
 8008632:	e7e4      	b.n	80085fe <__pow5mult+0x6a>
 8008634:	4630      	mov	r0, r6
 8008636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863a:	bf00      	nop
 800863c:	080098e4 	.word	0x080098e4
 8008640:	080097a9 	.word	0x080097a9
 8008644:	08009889 	.word	0x08009889

08008648 <__lshift>:
 8008648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864c:	460c      	mov	r4, r1
 800864e:	4607      	mov	r7, r0
 8008650:	4691      	mov	r9, r2
 8008652:	6923      	ldr	r3, [r4, #16]
 8008654:	6849      	ldr	r1, [r1, #4]
 8008656:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008660:	f108 0601 	add.w	r6, r8, #1
 8008664:	42b3      	cmp	r3, r6
 8008666:	db0b      	blt.n	8008680 <__lshift+0x38>
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff fd97 	bl	800819c <_Balloc>
 800866e:	4605      	mov	r5, r0
 8008670:	b948      	cbnz	r0, 8008686 <__lshift+0x3e>
 8008672:	4602      	mov	r2, r0
 8008674:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008678:	4b27      	ldr	r3, [pc, #156]	@ (8008718 <__lshift+0xd0>)
 800867a:	4828      	ldr	r0, [pc, #160]	@ (800871c <__lshift+0xd4>)
 800867c:	f000 fc6a 	bl	8008f54 <__assert_func>
 8008680:	3101      	adds	r1, #1
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	e7ee      	b.n	8008664 <__lshift+0x1c>
 8008686:	2300      	movs	r3, #0
 8008688:	f100 0114 	add.w	r1, r0, #20
 800868c:	f100 0210 	add.w	r2, r0, #16
 8008690:	4618      	mov	r0, r3
 8008692:	4553      	cmp	r3, sl
 8008694:	db33      	blt.n	80086fe <__lshift+0xb6>
 8008696:	6920      	ldr	r0, [r4, #16]
 8008698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800869c:	f104 0314 	add.w	r3, r4, #20
 80086a0:	f019 091f 	ands.w	r9, r9, #31
 80086a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086ac:	d02b      	beq.n	8008706 <__lshift+0xbe>
 80086ae:	468a      	mov	sl, r1
 80086b0:	2200      	movs	r2, #0
 80086b2:	f1c9 0e20 	rsb	lr, r9, #32
 80086b6:	6818      	ldr	r0, [r3, #0]
 80086b8:	fa00 f009 	lsl.w	r0, r0, r9
 80086bc:	4310      	orrs	r0, r2
 80086be:	f84a 0b04 	str.w	r0, [sl], #4
 80086c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c6:	459c      	cmp	ip, r3
 80086c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80086cc:	d8f3      	bhi.n	80086b6 <__lshift+0x6e>
 80086ce:	ebac 0304 	sub.w	r3, ip, r4
 80086d2:	3b15      	subs	r3, #21
 80086d4:	f023 0303 	bic.w	r3, r3, #3
 80086d8:	3304      	adds	r3, #4
 80086da:	f104 0015 	add.w	r0, r4, #21
 80086de:	4584      	cmp	ip, r0
 80086e0:	bf38      	it	cc
 80086e2:	2304      	movcc	r3, #4
 80086e4:	50ca      	str	r2, [r1, r3]
 80086e6:	b10a      	cbz	r2, 80086ec <__lshift+0xa4>
 80086e8:	f108 0602 	add.w	r6, r8, #2
 80086ec:	3e01      	subs	r6, #1
 80086ee:	4638      	mov	r0, r7
 80086f0:	4621      	mov	r1, r4
 80086f2:	612e      	str	r6, [r5, #16]
 80086f4:	f7ff fd92 	bl	800821c <_Bfree>
 80086f8:	4628      	mov	r0, r5
 80086fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008702:	3301      	adds	r3, #1
 8008704:	e7c5      	b.n	8008692 <__lshift+0x4a>
 8008706:	3904      	subs	r1, #4
 8008708:	f853 2b04 	ldr.w	r2, [r3], #4
 800870c:	459c      	cmp	ip, r3
 800870e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008712:	d8f9      	bhi.n	8008708 <__lshift+0xc0>
 8008714:	e7ea      	b.n	80086ec <__lshift+0xa4>
 8008716:	bf00      	nop
 8008718:	08009818 	.word	0x08009818
 800871c:	08009889 	.word	0x08009889

08008720 <__mcmp>:
 8008720:	4603      	mov	r3, r0
 8008722:	690a      	ldr	r2, [r1, #16]
 8008724:	6900      	ldr	r0, [r0, #16]
 8008726:	b530      	push	{r4, r5, lr}
 8008728:	1a80      	subs	r0, r0, r2
 800872a:	d10e      	bne.n	800874a <__mcmp+0x2a>
 800872c:	3314      	adds	r3, #20
 800872e:	3114      	adds	r1, #20
 8008730:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008734:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008738:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800873c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008740:	4295      	cmp	r5, r2
 8008742:	d003      	beq.n	800874c <__mcmp+0x2c>
 8008744:	d205      	bcs.n	8008752 <__mcmp+0x32>
 8008746:	f04f 30ff 	mov.w	r0, #4294967295
 800874a:	bd30      	pop	{r4, r5, pc}
 800874c:	42a3      	cmp	r3, r4
 800874e:	d3f3      	bcc.n	8008738 <__mcmp+0x18>
 8008750:	e7fb      	b.n	800874a <__mcmp+0x2a>
 8008752:	2001      	movs	r0, #1
 8008754:	e7f9      	b.n	800874a <__mcmp+0x2a>
	...

08008758 <__mdiff>:
 8008758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800875c:	4689      	mov	r9, r1
 800875e:	4606      	mov	r6, r0
 8008760:	4611      	mov	r1, r2
 8008762:	4648      	mov	r0, r9
 8008764:	4614      	mov	r4, r2
 8008766:	f7ff ffdb 	bl	8008720 <__mcmp>
 800876a:	1e05      	subs	r5, r0, #0
 800876c:	d112      	bne.n	8008794 <__mdiff+0x3c>
 800876e:	4629      	mov	r1, r5
 8008770:	4630      	mov	r0, r6
 8008772:	f7ff fd13 	bl	800819c <_Balloc>
 8008776:	4602      	mov	r2, r0
 8008778:	b928      	cbnz	r0, 8008786 <__mdiff+0x2e>
 800877a:	f240 2137 	movw	r1, #567	@ 0x237
 800877e:	4b3e      	ldr	r3, [pc, #248]	@ (8008878 <__mdiff+0x120>)
 8008780:	483e      	ldr	r0, [pc, #248]	@ (800887c <__mdiff+0x124>)
 8008782:	f000 fbe7 	bl	8008f54 <__assert_func>
 8008786:	2301      	movs	r3, #1
 8008788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800878c:	4610      	mov	r0, r2
 800878e:	b003      	add	sp, #12
 8008790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008794:	bfbc      	itt	lt
 8008796:	464b      	movlt	r3, r9
 8008798:	46a1      	movlt	r9, r4
 800879a:	4630      	mov	r0, r6
 800879c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80087a0:	bfba      	itte	lt
 80087a2:	461c      	movlt	r4, r3
 80087a4:	2501      	movlt	r5, #1
 80087a6:	2500      	movge	r5, #0
 80087a8:	f7ff fcf8 	bl	800819c <_Balloc>
 80087ac:	4602      	mov	r2, r0
 80087ae:	b918      	cbnz	r0, 80087b8 <__mdiff+0x60>
 80087b0:	f240 2145 	movw	r1, #581	@ 0x245
 80087b4:	4b30      	ldr	r3, [pc, #192]	@ (8008878 <__mdiff+0x120>)
 80087b6:	e7e3      	b.n	8008780 <__mdiff+0x28>
 80087b8:	f100 0b14 	add.w	fp, r0, #20
 80087bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087c0:	f109 0310 	add.w	r3, r9, #16
 80087c4:	60c5      	str	r5, [r0, #12]
 80087c6:	f04f 0c00 	mov.w	ip, #0
 80087ca:	f109 0514 	add.w	r5, r9, #20
 80087ce:	46d9      	mov	r9, fp
 80087d0:	6926      	ldr	r6, [r4, #16]
 80087d2:	f104 0e14 	add.w	lr, r4, #20
 80087d6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087da:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	9b01      	ldr	r3, [sp, #4]
 80087e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087ea:	b281      	uxth	r1, r0
 80087ec:	9301      	str	r3, [sp, #4]
 80087ee:	fa1f f38a 	uxth.w	r3, sl
 80087f2:	1a5b      	subs	r3, r3, r1
 80087f4:	0c00      	lsrs	r0, r0, #16
 80087f6:	4463      	add	r3, ip
 80087f8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087fc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008800:	b29b      	uxth	r3, r3
 8008802:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008806:	4576      	cmp	r6, lr
 8008808:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800880c:	f849 3b04 	str.w	r3, [r9], #4
 8008810:	d8e6      	bhi.n	80087e0 <__mdiff+0x88>
 8008812:	1b33      	subs	r3, r6, r4
 8008814:	3b15      	subs	r3, #21
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	3415      	adds	r4, #21
 800881c:	3304      	adds	r3, #4
 800881e:	42a6      	cmp	r6, r4
 8008820:	bf38      	it	cc
 8008822:	2304      	movcc	r3, #4
 8008824:	441d      	add	r5, r3
 8008826:	445b      	add	r3, fp
 8008828:	461e      	mov	r6, r3
 800882a:	462c      	mov	r4, r5
 800882c:	4544      	cmp	r4, r8
 800882e:	d30e      	bcc.n	800884e <__mdiff+0xf6>
 8008830:	f108 0103 	add.w	r1, r8, #3
 8008834:	1b49      	subs	r1, r1, r5
 8008836:	f021 0103 	bic.w	r1, r1, #3
 800883a:	3d03      	subs	r5, #3
 800883c:	45a8      	cmp	r8, r5
 800883e:	bf38      	it	cc
 8008840:	2100      	movcc	r1, #0
 8008842:	440b      	add	r3, r1
 8008844:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008848:	b199      	cbz	r1, 8008872 <__mdiff+0x11a>
 800884a:	6117      	str	r7, [r2, #16]
 800884c:	e79e      	b.n	800878c <__mdiff+0x34>
 800884e:	46e6      	mov	lr, ip
 8008850:	f854 1b04 	ldr.w	r1, [r4], #4
 8008854:	fa1f fc81 	uxth.w	ip, r1
 8008858:	44f4      	add	ip, lr
 800885a:	0c08      	lsrs	r0, r1, #16
 800885c:	4471      	add	r1, lr
 800885e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008862:	b289      	uxth	r1, r1
 8008864:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008868:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800886c:	f846 1b04 	str.w	r1, [r6], #4
 8008870:	e7dc      	b.n	800882c <__mdiff+0xd4>
 8008872:	3f01      	subs	r7, #1
 8008874:	e7e6      	b.n	8008844 <__mdiff+0xec>
 8008876:	bf00      	nop
 8008878:	08009818 	.word	0x08009818
 800887c:	08009889 	.word	0x08009889

08008880 <__ulp>:
 8008880:	4b0e      	ldr	r3, [pc, #56]	@ (80088bc <__ulp+0x3c>)
 8008882:	400b      	ands	r3, r1
 8008884:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008888:	2b00      	cmp	r3, #0
 800888a:	dc08      	bgt.n	800889e <__ulp+0x1e>
 800888c:	425b      	negs	r3, r3
 800888e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008892:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008896:	da04      	bge.n	80088a2 <__ulp+0x22>
 8008898:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800889c:	4113      	asrs	r3, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	e008      	b.n	80088b4 <__ulp+0x34>
 80088a2:	f1a2 0314 	sub.w	r3, r2, #20
 80088a6:	2b1e      	cmp	r3, #30
 80088a8:	bfd6      	itet	le
 80088aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80088ae:	2201      	movgt	r2, #1
 80088b0:	40da      	lsrle	r2, r3
 80088b2:	2300      	movs	r3, #0
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	7ff00000 	.word	0x7ff00000

080088c0 <__b2d>:
 80088c0:	6902      	ldr	r2, [r0, #16]
 80088c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c4:	f100 0614 	add.w	r6, r0, #20
 80088c8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80088cc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80088d0:	4f1e      	ldr	r7, [pc, #120]	@ (800894c <__b2d+0x8c>)
 80088d2:	4620      	mov	r0, r4
 80088d4:	f7ff fd54 	bl	8008380 <__hi0bits>
 80088d8:	4603      	mov	r3, r0
 80088da:	f1c0 0020 	rsb	r0, r0, #32
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	f1a2 0504 	sub.w	r5, r2, #4
 80088e4:	6008      	str	r0, [r1, #0]
 80088e6:	dc12      	bgt.n	800890e <__b2d+0x4e>
 80088e8:	42ae      	cmp	r6, r5
 80088ea:	bf2c      	ite	cs
 80088ec:	2200      	movcs	r2, #0
 80088ee:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80088f2:	f1c3 0c0b 	rsb	ip, r3, #11
 80088f6:	3315      	adds	r3, #21
 80088f8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80088fc:	fa04 f303 	lsl.w	r3, r4, r3
 8008900:	fa22 f20c 	lsr.w	r2, r2, ip
 8008904:	ea4e 0107 	orr.w	r1, lr, r7
 8008908:	431a      	orrs	r2, r3
 800890a:	4610      	mov	r0, r2
 800890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890e:	42ae      	cmp	r6, r5
 8008910:	bf36      	itet	cc
 8008912:	f1a2 0508 	subcc.w	r5, r2, #8
 8008916:	2200      	movcs	r2, #0
 8008918:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800891c:	3b0b      	subs	r3, #11
 800891e:	d012      	beq.n	8008946 <__b2d+0x86>
 8008920:	f1c3 0720 	rsb	r7, r3, #32
 8008924:	fa22 f107 	lsr.w	r1, r2, r7
 8008928:	409c      	lsls	r4, r3
 800892a:	430c      	orrs	r4, r1
 800892c:	42b5      	cmp	r5, r6
 800892e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008932:	bf94      	ite	ls
 8008934:	2400      	movls	r4, #0
 8008936:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800893a:	409a      	lsls	r2, r3
 800893c:	40fc      	lsrs	r4, r7
 800893e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008942:	4322      	orrs	r2, r4
 8008944:	e7e1      	b.n	800890a <__b2d+0x4a>
 8008946:	ea44 0107 	orr.w	r1, r4, r7
 800894a:	e7de      	b.n	800890a <__b2d+0x4a>
 800894c:	3ff00000 	.word	0x3ff00000

08008950 <__d2b>:
 8008950:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008954:	2101      	movs	r1, #1
 8008956:	4690      	mov	r8, r2
 8008958:	4699      	mov	r9, r3
 800895a:	9e08      	ldr	r6, [sp, #32]
 800895c:	f7ff fc1e 	bl	800819c <_Balloc>
 8008960:	4604      	mov	r4, r0
 8008962:	b930      	cbnz	r0, 8008972 <__d2b+0x22>
 8008964:	4602      	mov	r2, r0
 8008966:	f240 310f 	movw	r1, #783	@ 0x30f
 800896a:	4b23      	ldr	r3, [pc, #140]	@ (80089f8 <__d2b+0xa8>)
 800896c:	4823      	ldr	r0, [pc, #140]	@ (80089fc <__d2b+0xac>)
 800896e:	f000 faf1 	bl	8008f54 <__assert_func>
 8008972:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008976:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800897a:	b10d      	cbz	r5, 8008980 <__d2b+0x30>
 800897c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	f1b8 0300 	subs.w	r3, r8, #0
 8008986:	d024      	beq.n	80089d2 <__d2b+0x82>
 8008988:	4668      	mov	r0, sp
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	f7ff fd17 	bl	80083be <__lo0bits>
 8008990:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008994:	b1d8      	cbz	r0, 80089ce <__d2b+0x7e>
 8008996:	f1c0 0320 	rsb	r3, r0, #32
 800899a:	fa02 f303 	lsl.w	r3, r2, r3
 800899e:	430b      	orrs	r3, r1
 80089a0:	40c2      	lsrs	r2, r0
 80089a2:	6163      	str	r3, [r4, #20]
 80089a4:	9201      	str	r2, [sp, #4]
 80089a6:	9b01      	ldr	r3, [sp, #4]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bf0c      	ite	eq
 80089ac:	2201      	moveq	r2, #1
 80089ae:	2202      	movne	r2, #2
 80089b0:	61a3      	str	r3, [r4, #24]
 80089b2:	6122      	str	r2, [r4, #16]
 80089b4:	b1ad      	cbz	r5, 80089e2 <__d2b+0x92>
 80089b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089ba:	4405      	add	r5, r0
 80089bc:	6035      	str	r5, [r6, #0]
 80089be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c4:	6018      	str	r0, [r3, #0]
 80089c6:	4620      	mov	r0, r4
 80089c8:	b002      	add	sp, #8
 80089ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80089ce:	6161      	str	r1, [r4, #20]
 80089d0:	e7e9      	b.n	80089a6 <__d2b+0x56>
 80089d2:	a801      	add	r0, sp, #4
 80089d4:	f7ff fcf3 	bl	80083be <__lo0bits>
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	3020      	adds	r0, #32
 80089e0:	e7e7      	b.n	80089b2 <__d2b+0x62>
 80089e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089ea:	6030      	str	r0, [r6, #0]
 80089ec:	6918      	ldr	r0, [r3, #16]
 80089ee:	f7ff fcc7 	bl	8008380 <__hi0bits>
 80089f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089f6:	e7e4      	b.n	80089c2 <__d2b+0x72>
 80089f8:	08009818 	.word	0x08009818
 80089fc:	08009889 	.word	0x08009889

08008a00 <__ratio>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b085      	sub	sp, #20
 8008a06:	e9cd 1000 	strd	r1, r0, [sp]
 8008a0a:	a902      	add	r1, sp, #8
 8008a0c:	f7ff ff58 	bl	80088c0 <__b2d>
 8008a10:	468b      	mov	fp, r1
 8008a12:	4606      	mov	r6, r0
 8008a14:	460f      	mov	r7, r1
 8008a16:	9800      	ldr	r0, [sp, #0]
 8008a18:	a903      	add	r1, sp, #12
 8008a1a:	f7ff ff51 	bl	80088c0 <__b2d>
 8008a1e:	460d      	mov	r5, r1
 8008a20:	9b01      	ldr	r3, [sp, #4]
 8008a22:	4689      	mov	r9, r1
 8008a24:	6919      	ldr	r1, [r3, #16]
 8008a26:	9b00      	ldr	r3, [sp, #0]
 8008a28:	4604      	mov	r4, r0
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	1ac9      	subs	r1, r1, r3
 8008a30:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008a34:	1a9b      	subs	r3, r3, r2
 8008a36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bfcd      	iteet	gt
 8008a3e:	463a      	movgt	r2, r7
 8008a40:	462a      	movle	r2, r5
 8008a42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a4a:	bfd8      	it	le
 8008a4c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008a50:	464b      	mov	r3, r9
 8008a52:	4622      	mov	r2, r4
 8008a54:	4659      	mov	r1, fp
 8008a56:	f7f7 fe69 	bl	800072c <__aeabi_ddiv>
 8008a5a:	b005      	add	sp, #20
 8008a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a60 <__copybits>:
 8008a60:	3901      	subs	r1, #1
 8008a62:	b570      	push	{r4, r5, r6, lr}
 8008a64:	1149      	asrs	r1, r1, #5
 8008a66:	6914      	ldr	r4, [r2, #16]
 8008a68:	3101      	adds	r1, #1
 8008a6a:	f102 0314 	add.w	r3, r2, #20
 8008a6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a76:	1f05      	subs	r5, r0, #4
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d30c      	bcc.n	8008a96 <__copybits+0x36>
 8008a7c:	1aa3      	subs	r3, r4, r2
 8008a7e:	3b11      	subs	r3, #17
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	3211      	adds	r2, #17
 8008a86:	42a2      	cmp	r2, r4
 8008a88:	bf88      	it	hi
 8008a8a:	2300      	movhi	r3, #0
 8008a8c:	4418      	add	r0, r3
 8008a8e:	2300      	movs	r3, #0
 8008a90:	4288      	cmp	r0, r1
 8008a92:	d305      	bcc.n	8008aa0 <__copybits+0x40>
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
 8008a96:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a9a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a9e:	e7eb      	b.n	8008a78 <__copybits+0x18>
 8008aa0:	f840 3b04 	str.w	r3, [r0], #4
 8008aa4:	e7f4      	b.n	8008a90 <__copybits+0x30>

08008aa6 <__any_on>:
 8008aa6:	f100 0214 	add.w	r2, r0, #20
 8008aaa:	6900      	ldr	r0, [r0, #16]
 8008aac:	114b      	asrs	r3, r1, #5
 8008aae:	4298      	cmp	r0, r3
 8008ab0:	b510      	push	{r4, lr}
 8008ab2:	db11      	blt.n	8008ad8 <__any_on+0x32>
 8008ab4:	dd0a      	ble.n	8008acc <__any_on+0x26>
 8008ab6:	f011 011f 	ands.w	r1, r1, #31
 8008aba:	d007      	beq.n	8008acc <__any_on+0x26>
 8008abc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ac0:	fa24 f001 	lsr.w	r0, r4, r1
 8008ac4:	fa00 f101 	lsl.w	r1, r0, r1
 8008ac8:	428c      	cmp	r4, r1
 8008aca:	d10b      	bne.n	8008ae4 <__any_on+0x3e>
 8008acc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d803      	bhi.n	8008adc <__any_on+0x36>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	bd10      	pop	{r4, pc}
 8008ad8:	4603      	mov	r3, r0
 8008ada:	e7f7      	b.n	8008acc <__any_on+0x26>
 8008adc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae0:	2900      	cmp	r1, #0
 8008ae2:	d0f5      	beq.n	8008ad0 <__any_on+0x2a>
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	e7f6      	b.n	8008ad6 <__any_on+0x30>

08008ae8 <__ascii_wctomb>:
 8008ae8:	4603      	mov	r3, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	b141      	cbz	r1, 8008b00 <__ascii_wctomb+0x18>
 8008aee:	2aff      	cmp	r2, #255	@ 0xff
 8008af0:	d904      	bls.n	8008afc <__ascii_wctomb+0x14>
 8008af2:	228a      	movs	r2, #138	@ 0x8a
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	601a      	str	r2, [r3, #0]
 8008afa:	4770      	bx	lr
 8008afc:	2001      	movs	r0, #1
 8008afe:	700a      	strb	r2, [r1, #0]
 8008b00:	4770      	bx	lr

08008b02 <__ssputs_r>:
 8008b02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b06:	461f      	mov	r7, r3
 8008b08:	688e      	ldr	r6, [r1, #8]
 8008b0a:	4682      	mov	sl, r0
 8008b0c:	42be      	cmp	r6, r7
 8008b0e:	460c      	mov	r4, r1
 8008b10:	4690      	mov	r8, r2
 8008b12:	680b      	ldr	r3, [r1, #0]
 8008b14:	d82d      	bhi.n	8008b72 <__ssputs_r+0x70>
 8008b16:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b1a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b1e:	d026      	beq.n	8008b6e <__ssputs_r+0x6c>
 8008b20:	6965      	ldr	r5, [r4, #20]
 8008b22:	6909      	ldr	r1, [r1, #16]
 8008b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b28:	eba3 0901 	sub.w	r9, r3, r1
 8008b2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b30:	1c7b      	adds	r3, r7, #1
 8008b32:	444b      	add	r3, r9
 8008b34:	106d      	asrs	r5, r5, #1
 8008b36:	429d      	cmp	r5, r3
 8008b38:	bf38      	it	cc
 8008b3a:	461d      	movcc	r5, r3
 8008b3c:	0553      	lsls	r3, r2, #21
 8008b3e:	d527      	bpl.n	8008b90 <__ssputs_r+0x8e>
 8008b40:	4629      	mov	r1, r5
 8008b42:	f7ff fa8d 	bl	8008060 <_malloc_r>
 8008b46:	4606      	mov	r6, r0
 8008b48:	b360      	cbz	r0, 8008ba4 <__ssputs_r+0xa2>
 8008b4a:	464a      	mov	r2, r9
 8008b4c:	6921      	ldr	r1, [r4, #16]
 8008b4e:	f7fe f874 	bl	8006c3a <memcpy>
 8008b52:	89a3      	ldrh	r3, [r4, #12]
 8008b54:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	6126      	str	r6, [r4, #16]
 8008b60:	444e      	add	r6, r9
 8008b62:	6026      	str	r6, [r4, #0]
 8008b64:	463e      	mov	r6, r7
 8008b66:	6165      	str	r5, [r4, #20]
 8008b68:	eba5 0509 	sub.w	r5, r5, r9
 8008b6c:	60a5      	str	r5, [r4, #8]
 8008b6e:	42be      	cmp	r6, r7
 8008b70:	d900      	bls.n	8008b74 <__ssputs_r+0x72>
 8008b72:	463e      	mov	r6, r7
 8008b74:	4632      	mov	r2, r6
 8008b76:	4641      	mov	r1, r8
 8008b78:	6820      	ldr	r0, [r4, #0]
 8008b7a:	f000 f9c1 	bl	8008f00 <memmove>
 8008b7e:	2000      	movs	r0, #0
 8008b80:	68a3      	ldr	r3, [r4, #8]
 8008b82:	1b9b      	subs	r3, r3, r6
 8008b84:	60a3      	str	r3, [r4, #8]
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	4433      	add	r3, r6
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	462a      	mov	r2, r5
 8008b92:	f000 fa11 	bl	8008fb8 <_realloc_r>
 8008b96:	4606      	mov	r6, r0
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	d1e0      	bne.n	8008b5e <__ssputs_r+0x5c>
 8008b9c:	4650      	mov	r0, sl
 8008b9e:	6921      	ldr	r1, [r4, #16]
 8008ba0:	f7fe feb2 	bl	8007908 <_free_r>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	f8ca 3000 	str.w	r3, [sl]
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bb4:	81a3      	strh	r3, [r4, #12]
 8008bb6:	e7e9      	b.n	8008b8c <__ssputs_r+0x8a>

08008bb8 <_svfiprintf_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4698      	mov	r8, r3
 8008bbe:	898b      	ldrh	r3, [r1, #12]
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	061b      	lsls	r3, r3, #24
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	4614      	mov	r4, r2
 8008bc8:	b09d      	sub	sp, #116	@ 0x74
 8008bca:	d510      	bpl.n	8008bee <_svfiprintf_r+0x36>
 8008bcc:	690b      	ldr	r3, [r1, #16]
 8008bce:	b973      	cbnz	r3, 8008bee <_svfiprintf_r+0x36>
 8008bd0:	2140      	movs	r1, #64	@ 0x40
 8008bd2:	f7ff fa45 	bl	8008060 <_malloc_r>
 8008bd6:	6028      	str	r0, [r5, #0]
 8008bd8:	6128      	str	r0, [r5, #16]
 8008bda:	b930      	cbnz	r0, 8008bea <_svfiprintf_r+0x32>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	f04f 30ff 	mov.w	r0, #4294967295
 8008be4:	b01d      	add	sp, #116	@ 0x74
 8008be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bea:	2340      	movs	r3, #64	@ 0x40
 8008bec:	616b      	str	r3, [r5, #20]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bf2:	2320      	movs	r3, #32
 8008bf4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bf8:	2330      	movs	r3, #48	@ 0x30
 8008bfa:	f04f 0901 	mov.w	r9, #1
 8008bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c02:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008d9c <_svfiprintf_r+0x1e4>
 8008c06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	469a      	mov	sl, r3
 8008c0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c12:	b10a      	cbz	r2, 8008c18 <_svfiprintf_r+0x60>
 8008c14:	2a25      	cmp	r2, #37	@ 0x25
 8008c16:	d1f9      	bne.n	8008c0c <_svfiprintf_r+0x54>
 8008c18:	ebba 0b04 	subs.w	fp, sl, r4
 8008c1c:	d00b      	beq.n	8008c36 <_svfiprintf_r+0x7e>
 8008c1e:	465b      	mov	r3, fp
 8008c20:	4622      	mov	r2, r4
 8008c22:	4629      	mov	r1, r5
 8008c24:	4638      	mov	r0, r7
 8008c26:	f7ff ff6c 	bl	8008b02 <__ssputs_r>
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f000 80a7 	beq.w	8008d7e <_svfiprintf_r+0x1c6>
 8008c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c32:	445a      	add	r2, fp
 8008c34:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c36:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 809f 	beq.w	8008d7e <_svfiprintf_r+0x1c6>
 8008c40:	2300      	movs	r3, #0
 8008c42:	f04f 32ff 	mov.w	r2, #4294967295
 8008c46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4a:	f10a 0a01 	add.w	sl, sl, #1
 8008c4e:	9304      	str	r3, [sp, #16]
 8008c50:	9307      	str	r3, [sp, #28]
 8008c52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c56:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c58:	4654      	mov	r4, sl
 8008c5a:	2205      	movs	r2, #5
 8008c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c60:	484e      	ldr	r0, [pc, #312]	@ (8008d9c <_svfiprintf_r+0x1e4>)
 8008c62:	f7fd ffdc 	bl	8006c1e <memchr>
 8008c66:	9a04      	ldr	r2, [sp, #16]
 8008c68:	b9d8      	cbnz	r0, 8008ca2 <_svfiprintf_r+0xea>
 8008c6a:	06d0      	lsls	r0, r2, #27
 8008c6c:	bf44      	itt	mi
 8008c6e:	2320      	movmi	r3, #32
 8008c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c74:	0711      	lsls	r1, r2, #28
 8008c76:	bf44      	itt	mi
 8008c78:	232b      	movmi	r3, #43	@ 0x2b
 8008c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c84:	d015      	beq.n	8008cb2 <_svfiprintf_r+0xfa>
 8008c86:	4654      	mov	r4, sl
 8008c88:	2000      	movs	r0, #0
 8008c8a:	f04f 0c0a 	mov.w	ip, #10
 8008c8e:	9a07      	ldr	r2, [sp, #28]
 8008c90:	4621      	mov	r1, r4
 8008c92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c96:	3b30      	subs	r3, #48	@ 0x30
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d94b      	bls.n	8008d34 <_svfiprintf_r+0x17c>
 8008c9c:	b1b0      	cbz	r0, 8008ccc <_svfiprintf_r+0x114>
 8008c9e:	9207      	str	r2, [sp, #28]
 8008ca0:	e014      	b.n	8008ccc <_svfiprintf_r+0x114>
 8008ca2:	eba0 0308 	sub.w	r3, r0, r8
 8008ca6:	fa09 f303 	lsl.w	r3, r9, r3
 8008caa:	4313      	orrs	r3, r2
 8008cac:	46a2      	mov	sl, r4
 8008cae:	9304      	str	r3, [sp, #16]
 8008cb0:	e7d2      	b.n	8008c58 <_svfiprintf_r+0xa0>
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	1d19      	adds	r1, r3, #4
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	9103      	str	r1, [sp, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	bfbb      	ittet	lt
 8008cbe:	425b      	neglt	r3, r3
 8008cc0:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc4:	9307      	strge	r3, [sp, #28]
 8008cc6:	9307      	strlt	r3, [sp, #28]
 8008cc8:	bfb8      	it	lt
 8008cca:	9204      	strlt	r2, [sp, #16]
 8008ccc:	7823      	ldrb	r3, [r4, #0]
 8008cce:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cd0:	d10a      	bne.n	8008ce8 <_svfiprintf_r+0x130>
 8008cd2:	7863      	ldrb	r3, [r4, #1]
 8008cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd6:	d132      	bne.n	8008d3e <_svfiprintf_r+0x186>
 8008cd8:	9b03      	ldr	r3, [sp, #12]
 8008cda:	3402      	adds	r4, #2
 8008cdc:	1d1a      	adds	r2, r3, #4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	9203      	str	r2, [sp, #12]
 8008ce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ce6:	9305      	str	r3, [sp, #20]
 8008ce8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008da0 <_svfiprintf_r+0x1e8>
 8008cec:	2203      	movs	r2, #3
 8008cee:	4650      	mov	r0, sl
 8008cf0:	7821      	ldrb	r1, [r4, #0]
 8008cf2:	f7fd ff94 	bl	8006c1e <memchr>
 8008cf6:	b138      	cbz	r0, 8008d08 <_svfiprintf_r+0x150>
 8008cf8:	2240      	movs	r2, #64	@ 0x40
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	eba0 000a 	sub.w	r0, r0, sl
 8008d00:	4082      	lsls	r2, r0
 8008d02:	4313      	orrs	r3, r2
 8008d04:	3401      	adds	r4, #1
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0c:	2206      	movs	r2, #6
 8008d0e:	4825      	ldr	r0, [pc, #148]	@ (8008da4 <_svfiprintf_r+0x1ec>)
 8008d10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d14:	f7fd ff83 	bl	8006c1e <memchr>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d036      	beq.n	8008d8a <_svfiprintf_r+0x1d2>
 8008d1c:	4b22      	ldr	r3, [pc, #136]	@ (8008da8 <_svfiprintf_r+0x1f0>)
 8008d1e:	bb1b      	cbnz	r3, 8008d68 <_svfiprintf_r+0x1b0>
 8008d20:	9b03      	ldr	r3, [sp, #12]
 8008d22:	3307      	adds	r3, #7
 8008d24:	f023 0307 	bic.w	r3, r3, #7
 8008d28:	3308      	adds	r3, #8
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d2e:	4433      	add	r3, r6
 8008d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d32:	e76a      	b.n	8008c0a <_svfiprintf_r+0x52>
 8008d34:	460c      	mov	r4, r1
 8008d36:	2001      	movs	r0, #1
 8008d38:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d3c:	e7a8      	b.n	8008c90 <_svfiprintf_r+0xd8>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f04f 0c0a 	mov.w	ip, #10
 8008d44:	4619      	mov	r1, r3
 8008d46:	3401      	adds	r4, #1
 8008d48:	9305      	str	r3, [sp, #20]
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d50:	3a30      	subs	r2, #48	@ 0x30
 8008d52:	2a09      	cmp	r2, #9
 8008d54:	d903      	bls.n	8008d5e <_svfiprintf_r+0x1a6>
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0c6      	beq.n	8008ce8 <_svfiprintf_r+0x130>
 8008d5a:	9105      	str	r1, [sp, #20]
 8008d5c:	e7c4      	b.n	8008ce8 <_svfiprintf_r+0x130>
 8008d5e:	4604      	mov	r4, r0
 8008d60:	2301      	movs	r3, #1
 8008d62:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d66:	e7f0      	b.n	8008d4a <_svfiprintf_r+0x192>
 8008d68:	ab03      	add	r3, sp, #12
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	4638      	mov	r0, r7
 8008d70:	4b0e      	ldr	r3, [pc, #56]	@ (8008dac <_svfiprintf_r+0x1f4>)
 8008d72:	a904      	add	r1, sp, #16
 8008d74:	f7fd f9de 	bl	8006134 <_printf_float>
 8008d78:	1c42      	adds	r2, r0, #1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	d1d6      	bne.n	8008d2c <_svfiprintf_r+0x174>
 8008d7e:	89ab      	ldrh	r3, [r5, #12]
 8008d80:	065b      	lsls	r3, r3, #25
 8008d82:	f53f af2d 	bmi.w	8008be0 <_svfiprintf_r+0x28>
 8008d86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d88:	e72c      	b.n	8008be4 <_svfiprintf_r+0x2c>
 8008d8a:	ab03      	add	r3, sp, #12
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	462a      	mov	r2, r5
 8008d90:	4638      	mov	r0, r7
 8008d92:	4b06      	ldr	r3, [pc, #24]	@ (8008dac <_svfiprintf_r+0x1f4>)
 8008d94:	a904      	add	r1, sp, #16
 8008d96:	f7fd fc6b 	bl	8006670 <_printf_i>
 8008d9a:	e7ed      	b.n	8008d78 <_svfiprintf_r+0x1c0>
 8008d9c:	08009ae1 	.word	0x08009ae1
 8008da0:	08009ae7 	.word	0x08009ae7
 8008da4:	08009aeb 	.word	0x08009aeb
 8008da8:	08006135 	.word	0x08006135
 8008dac:	08008b03 	.word	0x08008b03

08008db0 <__sflush_r>:
 8008db0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db6:	0716      	lsls	r6, r2, #28
 8008db8:	4605      	mov	r5, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	d454      	bmi.n	8008e68 <__sflush_r+0xb8>
 8008dbe:	684b      	ldr	r3, [r1, #4]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc02      	bgt.n	8008dca <__sflush_r+0x1a>
 8008dc4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dd48      	ble.n	8008e5c <__sflush_r+0xac>
 8008dca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dcc:	2e00      	cmp	r6, #0
 8008dce:	d045      	beq.n	8008e5c <__sflush_r+0xac>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dd6:	682f      	ldr	r7, [r5, #0]
 8008dd8:	6a21      	ldr	r1, [r4, #32]
 8008dda:	602b      	str	r3, [r5, #0]
 8008ddc:	d030      	beq.n	8008e40 <__sflush_r+0x90>
 8008dde:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008de0:	89a3      	ldrh	r3, [r4, #12]
 8008de2:	0759      	lsls	r1, r3, #29
 8008de4:	d505      	bpl.n	8008df2 <__sflush_r+0x42>
 8008de6:	6863      	ldr	r3, [r4, #4]
 8008de8:	1ad2      	subs	r2, r2, r3
 8008dea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008dec:	b10b      	cbz	r3, 8008df2 <__sflush_r+0x42>
 8008dee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008df0:	1ad2      	subs	r2, r2, r3
 8008df2:	2300      	movs	r3, #0
 8008df4:	4628      	mov	r0, r5
 8008df6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008df8:	6a21      	ldr	r1, [r4, #32]
 8008dfa:	47b0      	blx	r6
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	d106      	bne.n	8008e10 <__sflush_r+0x60>
 8008e02:	6829      	ldr	r1, [r5, #0]
 8008e04:	291d      	cmp	r1, #29
 8008e06:	d82b      	bhi.n	8008e60 <__sflush_r+0xb0>
 8008e08:	4a28      	ldr	r2, [pc, #160]	@ (8008eac <__sflush_r+0xfc>)
 8008e0a:	410a      	asrs	r2, r1
 8008e0c:	07d6      	lsls	r6, r2, #31
 8008e0e:	d427      	bmi.n	8008e60 <__sflush_r+0xb0>
 8008e10:	2200      	movs	r2, #0
 8008e12:	6062      	str	r2, [r4, #4]
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	04d9      	lsls	r1, r3, #19
 8008e18:	6022      	str	r2, [r4, #0]
 8008e1a:	d504      	bpl.n	8008e26 <__sflush_r+0x76>
 8008e1c:	1c42      	adds	r2, r0, #1
 8008e1e:	d101      	bne.n	8008e24 <__sflush_r+0x74>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b903      	cbnz	r3, 8008e26 <__sflush_r+0x76>
 8008e24:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e28:	602f      	str	r7, [r5, #0]
 8008e2a:	b1b9      	cbz	r1, 8008e5c <__sflush_r+0xac>
 8008e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e30:	4299      	cmp	r1, r3
 8008e32:	d002      	beq.n	8008e3a <__sflush_r+0x8a>
 8008e34:	4628      	mov	r0, r5
 8008e36:	f7fe fd67 	bl	8007908 <_free_r>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e3e:	e00d      	b.n	8008e5c <__sflush_r+0xac>
 8008e40:	2301      	movs	r3, #1
 8008e42:	4628      	mov	r0, r5
 8008e44:	47b0      	blx	r6
 8008e46:	4602      	mov	r2, r0
 8008e48:	1c50      	adds	r0, r2, #1
 8008e4a:	d1c9      	bne.n	8008de0 <__sflush_r+0x30>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0c6      	beq.n	8008de0 <__sflush_r+0x30>
 8008e52:	2b1d      	cmp	r3, #29
 8008e54:	d001      	beq.n	8008e5a <__sflush_r+0xaa>
 8008e56:	2b16      	cmp	r3, #22
 8008e58:	d11d      	bne.n	8008e96 <__sflush_r+0xe6>
 8008e5a:	602f      	str	r7, [r5, #0]
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	e021      	b.n	8008ea4 <__sflush_r+0xf4>
 8008e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e64:	b21b      	sxth	r3, r3
 8008e66:	e01a      	b.n	8008e9e <__sflush_r+0xee>
 8008e68:	690f      	ldr	r7, [r1, #16]
 8008e6a:	2f00      	cmp	r7, #0
 8008e6c:	d0f6      	beq.n	8008e5c <__sflush_r+0xac>
 8008e6e:	0793      	lsls	r3, r2, #30
 8008e70:	bf18      	it	ne
 8008e72:	2300      	movne	r3, #0
 8008e74:	680e      	ldr	r6, [r1, #0]
 8008e76:	bf08      	it	eq
 8008e78:	694b      	ldreq	r3, [r1, #20]
 8008e7a:	1bf6      	subs	r6, r6, r7
 8008e7c:	600f      	str	r7, [r1, #0]
 8008e7e:	608b      	str	r3, [r1, #8]
 8008e80:	2e00      	cmp	r6, #0
 8008e82:	ddeb      	ble.n	8008e5c <__sflush_r+0xac>
 8008e84:	4633      	mov	r3, r6
 8008e86:	463a      	mov	r2, r7
 8008e88:	4628      	mov	r0, r5
 8008e8a:	6a21      	ldr	r1, [r4, #32]
 8008e8c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008e90:	47e0      	blx	ip
 8008e92:	2800      	cmp	r0, #0
 8008e94:	dc07      	bgt.n	8008ea6 <__sflush_r+0xf6>
 8008e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea6:	4407      	add	r7, r0
 8008ea8:	1a36      	subs	r6, r6, r0
 8008eaa:	e7e9      	b.n	8008e80 <__sflush_r+0xd0>
 8008eac:	dfbffffe 	.word	0xdfbffffe

08008eb0 <_fflush_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b913      	cbnz	r3, 8008ec0 <_fflush_r+0x10>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	b118      	cbz	r0, 8008eca <_fflush_r+0x1a>
 8008ec2:	6a03      	ldr	r3, [r0, #32]
 8008ec4:	b90b      	cbnz	r3, 8008eca <_fflush_r+0x1a>
 8008ec6:	f7fd fd7f 	bl	80069c8 <__sinit>
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f3      	beq.n	8008eba <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ede:	f7fd fe9c 	bl	8006c1a <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff63 	bl	8008db0 <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eec:	4605      	mov	r5, r0
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d4e4      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4e1      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efa:	f7fd fe8f 	bl	8006c1c <__retarget_lock_release_recursive>
 8008efe:	e7dd      	b.n	8008ebc <_fflush_r+0xc>

08008f00 <memmove>:
 8008f00:	4288      	cmp	r0, r1
 8008f02:	b510      	push	{r4, lr}
 8008f04:	eb01 0402 	add.w	r4, r1, r2
 8008f08:	d902      	bls.n	8008f10 <memmove+0x10>
 8008f0a:	4284      	cmp	r4, r0
 8008f0c:	4623      	mov	r3, r4
 8008f0e:	d807      	bhi.n	8008f20 <memmove+0x20>
 8008f10:	1e43      	subs	r3, r0, #1
 8008f12:	42a1      	cmp	r1, r4
 8008f14:	d008      	beq.n	8008f28 <memmove+0x28>
 8008f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f1e:	e7f8      	b.n	8008f12 <memmove+0x12>
 8008f20:	4601      	mov	r1, r0
 8008f22:	4402      	add	r2, r0
 8008f24:	428a      	cmp	r2, r1
 8008f26:	d100      	bne.n	8008f2a <memmove+0x2a>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f32:	e7f7      	b.n	8008f24 <memmove+0x24>

08008f34 <_sbrk_r>:
 8008f34:	b538      	push	{r3, r4, r5, lr}
 8008f36:	2300      	movs	r3, #0
 8008f38:	4d05      	ldr	r5, [pc, #20]	@ (8008f50 <_sbrk_r+0x1c>)
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4608      	mov	r0, r1
 8008f3e:	602b      	str	r3, [r5, #0]
 8008f40:	f7f9 fc0a 	bl	8002758 <_sbrk>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_sbrk_r+0x1a>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_sbrk_r+0x1a>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	2000044c 	.word	0x2000044c

08008f54 <__assert_func>:
 8008f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f56:	4614      	mov	r4, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b09      	ldr	r3, [pc, #36]	@ (8008f80 <__assert_func+0x2c>)
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68d8      	ldr	r0, [r3, #12]
 8008f62:	b954      	cbnz	r4, 8008f7a <__assert_func+0x26>
 8008f64:	4b07      	ldr	r3, [pc, #28]	@ (8008f84 <__assert_func+0x30>)
 8008f66:	461c      	mov	r4, r3
 8008f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f6c:	9100      	str	r1, [sp, #0]
 8008f6e:	462b      	mov	r3, r5
 8008f70:	4905      	ldr	r1, [pc, #20]	@ (8008f88 <__assert_func+0x34>)
 8008f72:	f000 f84f 	bl	8009014 <fiprintf>
 8008f76:	f000 f85f 	bl	8009038 <abort>
 8008f7a:	4b04      	ldr	r3, [pc, #16]	@ (8008f8c <__assert_func+0x38>)
 8008f7c:	e7f4      	b.n	8008f68 <__assert_func+0x14>
 8008f7e:	bf00      	nop
 8008f80:	2000018c 	.word	0x2000018c
 8008f84:	08009b2d 	.word	0x08009b2d
 8008f88:	08009aff 	.word	0x08009aff
 8008f8c:	08009af2 	.word	0x08009af2

08008f90 <_calloc_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	fba1 5402 	umull	r5, r4, r1, r2
 8008f96:	b93c      	cbnz	r4, 8008fa8 <_calloc_r+0x18>
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7ff f861 	bl	8008060 <_malloc_r>
 8008f9e:	4606      	mov	r6, r0
 8008fa0:	b928      	cbnz	r0, 8008fae <_calloc_r+0x1e>
 8008fa2:	2600      	movs	r6, #0
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	bd70      	pop	{r4, r5, r6, pc}
 8008fa8:	220c      	movs	r2, #12
 8008faa:	6002      	str	r2, [r0, #0]
 8008fac:	e7f9      	b.n	8008fa2 <_calloc_r+0x12>
 8008fae:	462a      	mov	r2, r5
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	f7fd fda2 	bl	8006afa <memset>
 8008fb6:	e7f5      	b.n	8008fa4 <_calloc_r+0x14>

08008fb8 <_realloc_r>:
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4615      	mov	r5, r2
 8008fc0:	460c      	mov	r4, r1
 8008fc2:	b921      	cbnz	r1, 8008fce <_realloc_r+0x16>
 8008fc4:	4611      	mov	r1, r2
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	f7ff b849 	b.w	8008060 <_malloc_r>
 8008fce:	b92a      	cbnz	r2, 8008fdc <_realloc_r+0x24>
 8008fd0:	f7fe fc9a 	bl	8007908 <_free_r>
 8008fd4:	2400      	movs	r4, #0
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	f000 f833 	bl	8009046 <_malloc_usable_size_r>
 8008fe0:	4285      	cmp	r5, r0
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	d802      	bhi.n	8008fec <_realloc_r+0x34>
 8008fe6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008fea:	d8f4      	bhi.n	8008fd6 <_realloc_r+0x1e>
 8008fec:	4629      	mov	r1, r5
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f7ff f836 	bl	8008060 <_malloc_r>
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0ec      	beq.n	8008fd4 <_realloc_r+0x1c>
 8008ffa:	42b5      	cmp	r5, r6
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	4621      	mov	r1, r4
 8009000:	bf28      	it	cs
 8009002:	4632      	movcs	r2, r6
 8009004:	f7fd fe19 	bl	8006c3a <memcpy>
 8009008:	4621      	mov	r1, r4
 800900a:	4640      	mov	r0, r8
 800900c:	f7fe fc7c 	bl	8007908 <_free_r>
 8009010:	463c      	mov	r4, r7
 8009012:	e7e0      	b.n	8008fd6 <_realloc_r+0x1e>

08009014 <fiprintf>:
 8009014:	b40e      	push	{r1, r2, r3}
 8009016:	b503      	push	{r0, r1, lr}
 8009018:	4601      	mov	r1, r0
 800901a:	ab03      	add	r3, sp, #12
 800901c:	4805      	ldr	r0, [pc, #20]	@ (8009034 <fiprintf+0x20>)
 800901e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	f000 f83d 	bl	80090a4 <_vfiprintf_r>
 800902a:	b002      	add	sp, #8
 800902c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009030:	b003      	add	sp, #12
 8009032:	4770      	bx	lr
 8009034:	2000018c 	.word	0x2000018c

08009038 <abort>:
 8009038:	2006      	movs	r0, #6
 800903a:	b508      	push	{r3, lr}
 800903c:	f000 fa06 	bl	800944c <raise>
 8009040:	2001      	movs	r0, #1
 8009042:	f7f9 fb14 	bl	800266e <_exit>

08009046 <_malloc_usable_size_r>:
 8009046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904a:	1f18      	subs	r0, r3, #4
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfbc      	itt	lt
 8009050:	580b      	ldrlt	r3, [r1, r0]
 8009052:	18c0      	addlt	r0, r0, r3
 8009054:	4770      	bx	lr

08009056 <__sfputc_r>:
 8009056:	6893      	ldr	r3, [r2, #8]
 8009058:	b410      	push	{r4}
 800905a:	3b01      	subs	r3, #1
 800905c:	2b00      	cmp	r3, #0
 800905e:	6093      	str	r3, [r2, #8]
 8009060:	da07      	bge.n	8009072 <__sfputc_r+0x1c>
 8009062:	6994      	ldr	r4, [r2, #24]
 8009064:	42a3      	cmp	r3, r4
 8009066:	db01      	blt.n	800906c <__sfputc_r+0x16>
 8009068:	290a      	cmp	r1, #10
 800906a:	d102      	bne.n	8009072 <__sfputc_r+0x1c>
 800906c:	bc10      	pop	{r4}
 800906e:	f000 b931 	b.w	80092d4 <__swbuf_r>
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	1c58      	adds	r0, r3, #1
 8009076:	6010      	str	r0, [r2, #0]
 8009078:	7019      	strb	r1, [r3, #0]
 800907a:	4608      	mov	r0, r1
 800907c:	bc10      	pop	{r4}
 800907e:	4770      	bx	lr

08009080 <__sfputs_r>:
 8009080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009082:	4606      	mov	r6, r0
 8009084:	460f      	mov	r7, r1
 8009086:	4614      	mov	r4, r2
 8009088:	18d5      	adds	r5, r2, r3
 800908a:	42ac      	cmp	r4, r5
 800908c:	d101      	bne.n	8009092 <__sfputs_r+0x12>
 800908e:	2000      	movs	r0, #0
 8009090:	e007      	b.n	80090a2 <__sfputs_r+0x22>
 8009092:	463a      	mov	r2, r7
 8009094:	4630      	mov	r0, r6
 8009096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909a:	f7ff ffdc 	bl	8009056 <__sfputc_r>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d1f3      	bne.n	800908a <__sfputs_r+0xa>
 80090a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090a4 <_vfiprintf_r>:
 80090a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	460d      	mov	r5, r1
 80090aa:	4614      	mov	r4, r2
 80090ac:	4698      	mov	r8, r3
 80090ae:	4606      	mov	r6, r0
 80090b0:	b09d      	sub	sp, #116	@ 0x74
 80090b2:	b118      	cbz	r0, 80090bc <_vfiprintf_r+0x18>
 80090b4:	6a03      	ldr	r3, [r0, #32]
 80090b6:	b90b      	cbnz	r3, 80090bc <_vfiprintf_r+0x18>
 80090b8:	f7fd fc86 	bl	80069c8 <__sinit>
 80090bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090be:	07d9      	lsls	r1, r3, #31
 80090c0:	d405      	bmi.n	80090ce <_vfiprintf_r+0x2a>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	059a      	lsls	r2, r3, #22
 80090c6:	d402      	bmi.n	80090ce <_vfiprintf_r+0x2a>
 80090c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ca:	f7fd fda6 	bl	8006c1a <__retarget_lock_acquire_recursive>
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	071b      	lsls	r3, r3, #28
 80090d2:	d501      	bpl.n	80090d8 <_vfiprintf_r+0x34>
 80090d4:	692b      	ldr	r3, [r5, #16]
 80090d6:	b99b      	cbnz	r3, 8009100 <_vfiprintf_r+0x5c>
 80090d8:	4629      	mov	r1, r5
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f938 	bl	8009350 <__swsetup_r>
 80090e0:	b170      	cbz	r0, 8009100 <_vfiprintf_r+0x5c>
 80090e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090e4:	07dc      	lsls	r4, r3, #31
 80090e6:	d504      	bpl.n	80090f2 <_vfiprintf_r+0x4e>
 80090e8:	f04f 30ff 	mov.w	r0, #4294967295
 80090ec:	b01d      	add	sp, #116	@ 0x74
 80090ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f2:	89ab      	ldrh	r3, [r5, #12]
 80090f4:	0598      	lsls	r0, r3, #22
 80090f6:	d4f7      	bmi.n	80090e8 <_vfiprintf_r+0x44>
 80090f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090fa:	f7fd fd8f 	bl	8006c1c <__retarget_lock_release_recursive>
 80090fe:	e7f3      	b.n	80090e8 <_vfiprintf_r+0x44>
 8009100:	2300      	movs	r3, #0
 8009102:	9309      	str	r3, [sp, #36]	@ 0x24
 8009104:	2320      	movs	r3, #32
 8009106:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800910a:	2330      	movs	r3, #48	@ 0x30
 800910c:	f04f 0901 	mov.w	r9, #1
 8009110:	f8cd 800c 	str.w	r8, [sp, #12]
 8009114:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80092c0 <_vfiprintf_r+0x21c>
 8009118:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800911c:	4623      	mov	r3, r4
 800911e:	469a      	mov	sl, r3
 8009120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009124:	b10a      	cbz	r2, 800912a <_vfiprintf_r+0x86>
 8009126:	2a25      	cmp	r2, #37	@ 0x25
 8009128:	d1f9      	bne.n	800911e <_vfiprintf_r+0x7a>
 800912a:	ebba 0b04 	subs.w	fp, sl, r4
 800912e:	d00b      	beq.n	8009148 <_vfiprintf_r+0xa4>
 8009130:	465b      	mov	r3, fp
 8009132:	4622      	mov	r2, r4
 8009134:	4629      	mov	r1, r5
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ffa2 	bl	8009080 <__sfputs_r>
 800913c:	3001      	adds	r0, #1
 800913e:	f000 80a7 	beq.w	8009290 <_vfiprintf_r+0x1ec>
 8009142:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009144:	445a      	add	r2, fp
 8009146:	9209      	str	r2, [sp, #36]	@ 0x24
 8009148:	f89a 3000 	ldrb.w	r3, [sl]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 809f 	beq.w	8009290 <_vfiprintf_r+0x1ec>
 8009152:	2300      	movs	r3, #0
 8009154:	f04f 32ff 	mov.w	r2, #4294967295
 8009158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800915c:	f10a 0a01 	add.w	sl, sl, #1
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	9307      	str	r3, [sp, #28]
 8009164:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009168:	931a      	str	r3, [sp, #104]	@ 0x68
 800916a:	4654      	mov	r4, sl
 800916c:	2205      	movs	r2, #5
 800916e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009172:	4853      	ldr	r0, [pc, #332]	@ (80092c0 <_vfiprintf_r+0x21c>)
 8009174:	f7fd fd53 	bl	8006c1e <memchr>
 8009178:	9a04      	ldr	r2, [sp, #16]
 800917a:	b9d8      	cbnz	r0, 80091b4 <_vfiprintf_r+0x110>
 800917c:	06d1      	lsls	r1, r2, #27
 800917e:	bf44      	itt	mi
 8009180:	2320      	movmi	r3, #32
 8009182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009186:	0713      	lsls	r3, r2, #28
 8009188:	bf44      	itt	mi
 800918a:	232b      	movmi	r3, #43	@ 0x2b
 800918c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009190:	f89a 3000 	ldrb.w	r3, [sl]
 8009194:	2b2a      	cmp	r3, #42	@ 0x2a
 8009196:	d015      	beq.n	80091c4 <_vfiprintf_r+0x120>
 8009198:	4654      	mov	r4, sl
 800919a:	2000      	movs	r0, #0
 800919c:	f04f 0c0a 	mov.w	ip, #10
 80091a0:	9a07      	ldr	r2, [sp, #28]
 80091a2:	4621      	mov	r1, r4
 80091a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091a8:	3b30      	subs	r3, #48	@ 0x30
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	d94b      	bls.n	8009246 <_vfiprintf_r+0x1a2>
 80091ae:	b1b0      	cbz	r0, 80091de <_vfiprintf_r+0x13a>
 80091b0:	9207      	str	r2, [sp, #28]
 80091b2:	e014      	b.n	80091de <_vfiprintf_r+0x13a>
 80091b4:	eba0 0308 	sub.w	r3, r0, r8
 80091b8:	fa09 f303 	lsl.w	r3, r9, r3
 80091bc:	4313      	orrs	r3, r2
 80091be:	46a2      	mov	sl, r4
 80091c0:	9304      	str	r3, [sp, #16]
 80091c2:	e7d2      	b.n	800916a <_vfiprintf_r+0xc6>
 80091c4:	9b03      	ldr	r3, [sp, #12]
 80091c6:	1d19      	adds	r1, r3, #4
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	9103      	str	r1, [sp, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	bfbb      	ittet	lt
 80091d0:	425b      	neglt	r3, r3
 80091d2:	f042 0202 	orrlt.w	r2, r2, #2
 80091d6:	9307      	strge	r3, [sp, #28]
 80091d8:	9307      	strlt	r3, [sp, #28]
 80091da:	bfb8      	it	lt
 80091dc:	9204      	strlt	r2, [sp, #16]
 80091de:	7823      	ldrb	r3, [r4, #0]
 80091e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80091e2:	d10a      	bne.n	80091fa <_vfiprintf_r+0x156>
 80091e4:	7863      	ldrb	r3, [r4, #1]
 80091e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80091e8:	d132      	bne.n	8009250 <_vfiprintf_r+0x1ac>
 80091ea:	9b03      	ldr	r3, [sp, #12]
 80091ec:	3402      	adds	r4, #2
 80091ee:	1d1a      	adds	r2, r3, #4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	9203      	str	r2, [sp, #12]
 80091f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091f8:	9305      	str	r3, [sp, #20]
 80091fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80092c4 <_vfiprintf_r+0x220>
 80091fe:	2203      	movs	r2, #3
 8009200:	4650      	mov	r0, sl
 8009202:	7821      	ldrb	r1, [r4, #0]
 8009204:	f7fd fd0b 	bl	8006c1e <memchr>
 8009208:	b138      	cbz	r0, 800921a <_vfiprintf_r+0x176>
 800920a:	2240      	movs	r2, #64	@ 0x40
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	eba0 000a 	sub.w	r0, r0, sl
 8009212:	4082      	lsls	r2, r0
 8009214:	4313      	orrs	r3, r2
 8009216:	3401      	adds	r4, #1
 8009218:	9304      	str	r3, [sp, #16]
 800921a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800921e:	2206      	movs	r2, #6
 8009220:	4829      	ldr	r0, [pc, #164]	@ (80092c8 <_vfiprintf_r+0x224>)
 8009222:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009226:	f7fd fcfa 	bl	8006c1e <memchr>
 800922a:	2800      	cmp	r0, #0
 800922c:	d03f      	beq.n	80092ae <_vfiprintf_r+0x20a>
 800922e:	4b27      	ldr	r3, [pc, #156]	@ (80092cc <_vfiprintf_r+0x228>)
 8009230:	bb1b      	cbnz	r3, 800927a <_vfiprintf_r+0x1d6>
 8009232:	9b03      	ldr	r3, [sp, #12]
 8009234:	3307      	adds	r3, #7
 8009236:	f023 0307 	bic.w	r3, r3, #7
 800923a:	3308      	adds	r3, #8
 800923c:	9303      	str	r3, [sp, #12]
 800923e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009240:	443b      	add	r3, r7
 8009242:	9309      	str	r3, [sp, #36]	@ 0x24
 8009244:	e76a      	b.n	800911c <_vfiprintf_r+0x78>
 8009246:	460c      	mov	r4, r1
 8009248:	2001      	movs	r0, #1
 800924a:	fb0c 3202 	mla	r2, ip, r2, r3
 800924e:	e7a8      	b.n	80091a2 <_vfiprintf_r+0xfe>
 8009250:	2300      	movs	r3, #0
 8009252:	f04f 0c0a 	mov.w	ip, #10
 8009256:	4619      	mov	r1, r3
 8009258:	3401      	adds	r4, #1
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	4620      	mov	r0, r4
 800925e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009262:	3a30      	subs	r2, #48	@ 0x30
 8009264:	2a09      	cmp	r2, #9
 8009266:	d903      	bls.n	8009270 <_vfiprintf_r+0x1cc>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0c6      	beq.n	80091fa <_vfiprintf_r+0x156>
 800926c:	9105      	str	r1, [sp, #20]
 800926e:	e7c4      	b.n	80091fa <_vfiprintf_r+0x156>
 8009270:	4604      	mov	r4, r0
 8009272:	2301      	movs	r3, #1
 8009274:	fb0c 2101 	mla	r1, ip, r1, r2
 8009278:	e7f0      	b.n	800925c <_vfiprintf_r+0x1b8>
 800927a:	ab03      	add	r3, sp, #12
 800927c:	9300      	str	r3, [sp, #0]
 800927e:	462a      	mov	r2, r5
 8009280:	4630      	mov	r0, r6
 8009282:	4b13      	ldr	r3, [pc, #76]	@ (80092d0 <_vfiprintf_r+0x22c>)
 8009284:	a904      	add	r1, sp, #16
 8009286:	f7fc ff55 	bl	8006134 <_printf_float>
 800928a:	4607      	mov	r7, r0
 800928c:	1c78      	adds	r0, r7, #1
 800928e:	d1d6      	bne.n	800923e <_vfiprintf_r+0x19a>
 8009290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009292:	07d9      	lsls	r1, r3, #31
 8009294:	d405      	bmi.n	80092a2 <_vfiprintf_r+0x1fe>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	059a      	lsls	r2, r3, #22
 800929a:	d402      	bmi.n	80092a2 <_vfiprintf_r+0x1fe>
 800929c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929e:	f7fd fcbd 	bl	8006c1c <__retarget_lock_release_recursive>
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	065b      	lsls	r3, r3, #25
 80092a6:	f53f af1f 	bmi.w	80090e8 <_vfiprintf_r+0x44>
 80092aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092ac:	e71e      	b.n	80090ec <_vfiprintf_r+0x48>
 80092ae:	ab03      	add	r3, sp, #12
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	462a      	mov	r2, r5
 80092b4:	4630      	mov	r0, r6
 80092b6:	4b06      	ldr	r3, [pc, #24]	@ (80092d0 <_vfiprintf_r+0x22c>)
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	f7fd f9d9 	bl	8006670 <_printf_i>
 80092be:	e7e4      	b.n	800928a <_vfiprintf_r+0x1e6>
 80092c0:	08009ae1 	.word	0x08009ae1
 80092c4:	08009ae7 	.word	0x08009ae7
 80092c8:	08009aeb 	.word	0x08009aeb
 80092cc:	08006135 	.word	0x08006135
 80092d0:	08009081 	.word	0x08009081

080092d4 <__swbuf_r>:
 80092d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d6:	460e      	mov	r6, r1
 80092d8:	4614      	mov	r4, r2
 80092da:	4605      	mov	r5, r0
 80092dc:	b118      	cbz	r0, 80092e6 <__swbuf_r+0x12>
 80092de:	6a03      	ldr	r3, [r0, #32]
 80092e0:	b90b      	cbnz	r3, 80092e6 <__swbuf_r+0x12>
 80092e2:	f7fd fb71 	bl	80069c8 <__sinit>
 80092e6:	69a3      	ldr	r3, [r4, #24]
 80092e8:	60a3      	str	r3, [r4, #8]
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	071a      	lsls	r2, r3, #28
 80092ee:	d501      	bpl.n	80092f4 <__swbuf_r+0x20>
 80092f0:	6923      	ldr	r3, [r4, #16]
 80092f2:	b943      	cbnz	r3, 8009306 <__swbuf_r+0x32>
 80092f4:	4621      	mov	r1, r4
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 f82a 	bl	8009350 <__swsetup_r>
 80092fc:	b118      	cbz	r0, 8009306 <__swbuf_r+0x32>
 80092fe:	f04f 37ff 	mov.w	r7, #4294967295
 8009302:	4638      	mov	r0, r7
 8009304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	6922      	ldr	r2, [r4, #16]
 800930a:	b2f6      	uxtb	r6, r6
 800930c:	1a98      	subs	r0, r3, r2
 800930e:	6963      	ldr	r3, [r4, #20]
 8009310:	4637      	mov	r7, r6
 8009312:	4283      	cmp	r3, r0
 8009314:	dc05      	bgt.n	8009322 <__swbuf_r+0x4e>
 8009316:	4621      	mov	r1, r4
 8009318:	4628      	mov	r0, r5
 800931a:	f7ff fdc9 	bl	8008eb0 <_fflush_r>
 800931e:	2800      	cmp	r0, #0
 8009320:	d1ed      	bne.n	80092fe <__swbuf_r+0x2a>
 8009322:	68a3      	ldr	r3, [r4, #8]
 8009324:	3b01      	subs	r3, #1
 8009326:	60a3      	str	r3, [r4, #8]
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	6022      	str	r2, [r4, #0]
 800932e:	701e      	strb	r6, [r3, #0]
 8009330:	6962      	ldr	r2, [r4, #20]
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	429a      	cmp	r2, r3
 8009336:	d004      	beq.n	8009342 <__swbuf_r+0x6e>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	07db      	lsls	r3, r3, #31
 800933c:	d5e1      	bpl.n	8009302 <__swbuf_r+0x2e>
 800933e:	2e0a      	cmp	r6, #10
 8009340:	d1df      	bne.n	8009302 <__swbuf_r+0x2e>
 8009342:	4621      	mov	r1, r4
 8009344:	4628      	mov	r0, r5
 8009346:	f7ff fdb3 	bl	8008eb0 <_fflush_r>
 800934a:	2800      	cmp	r0, #0
 800934c:	d0d9      	beq.n	8009302 <__swbuf_r+0x2e>
 800934e:	e7d6      	b.n	80092fe <__swbuf_r+0x2a>

08009350 <__swsetup_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4b29      	ldr	r3, [pc, #164]	@ (80093f8 <__swsetup_r+0xa8>)
 8009354:	4605      	mov	r5, r0
 8009356:	6818      	ldr	r0, [r3, #0]
 8009358:	460c      	mov	r4, r1
 800935a:	b118      	cbz	r0, 8009364 <__swsetup_r+0x14>
 800935c:	6a03      	ldr	r3, [r0, #32]
 800935e:	b90b      	cbnz	r3, 8009364 <__swsetup_r+0x14>
 8009360:	f7fd fb32 	bl	80069c8 <__sinit>
 8009364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009368:	0719      	lsls	r1, r3, #28
 800936a:	d422      	bmi.n	80093b2 <__swsetup_r+0x62>
 800936c:	06da      	lsls	r2, r3, #27
 800936e:	d407      	bmi.n	8009380 <__swsetup_r+0x30>
 8009370:	2209      	movs	r2, #9
 8009372:	602a      	str	r2, [r5, #0]
 8009374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009378:	f04f 30ff 	mov.w	r0, #4294967295
 800937c:	81a3      	strh	r3, [r4, #12]
 800937e:	e033      	b.n	80093e8 <__swsetup_r+0x98>
 8009380:	0758      	lsls	r0, r3, #29
 8009382:	d512      	bpl.n	80093aa <__swsetup_r+0x5a>
 8009384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009386:	b141      	cbz	r1, 800939a <__swsetup_r+0x4a>
 8009388:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800938c:	4299      	cmp	r1, r3
 800938e:	d002      	beq.n	8009396 <__swsetup_r+0x46>
 8009390:	4628      	mov	r0, r5
 8009392:	f7fe fab9 	bl	8007908 <_free_r>
 8009396:	2300      	movs	r3, #0
 8009398:	6363      	str	r3, [r4, #52]	@ 0x34
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093a0:	81a3      	strh	r3, [r4, #12]
 80093a2:	2300      	movs	r3, #0
 80093a4:	6063      	str	r3, [r4, #4]
 80093a6:	6923      	ldr	r3, [r4, #16]
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	89a3      	ldrh	r3, [r4, #12]
 80093ac:	f043 0308 	orr.w	r3, r3, #8
 80093b0:	81a3      	strh	r3, [r4, #12]
 80093b2:	6923      	ldr	r3, [r4, #16]
 80093b4:	b94b      	cbnz	r3, 80093ca <__swsetup_r+0x7a>
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80093bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c0:	d003      	beq.n	80093ca <__swsetup_r+0x7a>
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 f882 	bl	80094ce <__smakebuf_r>
 80093ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093ce:	f013 0201 	ands.w	r2, r3, #1
 80093d2:	d00a      	beq.n	80093ea <__swsetup_r+0x9a>
 80093d4:	2200      	movs	r2, #0
 80093d6:	60a2      	str	r2, [r4, #8]
 80093d8:	6962      	ldr	r2, [r4, #20]
 80093da:	4252      	negs	r2, r2
 80093dc:	61a2      	str	r2, [r4, #24]
 80093de:	6922      	ldr	r2, [r4, #16]
 80093e0:	b942      	cbnz	r2, 80093f4 <__swsetup_r+0xa4>
 80093e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80093e6:	d1c5      	bne.n	8009374 <__swsetup_r+0x24>
 80093e8:	bd38      	pop	{r3, r4, r5, pc}
 80093ea:	0799      	lsls	r1, r3, #30
 80093ec:	bf58      	it	pl
 80093ee:	6962      	ldrpl	r2, [r4, #20]
 80093f0:	60a2      	str	r2, [r4, #8]
 80093f2:	e7f4      	b.n	80093de <__swsetup_r+0x8e>
 80093f4:	2000      	movs	r0, #0
 80093f6:	e7f7      	b.n	80093e8 <__swsetup_r+0x98>
 80093f8:	2000018c 	.word	0x2000018c

080093fc <_raise_r>:
 80093fc:	291f      	cmp	r1, #31
 80093fe:	b538      	push	{r3, r4, r5, lr}
 8009400:	4605      	mov	r5, r0
 8009402:	460c      	mov	r4, r1
 8009404:	d904      	bls.n	8009410 <_raise_r+0x14>
 8009406:	2316      	movs	r3, #22
 8009408:	6003      	str	r3, [r0, #0]
 800940a:	f04f 30ff 	mov.w	r0, #4294967295
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009412:	b112      	cbz	r2, 800941a <_raise_r+0x1e>
 8009414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009418:	b94b      	cbnz	r3, 800942e <_raise_r+0x32>
 800941a:	4628      	mov	r0, r5
 800941c:	f000 f830 	bl	8009480 <_getpid_r>
 8009420:	4622      	mov	r2, r4
 8009422:	4601      	mov	r1, r0
 8009424:	4628      	mov	r0, r5
 8009426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800942a:	f000 b817 	b.w	800945c <_kill_r>
 800942e:	2b01      	cmp	r3, #1
 8009430:	d00a      	beq.n	8009448 <_raise_r+0x4c>
 8009432:	1c59      	adds	r1, r3, #1
 8009434:	d103      	bne.n	800943e <_raise_r+0x42>
 8009436:	2316      	movs	r3, #22
 8009438:	6003      	str	r3, [r0, #0]
 800943a:	2001      	movs	r0, #1
 800943c:	e7e7      	b.n	800940e <_raise_r+0x12>
 800943e:	2100      	movs	r1, #0
 8009440:	4620      	mov	r0, r4
 8009442:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009446:	4798      	blx	r3
 8009448:	2000      	movs	r0, #0
 800944a:	e7e0      	b.n	800940e <_raise_r+0x12>

0800944c <raise>:
 800944c:	4b02      	ldr	r3, [pc, #8]	@ (8009458 <raise+0xc>)
 800944e:	4601      	mov	r1, r0
 8009450:	6818      	ldr	r0, [r3, #0]
 8009452:	f7ff bfd3 	b.w	80093fc <_raise_r>
 8009456:	bf00      	nop
 8009458:	2000018c 	.word	0x2000018c

0800945c <_kill_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	2300      	movs	r3, #0
 8009460:	4d06      	ldr	r5, [pc, #24]	@ (800947c <_kill_r+0x20>)
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	602b      	str	r3, [r5, #0]
 800946a:	f7f9 f8f0 	bl	800264e <_kill>
 800946e:	1c43      	adds	r3, r0, #1
 8009470:	d102      	bne.n	8009478 <_kill_r+0x1c>
 8009472:	682b      	ldr	r3, [r5, #0]
 8009474:	b103      	cbz	r3, 8009478 <_kill_r+0x1c>
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	bd38      	pop	{r3, r4, r5, pc}
 800947a:	bf00      	nop
 800947c:	2000044c 	.word	0x2000044c

08009480 <_getpid_r>:
 8009480:	f7f9 b8de 	b.w	8002640 <_getpid>

08009484 <__swhatbuf_r>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	460c      	mov	r4, r1
 8009488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948c:	4615      	mov	r5, r2
 800948e:	2900      	cmp	r1, #0
 8009490:	461e      	mov	r6, r3
 8009492:	b096      	sub	sp, #88	@ 0x58
 8009494:	da0c      	bge.n	80094b0 <__swhatbuf_r+0x2c>
 8009496:	89a3      	ldrh	r3, [r4, #12]
 8009498:	2100      	movs	r1, #0
 800949a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800949e:	bf14      	ite	ne
 80094a0:	2340      	movne	r3, #64	@ 0x40
 80094a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80094a6:	2000      	movs	r0, #0
 80094a8:	6031      	str	r1, [r6, #0]
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	b016      	add	sp, #88	@ 0x58
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	466a      	mov	r2, sp
 80094b2:	f000 f849 	bl	8009548 <_fstat_r>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	dbed      	blt.n	8009496 <__swhatbuf_r+0x12>
 80094ba:	9901      	ldr	r1, [sp, #4]
 80094bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80094c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80094c4:	4259      	negs	r1, r3
 80094c6:	4159      	adcs	r1, r3
 80094c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094cc:	e7eb      	b.n	80094a6 <__swhatbuf_r+0x22>

080094ce <__smakebuf_r>:
 80094ce:	898b      	ldrh	r3, [r1, #12]
 80094d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d2:	079d      	lsls	r5, r3, #30
 80094d4:	4606      	mov	r6, r0
 80094d6:	460c      	mov	r4, r1
 80094d8:	d507      	bpl.n	80094ea <__smakebuf_r+0x1c>
 80094da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80094de:	6023      	str	r3, [r4, #0]
 80094e0:	6123      	str	r3, [r4, #16]
 80094e2:	2301      	movs	r3, #1
 80094e4:	6163      	str	r3, [r4, #20]
 80094e6:	b003      	add	sp, #12
 80094e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094ea:	466a      	mov	r2, sp
 80094ec:	ab01      	add	r3, sp, #4
 80094ee:	f7ff ffc9 	bl	8009484 <__swhatbuf_r>
 80094f2:	9f00      	ldr	r7, [sp, #0]
 80094f4:	4605      	mov	r5, r0
 80094f6:	4639      	mov	r1, r7
 80094f8:	4630      	mov	r0, r6
 80094fa:	f7fe fdb1 	bl	8008060 <_malloc_r>
 80094fe:	b948      	cbnz	r0, 8009514 <__smakebuf_r+0x46>
 8009500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009504:	059a      	lsls	r2, r3, #22
 8009506:	d4ee      	bmi.n	80094e6 <__smakebuf_r+0x18>
 8009508:	f023 0303 	bic.w	r3, r3, #3
 800950c:	f043 0302 	orr.w	r3, r3, #2
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	e7e2      	b.n	80094da <__smakebuf_r+0xc>
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800951a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800951e:	81a3      	strh	r3, [r4, #12]
 8009520:	9b01      	ldr	r3, [sp, #4]
 8009522:	6020      	str	r0, [r4, #0]
 8009524:	b15b      	cbz	r3, 800953e <__smakebuf_r+0x70>
 8009526:	4630      	mov	r0, r6
 8009528:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800952c:	f000 f81e 	bl	800956c <_isatty_r>
 8009530:	b128      	cbz	r0, 800953e <__smakebuf_r+0x70>
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	f023 0303 	bic.w	r3, r3, #3
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	431d      	orrs	r5, r3
 8009542:	81a5      	strh	r5, [r4, #12]
 8009544:	e7cf      	b.n	80094e6 <__smakebuf_r+0x18>
	...

08009548 <_fstat_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	2300      	movs	r3, #0
 800954c:	4d06      	ldr	r5, [pc, #24]	@ (8009568 <_fstat_r+0x20>)
 800954e:	4604      	mov	r4, r0
 8009550:	4608      	mov	r0, r1
 8009552:	4611      	mov	r1, r2
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	f7f9 f8d9 	bl	800270c <_fstat>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d102      	bne.n	8009564 <_fstat_r+0x1c>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	b103      	cbz	r3, 8009564 <_fstat_r+0x1c>
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	bd38      	pop	{r3, r4, r5, pc}
 8009566:	bf00      	nop
 8009568:	2000044c 	.word	0x2000044c

0800956c <_isatty_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	2300      	movs	r3, #0
 8009570:	4d05      	ldr	r5, [pc, #20]	@ (8009588 <_isatty_r+0x1c>)
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	f7f9 f8d7 	bl	800272a <_isatty>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_isatty_r+0x1a>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_isatty_r+0x1a>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	2000044c 	.word	0x2000044c

0800958c <_init>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	bf00      	nop
 8009590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009592:	bc08      	pop	{r3}
 8009594:	469e      	mov	lr, r3
 8009596:	4770      	bx	lr

08009598 <_fini>:
 8009598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959a:	bf00      	nop
 800959c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800959e:	bc08      	pop	{r3}
 80095a0:	469e      	mov	lr, r3
 80095a2:	4770      	bx	lr
