
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006540  08006540  00007540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006950  08006950  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006950  08006950  00007950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006958  08006958  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006958  08006958  00007958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006960  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001d4  08006b34  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  08006b34  00008400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac0c  00000000  00000000  000081fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002360  00000000  00000000  00012e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00015170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000973  00000000  00000000  00015dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197bd  00000000  00000000  00016743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f36f  00000000  00000000  0002ff00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f202  00000000  00000000  0003f26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  000ce4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d26e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006524 	.word	0x08006524

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08006524 	.word	0x08006524

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <Read_Temperature_INT>:
#include "ambient.h"


int Read_Temperature_INT(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
    int temperature = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]

    // Read ADC value from the temperature sensor
    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 f82a 	bl	8000af0 <read_adc_value>
 8000a9c:	6138      	str	r0, [r7, #16]

    // Calculate temperature based on the calibration values
    int temp_range = TEMP110_CAL_VALUE - TEMP30_CAL_VALUE;
 8000a9e:	2350      	movs	r3, #80	@ 0x50
 8000aa0:	60fb      	str	r3, [r7, #12]
    int adc_range = TS_CAL2 - TS_CAL1;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <Read_Temperature_INT+0x60>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <Read_Temperature_INT+0x64>)
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	60bb      	str	r3, [r7, #8]
    int temp_offset = TEMP30_CAL_VALUE;
 8000ab0:	231e      	movs	r3, #30
 8000ab2:	607b      	str	r3, [r7, #4]

    // Avoid floating-point operations by using integer arithmetic
    if (adc_range != 0) {
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00e      	beq.n	8000ad8 <Read_Temperature_INT+0x50>
        temperature = temp_offset + (adcValue - TS_CAL1) * temp_range / adc_range;
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_Temperature_INT+0x64>)
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	fb03 f202 	mul.w	r2, r3, r2
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	617b      	str	r3, [r7, #20]
 8000ad6:	e002      	b.n	8000ade <Read_Temperature_INT+0x56>
    } else {
        temperature = -1;  // Return an error value if adc_range is 0
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	617b      	str	r3, [r7, #20]
    }

    return temperature;
 8000ade:	697b      	ldr	r3, [r7, #20]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	1fff7a2e 	.word	0x1fff7a2e
 8000aec:	1fff7a2c 	.word	0x1fff7a2c

08000af0 <read_adc_value>:

    return temperature;
}


uint32_t read_adc_value(uint32_t channel) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;  // Adjust as needed
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4810      	ldr	r0, [pc, #64]	@ (8000b5c <read_adc_value+0x6c>)
 8000b1c:	f001 f9a6 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <read_adc_value+0x3c>
        // Handle error
        return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e012      	b.n	8000b52 <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <read_adc_value+0x6c>)
 8000b2e:	f000 ffb1 	bl	8001a94 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8000b32:	f04f 31ff 	mov.w	r1, #4294967295
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <read_adc_value+0x6c>)
 8000b38:	f001 f886 	bl	8001c48 <HAL_ADC_PollForConversion>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <read_adc_value+0x6c>)
 8000b44:	f001 f986 	bl	8001e54 <HAL_ADC_GetValue>
 8000b48:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 8000b4a:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <read_adc_value+0x6c>)
 8000b4c:	f001 f850 	bl	8001bf0 <HAL_ADC_Stop>

    return adcValue;
 8000b50:	697b      	ldr	r3, [r7, #20]
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200001f0 	.word	0x200001f0

08000b60 <debounce>:
#include "main.h"
#include "keypad.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 8000b74:	2301      	movs	r3, #1
 8000b76:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d822      	bhi.n	8000bc8 <debounce+0x68>
 8000b82:	a201      	add	r2, pc, #4	@ (adr r2, 8000b88 <debounce+0x28>)
 8000b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b88:	08000b99 	.word	0x08000b99
 8000b8c:	08000ba5 	.word	0x08000ba5
 8000b90:	08000bb1 	.word	0x08000bb1
 8000b94:	08000bbd 	.word	0x08000bbd
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <debounce+0xac>)
 8000b9a:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba0:	81fb      	strh	r3, [r7, #14]
            break;
 8000ba2:	e013      	b.n	8000bcc <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 8000ba4:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <debounce+0xac>)
 8000ba6:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bac:	81fb      	strh	r3, [r7, #14]
            break;
 8000bae:	e00d      	b.n	8000bcc <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 8000bb0:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <debounce+0xac>)
 8000bb2:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 8000bb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000bb8:	81fb      	strh	r3, [r7, #14]
            break;
 8000bba:	e007      	b.n	8000bcc <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <debounce+0xac>)
 8000bbe:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 8000bc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bc4:	81fb      	strh	r3, [r7, #14]
            break;
 8000bc6:	e001      	b.n	8000bcc <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e01a      	b.n	8000c02 <debounce+0xa2>
    }

    while (count < 7) {
 8000bcc:	e015      	b.n	8000bfa <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fe64 	bl	800189c <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6938      	ldr	r0, [r7, #16]
 8000bda:	f001 fecd 	bl	8002978 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 8000be2:	7d7a      	ldrb	r2, [r7, #21]
 8000be4:	7dbb      	ldrb	r3, [r7, #22]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d103      	bne.n	8000bf2 <debounce+0x92>
            count++;
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
 8000bec:	3301      	adds	r3, #1
 8000bee:	75fb      	strb	r3, [r7, #23]
 8000bf0:	e001      	b.n	8000bf6 <debounce+0x96>
        } else {
            count = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 8000bf6:	7d7b      	ldrb	r3, [r7, #21]
 8000bf8:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d9e6      	bls.n	8000bce <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 8000c00:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010c00 	.word	0x40010c00

08000c10 <keypad_getkey>:
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
}

char keypad_getkey(void) {
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 8000c16:	4b35      	ldr	r3, [pc, #212]	@ (8000cec <keypad_getkey+0xdc>)
 8000c18:	1d3c      	adds	r4, r7, #4
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 8000c20:	2300      	movs	r3, #0
 8000c22:	77bb      	strb	r3, [r7, #30]
 8000c24:	e059      	b.n	8000cda <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 8000c26:	7fbb      	ldrb	r3, [r7, #30]
 8000c28:	2b03      	cmp	r3, #3
 8000c2a:	d821      	bhi.n	8000c70 <keypad_getkey+0x60>
 8000c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c34 <keypad_getkey+0x24>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c4f 	.word	0x08000c4f
 8000c3c:	08000c59 	.word	0x08000c59
 8000c40:	08000c65 	.word	0x08000c65
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf0 <keypad_getkey+0xe0>)
 8000c46:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	82fb      	strh	r3, [r7, #22]
                break;
 8000c4c:	e015      	b.n	8000c7a <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 8000c4e:	4b28      	ldr	r3, [pc, #160]	@ (8000cf0 <keypad_getkey+0xe0>)
 8000c50:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	82fb      	strh	r3, [r7, #22]
                break;
 8000c56:	e010      	b.n	8000c7a <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 8000c58:	4b25      	ldr	r3, [pc, #148]	@ (8000cf0 <keypad_getkey+0xe0>)
 8000c5a:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 8000c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c60:	82fb      	strh	r3, [r7, #22]
                break;
 8000c62:	e00a      	b.n	8000c7a <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <keypad_getkey+0xe0>)
 8000c66:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 8000c68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c6c:	82fb      	strh	r3, [r7, #22]
                break;
 8000c6e:	e004      	b.n	8000c7a <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	82fb      	strh	r3, [r7, #22]
                break;
 8000c78:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000c7a:	8afb      	ldrh	r3, [r7, #22]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4619      	mov	r1, r3
 8000c80:	69b8      	ldr	r0, [r7, #24]
 8000c82:	f001 fe90 	bl	80029a6 <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	77fb      	strb	r3, [r7, #31]
 8000c8a:	e01a      	b.n	8000cc2 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 8000c8c:	7fba      	ldrb	r2, [r7, #30]
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff64 	bl	8000b60 <debounce>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10e      	bne.n	8000cbc <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000c9e:	8afb      	ldrh	r3, [r7, #22]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	69b8      	ldr	r0, [r7, #24]
 8000ca6:	f001 fe7e 	bl	80029a6 <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 8000caa:	7ffa      	ldrb	r2, [r7, #31]
 8000cac:	7fbb      	ldrb	r3, [r7, #30]
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	3220      	adds	r2, #32
 8000cb2:	443a      	add	r2, r7
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b1c      	subs	r3, #28
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	e012      	b.n	8000ce2 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 8000cbc:	7ffb      	ldrb	r3, [r7, #31]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	77fb      	strb	r3, [r7, #31]
 8000cc2:	7ffb      	ldrb	r3, [r7, #31]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d9e1      	bls.n	8000c8c <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8000cc8:	8afb      	ldrh	r3, [r7, #22]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	69b8      	ldr	r0, [r7, #24]
 8000cd0:	f001 fe69 	bl	80029a6 <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8000cd4:	7fbb      	ldrb	r3, [r7, #30]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	77bb      	strb	r3, [r7, #30]
 8000cda:	7fbb      	ldrb	r3, [r7, #30]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d9a2      	bls.n	8000c26 <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3724      	adds	r7, #36	@ 0x24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd90      	pop	{r4, r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08006540 	.word	0x08006540
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2108      	movs	r1, #8
 8000d02:	4841      	ldr	r0, [pc, #260]	@ (8000e08 <write_command_LCD+0x114>)
 8000d04:	f001 fe4f 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2110      	movs	r1, #16
 8000d0c:	483e      	ldr	r0, [pc, #248]	@ (8000e08 <write_command_LCD+0x114>)
 8000d0e:	f001 fe4a 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	111b      	asrs	r3, r3, #4
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d24:	4839      	ldr	r0, [pc, #228]	@ (8000e0c <write_command_LCD+0x118>)
 8000d26:	f001 fe3e 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	115b      	asrs	r3, r3, #5
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	4833      	ldr	r0, [pc, #204]	@ (8000e0c <write_command_LCD+0x118>)
 8000d3e:	f001 fe32 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	119b      	asrs	r3, r3, #6
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d54:	482d      	ldr	r0, [pc, #180]	@ (8000e0c <write_command_LCD+0x118>)
 8000d56:	f001 fe26 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	09db      	lsrs	r3, r3, #7
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d66:	4829      	ldr	r0, [pc, #164]	@ (8000e0c <write_command_LCD+0x118>)
 8000d68:	f001 fe1d 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f000 fd95 	bl	800189c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2110      	movs	r1, #16
 8000d76:	4824      	ldr	r0, [pc, #144]	@ (8000e08 <write_command_LCD+0x114>)
 8000d78:	f001 fe15 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000d7c:	2014      	movs	r0, #20
 8000d7e:	f000 fd8d 	bl	800189c <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	4820      	ldr	r0, [pc, #128]	@ (8000e08 <write_command_LCD+0x114>)
 8000d88:	f001 fe0d 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d9a:	481c      	ldr	r0, [pc, #112]	@ (8000e0c <write_command_LCD+0x118>)
 8000d9c:	f001 fe03 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	105b      	asrs	r3, r3, #1
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	461a      	mov	r2, r3
 8000dae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000db2:	4816      	ldr	r0, [pc, #88]	@ (8000e0c <write_command_LCD+0x118>)
 8000db4:	f001 fdf7 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	109b      	asrs	r3, r3, #2
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dca:	4810      	ldr	r0, [pc, #64]	@ (8000e0c <write_command_LCD+0x118>)
 8000dcc:	f001 fdeb 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	10db      	asrs	r3, r3, #3
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de2:	480a      	ldr	r0, [pc, #40]	@ (8000e0c <write_command_LCD+0x118>)
 8000de4:	f001 fddf 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000de8:	200a      	movs	r0, #10
 8000dea:	f000 fd57 	bl	800189c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2110      	movs	r1, #16
 8000df2:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <write_command_LCD+0x114>)
 8000df4:	f001 fdd7 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f000 fd4f 	bl	800189c <HAL_Delay>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40010c00 	.word	0x40010c00
 8000e0c:	40010800 	.word	0x40010800

08000e10 <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2108      	movs	r1, #8
 8000e1e:	4841      	ldr	r0, [pc, #260]	@ (8000f24 <write_data_LCD+0x114>)
 8000e20:	f001 fdc1 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	483e      	ldr	r0, [pc, #248]	@ (8000f24 <write_data_LCD+0x114>)
 8000e2a:	f001 fdbc 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	111b      	asrs	r3, r3, #4
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e40:	4839      	ldr	r0, [pc, #228]	@ (8000f28 <write_data_LCD+0x118>)
 8000e42:	f001 fdb0 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	115b      	asrs	r3, r3, #5
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e58:	4833      	ldr	r0, [pc, #204]	@ (8000f28 <write_data_LCD+0x118>)
 8000e5a:	f001 fda4 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	119b      	asrs	r3, r3, #6
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e70:	482d      	ldr	r0, [pc, #180]	@ (8000f28 <write_data_LCD+0x118>)
 8000e72:	f001 fd98 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	09db      	lsrs	r3, r3, #7
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e82:	4829      	ldr	r0, [pc, #164]	@ (8000f28 <write_data_LCD+0x118>)
 8000e84:	f001 fd8f 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000e88:	200a      	movs	r0, #10
 8000e8a:	f000 fd07 	bl	800189c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2110      	movs	r1, #16
 8000e92:	4824      	ldr	r0, [pc, #144]	@ (8000f24 <write_data_LCD+0x114>)
 8000e94:	f001 fd87 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 fcff 	bl	800189c <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	4820      	ldr	r0, [pc, #128]	@ (8000f24 <write_data_LCD+0x114>)
 8000ea4:	f001 fd7f 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb6:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <write_data_LCD+0x118>)
 8000eb8:	f001 fd75 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	105b      	asrs	r3, r3, #1
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ece:	4816      	ldr	r0, [pc, #88]	@ (8000f28 <write_data_LCD+0x118>)
 8000ed0:	f001 fd69 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	109b      	asrs	r3, r3, #2
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee6:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <write_data_LCD+0x118>)
 8000ee8:	f001 fd5d 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	10db      	asrs	r3, r3, #3
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efe:	480a      	ldr	r0, [pc, #40]	@ (8000f28 <write_data_LCD+0x118>)
 8000f00:	f001 fd51 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000f04:	200a      	movs	r0, #10
 8000f06:	f000 fcc9 	bl	800189c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <write_data_LCD+0x114>)
 8000f10:	f001 fd49 	bl	80029a6 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000f14:	2014      	movs	r0, #20
 8000f16:	f000 fcc1 	bl	800189c <HAL_Delay>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010c00 	.word	0x40010c00
 8000f28:	40010800 	.word	0x40010800

08000f2c <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 8000f30:	2032      	movs	r0, #50	@ 0x32
 8000f32:	f000 fcb3 	bl	800189c <HAL_Delay>
    write_command_LCD(0x33);
 8000f36:	2033      	movs	r0, #51	@ 0x33
 8000f38:	f7ff fedc 	bl	8000cf4 <write_command_LCD>
    write_command_LCD(0x32);
 8000f3c:	2032      	movs	r0, #50	@ 0x32
 8000f3e:	f7ff fed9 	bl	8000cf4 <write_command_LCD>
    write_command_LCD(0x28);
 8000f42:	2028      	movs	r0, #40	@ 0x28
 8000f44:	f7ff fed6 	bl	8000cf4 <write_command_LCD>
    write_command_LCD(0x0C);
 8000f48:	200c      	movs	r0, #12
 8000f4a:	f7ff fed3 	bl	8000cf4 <write_command_LCD>
    write_command_LCD(0x06);
 8000f4e:	2006      	movs	r0, #6
 8000f50:	f7ff fed0 	bl	8000cf4 <write_command_LCD>
    write_command_LCD(0x01);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f7ff fecd 	bl	8000cf4 <write_command_LCD>
    HAL_Delay(2);
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f000 fc9e 	bl	800189c <HAL_Delay>
}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    while (*text) {
 8000f6c:	e006      	b.n	8000f7c <write_string_LCD+0x18>
        write_data_LCD(*text++);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	1c5a      	adds	r2, r3, #1
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff4a 	bl	8000e10 <write_data_LCD>
    while (*text) {
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f4      	bne.n	8000f6e <write_string_LCD+0xa>
    }
}
 8000f84:	bf00      	nop
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <write_string_line>:

void write_string_line(char line, const char *text) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	6039      	str	r1, [r7, #0]
 8000f98:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d103      	bne.n	8000fa8 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8000fa0:	2080      	movs	r0, #128	@ 0x80
 8000fa2:	f7ff fea7 	bl	8000cf4 <write_command_LCD>
 8000fa6:	e005      	b.n	8000fb4 <write_string_line+0x26>
    } else if (line == 2) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d102      	bne.n	8000fb4 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 8000fae:	20c0      	movs	r0, #192	@ 0xc0
 8000fb0:	f7ff fea0 	bl	8000cf4 <write_command_LCD>
    }
    write_string_LCD(text);
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f7ff ffd5 	bl	8000f64 <write_string_LCD>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <clear_display>:

void clear_display(void) {
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f7ff fe94 	bl	8000cf4 <write_command_LCD>
    HAL_Delay(2);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f000 fc65 	bl	800189c <HAL_Delay>
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fbfb 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f859 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f000 f977 	bl	80012d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fea:	f000 f957 	bl	800129c <MX_DMA_Init>
  MX_ADC1_Init();
 8000fee:	f000 f8af 	bl	8001150 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ff2:	f000 f8eb 	bl	80011cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_LCD();
 8000ff6:	f7ff ff99 	bl	8000f2c <init_LCD>
  //keypad_init();

  clear_display();
 8000ffa:	f7ff ffe2 	bl	8000fc2 <clear_display>
  write_string_line(1,"   Smart-fARM");
 8000ffe:	4921      	ldr	r1, [pc, #132]	@ (8001084 <main+0xac>)
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff ffc4 	bl	8000f8e <write_string_line>
  write_string_line(2,"");
 8001006:	4920      	ldr	r1, [pc, #128]	@ (8001088 <main+0xb0>)
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff ffc0 	bl	8000f8e <write_string_line>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 800100e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001012:	481e      	ldr	r0, [pc, #120]	@ (800108c <main+0xb4>)
 8001014:	f001 fcdf 	bl	80029d6 <HAL_GPIO_TogglePin>

//	clear_display();
//	write_string_line(1,"   Smart-fARM");
//	HAL_Delay(2000);

	 char key = keypad_getkey();
 8001018:	f7ff fdfa 	bl	8000c10 <keypad_getkey>
 800101c:	4603      	mov	r3, r0
 800101e:	75fb      	strb	r3, [r7, #23]
	 if(key != 0){
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d017      	beq.n	8001056 <main+0x7e>
		 clear_display();
 8001026:	f7ff ffcc 	bl	8000fc2 <clear_display>
		 write_string_line(1,"GOT KEY: ");
 800102a:	4919      	ldr	r1, [pc, #100]	@ (8001090 <main+0xb8>)
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff ffae 	bl	8000f8e <write_string_line>
		 write_data_LCD(key);
 8001032:	7dfb      	ldrb	r3, [r7, #23]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff feeb 	bl	8000e10 <write_data_LCD>
		 HAL_Delay(2000);
 800103a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800103e:	f000 fc2d 	bl	800189c <HAL_Delay>
		 clear_display();
 8001042:	f7ff ffbe 	bl	8000fc2 <clear_display>
		 write_string_line(1,"   Smart-fARM");
 8001046:	490f      	ldr	r1, [pc, #60]	@ (8001084 <main+0xac>)
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ffa0 	bl	8000f8e <write_string_line>
		 write_string_line(2,"");
 800104e:	490e      	ldr	r1, [pc, #56]	@ (8001088 <main+0xb0>)
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff9c 	bl	8000f8e <write_string_line>
//	 temperature = Read_Temperature();
//	 sprintf(buffer, "%.2f", temperature);  // Convert float to string with 2 decimal places
//	 clear_display();
//	 write_string_line(1,buffer);

	 clear_display();
 8001056:	f7ff ffb4 	bl	8000fc2 <clear_display>
	 write_string_line(1,"LENDO TEMP");
 800105a:	490e      	ldr	r1, [pc, #56]	@ (8001094 <main+0xbc>)
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff96 	bl	8000f8e <write_string_line>
	 int temperature;
	 char buffer [16];
	 temperature = Read_Temperature_INT();
 8001062:	f7ff fd11 	bl	8000a88 <Read_Temperature_INT>
 8001066:	6138      	str	r0, [r7, #16]
	 itoa(temperature,buffer,10);
 8001068:	463b      	mov	r3, r7
 800106a:	220a      	movs	r2, #10
 800106c:	4619      	mov	r1, r3
 800106e:	6938      	ldr	r0, [r7, #16]
 8001070:	f002 fd8a 	bl	8003b88 <itoa>
	 clear_display();
 8001074:	f7ff ffa5 	bl	8000fc2 <clear_display>
	 write_string_line(1,buffer);
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ff86 	bl	8000f8e <write_string_line>
  {
 8001082:	e7c9      	b.n	8001018 <main+0x40>
 8001084:	08006550 	.word	0x08006550
 8001088:	08006560 	.word	0x08006560
 800108c:	40011000 	.word	0x40011000
 8001090:	08006564 	.word	0x08006564
 8001094:	08006570 	.word	0x08006570

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b094      	sub	sp, #80	@ 0x50
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010a2:	2228      	movs	r2, #40	@ 0x28
 80010a4:	2100      	movs	r1, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fb13 	bl	80046d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80010e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 fc8a 	bl	8002a08 <HAL_RCC_OscConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010fa:	f000 f98b 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fe:	230f      	movs	r3, #15
 8001100:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800110e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f001 fef6 	bl	8002f0c <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001126:	f000 f975 	bl	8001414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800112a:	2302      	movs	r3, #2
 800112c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800112e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f002 f862 	bl	8003200 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001142:	f000 f967 	bl	8001414 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3750      	adds	r7, #80	@ 0x50
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001162:	4a19      	ldr	r2, [pc, #100]	@ (80011c8 <MX_ADC1_Init+0x78>)
 8001164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800116e:	2201      	movs	r2, #1
 8001170:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800117a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800117e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_ADC1_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <MX_ADC1_Init+0x74>)
 800118e:	f000 fba9 	bl	80018e4 <HAL_ADC_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001198:	f000 f93c 	bl	8001414 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a0:	2301      	movs	r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_ADC1_Init+0x74>)
 80011ae:	f000 fe5d 	bl	8001e6c <HAL_ADC_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011b8:	f000 f92c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	40012400 	.word	0x40012400

080011cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b08c      	sub	sp, #48	@ 0x30
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]
 80011de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f8:	4b26      	ldr	r3, [pc, #152]	@ (8001294 <MX_TIM1_Init+0xc8>)
 80011fa:	4a27      	ldr	r2, [pc, #156]	@ (8001298 <MX_TIM1_Init+0xcc>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800120a:	4b22      	ldr	r3, [pc, #136]	@ (8001294 <MX_TIM1_Init+0xc8>)
 800120c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001210:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001218:	4b1e      	ldr	r3, [pc, #120]	@ (8001294 <MX_TIM1_Init+0xc8>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121e:	4b1d      	ldr	r3, [pc, #116]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001224:	481b      	ldr	r0, [pc, #108]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001226:	f002 f957 	bl	80034d8 <HAL_TIM_Base_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001230:	f000 f8f0 	bl	8001414 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001238:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4619      	mov	r1, r3
 8001240:	4814      	ldr	r0, [pc, #80]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001242:	f002 f998 	bl	8003576 <HAL_TIM_ConfigClockSource>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800124c:	f000 f8e2 	bl	8001414 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	@ (8001294 <MX_TIM1_Init+0xc8>)
 8001260:	f002 fa50 	bl	8003704 <HAL_TIM_SlaveConfigSynchro>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800126a:	f000 f8d3 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	4619      	mov	r1, r3
 800127a:	4806      	ldr	r0, [pc, #24]	@ (8001294 <MX_TIM1_Init+0xc8>)
 800127c:	f002 fc0e 	bl	8003a9c <HAL_TIMEx_MasterConfigSynchronization>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001286:	f000 f8c5 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	@ 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000264 	.word	0x20000264
 8001298:	40012c00 	.word	0x40012c00

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_DMA_Init+0x38>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a0b      	ldr	r2, [pc, #44]	@ (80012d4 <MX_DMA_Init+0x38>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_DMA_Init+0x38>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	200b      	movs	r0, #11
 80012c0:	f001 f83f 	bl	8002342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012c4:	200b      	movs	r0, #11
 80012c6:	f001 f858 	bl	800237a <HAL_NVIC_EnableIRQ>

}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	4b45      	ldr	r3, [pc, #276]	@ (8001404 <MX_GPIO_Init+0x12c>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a44      	ldr	r2, [pc, #272]	@ (8001404 <MX_GPIO_Init+0x12c>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b42      	ldr	r3, [pc, #264]	@ (8001404 <MX_GPIO_Init+0x12c>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0310 	and.w	r3, r3, #16
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b3f      	ldr	r3, [pc, #252]	@ (8001404 <MX_GPIO_Init+0x12c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a3e      	ldr	r2, [pc, #248]	@ (8001404 <MX_GPIO_Init+0x12c>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b3c      	ldr	r3, [pc, #240]	@ (8001404 <MX_GPIO_Init+0x12c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131c:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <MX_GPIO_Init+0x12c>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a38      	ldr	r2, [pc, #224]	@ (8001404 <MX_GPIO_Init+0x12c>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b36      	ldr	r3, [pc, #216]	@ (8001404 <MX_GPIO_Init+0x12c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b33      	ldr	r3, [pc, #204]	@ (8001404 <MX_GPIO_Init+0x12c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a32      	ldr	r2, [pc, #200]	@ (8001404 <MX_GPIO_Init+0x12c>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b30      	ldr	r3, [pc, #192]	@ (8001404 <MX_GPIO_Init+0x12c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001352:	482d      	ldr	r0, [pc, #180]	@ (8001408 <MX_GPIO_Init+0x130>)
 8001354:	f001 fb27 	bl	80029a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8001358:	2200      	movs	r2, #0
 800135a:	f640 411b 	movw	r1, #3099	@ 0xc1b
 800135e:	482b      	ldr	r0, [pc, #172]	@ (800140c <MX_GPIO_Init+0x134>)
 8001360:	f001 fb21 	bl	80029a6 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800136a:	4829      	ldr	r0, [pc, #164]	@ (8001410 <MX_GPIO_Init+0x138>)
 800136c:	f001 fb1b 	bl	80029a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001374:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4619      	mov	r1, r3
 8001388:	481f      	ldr	r0, [pc, #124]	@ (8001408 <MX_GPIO_Init+0x130>)
 800138a:	f001 f971 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138e:	2340      	movs	r3, #64	@ 0x40
 8001390:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	481b      	ldr	r0, [pc, #108]	@ (8001410 <MX_GPIO_Init+0x138>)
 80013a2:	f001 f965 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 80013a6:	f640 431b 	movw	r3, #3099	@ 0xc1b
 80013aa:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4813      	ldr	r0, [pc, #76]	@ (800140c <MX_GPIO_Init+0x134>)
 80013c0:	f001 f956 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 80013c4:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80013c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_GPIO_Init+0x134>)
 80013da:	f001 f949 	bl	8002670 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80013de:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ec:	2303      	movs	r3, #3
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4806      	ldr	r0, [pc, #24]	@ (8001410 <MX_GPIO_Init+0x138>)
 80013f8:	f001 f93a 	bl	8002670 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fc:	bf00      	nop
 80013fe:	3720      	adds	r7, #32
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40011000 	.word	0x40011000
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010800 	.word	0x40010800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_MspInit+0x5c>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a14      	ldr	r2, [pc, #80]	@ (800147c <HAL_MspInit+0x5c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_MspInit+0x5c>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_MspInit+0x5c>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <HAL_MspInit+0x5c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <HAL_MspInit+0x5c>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001456:	4b0a      	ldr	r3, [pc, #40]	@ (8001480 <HAL_MspInit+0x60>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_MspInit+0x60>)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000

08001484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a28      	ldr	r2, [pc, #160]	@ (8001540 <HAL_ADC_MspInit+0xbc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d149      	bne.n	8001538 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a20      	ldr	r2, [pc, #128]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 80014d4:	2303      	movs	r3, #3
 80014d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d8:	2303      	movs	r3, #3
 80014da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0310 	add.w	r3, r7, #16
 80014e0:	4619      	mov	r1, r3
 80014e2:	4819      	ldr	r0, [pc, #100]	@ (8001548 <HAL_ADC_MspInit+0xc4>)
 80014e4:	f001 f8c4 	bl	8002670 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 80014ea:	4a19      	ldr	r2, [pc, #100]	@ (8001550 <HAL_ADC_MspInit+0xcc>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 8001502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001506:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 800150a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800150e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800151c:	480b      	ldr	r0, [pc, #44]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 800151e:	f000 ff47 	bl	80023b0 <HAL_DMA_Init>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001528:	f7ff ff74 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a07      	ldr	r2, [pc, #28]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 8001530:	621a      	str	r2, [r3, #32]
 8001532:	4a06      	ldr	r2, [pc, #24]	@ (800154c <HAL_ADC_MspInit+0xc8>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40012400 	.word	0x40012400
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800
 800154c:	20000220 	.word	0x20000220
 8001550:	40020008 	.word	0x40020008

08001554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <HAL_TIM_Base_MspInit+0x34>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10b      	bne.n	800157e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001566:	4b09      	ldr	r3, [pc, #36]	@ (800158c <HAL_TIM_Base_MspInit+0x38>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a08      	ldr	r2, [pc, #32]	@ (800158c <HAL_TIM_Base_MspInit+0x38>)
 800156c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_TIM_Base_MspInit+0x38>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40021000 	.word	0x40021000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <NMI_Handler+0x4>

08001598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <MemManage_Handler+0x4>

080015a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f940 	bl	8001864 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ee:	f000 ff39 	bl	8002464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000220 	.word	0x20000220

080015fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return 1;
 8001600:	2301      	movs	r3, #1
}
 8001602:	4618      	mov	r0, r3
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr

0800160a <_kill>:

int _kill(int pid, int sig)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001614:	f003 f8b0 	bl	8004778 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	2216      	movs	r2, #22
 800161c:	601a      	str	r2, [r3, #0]
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_exit>:

void _exit (int status)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001632:	f04f 31ff 	mov.w	r1, #4294967295
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffe7 	bl	800160a <_kill>
  while (1) {}    /* Make sure we hang here */
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <_exit+0x12>

08001640 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e00a      	b.n	8001668 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001652:	f3af 8000 	nop.w
 8001656:	4601      	mov	r1, r0
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	60ba      	str	r2, [r7, #8]
 800165e:	b2ca      	uxtb	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	429a      	cmp	r2, r3
 800166e:	dbf0      	blt.n	8001652 <_read+0x12>
  }

  return len;
 8001670:	687b      	ldr	r3, [r7, #4]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e009      	b.n	80016a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	60ba      	str	r2, [r7, #8]
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf1      	blt.n	800168c <_write+0x12>
  }
  return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_close>:

int _close(int file)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d8:	605a      	str	r2, [r3, #4]
  return 0;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b085      	sub	sp, #20
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	@ (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	@ (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f003 f818 	bl	8004778 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	@ (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20005000 	.word	0x20005000
 8001774:	00000400 	.word	0x00000400
 8001778:	200002ac 	.word	0x200002ac
 800177c:	20000400 	.word	0x20000400

08001780 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800178c:	f7ff fff8 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001790:	480b      	ldr	r0, [pc, #44]	@ (80017c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001792:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001794:	4a0c      	ldr	r2, [pc, #48]	@ (80017c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001798:	e002      	b.n	80017a0 <LoopCopyDataInit>

0800179a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800179c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179e:	3304      	adds	r3, #4

080017a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a4:	d3f9      	bcc.n	800179a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a6:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a8:	4c09      	ldr	r4, [pc, #36]	@ (80017d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017ac:	e001      	b.n	80017b2 <LoopFillZerobss>

080017ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b0:	3204      	adds	r2, #4

080017b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b4:	d3fb      	bcc.n	80017ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b6:	f002 ffe5 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fc0d 	bl	8000fd8 <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017c8:	08006960 	.word	0x08006960
  ldr r2, =_sbss
 80017cc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017d0:	20000400 	.word	0x20000400

080017d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_2_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x28>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 fd9f 	bl	800232c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f000 f808 	bl	8001804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017f4:	f7ff fe14 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_InitTick+0x54>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <HAL_InitTick+0x58>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	4619      	mov	r1, r3
 8001816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181a:	fbb3 f3f1 	udiv	r3, r3, r1
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fdb7 	bl	8002396 <HAL_SYSTICK_Config>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00e      	b.n	8001850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d80a      	bhi.n	800184e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f000 fd7f 	bl	8002342 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001844:	4a06      	ldr	r2, [pc, #24]	@ (8001860 <HAL_InitTick+0x5c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	e000      	b.n	8001850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000000 	.word	0x20000000
 800185c:	20000008 	.word	0x20000008
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_IncTick+0x1c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_IncTick+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4413      	add	r3, r2
 8001874:	4a03      	ldr	r2, [pc, #12]	@ (8001884 <HAL_IncTick+0x20>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	20000008 	.word	0x20000008
 8001884:	200002b0 	.word	0x200002b0

08001888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return uwTick;
 800188c:	4b02      	ldr	r3, [pc, #8]	@ (8001898 <HAL_GetTick+0x10>)
 800188e:	681b      	ldr	r3, [r3, #0]
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200002b0 	.word	0x200002b0

0800189c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	f7ff fff0 	bl	8001888 <HAL_GetTick>
 80018a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b4:	d005      	beq.n	80018c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <HAL_Delay+0x44>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018c2:	bf00      	nop
 80018c4:	f7ff ffe0 	bl	8001888 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8f7      	bhi.n	80018c4 <HAL_Delay+0x28>
  {
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008

080018e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0be      	b.n	8001a84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001910:	2b00      	cmp	r3, #0
 8001912:	d109      	bne.n	8001928 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff fdae 	bl	8001484 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fbf1 	bl	8002110 <ADC_ConversionStop_Disable>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b00      	cmp	r3, #0
 800193c:	f040 8099 	bne.w	8001a72 <HAL_ADC_Init+0x18e>
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b00      	cmp	r3, #0
 8001944:	f040 8095 	bne.w	8001a72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800194c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001950:	f023 0302 	bic.w	r3, r3, #2
 8001954:	f043 0202 	orr.w	r2, r3, #2
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001964:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7b1b      	ldrb	r3, [r3, #12]
 800196a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800196c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	4313      	orrs	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197c:	d003      	beq.n	8001986 <HAL_ADC_Init+0xa2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d102      	bne.n	800198c <HAL_ADC_Init+0xa8>
 8001986:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800198a:	e000      	b.n	800198e <HAL_ADC_Init+0xaa>
 800198c:	2300      	movs	r3, #0
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7d1b      	ldrb	r3, [r3, #20]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d119      	bne.n	80019d0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7b1b      	ldrb	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d109      	bne.n	80019b8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	035a      	lsls	r2, r3, #13
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	e00b      	b.n	80019d0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019bc:	f043 0220 	orr.w	r2, r3, #32
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	f043 0201 	orr.w	r2, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <HAL_ADC_Init+0x1a8>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	68b9      	ldr	r1, [r7, #8]
 80019f4:	430b      	orrs	r3, r1
 80019f6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a00:	d003      	beq.n	8001a0a <HAL_ADC_Init+0x126>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d104      	bne.n	8001a14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	051b      	lsls	r3, r3, #20
 8001a12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_ADC_Init+0x1ac>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a42:	f023 0303 	bic.w	r3, r3, #3
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a4e:	e018      	b.n	8001a82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a54:	f023 0312 	bic.w	r3, r3, #18
 8001a58:	f043 0210 	orr.w	r2, r3, #16
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a70:	e007      	b.n	8001a82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a76:	f043 0210 	orr.w	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	ffe1f7fd 	.word	0xffe1f7fd
 8001a90:	ff1f0efe 	.word	0xff1f0efe

08001a94 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Start+0x1a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e098      	b.n	8001be0 <HAL_ADC_Start+0x14c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 fad0 	bl	800205c <ADC_Enable>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f040 8087 	bne.w	8001bd6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a41      	ldr	r2, [pc, #260]	@ (8001be8 <HAL_ADC_Start+0x154>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d105      	bne.n	8001af2 <HAL_ADC_Start+0x5e>
 8001ae6:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <HAL_ADC_Start+0x158>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d026      	beq.n	8001b5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b14:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b1c:	e01d      	b.n	8001b5a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001bec <HAL_ADC_Start+0x158>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d004      	beq.n	8001b3e <HAL_ADC_Start+0xaa>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	@ (8001be8 <HAL_ADC_Start+0x154>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10d      	bne.n	8001b5a <HAL_ADC_Start+0xc6>
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <HAL_ADC_Start+0x158>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	f023 0206 	bic.w	r2, r3, #6
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b72:	e002      	b.n	8001b7a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0202 	mvn.w	r2, #2
 8001b8a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001b96:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b9a:	d113      	bne.n	8001bc4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ba0:	4a11      	ldr	r2, [pc, #68]	@ (8001be8 <HAL_ADC_Start+0x154>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ba6:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <HAL_ADC_Start+0x158>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d108      	bne.n	8001bc4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	e00c      	b.n	8001bde <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	e003      	b.n	8001bde <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40012800 	.word	0x40012800
 8001bec:	40012400 	.word	0x40012400

08001bf0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Stop+0x1a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e01a      	b.n	8001c40 <HAL_ADC_Stop+0x50>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 fa7c 	bl	8002110 <ADC_ConversionStop_Disable>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	f043 0201 	orr.w	r2, r3, #1
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c5e:	f7ff fe13 	bl	8001888 <HAL_GetTick>
 8001c62:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c76:	f043 0220 	orr.w	r2, r3, #32
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0d3      	b.n	8001e32 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d131      	bne.n	8001cfc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d12a      	bne.n	8001cfc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ca6:	e021      	b.n	8001cec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cae:	d01d      	beq.n	8001cec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0x7e>
 8001cb6:	f7ff fde7 	bl	8001888 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d212      	bcs.n	8001cec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd8:	f043 0204 	orr.w	r2, r3, #4
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0a2      	b.n	8001e32 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0d6      	beq.n	8001ca8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cfa:	e070      	b.n	8001dde <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <HAL_ADC_PollForConversion+0x1f4>)
 8001cfe:	681c      	ldr	r4, [r3, #0]
 8001d00:	2002      	movs	r0, #2
 8001d02:	f001 fb33 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d06:	4603      	mov	r3, r0
 8001d08:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <HAL_ADC_PollForConversion+0x1f8>)
 8001d14:	400b      	ands	r3, r1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x104>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68d9      	ldr	r1, [r3, #12]
 8001d20:	4b48      	ldr	r3, [pc, #288]	@ (8001e44 <HAL_ADC_PollForConversion+0x1fc>)
 8001d22:	400b      	ands	r3, r1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d111      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x104>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	4b46      	ldr	r3, [pc, #280]	@ (8001e48 <HAL_ADC_PollForConversion+0x200>)
 8001d30:	400b      	ands	r3, r1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d108      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x100>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68d9      	ldr	r1, [r3, #12]
 8001d3c:	4b43      	ldr	r3, [pc, #268]	@ (8001e4c <HAL_ADC_PollForConversion+0x204>)
 8001d3e:	400b      	ands	r3, r1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x100>
 8001d44:	2314      	movs	r3, #20
 8001d46:	e020      	b.n	8001d8a <HAL_ADC_PollForConversion+0x142>
 8001d48:	2329      	movs	r3, #41	@ 0x29
 8001d4a:	e01e      	b.n	8001d8a <HAL_ADC_PollForConversion+0x142>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6919      	ldr	r1, [r3, #16]
 8001d52:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <HAL_ADC_PollForConversion+0x200>)
 8001d54:	400b      	ands	r3, r1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_ADC_PollForConversion+0x120>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68d9      	ldr	r1, [r3, #12]
 8001d60:	4b3a      	ldr	r3, [pc, #232]	@ (8001e4c <HAL_ADC_PollForConversion+0x204>)
 8001d62:	400b      	ands	r3, r1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00d      	beq.n	8001d84 <HAL_ADC_PollForConversion+0x13c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6919      	ldr	r1, [r3, #16]
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_ADC_PollForConversion+0x208>)
 8001d70:	400b      	ands	r3, r1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x140>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68d9      	ldr	r1, [r3, #12]
 8001d7c:	4b34      	ldr	r3, [pc, #208]	@ (8001e50 <HAL_ADC_PollForConversion+0x208>)
 8001d7e:	400b      	ands	r3, r1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_ADC_PollForConversion+0x140>
 8001d84:	2354      	movs	r3, #84	@ 0x54
 8001d86:	e000      	b.n	8001d8a <HAL_ADC_PollForConversion+0x142>
 8001d88:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d8a:	fb02 f303 	mul.w	r3, r2, r3
 8001d8e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d90:	e021      	b.n	8001dd6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d01a      	beq.n	8001dd0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_ADC_PollForConversion+0x168>
 8001da0:	f7ff fd72 	bl	8001888 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d20f      	bcs.n	8001dd0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d90b      	bls.n	8001dd0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e030      	b.n	8001e32 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d8d9      	bhi.n	8001d92 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f06f 0212 	mvn.w	r2, #18
 8001de6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dfe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e02:	d115      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d111      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	24924924 	.word	0x24924924
 8001e44:	00924924 	.word	0x00924924
 8001e48:	12492492 	.word	0x12492492
 8001e4c:	00492492 	.word	0x00492492
 8001e50:	00249249 	.word	0x00249249

08001e54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x20>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e0dc      	b.n	8002046 <HAL_ADC_ConfigChannel+0x1da>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b06      	cmp	r3, #6
 8001e9a:	d81c      	bhi.n	8001ed6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b05      	subs	r3, #5
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	4019      	ands	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3b05      	subs	r3, #5
 8001ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ed4:	e03c      	b.n	8001f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b0c      	cmp	r3, #12
 8001edc:	d81c      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	3b23      	subs	r3, #35	@ 0x23
 8001ef0:	221f      	movs	r2, #31
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	4019      	ands	r1, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	3b23      	subs	r3, #35	@ 0x23
 8001f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f16:	e01b      	b.n	8001f50 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b41      	subs	r3, #65	@ 0x41
 8001f2a:	221f      	movs	r2, #31
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4019      	ands	r1, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	3b41      	subs	r3, #65	@ 0x41
 8001f44:	fa00 f203 	lsl.w	r2, r0, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b09      	cmp	r3, #9
 8001f56:	d91c      	bls.n	8001f92 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68d9      	ldr	r1, [r3, #12]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	3b1e      	subs	r3, #30
 8001f6a:	2207      	movs	r2, #7
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4019      	ands	r1, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6898      	ldr	r0, [r3, #8]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	3b1e      	subs	r3, #30
 8001f84:	fa00 f203 	lsl.w	r2, r0, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	e019      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6919      	ldr	r1, [r3, #16]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	4019      	ands	r1, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d003      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd2:	2b11      	cmp	r3, #17
 8001fd4:	d132      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d125      	bne.n	800202c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d126      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ffc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b10      	cmp	r3, #16
 8002004:	d11a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <HAL_ADC_ConfigChannel+0x1e8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <HAL_ADC_ConfigChannel+0x1ec>)
 800200c:	fba2 2303 	umull	r2, r3, r2, r3
 8002010:	0c9a      	lsrs	r2, r3, #18
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800201c:	e002      	b.n	8002024 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3b01      	subs	r3, #1
 8002022:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f9      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1b2>
 800202a:	e007      	b.n	800203c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002030:	f043 0220 	orr.w	r2, r3, #32
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	40012400 	.word	0x40012400
 8002054:	20000000 	.word	0x20000000
 8002058:	431bde83 	.word	0x431bde83

0800205c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d040      	beq.n	80020fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <ADC_Enable+0xac>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a1f      	ldr	r2, [pc, #124]	@ (800210c <ADC_Enable+0xb0>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002098:	e002      	b.n	80020a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020a6:	f7ff fbef 	bl	8001888 <HAL_GetTick>
 80020aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ac:	e01f      	b.n	80020ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ae:	f7ff fbeb 	bl	8001888 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d918      	bls.n	80020ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d011      	beq.n	80020ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e007      	b.n	80020fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d1d8      	bne.n	80020ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000
 800210c:	431bde83 	.word	0x431bde83

08002110 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b01      	cmp	r3, #1
 8002128:	d12e      	bne.n	8002188 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800213a:	f7ff fba5 	bl	8001888 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002140:	e01b      	b.n	800217a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002142:	f7ff fba1 	bl	8001888 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d914      	bls.n	800217a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10d      	bne.n	800217a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002162:	f043 0210 	orr.w	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216e:	f043 0201 	orr.w	r2, r3, #1
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e007      	b.n	800218a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d0dc      	beq.n	8002142 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021a4:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021c6:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	60d3      	str	r3, [r2, #12]
}
 80021cc:	bf00      	nop
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bc80      	pop	{r7}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e0:	4b04      	ldr	r3, [pc, #16]	@ (80021f4 <__NVIC_GetPriorityGrouping+0x18>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	f003 0307 	and.w	r3, r3, #7
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000ed00 	.word	0xe000ed00

080021f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4906      	ldr	r1, [pc, #24]	@ (800222c <__NVIC_EnableIRQ+0x34>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	e000e100 	.word	0xe000e100

08002230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	6039      	str	r1, [r7, #0]
 800223a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	2b00      	cmp	r3, #0
 8002242:	db0a      	blt.n	800225a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	490c      	ldr	r1, [pc, #48]	@ (800227c <__NVIC_SetPriority+0x4c>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	0112      	lsls	r2, r2, #4
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	440b      	add	r3, r1
 8002254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002258:	e00a      	b.n	8002270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	4908      	ldr	r1, [pc, #32]	@ (8002280 <__NVIC_SetPriority+0x50>)
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	3b04      	subs	r3, #4
 8002268:	0112      	lsls	r2, r2, #4
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	440b      	add	r3, r1
 800226e:	761a      	strb	r2, [r3, #24]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	e000e100 	.word	0xe000e100
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	f1c3 0307 	rsb	r3, r3, #7
 800229e:	2b04      	cmp	r3, #4
 80022a0:	bf28      	it	cs
 80022a2:	2304      	movcs	r3, #4
 80022a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3304      	adds	r3, #4
 80022aa:	2b06      	cmp	r3, #6
 80022ac:	d902      	bls.n	80022b4 <NVIC_EncodePriority+0x30>
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3b03      	subs	r3, #3
 80022b2:	e000      	b.n	80022b6 <NVIC_EncodePriority+0x32>
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	f04f 32ff 	mov.w	r2, #4294967295
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	401a      	ands	r2, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022cc:	f04f 31ff 	mov.w	r1, #4294967295
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43d9      	mvns	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022dc:	4313      	orrs	r3, r2
         );
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3724      	adds	r7, #36	@ 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f8:	d301      	bcc.n	80022fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00f      	b.n	800231e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002328 <SysTick_Config+0x40>)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002306:	210f      	movs	r1, #15
 8002308:	f04f 30ff 	mov.w	r0, #4294967295
 800230c:	f7ff ff90 	bl	8002230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <SysTick_Config+0x40>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002316:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <SysTick_Config+0x40>)
 8002318:	2207      	movs	r2, #7
 800231a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff2d 	bl	8002194 <__NVIC_SetPriorityGrouping>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002342:	b580      	push	{r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002354:	f7ff ff42 	bl	80021dc <__NVIC_GetPriorityGrouping>
 8002358:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	6978      	ldr	r0, [r7, #20]
 8002360:	f7ff ff90 	bl	8002284 <NVIC_EncodePriority>
 8002364:	4602      	mov	r2, r0
 8002366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236a:	4611      	mov	r1, r2
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff5f 	bl	8002230 <__NVIC_SetPriority>
}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff ff35 	bl	80021f8 <__NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff ffa2 	bl	80022e8 <SysTick_Config>
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e043      	b.n	800244e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_DMA_Init+0xa8>)
 80023ce:	4413      	add	r3, r2
 80023d0:	4a22      	ldr	r2, [pc, #136]	@ (800245c <HAL_DMA_Init+0xac>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	009a      	lsls	r2, r3, #2
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002460 <HAL_DMA_Init+0xb0>)
 80023e2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023fa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80023fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr
 8002458:	bffdfff8 	.word	0xbffdfff8
 800245c:	cccccccd 	.word	0xcccccccd
 8002460:	40020000 	.word	0x40020000

08002464 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	2204      	movs	r2, #4
 8002482:	409a      	lsls	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4013      	ands	r3, r2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d04f      	beq.n	800252c <HAL_DMA_IRQHandler+0xc8>
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	d04a      	beq.n	800252c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0320 	and.w	r3, r3, #32
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0204 	bic.w	r2, r2, #4
 80024b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a66      	ldr	r2, [pc, #408]	@ (8002654 <HAL_DMA_IRQHandler+0x1f0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d029      	beq.n	8002512 <HAL_DMA_IRQHandler+0xae>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a65      	ldr	r2, [pc, #404]	@ (8002658 <HAL_DMA_IRQHandler+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d022      	beq.n	800250e <HAL_DMA_IRQHandler+0xaa>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a63      	ldr	r2, [pc, #396]	@ (800265c <HAL_DMA_IRQHandler+0x1f8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01a      	beq.n	8002508 <HAL_DMA_IRQHandler+0xa4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a62      	ldr	r2, [pc, #392]	@ (8002660 <HAL_DMA_IRQHandler+0x1fc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d012      	beq.n	8002502 <HAL_DMA_IRQHandler+0x9e>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a60      	ldr	r2, [pc, #384]	@ (8002664 <HAL_DMA_IRQHandler+0x200>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00a      	beq.n	80024fc <HAL_DMA_IRQHandler+0x98>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002668 <HAL_DMA_IRQHandler+0x204>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d102      	bne.n	80024f6 <HAL_DMA_IRQHandler+0x92>
 80024f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024f4:	e00e      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 80024f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80024fa:	e00b      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 80024fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002500:	e008      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 8002502:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002506:	e005      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 8002508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800250c:	e002      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 800250e:	2340      	movs	r3, #64	@ 0x40
 8002510:	e000      	b.n	8002514 <HAL_DMA_IRQHandler+0xb0>
 8002512:	2304      	movs	r3, #4
 8002514:	4a55      	ldr	r2, [pc, #340]	@ (800266c <HAL_DMA_IRQHandler+0x208>)
 8002516:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8094 	beq.w	800264a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800252a:	e08e      	b.n	800264a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002530:	2202      	movs	r2, #2
 8002532:	409a      	lsls	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4013      	ands	r3, r2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d056      	beq.n	80025ea <HAL_DMA_IRQHandler+0x186>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d051      	beq.n	80025ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10b      	bne.n	800256c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 020a 	bic.w	r2, r2, #10
 8002562:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a38      	ldr	r2, [pc, #224]	@ (8002654 <HAL_DMA_IRQHandler+0x1f0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d029      	beq.n	80025ca <HAL_DMA_IRQHandler+0x166>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a37      	ldr	r2, [pc, #220]	@ (8002658 <HAL_DMA_IRQHandler+0x1f4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d022      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x162>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a35      	ldr	r2, [pc, #212]	@ (800265c <HAL_DMA_IRQHandler+0x1f8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01a      	beq.n	80025c0 <HAL_DMA_IRQHandler+0x15c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a34      	ldr	r2, [pc, #208]	@ (8002660 <HAL_DMA_IRQHandler+0x1fc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0x156>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a32      	ldr	r2, [pc, #200]	@ (8002664 <HAL_DMA_IRQHandler+0x200>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00a      	beq.n	80025b4 <HAL_DMA_IRQHandler+0x150>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_DMA_IRQHandler+0x204>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_DMA_IRQHandler+0x14a>
 80025a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80025ac:	e00e      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025b2:	e00b      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025b8:	e008      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025be:	e005      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025c4:	e002      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025c6:	2320      	movs	r3, #32
 80025c8:	e000      	b.n	80025cc <HAL_DMA_IRQHandler+0x168>
 80025ca:	2302      	movs	r3, #2
 80025cc:	4a27      	ldr	r2, [pc, #156]	@ (800266c <HAL_DMA_IRQHandler+0x208>)
 80025ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d034      	beq.n	800264a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80025e8:	e02f      	b.n	800264a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	2208      	movs	r2, #8
 80025f0:	409a      	lsls	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4013      	ands	r3, r2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d028      	beq.n	800264c <HAL_DMA_IRQHandler+0x1e8>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d023      	beq.n	800264c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 020e 	bic.w	r2, r2, #14
 8002612:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261c:	2101      	movs	r1, #1
 800261e:	fa01 f202 	lsl.w	r2, r1, r2
 8002622:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	4798      	blx	r3
    }
  }
  return;
 800264a:	bf00      	nop
 800264c:	bf00      	nop
}
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40020008 	.word	0x40020008
 8002658:	4002001c 	.word	0x4002001c
 800265c:	40020030 	.word	0x40020030
 8002660:	40020044 	.word	0x40020044
 8002664:	40020058 	.word	0x40020058
 8002668:	4002006c 	.word	0x4002006c
 800266c:	40020000 	.word	0x40020000

08002670 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002670:	b480      	push	{r7}
 8002672:	b08b      	sub	sp, #44	@ 0x2c
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002682:	e169      	b.n	8002958 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002684:	2201      	movs	r2, #1
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	429a      	cmp	r2, r3
 800269e:	f040 8158 	bne.w	8002952 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a9a      	ldr	r2, [pc, #616]	@ (8002910 <HAL_GPIO_Init+0x2a0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d05e      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026ac:	4a98      	ldr	r2, [pc, #608]	@ (8002910 <HAL_GPIO_Init+0x2a0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d875      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026b2:	4a98      	ldr	r2, [pc, #608]	@ (8002914 <HAL_GPIO_Init+0x2a4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d058      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026b8:	4a96      	ldr	r2, [pc, #600]	@ (8002914 <HAL_GPIO_Init+0x2a4>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d86f      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026be:	4a96      	ldr	r2, [pc, #600]	@ (8002918 <HAL_GPIO_Init+0x2a8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d052      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026c4:	4a94      	ldr	r2, [pc, #592]	@ (8002918 <HAL_GPIO_Init+0x2a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d869      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026ca:	4a94      	ldr	r2, [pc, #592]	@ (800291c <HAL_GPIO_Init+0x2ac>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d04c      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026d0:	4a92      	ldr	r2, [pc, #584]	@ (800291c <HAL_GPIO_Init+0x2ac>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d863      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026d6:	4a92      	ldr	r2, [pc, #584]	@ (8002920 <HAL_GPIO_Init+0x2b0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d046      	beq.n	800276a <HAL_GPIO_Init+0xfa>
 80026dc:	4a90      	ldr	r2, [pc, #576]	@ (8002920 <HAL_GPIO_Init+0x2b0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d85d      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026e2:	2b12      	cmp	r3, #18
 80026e4:	d82a      	bhi.n	800273c <HAL_GPIO_Init+0xcc>
 80026e6:	2b12      	cmp	r3, #18
 80026e8:	d859      	bhi.n	800279e <HAL_GPIO_Init+0x12e>
 80026ea:	a201      	add	r2, pc, #4	@ (adr r2, 80026f0 <HAL_GPIO_Init+0x80>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	0800276b 	.word	0x0800276b
 80026f4:	08002745 	.word	0x08002745
 80026f8:	08002757 	.word	0x08002757
 80026fc:	08002799 	.word	0x08002799
 8002700:	0800279f 	.word	0x0800279f
 8002704:	0800279f 	.word	0x0800279f
 8002708:	0800279f 	.word	0x0800279f
 800270c:	0800279f 	.word	0x0800279f
 8002710:	0800279f 	.word	0x0800279f
 8002714:	0800279f 	.word	0x0800279f
 8002718:	0800279f 	.word	0x0800279f
 800271c:	0800279f 	.word	0x0800279f
 8002720:	0800279f 	.word	0x0800279f
 8002724:	0800279f 	.word	0x0800279f
 8002728:	0800279f 	.word	0x0800279f
 800272c:	0800279f 	.word	0x0800279f
 8002730:	0800279f 	.word	0x0800279f
 8002734:	0800274d 	.word	0x0800274d
 8002738:	08002761 	.word	0x08002761
 800273c:	4a79      	ldr	r2, [pc, #484]	@ (8002924 <HAL_GPIO_Init+0x2b4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002742:	e02c      	b.n	800279e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	623b      	str	r3, [r7, #32]
          break;
 800274a:	e029      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	3304      	adds	r3, #4
 8002752:	623b      	str	r3, [r7, #32]
          break;
 8002754:	e024      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	3308      	adds	r3, #8
 800275c:	623b      	str	r3, [r7, #32]
          break;
 800275e:	e01f      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	330c      	adds	r3, #12
 8002766:	623b      	str	r3, [r7, #32]
          break;
 8002768:	e01a      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002772:	2304      	movs	r3, #4
 8002774:	623b      	str	r3, [r7, #32]
          break;
 8002776:	e013      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002780:	2308      	movs	r3, #8
 8002782:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	611a      	str	r2, [r3, #16]
          break;
 800278a:	e009      	b.n	80027a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800278c:	2308      	movs	r3, #8
 800278e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69fa      	ldr	r2, [r7, #28]
 8002794:	615a      	str	r2, [r3, #20]
          break;
 8002796:	e003      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
          break;
 800279c:	e000      	b.n	80027a0 <HAL_GPIO_Init+0x130>
          break;
 800279e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2bff      	cmp	r3, #255	@ 0xff
 80027a4:	d801      	bhi.n	80027aa <HAL_GPIO_Init+0x13a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	e001      	b.n	80027ae <HAL_GPIO_Init+0x13e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2bff      	cmp	r3, #255	@ 0xff
 80027b4:	d802      	bhi.n	80027bc <HAL_GPIO_Init+0x14c>
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	e002      	b.n	80027c2 <HAL_GPIO_Init+0x152>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	3b08      	subs	r3, #8
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	210f      	movs	r1, #15
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	401a      	ands	r2, r3
 80027d4:	6a39      	ldr	r1, [r7, #32]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	431a      	orrs	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 80b1 	beq.w	8002952 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6193      	str	r3, [r2, #24]
 80027fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002928 <HAL_GPIO_Init+0x2b8>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002808:	4a48      	ldr	r2, [pc, #288]	@ (800292c <HAL_GPIO_Init+0x2bc>)
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002814:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	220f      	movs	r2, #15
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a40      	ldr	r2, [pc, #256]	@ (8002930 <HAL_GPIO_Init+0x2c0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d013      	beq.n	800285c <HAL_GPIO_Init+0x1ec>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a3f      	ldr	r2, [pc, #252]	@ (8002934 <HAL_GPIO_Init+0x2c4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00d      	beq.n	8002858 <HAL_GPIO_Init+0x1e8>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a3e      	ldr	r2, [pc, #248]	@ (8002938 <HAL_GPIO_Init+0x2c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d007      	beq.n	8002854 <HAL_GPIO_Init+0x1e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a3d      	ldr	r2, [pc, #244]	@ (800293c <HAL_GPIO_Init+0x2cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d101      	bne.n	8002850 <HAL_GPIO_Init+0x1e0>
 800284c:	2303      	movs	r3, #3
 800284e:	e006      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002850:	2304      	movs	r3, #4
 8002852:	e004      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002854:	2302      	movs	r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_GPIO_Init+0x1ee>
 800285c:	2300      	movs	r3, #0
 800285e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002860:	f002 0203 	and.w	r2, r2, #3
 8002864:	0092      	lsls	r2, r2, #2
 8002866:	4093      	lsls	r3, r2
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800286e:	492f      	ldr	r1, [pc, #188]	@ (800292c <HAL_GPIO_Init+0x2bc>)
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	3302      	adds	r3, #2
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d006      	beq.n	8002896 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002888:	4b2d      	ldr	r3, [pc, #180]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	492c      	ldr	r1, [pc, #176]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	608b      	str	r3, [r1, #8]
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	43db      	mvns	r3, r3
 800289e:	4928      	ldr	r1, [pc, #160]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d006      	beq.n	80028be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028b0:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	4922      	ldr	r1, [pc, #136]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60cb      	str	r3, [r1, #12]
 80028bc:	e006      	b.n	80028cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	491e      	ldr	r1, [pc, #120]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	4918      	ldr	r1, [pc, #96]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4914      	ldr	r1, [pc, #80]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d021      	beq.n	8002944 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002900:	4b0f      	ldr	r3, [pc, #60]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	490e      	ldr	r1, [pc, #56]	@ (8002940 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	e021      	b.n	8002952 <HAL_GPIO_Init+0x2e2>
 800290e:	bf00      	nop
 8002910:	10320000 	.word	0x10320000
 8002914:	10310000 	.word	0x10310000
 8002918:	10220000 	.word	0x10220000
 800291c:	10210000 	.word	0x10210000
 8002920:	10120000 	.word	0x10120000
 8002924:	10110000 	.word	0x10110000
 8002928:	40021000 	.word	0x40021000
 800292c:	40010000 	.word	0x40010000
 8002930:	40010800 	.word	0x40010800
 8002934:	40010c00 	.word	0x40010c00
 8002938:	40011000 	.word	0x40011000
 800293c:	40011400 	.word	0x40011400
 8002940:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002944:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_GPIO_Init+0x304>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	43db      	mvns	r3, r3
 800294c:	4909      	ldr	r1, [pc, #36]	@ (8002974 <HAL_GPIO_Init+0x304>)
 800294e:	4013      	ands	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	3301      	adds	r3, #1
 8002956:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	fa22 f303 	lsr.w	r3, r2, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	f47f ae8e 	bne.w	8002684 <HAL_GPIO_Init+0x14>
  }
}
 8002968:	bf00      	nop
 800296a:	bf00      	nop
 800296c:	372c      	adds	r7, #44	@ 0x2c
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	40010400 	.word	0x40010400

08002978 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	887b      	ldrh	r3, [r7, #2]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e001      	b.n	800299a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	807b      	strh	r3, [r7, #2]
 80029b2:	4613      	mov	r3, r2
 80029b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b6:	787b      	ldrb	r3, [r7, #1]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029bc:	887a      	ldrh	r2, [r7, #2]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029c2:	e003      	b.n	80029cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029c4:	887b      	ldrh	r3, [r7, #2]
 80029c6:	041a      	lsls	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	611a      	str	r2, [r3, #16]
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4013      	ands	r3, r2
 80029ee:	041a      	lsls	r2, r3, #16
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	887b      	ldrh	r3, [r7, #2]
 80029f6:	400b      	ands	r3, r1
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	611a      	str	r2, [r3, #16]
}
 80029fe:	bf00      	nop
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e272      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 8087 	beq.w	8002b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a28:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d00c      	beq.n	8002a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a34:	4b8f      	ldr	r3, [pc, #572]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d112      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
 8002a40:	4b8c      	ldr	r3, [pc, #560]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4e:	4b89      	ldr	r3, [pc, #548]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d06c      	beq.n	8002b34 <HAL_RCC_OscConfig+0x12c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d168      	bne.n	8002b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e24c      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a6e:	d106      	bne.n	8002a7e <HAL_RCC_OscConfig+0x76>
 8002a70:	4b80      	ldr	r3, [pc, #512]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7f      	ldr	r2, [pc, #508]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	e02e      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x98>
 8002a86:	4b7b      	ldr	r3, [pc, #492]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a7a      	ldr	r2, [pc, #488]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b78      	ldr	r3, [pc, #480]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a77      	ldr	r2, [pc, #476]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	e01d      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0xbc>
 8002aaa:	4b72      	ldr	r3, [pc, #456]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a71      	ldr	r2, [pc, #452]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b6f      	ldr	r3, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a6e      	ldr	r2, [pc, #440]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0xd4>
 8002ac4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b68      	ldr	r3, [pc, #416]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d013      	beq.n	8002b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fed0 	bl	8001888 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7fe fecc 	bl	8001888 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	@ 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e200      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b5d      	ldr	r3, [pc, #372]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0xe4>
 8002b0a:	e014      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0c:	f7fe febc 	bl	8001888 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe feb8 	bl	8001888 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	@ 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e1ec      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b26:	4b53      	ldr	r3, [pc, #332]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1f0      	bne.n	8002b14 <HAL_RCC_OscConfig+0x10c>
 8002b32:	e000      	b.n	8002b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d063      	beq.n	8002c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b4c      	ldr	r3, [pc, #304]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b4e:	4b49      	ldr	r3, [pc, #292]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d11c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
 8002b5a:	4b46      	ldr	r3, [pc, #280]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d116      	bne.n	8002b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b66:	4b43      	ldr	r3, [pc, #268]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e1c0      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	4939      	ldr	r1, [pc, #228]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b92:	e03a      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b9c:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fe71 	bl	8001888 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002baa:	f7fe fe6d 	bl	8001888 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1a1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4927      	ldr	r1, [pc, #156]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	600b      	str	r3, [r1, #0]
 8002bdc:	e015      	b.n	8002c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bde:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <HAL_RCC_OscConfig+0x270>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fe50 	bl	8001888 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bec:	f7fe fe4c 	bl	8001888 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e180      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d03a      	beq.n	8002c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d019      	beq.n	8002c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1e:	4b17      	ldr	r3, [pc, #92]	@ (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe fe30 	bl	8001888 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fe2c 	bl	8001888 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e160      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_RCC_OscConfig+0x26c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	f000 faba 	bl	80031c4 <RCC_Delay>
 8002c50:	e01c      	b.n	8002c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_RCC_OscConfig+0x274>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c58:	f7fe fe16 	bl	8001888 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5e:	e00f      	b.n	8002c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c60:	f7fe fe12 	bl	8001888 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d908      	bls.n	8002c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e146      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	42420000 	.word	0x42420000
 8002c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b92      	ldr	r3, [pc, #584]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e9      	bne.n	8002c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80a6 	beq.w	8002de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10d      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	4a87      	ldr	r2, [pc, #540]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb4:	61d3      	str	r3, [r2, #28]
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc6:	4b82      	ldr	r3, [pc, #520]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d118      	bne.n	8002d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cde:	f7fe fdd3 	bl	8001888 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce6:	f7fe fdcf 	bl	8001888 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	@ 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e103      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf8:	4b75      	ldr	r3, [pc, #468]	@ (8002ed0 <HAL_RCC_OscConfig+0x4c8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x312>
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a6e      	ldr	r2, [pc, #440]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	e02d      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x334>
 8002d22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a69      	ldr	r2, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	6213      	str	r3, [r2, #32]
 8002d2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a66      	ldr	r2, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0304 	bic.w	r3, r3, #4
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	e01c      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x356>
 8002d44:	4b61      	ldr	r3, [pc, #388]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	4a60      	ldr	r2, [pc, #384]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6213      	str	r3, [r2, #32]
 8002d50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a5d      	ldr	r2, [pc, #372]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0301 	orr.w	r3, r3, #1
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCC_OscConfig+0x36e>
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a5a      	ldr	r2, [pc, #360]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a57      	ldr	r2, [pc, #348]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d015      	beq.n	8002daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7e:	f7fe fd83 	bl	8001888 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fd7f 	bl	8001888 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0b1      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ee      	beq.n	8002d86 <HAL_RCC_OscConfig+0x37e>
 8002da8:	e014      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002daa:	f7fe fd6d 	bl	8001888 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fe fd69 	bl	8001888 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e09b      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc8:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dda:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a3b      	ldr	r2, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 8087 	beq.w	8002efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 030c 	and.w	r3, r3, #12
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d061      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d146      	bne.n	8002e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b33      	ldr	r3, [pc, #204]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fd3d 	bl	8001888 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fd39 	bl	8001888 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e06d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e24:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d108      	bne.n	8002e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4921      	ldr	r1, [pc, #132]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a19      	ldr	r1, [r3, #32]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	491b      	ldr	r1, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e64:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fd0d 	bl	8001888 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fd09 	bl	8001888 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03d      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x46a>
 8002e90:	e035      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_OscConfig+0x4cc>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe fcf6 	bl	8001888 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fcf2 	bl	8001888 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e026      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <HAL_RCC_OscConfig+0x4c4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x498>
 8002ebe:	e01e      	b.n	8002efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e019      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	40007000 	.word	0x40007000
 8002ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f08 <HAL_RCC_OscConfig+0x500>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	40021000 	.word	0x40021000

08002f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0d0      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f20:	4b6a      	ldr	r3, [pc, #424]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d910      	bls.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b67      	ldr	r3, [pc, #412]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4965      	ldr	r1, [pc, #404]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b63      	ldr	r3, [pc, #396]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d001      	beq.n	8002f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0b8      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d020      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f68:	4b59      	ldr	r3, [pc, #356]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a58      	ldr	r2, [pc, #352]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d005      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f80:	4b53      	ldr	r3, [pc, #332]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	4a52      	ldr	r2, [pc, #328]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8c:	4b50      	ldr	r3, [pc, #320]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	494d      	ldr	r1, [pc, #308]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d040      	beq.n	800302c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	4b47      	ldr	r3, [pc, #284]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e07f      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d107      	bne.n	8002fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fca:	4b41      	ldr	r3, [pc, #260]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e073      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fda:	4b3d      	ldr	r3, [pc, #244]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06b      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fea:	4b39      	ldr	r3, [pc, #228]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f023 0203 	bic.w	r2, r3, #3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4936      	ldr	r1, [pc, #216]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ffc:	f7fe fc44 	bl	8001888 <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	e00a      	b.n	800301a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003004:	f7fe fc40 	bl	8001888 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e053      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	4b2d      	ldr	r3, [pc, #180]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 020c 	and.w	r2, r3, #12
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	429a      	cmp	r2, r3
 800302a:	d1eb      	bne.n	8003004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800302c:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d210      	bcs.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303a:	4b24      	ldr	r3, [pc, #144]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 0207 	bic.w	r2, r3, #7
 8003042:	4922      	ldr	r1, [pc, #136]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b20      	ldr	r3, [pc, #128]	@ (80030cc <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e032      	b.n	80030c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4916      	ldr	r1, [pc, #88]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	4313      	orrs	r3, r2
 8003078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d009      	beq.n	800309a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003086:	4b12      	ldr	r3, [pc, #72]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309a:	f000 f821 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	490a      	ldr	r1, [pc, #40]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c8>)
 80030ac:	5ccb      	ldrb	r3, [r1, r3]
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	4a09      	ldr	r2, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1cc>)
 80030b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fe fba2 	bl	8001804 <HAL_InitTick>

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
 80030d4:	0800657c 	.word	0x0800657c
 80030d8:	20000000 	.word	0x20000000
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d002      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x30>
 800310a:	2b08      	cmp	r3, #8
 800310c:	d003      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
 800310e:	e027      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003110:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003112:	613b      	str	r3, [r7, #16]
      break;
 8003114:	e027      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	0c9b      	lsrs	r3, r3, #18
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	4a17      	ldr	r2, [pc, #92]	@ (800317c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003120:	5cd3      	ldrb	r3, [r2, r3]
 8003122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d010      	beq.n	8003150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800312e:	4b11      	ldr	r3, [pc, #68]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x94>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	0c5b      	lsrs	r3, r3, #17
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	4a11      	ldr	r2, [pc, #68]	@ (8003180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0d      	ldr	r2, [pc, #52]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003142:	fb03 f202 	mul.w	r2, r3, r2
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e004      	b.n	800315a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a0c      	ldr	r2, [pc, #48]	@ (8003184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	613b      	str	r3, [r7, #16]
      break;
 800315e:	e002      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x98>)
 8003162:	613b      	str	r3, [r7, #16]
      break;
 8003164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003166:	693b      	ldr	r3, [r7, #16]
}
 8003168:	4618      	mov	r0, r3
 800316a:	371c      	adds	r7, #28
 800316c:	46bd      	mov	sp, r7
 800316e:	bc80      	pop	{r7}
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40021000 	.word	0x40021000
 8003178:	007a1200 	.word	0x007a1200
 800317c:	08006594 	.word	0x08006594
 8003180:	080065a4 	.word	0x080065a4
 8003184:	003d0900 	.word	0x003d0900

08003188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800318c:	4b02      	ldr	r3, [pc, #8]	@ (8003198 <HAL_RCC_GetHCLKFreq+0x10>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr
 8003198:	20000000 	.word	0x20000000

0800319c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031a0:	f7ff fff2 	bl	8003188 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0adb      	lsrs	r3, r3, #11
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	@ (80031c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	0800658c 	.word	0x0800658c

080031c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <RCC_Delay+0x34>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a0a      	ldr	r2, [pc, #40]	@ (80031fc <RCC_Delay+0x38>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	0a5b      	lsrs	r3, r3, #9
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e0:	bf00      	nop
  }
  while (Delay --);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	1e5a      	subs	r2, r3, #1
 80031e6:	60fa      	str	r2, [r7, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1f9      	bne.n	80031e0 <RCC_Delay+0x1c>
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	20000000 	.word	0x20000000
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d07d      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003220:	4b4f      	ldr	r3, [pc, #316]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003222:	69db      	ldr	r3, [r3, #28]
 8003224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10d      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800322c:	4b4c      	ldr	r3, [pc, #304]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4a4b      	ldr	r2, [pc, #300]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003236:	61d3      	str	r3, [r2, #28]
 8003238:	4b49      	ldr	r3, [pc, #292]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003248:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d118      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003254:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a42      	ldr	r2, [pc, #264]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800325a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003260:	f7fe fb12 	bl	8001888 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003266:	e008      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003268:	f7fe fb0e 	bl	8001888 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e06d      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b3a      	ldr	r3, [pc, #232]	@ (8003364 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003286:	4b36      	ldr	r3, [pc, #216]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800328e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d02e      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d027      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032ba:	4a29      	ldr	r2, [pc, #164]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d014      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe fadd 	bl	8001888 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d0:	e00a      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d2:	f7fe fad9 	bl	8001888 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e036      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ea:	6a1b      	ldr	r3, [r3, #32]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ee      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	4917      	ldr	r1, [pc, #92]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003302:	4313      	orrs	r3, r2
 8003304:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b14      	ldr	r3, [pc, #80]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003316:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003324:	4b0e      	ldr	r3, [pc, #56]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	490b      	ldr	r1, [pc, #44]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003342:	4b07      	ldr	r3, [pc, #28]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	4904      	ldr	r1, [pc, #16]	@ (8003360 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	4313      	orrs	r3, r2
 8003352:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420440 	.word	0x42420440

0800336c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b10      	cmp	r3, #16
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b10      	cmp	r3, #16
 8003392:	f200 808a 	bhi.w	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d045      	beq.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d075      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033a2:	e082      	b.n	80034aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80033a4:	4b46      	ldr	r3, [pc, #280]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033aa:	4b45      	ldr	r3, [pc, #276]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d07b      	beq.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	0c9b      	lsrs	r3, r3, #18
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	4a41      	ldr	r2, [pc, #260]	@ (80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ce:	4b3c      	ldr	r3, [pc, #240]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	0c5b      	lsrs	r3, r3, #17
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	4a3b      	ldr	r2, [pc, #236]	@ (80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80033da:	5cd3      	ldrb	r3, [r2, r3]
 80033dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033e8:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4a34      	ldr	r2, [pc, #208]	@ (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003404:	4b2e      	ldr	r3, [pc, #184]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003410:	d102      	bne.n	8003418 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	61bb      	str	r3, [r7, #24]
      break;
 8003416:	e04a      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4a2d      	ldr	r2, [pc, #180]	@ (80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
      break;
 8003426:	e042      	b.n	80034ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003428:	4b25      	ldr	r3, [pc, #148]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003434:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003438:	d108      	bne.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e01f      	b.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003452:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003456:	d109      	bne.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003458:	4b19      	ldr	r3, [pc, #100]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003464:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e00f      	b.n	800348c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003472:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003476:	d11c      	bne.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003484:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003488:	61bb      	str	r3, [r7, #24]
      break;
 800348a:	e012      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800348c:	e011      	b.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800348e:	f7ff fe85 	bl	800319c <HAL_RCC_GetPCLK2Freq>
 8003492:	4602      	mov	r2, r0
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0b9b      	lsrs	r3, r3, #14
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	61bb      	str	r3, [r7, #24]
      break;
 80034a8:	e004      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80034b2:	bf00      	nop
    }
  }
  return (frequency);
 80034b4:	69bb      	ldr	r3, [r7, #24]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	080065a8 	.word	0x080065a8
 80034c8:	080065b8 	.word	0x080065b8
 80034cc:	007a1200 	.word	0x007a1200
 80034d0:	003d0900 	.word	0x003d0900
 80034d4:	aaaaaaab 	.word	0xaaaaaaab

080034d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e041      	b.n	800356e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe f828 	bl	8001554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f000 f936 	bl	8003788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_TIM_ConfigClockSource+0x1c>
 800358e:	2302      	movs	r3, #2
 8003590:	e0b4      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x186>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ca:	d03e      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xd4>
 80035cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035d0:	f200 8087 	bhi.w	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d8:	f000 8086 	beq.w	80036e8 <HAL_TIM_ConfigClockSource+0x172>
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e0:	d87f      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 80035e2:	2b70      	cmp	r3, #112	@ 0x70
 80035e4:	d01a      	beq.n	800361c <HAL_TIM_ConfigClockSource+0xa6>
 80035e6:	2b70      	cmp	r3, #112	@ 0x70
 80035e8:	d87b      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 80035ea:	2b60      	cmp	r3, #96	@ 0x60
 80035ec:	d050      	beq.n	8003690 <HAL_TIM_ConfigClockSource+0x11a>
 80035ee:	2b60      	cmp	r3, #96	@ 0x60
 80035f0:	d877      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 80035f2:	2b50      	cmp	r3, #80	@ 0x50
 80035f4:	d03c      	beq.n	8003670 <HAL_TIM_ConfigClockSource+0xfa>
 80035f6:	2b50      	cmp	r3, #80	@ 0x50
 80035f8:	d873      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d058      	beq.n	80036b0 <HAL_TIM_ConfigClockSource+0x13a>
 80035fe:	2b40      	cmp	r3, #64	@ 0x40
 8003600:	d86f      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003602:	2b30      	cmp	r3, #48	@ 0x30
 8003604:	d064      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003606:	2b30      	cmp	r3, #48	@ 0x30
 8003608:	d86b      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 800360a:	2b20      	cmp	r3, #32
 800360c:	d060      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x15a>
 800360e:	2b20      	cmp	r3, #32
 8003610:	d867      	bhi.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d05c      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x15a>
 8003616:	2b10      	cmp	r3, #16
 8003618:	d05a      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x15a>
 800361a:	e062      	b.n	80036e2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800362c:	f000 fa16 	bl	8003a5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800363e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
      break;
 8003648:	e04f      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	f000 f9ff 	bl	8003a5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800366c:	609a      	str	r2, [r3, #8]
      break;
 800366e:	e03c      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800367c:	461a      	mov	r2, r3
 800367e:	f000 f976 	bl	800396e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2150      	movs	r1, #80	@ 0x50
 8003688:	4618      	mov	r0, r3
 800368a:	f000 f9cd 	bl	8003a28 <TIM_ITRx_SetConfig>
      break;
 800368e:	e02c      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800369c:	461a      	mov	r2, r3
 800369e:	f000 f994 	bl	80039ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2160      	movs	r1, #96	@ 0x60
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f9bd 	bl	8003a28 <TIM_ITRx_SetConfig>
      break;
 80036ae:	e01c      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036bc:	461a      	mov	r2, r3
 80036be:	f000 f956 	bl	800396e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2140      	movs	r1, #64	@ 0x40
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f9ad 	bl	8003a28 <TIM_ITRx_SetConfig>
      break;
 80036ce:	e00c      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 f9a4 	bl	8003a28 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e003      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
      break;
 80036e6:	e000      	b.n	80036ea <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003718:	2302      	movs	r3, #2
 800371a:	e031      	b.n	8003780 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f88c 	bl	800384c <TIM_SlaveTimer_SetConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e018      	b.n	8003780 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800375c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800376c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a29      	ldr	r2, [pc, #164]	@ (8003840 <TIM_Base_SetConfig+0xb8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00b      	beq.n	80037b8 <TIM_Base_SetConfig+0x30>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a6:	d007      	beq.n	80037b8 <TIM_Base_SetConfig+0x30>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a26      	ldr	r2, [pc, #152]	@ (8003844 <TIM_Base_SetConfig+0xbc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d003      	beq.n	80037b8 <TIM_Base_SetConfig+0x30>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a25      	ldr	r2, [pc, #148]	@ (8003848 <TIM_Base_SetConfig+0xc0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d108      	bne.n	80037ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <TIM_Base_SetConfig+0xb8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00b      	beq.n	80037ea <TIM_Base_SetConfig+0x62>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d8:	d007      	beq.n	80037ea <TIM_Base_SetConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <TIM_Base_SetConfig+0xbc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_Base_SetConfig+0x62>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a18      	ldr	r2, [pc, #96]	@ (8003848 <TIM_Base_SetConfig+0xc0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <TIM_Base_SetConfig+0xb8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d103      	bne.n	8003830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	615a      	str	r2, [r3, #20]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800

0800384c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003868:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f023 0307 	bic.w	r3, r3, #7
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b70      	cmp	r3, #112	@ 0x70
 8003894:	d01a      	beq.n	80038cc <TIM_SlaveTimer_SetConfig+0x80>
 8003896:	2b70      	cmp	r3, #112	@ 0x70
 8003898:	d860      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 800389a:	2b60      	cmp	r3, #96	@ 0x60
 800389c:	d054      	beq.n	8003948 <TIM_SlaveTimer_SetConfig+0xfc>
 800389e:	2b60      	cmp	r3, #96	@ 0x60
 80038a0:	d85c      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 80038a2:	2b50      	cmp	r3, #80	@ 0x50
 80038a4:	d046      	beq.n	8003934 <TIM_SlaveTimer_SetConfig+0xe8>
 80038a6:	2b50      	cmp	r3, #80	@ 0x50
 80038a8:	d858      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 80038aa:	2b40      	cmp	r3, #64	@ 0x40
 80038ac:	d019      	beq.n	80038e2 <TIM_SlaveTimer_SetConfig+0x96>
 80038ae:	2b40      	cmp	r3, #64	@ 0x40
 80038b0:	d854      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 80038b2:	2b30      	cmp	r3, #48	@ 0x30
 80038b4:	d055      	beq.n	8003962 <TIM_SlaveTimer_SetConfig+0x116>
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d850      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d051      	beq.n	8003962 <TIM_SlaveTimer_SetConfig+0x116>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d84c      	bhi.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d04d      	beq.n	8003962 <TIM_SlaveTimer_SetConfig+0x116>
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d04b      	beq.n	8003962 <TIM_SlaveTimer_SetConfig+0x116>
 80038ca:	e047      	b.n	800395c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80038dc:	f000 f8be 	bl	8003a5c <TIM_ETR_SetConfig>
      break;
 80038e0:	e040      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b05      	cmp	r3, #5
 80038e8:	d101      	bne.n	80038ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e03b      	b.n	8003966 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003914:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	4313      	orrs	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
      break;
 8003932:	e017      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003940:	461a      	mov	r2, r3
 8003942:	f000 f814 	bl	800396e <TIM_TI1_ConfigInputStage>
      break;
 8003946:	e00d      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003954:	461a      	mov	r2, r3
 8003956:	f000 f838 	bl	80039ca <TIM_TI2_ConfigInputStage>
      break;
 800395a:	e003      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
      break;
 8003960:	e000      	b.n	8003964 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003962:	bf00      	nop
  }

  return status;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800396e:	b480      	push	{r7}
 8003970:	b087      	sub	sp, #28
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f023 0201 	bic.w	r2, r3, #1
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 030a 	bic.w	r3, r3, #10
 80039aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	bf00      	nop
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b087      	sub	sp, #28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f023 0210 	bic.w	r2, r3, #16
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	011b      	lsls	r3, r3, #4
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	621a      	str	r2, [r3, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f043 0307 	orr.w	r3, r3, #7
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	609a      	str	r2, [r3, #8]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	609a      	str	r2, [r3, #8]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e046      	b.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a16      	ldr	r2, [pc, #88]	@ (8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d009      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a12      	ldr	r2, [pc, #72]	@ (8003b50 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a10      	ldr	r2, [pc, #64]	@ (8003b54 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10c      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	40000800 	.word	0x40000800

08003b58 <__itoa>:
 8003b58:	1e93      	subs	r3, r2, #2
 8003b5a:	2b22      	cmp	r3, #34	@ 0x22
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	460c      	mov	r4, r1
 8003b60:	d904      	bls.n	8003b6c <__itoa+0x14>
 8003b62:	2300      	movs	r3, #0
 8003b64:	461c      	mov	r4, r3
 8003b66:	700b      	strb	r3, [r1, #0]
 8003b68:	4620      	mov	r0, r4
 8003b6a:	bd10      	pop	{r4, pc}
 8003b6c:	2a0a      	cmp	r2, #10
 8003b6e:	d109      	bne.n	8003b84 <__itoa+0x2c>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	da07      	bge.n	8003b84 <__itoa+0x2c>
 8003b74:	232d      	movs	r3, #45	@ 0x2d
 8003b76:	700b      	strb	r3, [r1, #0]
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4240      	negs	r0, r0
 8003b7c:	4421      	add	r1, r4
 8003b7e:	f000 f805 	bl	8003b8c <__utoa>
 8003b82:	e7f1      	b.n	8003b68 <__itoa+0x10>
 8003b84:	2100      	movs	r1, #0
 8003b86:	e7f9      	b.n	8003b7c <__itoa+0x24>

08003b88 <itoa>:
 8003b88:	f7ff bfe6 	b.w	8003b58 <__itoa>

08003b8c <__utoa>:
 8003b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b8e:	b08b      	sub	sp, #44	@ 0x2c
 8003b90:	4605      	mov	r5, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	466e      	mov	r6, sp
 8003b96:	4c1d      	ldr	r4, [pc, #116]	@ (8003c0c <__utoa+0x80>)
 8003b98:	f104 0c20 	add.w	ip, r4, #32
 8003b9c:	4637      	mov	r7, r6
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	6861      	ldr	r1, [r4, #4]
 8003ba2:	3408      	adds	r4, #8
 8003ba4:	c703      	stmia	r7!, {r0, r1}
 8003ba6:	4564      	cmp	r4, ip
 8003ba8:	463e      	mov	r6, r7
 8003baa:	d1f7      	bne.n	8003b9c <__utoa+0x10>
 8003bac:	7921      	ldrb	r1, [r4, #4]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	7139      	strb	r1, [r7, #4]
 8003bb2:	1e91      	subs	r1, r2, #2
 8003bb4:	2922      	cmp	r1, #34	@ 0x22
 8003bb6:	6038      	str	r0, [r7, #0]
 8003bb8:	f04f 0100 	mov.w	r1, #0
 8003bbc:	d904      	bls.n	8003bc8 <__utoa+0x3c>
 8003bbe:	7019      	strb	r1, [r3, #0]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	b00b      	add	sp, #44	@ 0x2c
 8003bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc8:	1e58      	subs	r0, r3, #1
 8003bca:	4684      	mov	ip, r0
 8003bcc:	fbb5 f7f2 	udiv	r7, r5, r2
 8003bd0:	fb02 5617 	mls	r6, r2, r7, r5
 8003bd4:	3628      	adds	r6, #40	@ 0x28
 8003bd6:	446e      	add	r6, sp
 8003bd8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8003bdc:	460c      	mov	r4, r1
 8003bde:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8003be2:	462e      	mov	r6, r5
 8003be4:	42b2      	cmp	r2, r6
 8003be6:	463d      	mov	r5, r7
 8003be8:	f101 0101 	add.w	r1, r1, #1
 8003bec:	d9ee      	bls.n	8003bcc <__utoa+0x40>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	545a      	strb	r2, [r3, r1]
 8003bf2:	1919      	adds	r1, r3, r4
 8003bf4:	1aa5      	subs	r5, r4, r2
 8003bf6:	42aa      	cmp	r2, r5
 8003bf8:	dae3      	bge.n	8003bc2 <__utoa+0x36>
 8003bfa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003bfe:	780e      	ldrb	r6, [r1, #0]
 8003c00:	3201      	adds	r2, #1
 8003c02:	7006      	strb	r6, [r0, #0]
 8003c04:	f801 5901 	strb.w	r5, [r1], #-1
 8003c08:	e7f4      	b.n	8003bf4 <__utoa+0x68>
 8003c0a:	bf00      	nop
 8003c0c:	080065ba 	.word	0x080065ba

08003c10 <__cvt>:
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c16:	461d      	mov	r5, r3
 8003c18:	bfbb      	ittet	lt
 8003c1a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003c1e:	461d      	movlt	r5, r3
 8003c20:	2300      	movge	r3, #0
 8003c22:	232d      	movlt	r3, #45	@ 0x2d
 8003c24:	b088      	sub	sp, #32
 8003c26:	4614      	mov	r4, r2
 8003c28:	bfb8      	it	lt
 8003c2a:	4614      	movlt	r4, r2
 8003c2c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003c2e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003c30:	7013      	strb	r3, [r2, #0]
 8003c32:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003c34:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003c38:	f023 0820 	bic.w	r8, r3, #32
 8003c3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c40:	d005      	beq.n	8003c4e <__cvt+0x3e>
 8003c42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c46:	d100      	bne.n	8003c4a <__cvt+0x3a>
 8003c48:	3601      	adds	r6, #1
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e000      	b.n	8003c50 <__cvt+0x40>
 8003c4e:	2303      	movs	r3, #3
 8003c50:	aa07      	add	r2, sp, #28
 8003c52:	9204      	str	r2, [sp, #16]
 8003c54:	aa06      	add	r2, sp, #24
 8003c56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003c5a:	e9cd 3600 	strd	r3, r6, [sp]
 8003c5e:	4622      	mov	r2, r4
 8003c60:	462b      	mov	r3, r5
 8003c62:	f000 fe4d 	bl	8004900 <_dtoa_r>
 8003c66:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c6a:	4607      	mov	r7, r0
 8003c6c:	d119      	bne.n	8003ca2 <__cvt+0x92>
 8003c6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003c70:	07db      	lsls	r3, r3, #31
 8003c72:	d50e      	bpl.n	8003c92 <__cvt+0x82>
 8003c74:	eb00 0906 	add.w	r9, r0, r6
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	4629      	mov	r1, r5
 8003c80:	f7fc fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8003c84:	b108      	cbz	r0, 8003c8a <__cvt+0x7a>
 8003c86:	f8cd 901c 	str.w	r9, [sp, #28]
 8003c8a:	2230      	movs	r2, #48	@ 0x30
 8003c8c:	9b07      	ldr	r3, [sp, #28]
 8003c8e:	454b      	cmp	r3, r9
 8003c90:	d31e      	bcc.n	8003cd0 <__cvt+0xc0>
 8003c92:	4638      	mov	r0, r7
 8003c94:	9b07      	ldr	r3, [sp, #28]
 8003c96:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003c98:	1bdb      	subs	r3, r3, r7
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	b008      	add	sp, #32
 8003c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ca6:	eb00 0906 	add.w	r9, r0, r6
 8003caa:	d1e5      	bne.n	8003c78 <__cvt+0x68>
 8003cac:	7803      	ldrb	r3, [r0, #0]
 8003cae:	2b30      	cmp	r3, #48	@ 0x30
 8003cb0:	d10a      	bne.n	8003cc8 <__cvt+0xb8>
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	4629      	mov	r1, r5
 8003cba:	f7fc fe75 	bl	80009a8 <__aeabi_dcmpeq>
 8003cbe:	b918      	cbnz	r0, 8003cc8 <__cvt+0xb8>
 8003cc0:	f1c6 0601 	rsb	r6, r6, #1
 8003cc4:	f8ca 6000 	str.w	r6, [sl]
 8003cc8:	f8da 3000 	ldr.w	r3, [sl]
 8003ccc:	4499      	add	r9, r3
 8003cce:	e7d3      	b.n	8003c78 <__cvt+0x68>
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	9107      	str	r1, [sp, #28]
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e7d9      	b.n	8003c8c <__cvt+0x7c>

08003cd8 <__exponent>:
 8003cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cda:	2900      	cmp	r1, #0
 8003cdc:	bfb6      	itet	lt
 8003cde:	232d      	movlt	r3, #45	@ 0x2d
 8003ce0:	232b      	movge	r3, #43	@ 0x2b
 8003ce2:	4249      	neglt	r1, r1
 8003ce4:	2909      	cmp	r1, #9
 8003ce6:	7002      	strb	r2, [r0, #0]
 8003ce8:	7043      	strb	r3, [r0, #1]
 8003cea:	dd29      	ble.n	8003d40 <__exponent+0x68>
 8003cec:	f10d 0307 	add.w	r3, sp, #7
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	270a      	movs	r7, #10
 8003cf4:	fbb1 f6f7 	udiv	r6, r1, r7
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	fb07 1416 	mls	r4, r7, r6, r1
 8003cfe:	3430      	adds	r4, #48	@ 0x30
 8003d00:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d04:	460c      	mov	r4, r1
 8003d06:	2c63      	cmp	r4, #99	@ 0x63
 8003d08:	4631      	mov	r1, r6
 8003d0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d0e:	dcf1      	bgt.n	8003cf4 <__exponent+0x1c>
 8003d10:	3130      	adds	r1, #48	@ 0x30
 8003d12:	1e94      	subs	r4, r2, #2
 8003d14:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d18:	4623      	mov	r3, r4
 8003d1a:	1c41      	adds	r1, r0, #1
 8003d1c:	42ab      	cmp	r3, r5
 8003d1e:	d30a      	bcc.n	8003d36 <__exponent+0x5e>
 8003d20:	f10d 0309 	add.w	r3, sp, #9
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	42ac      	cmp	r4, r5
 8003d28:	bf88      	it	hi
 8003d2a:	2300      	movhi	r3, #0
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	4403      	add	r3, r0
 8003d30:	1a18      	subs	r0, r3, r0
 8003d32:	b003      	add	sp, #12
 8003d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d36:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d3a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d3e:	e7ed      	b.n	8003d1c <__exponent+0x44>
 8003d40:	2330      	movs	r3, #48	@ 0x30
 8003d42:	3130      	adds	r1, #48	@ 0x30
 8003d44:	7083      	strb	r3, [r0, #2]
 8003d46:	70c1      	strb	r1, [r0, #3]
 8003d48:	1d03      	adds	r3, r0, #4
 8003d4a:	e7f1      	b.n	8003d30 <__exponent+0x58>

08003d4c <_printf_float>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	b091      	sub	sp, #68	@ 0x44
 8003d52:	460c      	mov	r4, r1
 8003d54:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003d58:	4616      	mov	r6, r2
 8003d5a:	461f      	mov	r7, r3
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	f000 fcc1 	bl	80046e4 <_localeconv_r>
 8003d62:	6803      	ldr	r3, [r0, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	9308      	str	r3, [sp, #32]
 8003d68:	f7fc f9f2 	bl	8000150 <strlen>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003d70:	f8d8 3000 	ldr.w	r3, [r8]
 8003d74:	9009      	str	r0, [sp, #36]	@ 0x24
 8003d76:	3307      	adds	r3, #7
 8003d78:	f023 0307 	bic.w	r3, r3, #7
 8003d7c:	f103 0208 	add.w	r2, r3, #8
 8003d80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003d84:	f8d4 b000 	ldr.w	fp, [r4]
 8003d88:	f8c8 2000 	str.w	r2, [r8]
 8003d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003d94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d96:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003da2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003da6:	4b9c      	ldr	r3, [pc, #624]	@ (8004018 <_printf_float+0x2cc>)
 8003da8:	f7fc fe30 	bl	8000a0c <__aeabi_dcmpun>
 8003dac:	bb70      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	4b98      	ldr	r3, [pc, #608]	@ (8004018 <_printf_float+0x2cc>)
 8003db8:	f7fc fe0a 	bl	80009d0 <__aeabi_dcmple>
 8003dbc:	bb30      	cbnz	r0, 8003e0c <_printf_float+0xc0>
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	4640      	mov	r0, r8
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	f7fc fdf9 	bl	80009bc <__aeabi_dcmplt>
 8003dca:	b110      	cbz	r0, 8003dd2 <_printf_float+0x86>
 8003dcc:	232d      	movs	r3, #45	@ 0x2d
 8003dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003dd2:	4a92      	ldr	r2, [pc, #584]	@ (800401c <_printf_float+0x2d0>)
 8003dd4:	4b92      	ldr	r3, [pc, #584]	@ (8004020 <_printf_float+0x2d4>)
 8003dd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dda:	bf94      	ite	ls
 8003ddc:	4690      	movls	r8, r2
 8003dde:	4698      	movhi	r8, r3
 8003de0:	2303      	movs	r3, #3
 8003de2:	f04f 0900 	mov.w	r9, #0
 8003de6:	6123      	str	r3, [r4, #16]
 8003de8:	f02b 0304 	bic.w	r3, fp, #4
 8003dec:	6023      	str	r3, [r4, #0]
 8003dee:	4633      	mov	r3, r6
 8003df0:	4621      	mov	r1, r4
 8003df2:	4628      	mov	r0, r5
 8003df4:	9700      	str	r7, [sp, #0]
 8003df6:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003df8:	f000 f9d4 	bl	80041a4 <_printf_common>
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f040 8090 	bne.w	8003f22 <_printf_float+0x1d6>
 8003e02:	f04f 30ff 	mov.w	r0, #4294967295
 8003e06:	b011      	add	sp, #68	@ 0x44
 8003e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e0c:	4642      	mov	r2, r8
 8003e0e:	464b      	mov	r3, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	4649      	mov	r1, r9
 8003e14:	f7fc fdfa 	bl	8000a0c <__aeabi_dcmpun>
 8003e18:	b148      	cbz	r0, 8003e2e <_printf_float+0xe2>
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bfb8      	it	lt
 8003e20:	232d      	movlt	r3, #45	@ 0x2d
 8003e22:	4a80      	ldr	r2, [pc, #512]	@ (8004024 <_printf_float+0x2d8>)
 8003e24:	bfb8      	it	lt
 8003e26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e2a:	4b7f      	ldr	r3, [pc, #508]	@ (8004028 <_printf_float+0x2dc>)
 8003e2c:	e7d3      	b.n	8003dd6 <_printf_float+0x8a>
 8003e2e:	6863      	ldr	r3, [r4, #4]
 8003e30:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	d13f      	bne.n	8003eb8 <_printf_float+0x16c>
 8003e38:	2306      	movs	r3, #6
 8003e3a:	6063      	str	r3, [r4, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	9206      	str	r2, [sp, #24]
 8003e46:	aa0e      	add	r2, sp, #56	@ 0x38
 8003e48:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003e4c:	aa0d      	add	r2, sp, #52	@ 0x34
 8003e4e:	9203      	str	r2, [sp, #12]
 8003e50:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003e54:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e58:	6863      	ldr	r3, [r4, #4]
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	4628      	mov	r0, r5
 8003e60:	464b      	mov	r3, r9
 8003e62:	910a      	str	r1, [sp, #40]	@ 0x28
 8003e64:	f7ff fed4 	bl	8003c10 <__cvt>
 8003e68:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003e6a:	4680      	mov	r8, r0
 8003e6c:	2947      	cmp	r1, #71	@ 0x47
 8003e6e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003e70:	d128      	bne.n	8003ec4 <_printf_float+0x178>
 8003e72:	1cc8      	adds	r0, r1, #3
 8003e74:	db02      	blt.n	8003e7c <_printf_float+0x130>
 8003e76:	6863      	ldr	r3, [r4, #4]
 8003e78:	4299      	cmp	r1, r3
 8003e7a:	dd40      	ble.n	8003efe <_printf_float+0x1b2>
 8003e7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e80:	fa5f fa8a 	uxtb.w	sl, sl
 8003e84:	4652      	mov	r2, sl
 8003e86:	3901      	subs	r1, #1
 8003e88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003e8c:	910d      	str	r1, [sp, #52]	@ 0x34
 8003e8e:	f7ff ff23 	bl	8003cd8 <__exponent>
 8003e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e94:	4681      	mov	r9, r0
 8003e96:	1813      	adds	r3, r2, r0
 8003e98:	2a01      	cmp	r2, #1
 8003e9a:	6123      	str	r3, [r4, #16]
 8003e9c:	dc02      	bgt.n	8003ea4 <_printf_float+0x158>
 8003e9e:	6822      	ldr	r2, [r4, #0]
 8003ea0:	07d2      	lsls	r2, r2, #31
 8003ea2:	d501      	bpl.n	8003ea8 <_printf_float+0x15c>
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	6123      	str	r3, [r4, #16]
 8003ea8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d09e      	beq.n	8003dee <_printf_float+0xa2>
 8003eb0:	232d      	movs	r3, #45	@ 0x2d
 8003eb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003eb6:	e79a      	b.n	8003dee <_printf_float+0xa2>
 8003eb8:	2947      	cmp	r1, #71	@ 0x47
 8003eba:	d1bf      	bne.n	8003e3c <_printf_float+0xf0>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1bd      	bne.n	8003e3c <_printf_float+0xf0>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e7ba      	b.n	8003e3a <_printf_float+0xee>
 8003ec4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ec8:	d9dc      	bls.n	8003e84 <_printf_float+0x138>
 8003eca:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ece:	d118      	bne.n	8003f02 <_printf_float+0x1b6>
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	6863      	ldr	r3, [r4, #4]
 8003ed4:	dd0b      	ble.n	8003eee <_printf_float+0x1a2>
 8003ed6:	6121      	str	r1, [r4, #16]
 8003ed8:	b913      	cbnz	r3, 8003ee0 <_printf_float+0x194>
 8003eda:	6822      	ldr	r2, [r4, #0]
 8003edc:	07d0      	lsls	r0, r2, #31
 8003ede:	d502      	bpl.n	8003ee6 <_printf_float+0x19a>
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	440b      	add	r3, r1
 8003ee4:	6123      	str	r3, [r4, #16]
 8003ee6:	f04f 0900 	mov.w	r9, #0
 8003eea:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003eec:	e7dc      	b.n	8003ea8 <_printf_float+0x15c>
 8003eee:	b913      	cbnz	r3, 8003ef6 <_printf_float+0x1aa>
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	07d2      	lsls	r2, r2, #31
 8003ef4:	d501      	bpl.n	8003efa <_printf_float+0x1ae>
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	e7f4      	b.n	8003ee4 <_printf_float+0x198>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e7f2      	b.n	8003ee4 <_printf_float+0x198>
 8003efe:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f04:	4299      	cmp	r1, r3
 8003f06:	db05      	blt.n	8003f14 <_printf_float+0x1c8>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	6121      	str	r1, [r4, #16]
 8003f0c:	07d8      	lsls	r0, r3, #31
 8003f0e:	d5ea      	bpl.n	8003ee6 <_printf_float+0x19a>
 8003f10:	1c4b      	adds	r3, r1, #1
 8003f12:	e7e7      	b.n	8003ee4 <_printf_float+0x198>
 8003f14:	2900      	cmp	r1, #0
 8003f16:	bfcc      	ite	gt
 8003f18:	2201      	movgt	r2, #1
 8003f1a:	f1c1 0202 	rsble	r2, r1, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	e7e0      	b.n	8003ee4 <_printf_float+0x198>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	055a      	lsls	r2, r3, #21
 8003f26:	d407      	bmi.n	8003f38 <_printf_float+0x1ec>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	4642      	mov	r2, r8
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4628      	mov	r0, r5
 8003f30:	47b8      	blx	r7
 8003f32:	3001      	adds	r0, #1
 8003f34:	d12b      	bne.n	8003f8e <_printf_float+0x242>
 8003f36:	e764      	b.n	8003e02 <_printf_float+0xb6>
 8003f38:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f3c:	f240 80dc 	bls.w	80040f8 <_printf_float+0x3ac>
 8003f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f44:	2200      	movs	r2, #0
 8003f46:	2300      	movs	r3, #0
 8003f48:	f7fc fd2e 	bl	80009a8 <__aeabi_dcmpeq>
 8003f4c:	2800      	cmp	r0, #0
 8003f4e:	d033      	beq.n	8003fb8 <_printf_float+0x26c>
 8003f50:	2301      	movs	r3, #1
 8003f52:	4631      	mov	r1, r6
 8003f54:	4628      	mov	r0, r5
 8003f56:	4a35      	ldr	r2, [pc, #212]	@ (800402c <_printf_float+0x2e0>)
 8003f58:	47b8      	blx	r7
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	f43f af51 	beq.w	8003e02 <_printf_float+0xb6>
 8003f60:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003f64:	4543      	cmp	r3, r8
 8003f66:	db02      	blt.n	8003f6e <_printf_float+0x222>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	07d8      	lsls	r0, r3, #31
 8003f6c:	d50f      	bpl.n	8003f8e <_printf_float+0x242>
 8003f6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f72:	4631      	mov	r1, r6
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	f43f af42 	beq.w	8003e02 <_printf_float+0xb6>
 8003f7e:	f04f 0900 	mov.w	r9, #0
 8003f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f86:	f104 0a1a 	add.w	sl, r4, #26
 8003f8a:	45c8      	cmp	r8, r9
 8003f8c:	dc09      	bgt.n	8003fa2 <_printf_float+0x256>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	079b      	lsls	r3, r3, #30
 8003f92:	f100 8102 	bmi.w	800419a <_printf_float+0x44e>
 8003f96:	68e0      	ldr	r0, [r4, #12]
 8003f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003f9a:	4298      	cmp	r0, r3
 8003f9c:	bfb8      	it	lt
 8003f9e:	4618      	movlt	r0, r3
 8003fa0:	e731      	b.n	8003e06 <_printf_float+0xba>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	4652      	mov	r2, sl
 8003fa6:	4631      	mov	r1, r6
 8003fa8:	4628      	mov	r0, r5
 8003faa:	47b8      	blx	r7
 8003fac:	3001      	adds	r0, #1
 8003fae:	f43f af28 	beq.w	8003e02 <_printf_float+0xb6>
 8003fb2:	f109 0901 	add.w	r9, r9, #1
 8003fb6:	e7e8      	b.n	8003f8a <_printf_float+0x23e>
 8003fb8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dc38      	bgt.n	8004030 <_printf_float+0x2e4>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4a19      	ldr	r2, [pc, #100]	@ (800402c <_printf_float+0x2e0>)
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f43f af1a 	beq.w	8003e02 <_printf_float+0xb6>
 8003fce:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003fd2:	ea59 0303 	orrs.w	r3, r9, r3
 8003fd6:	d102      	bne.n	8003fde <_printf_float+0x292>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	07d9      	lsls	r1, r3, #31
 8003fdc:	d5d7      	bpl.n	8003f8e <_printf_float+0x242>
 8003fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	47b8      	blx	r7
 8003fe8:	3001      	adds	r0, #1
 8003fea:	f43f af0a 	beq.w	8003e02 <_printf_float+0xb6>
 8003fee:	f04f 0a00 	mov.w	sl, #0
 8003ff2:	f104 0b1a 	add.w	fp, r4, #26
 8003ff6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ff8:	425b      	negs	r3, r3
 8003ffa:	4553      	cmp	r3, sl
 8003ffc:	dc01      	bgt.n	8004002 <_printf_float+0x2b6>
 8003ffe:	464b      	mov	r3, r9
 8004000:	e793      	b.n	8003f2a <_printf_float+0x1de>
 8004002:	2301      	movs	r3, #1
 8004004:	465a      	mov	r2, fp
 8004006:	4631      	mov	r1, r6
 8004008:	4628      	mov	r0, r5
 800400a:	47b8      	blx	r7
 800400c:	3001      	adds	r0, #1
 800400e:	f43f aef8 	beq.w	8003e02 <_printf_float+0xb6>
 8004012:	f10a 0a01 	add.w	sl, sl, #1
 8004016:	e7ee      	b.n	8003ff6 <_printf_float+0x2aa>
 8004018:	7fefffff 	.word	0x7fefffff
 800401c:	080065df 	.word	0x080065df
 8004020:	080065e3 	.word	0x080065e3
 8004024:	080065e7 	.word	0x080065e7
 8004028:	080065eb 	.word	0x080065eb
 800402c:	080065ef 	.word	0x080065ef
 8004030:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004032:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004036:	4553      	cmp	r3, sl
 8004038:	bfa8      	it	ge
 800403a:	4653      	movge	r3, sl
 800403c:	2b00      	cmp	r3, #0
 800403e:	4699      	mov	r9, r3
 8004040:	dc36      	bgt.n	80040b0 <_printf_float+0x364>
 8004042:	f04f 0b00 	mov.w	fp, #0
 8004046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800404a:	f104 021a 	add.w	r2, r4, #26
 800404e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004050:	930a      	str	r3, [sp, #40]	@ 0x28
 8004052:	eba3 0309 	sub.w	r3, r3, r9
 8004056:	455b      	cmp	r3, fp
 8004058:	dc31      	bgt.n	80040be <_printf_float+0x372>
 800405a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800405c:	459a      	cmp	sl, r3
 800405e:	dc3a      	bgt.n	80040d6 <_printf_float+0x38a>
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	07da      	lsls	r2, r3, #31
 8004064:	d437      	bmi.n	80040d6 <_printf_float+0x38a>
 8004066:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004068:	ebaa 0903 	sub.w	r9, sl, r3
 800406c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800406e:	ebaa 0303 	sub.w	r3, sl, r3
 8004072:	4599      	cmp	r9, r3
 8004074:	bfa8      	it	ge
 8004076:	4699      	movge	r9, r3
 8004078:	f1b9 0f00 	cmp.w	r9, #0
 800407c:	dc33      	bgt.n	80040e6 <_printf_float+0x39a>
 800407e:	f04f 0800 	mov.w	r8, #0
 8004082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004086:	f104 0b1a 	add.w	fp, r4, #26
 800408a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800408c:	ebaa 0303 	sub.w	r3, sl, r3
 8004090:	eba3 0309 	sub.w	r3, r3, r9
 8004094:	4543      	cmp	r3, r8
 8004096:	f77f af7a 	ble.w	8003f8e <_printf_float+0x242>
 800409a:	2301      	movs	r3, #1
 800409c:	465a      	mov	r2, fp
 800409e:	4631      	mov	r1, r6
 80040a0:	4628      	mov	r0, r5
 80040a2:	47b8      	blx	r7
 80040a4:	3001      	adds	r0, #1
 80040a6:	f43f aeac 	beq.w	8003e02 <_printf_float+0xb6>
 80040aa:	f108 0801 	add.w	r8, r8, #1
 80040ae:	e7ec      	b.n	800408a <_printf_float+0x33e>
 80040b0:	4642      	mov	r2, r8
 80040b2:	4631      	mov	r1, r6
 80040b4:	4628      	mov	r0, r5
 80040b6:	47b8      	blx	r7
 80040b8:	3001      	adds	r0, #1
 80040ba:	d1c2      	bne.n	8004042 <_printf_float+0x2f6>
 80040bc:	e6a1      	b.n	8003e02 <_printf_float+0xb6>
 80040be:	2301      	movs	r3, #1
 80040c0:	4631      	mov	r1, r6
 80040c2:	4628      	mov	r0, r5
 80040c4:	920a      	str	r2, [sp, #40]	@ 0x28
 80040c6:	47b8      	blx	r7
 80040c8:	3001      	adds	r0, #1
 80040ca:	f43f ae9a 	beq.w	8003e02 <_printf_float+0xb6>
 80040ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040d0:	f10b 0b01 	add.w	fp, fp, #1
 80040d4:	e7bb      	b.n	800404e <_printf_float+0x302>
 80040d6:	4631      	mov	r1, r6
 80040d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040dc:	4628      	mov	r0, r5
 80040de:	47b8      	blx	r7
 80040e0:	3001      	adds	r0, #1
 80040e2:	d1c0      	bne.n	8004066 <_printf_float+0x31a>
 80040e4:	e68d      	b.n	8003e02 <_printf_float+0xb6>
 80040e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80040e8:	464b      	mov	r3, r9
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	4442      	add	r2, r8
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	d1c3      	bne.n	800407e <_printf_float+0x332>
 80040f6:	e684      	b.n	8003e02 <_printf_float+0xb6>
 80040f8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80040fc:	f1ba 0f01 	cmp.w	sl, #1
 8004100:	dc01      	bgt.n	8004106 <_printf_float+0x3ba>
 8004102:	07db      	lsls	r3, r3, #31
 8004104:	d536      	bpl.n	8004174 <_printf_float+0x428>
 8004106:	2301      	movs	r3, #1
 8004108:	4642      	mov	r2, r8
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f ae76 	beq.w	8003e02 <_printf_float+0xb6>
 8004116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f ae6e 	beq.w	8003e02 <_printf_float+0xb6>
 8004126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800412a:	2200      	movs	r2, #0
 800412c:	2300      	movs	r3, #0
 800412e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004132:	f7fc fc39 	bl	80009a8 <__aeabi_dcmpeq>
 8004136:	b9c0      	cbnz	r0, 800416a <_printf_float+0x41e>
 8004138:	4653      	mov	r3, sl
 800413a:	f108 0201 	add.w	r2, r8, #1
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	d10c      	bne.n	8004162 <_printf_float+0x416>
 8004148:	e65b      	b.n	8003e02 <_printf_float+0xb6>
 800414a:	2301      	movs	r3, #1
 800414c:	465a      	mov	r2, fp
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	47b8      	blx	r7
 8004154:	3001      	adds	r0, #1
 8004156:	f43f ae54 	beq.w	8003e02 <_printf_float+0xb6>
 800415a:	f108 0801 	add.w	r8, r8, #1
 800415e:	45d0      	cmp	r8, sl
 8004160:	dbf3      	blt.n	800414a <_printf_float+0x3fe>
 8004162:	464b      	mov	r3, r9
 8004164:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004168:	e6e0      	b.n	8003f2c <_printf_float+0x1e0>
 800416a:	f04f 0800 	mov.w	r8, #0
 800416e:	f104 0b1a 	add.w	fp, r4, #26
 8004172:	e7f4      	b.n	800415e <_printf_float+0x412>
 8004174:	2301      	movs	r3, #1
 8004176:	4642      	mov	r2, r8
 8004178:	e7e1      	b.n	800413e <_printf_float+0x3f2>
 800417a:	2301      	movs	r3, #1
 800417c:	464a      	mov	r2, r9
 800417e:	4631      	mov	r1, r6
 8004180:	4628      	mov	r0, r5
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	f43f ae3c 	beq.w	8003e02 <_printf_float+0xb6>
 800418a:	f108 0801 	add.w	r8, r8, #1
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004192:	1a5b      	subs	r3, r3, r1
 8004194:	4543      	cmp	r3, r8
 8004196:	dcf0      	bgt.n	800417a <_printf_float+0x42e>
 8004198:	e6fd      	b.n	8003f96 <_printf_float+0x24a>
 800419a:	f04f 0800 	mov.w	r8, #0
 800419e:	f104 0919 	add.w	r9, r4, #25
 80041a2:	e7f4      	b.n	800418e <_printf_float+0x442>

080041a4 <_printf_common>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	4616      	mov	r6, r2
 80041aa:	4698      	mov	r8, r3
 80041ac:	688a      	ldr	r2, [r1, #8]
 80041ae:	690b      	ldr	r3, [r1, #16]
 80041b0:	4607      	mov	r7, r0
 80041b2:	4293      	cmp	r3, r2
 80041b4:	bfb8      	it	lt
 80041b6:	4613      	movlt	r3, r2
 80041b8:	6033      	str	r3, [r6, #0]
 80041ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041be:	460c      	mov	r4, r1
 80041c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c4:	b10a      	cbz	r2, 80041ca <_printf_common+0x26>
 80041c6:	3301      	adds	r3, #1
 80041c8:	6033      	str	r3, [r6, #0]
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	0699      	lsls	r1, r3, #26
 80041ce:	bf42      	ittt	mi
 80041d0:	6833      	ldrmi	r3, [r6, #0]
 80041d2:	3302      	addmi	r3, #2
 80041d4:	6033      	strmi	r3, [r6, #0]
 80041d6:	6825      	ldr	r5, [r4, #0]
 80041d8:	f015 0506 	ands.w	r5, r5, #6
 80041dc:	d106      	bne.n	80041ec <_printf_common+0x48>
 80041de:	f104 0a19 	add.w	sl, r4, #25
 80041e2:	68e3      	ldr	r3, [r4, #12]
 80041e4:	6832      	ldr	r2, [r6, #0]
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	42ab      	cmp	r3, r5
 80041ea:	dc2b      	bgt.n	8004244 <_printf_common+0xa0>
 80041ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041f0:	6822      	ldr	r2, [r4, #0]
 80041f2:	3b00      	subs	r3, #0
 80041f4:	bf18      	it	ne
 80041f6:	2301      	movne	r3, #1
 80041f8:	0692      	lsls	r2, r2, #26
 80041fa:	d430      	bmi.n	800425e <_printf_common+0xba>
 80041fc:	4641      	mov	r1, r8
 80041fe:	4638      	mov	r0, r7
 8004200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004204:	47c8      	blx	r9
 8004206:	3001      	adds	r0, #1
 8004208:	d023      	beq.n	8004252 <_printf_common+0xae>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	6922      	ldr	r2, [r4, #16]
 800420e:	f003 0306 	and.w	r3, r3, #6
 8004212:	2b04      	cmp	r3, #4
 8004214:	bf14      	ite	ne
 8004216:	2500      	movne	r5, #0
 8004218:	6833      	ldreq	r3, [r6, #0]
 800421a:	f04f 0600 	mov.w	r6, #0
 800421e:	bf08      	it	eq
 8004220:	68e5      	ldreq	r5, [r4, #12]
 8004222:	f104 041a 	add.w	r4, r4, #26
 8004226:	bf08      	it	eq
 8004228:	1aed      	subeq	r5, r5, r3
 800422a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800422e:	bf08      	it	eq
 8004230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004234:	4293      	cmp	r3, r2
 8004236:	bfc4      	itt	gt
 8004238:	1a9b      	subgt	r3, r3, r2
 800423a:	18ed      	addgt	r5, r5, r3
 800423c:	42b5      	cmp	r5, r6
 800423e:	d11a      	bne.n	8004276 <_printf_common+0xd2>
 8004240:	2000      	movs	r0, #0
 8004242:	e008      	b.n	8004256 <_printf_common+0xb2>
 8004244:	2301      	movs	r3, #1
 8004246:	4652      	mov	r2, sl
 8004248:	4641      	mov	r1, r8
 800424a:	4638      	mov	r0, r7
 800424c:	47c8      	blx	r9
 800424e:	3001      	adds	r0, #1
 8004250:	d103      	bne.n	800425a <_printf_common+0xb6>
 8004252:	f04f 30ff 	mov.w	r0, #4294967295
 8004256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425a:	3501      	adds	r5, #1
 800425c:	e7c1      	b.n	80041e2 <_printf_common+0x3e>
 800425e:	2030      	movs	r0, #48	@ 0x30
 8004260:	18e1      	adds	r1, r4, r3
 8004262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800426c:	4422      	add	r2, r4
 800426e:	3302      	adds	r3, #2
 8004270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004274:	e7c2      	b.n	80041fc <_printf_common+0x58>
 8004276:	2301      	movs	r3, #1
 8004278:	4622      	mov	r2, r4
 800427a:	4641      	mov	r1, r8
 800427c:	4638      	mov	r0, r7
 800427e:	47c8      	blx	r9
 8004280:	3001      	adds	r0, #1
 8004282:	d0e6      	beq.n	8004252 <_printf_common+0xae>
 8004284:	3601      	adds	r6, #1
 8004286:	e7d9      	b.n	800423c <_printf_common+0x98>

08004288 <_printf_i>:
 8004288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800428c:	7e0f      	ldrb	r7, [r1, #24]
 800428e:	4691      	mov	r9, r2
 8004290:	2f78      	cmp	r7, #120	@ 0x78
 8004292:	4680      	mov	r8, r0
 8004294:	460c      	mov	r4, r1
 8004296:	469a      	mov	sl, r3
 8004298:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800429a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800429e:	d807      	bhi.n	80042b0 <_printf_i+0x28>
 80042a0:	2f62      	cmp	r7, #98	@ 0x62
 80042a2:	d80a      	bhi.n	80042ba <_printf_i+0x32>
 80042a4:	2f00      	cmp	r7, #0
 80042a6:	f000 80d3 	beq.w	8004450 <_printf_i+0x1c8>
 80042aa:	2f58      	cmp	r7, #88	@ 0x58
 80042ac:	f000 80ba 	beq.w	8004424 <_printf_i+0x19c>
 80042b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b8:	e03a      	b.n	8004330 <_printf_i+0xa8>
 80042ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042be:	2b15      	cmp	r3, #21
 80042c0:	d8f6      	bhi.n	80042b0 <_printf_i+0x28>
 80042c2:	a101      	add	r1, pc, #4	@ (adr r1, 80042c8 <_printf_i+0x40>)
 80042c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c8:	08004321 	.word	0x08004321
 80042cc:	08004335 	.word	0x08004335
 80042d0:	080042b1 	.word	0x080042b1
 80042d4:	080042b1 	.word	0x080042b1
 80042d8:	080042b1 	.word	0x080042b1
 80042dc:	080042b1 	.word	0x080042b1
 80042e0:	08004335 	.word	0x08004335
 80042e4:	080042b1 	.word	0x080042b1
 80042e8:	080042b1 	.word	0x080042b1
 80042ec:	080042b1 	.word	0x080042b1
 80042f0:	080042b1 	.word	0x080042b1
 80042f4:	08004437 	.word	0x08004437
 80042f8:	0800435f 	.word	0x0800435f
 80042fc:	080043f1 	.word	0x080043f1
 8004300:	080042b1 	.word	0x080042b1
 8004304:	080042b1 	.word	0x080042b1
 8004308:	08004459 	.word	0x08004459
 800430c:	080042b1 	.word	0x080042b1
 8004310:	0800435f 	.word	0x0800435f
 8004314:	080042b1 	.word	0x080042b1
 8004318:	080042b1 	.word	0x080042b1
 800431c:	080043f9 	.word	0x080043f9
 8004320:	6833      	ldr	r3, [r6, #0]
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6032      	str	r2, [r6, #0]
 8004328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800432c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004330:	2301      	movs	r3, #1
 8004332:	e09e      	b.n	8004472 <_printf_i+0x1ea>
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	6820      	ldr	r0, [r4, #0]
 8004338:	1d19      	adds	r1, r3, #4
 800433a:	6031      	str	r1, [r6, #0]
 800433c:	0606      	lsls	r6, r0, #24
 800433e:	d501      	bpl.n	8004344 <_printf_i+0xbc>
 8004340:	681d      	ldr	r5, [r3, #0]
 8004342:	e003      	b.n	800434c <_printf_i+0xc4>
 8004344:	0645      	lsls	r5, r0, #25
 8004346:	d5fb      	bpl.n	8004340 <_printf_i+0xb8>
 8004348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800434c:	2d00      	cmp	r5, #0
 800434e:	da03      	bge.n	8004358 <_printf_i+0xd0>
 8004350:	232d      	movs	r3, #45	@ 0x2d
 8004352:	426d      	negs	r5, r5
 8004354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004358:	230a      	movs	r3, #10
 800435a:	4859      	ldr	r0, [pc, #356]	@ (80044c0 <_printf_i+0x238>)
 800435c:	e011      	b.n	8004382 <_printf_i+0xfa>
 800435e:	6821      	ldr	r1, [r4, #0]
 8004360:	6833      	ldr	r3, [r6, #0]
 8004362:	0608      	lsls	r0, r1, #24
 8004364:	f853 5b04 	ldr.w	r5, [r3], #4
 8004368:	d402      	bmi.n	8004370 <_printf_i+0xe8>
 800436a:	0649      	lsls	r1, r1, #25
 800436c:	bf48      	it	mi
 800436e:	b2ad      	uxthmi	r5, r5
 8004370:	2f6f      	cmp	r7, #111	@ 0x6f
 8004372:	6033      	str	r3, [r6, #0]
 8004374:	bf14      	ite	ne
 8004376:	230a      	movne	r3, #10
 8004378:	2308      	moveq	r3, #8
 800437a:	4851      	ldr	r0, [pc, #324]	@ (80044c0 <_printf_i+0x238>)
 800437c:	2100      	movs	r1, #0
 800437e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004382:	6866      	ldr	r6, [r4, #4]
 8004384:	2e00      	cmp	r6, #0
 8004386:	bfa8      	it	ge
 8004388:	6821      	ldrge	r1, [r4, #0]
 800438a:	60a6      	str	r6, [r4, #8]
 800438c:	bfa4      	itt	ge
 800438e:	f021 0104 	bicge.w	r1, r1, #4
 8004392:	6021      	strge	r1, [r4, #0]
 8004394:	b90d      	cbnz	r5, 800439a <_printf_i+0x112>
 8004396:	2e00      	cmp	r6, #0
 8004398:	d04b      	beq.n	8004432 <_printf_i+0x1aa>
 800439a:	4616      	mov	r6, r2
 800439c:	fbb5 f1f3 	udiv	r1, r5, r3
 80043a0:	fb03 5711 	mls	r7, r3, r1, r5
 80043a4:	5dc7      	ldrb	r7, [r0, r7]
 80043a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043aa:	462f      	mov	r7, r5
 80043ac:	42bb      	cmp	r3, r7
 80043ae:	460d      	mov	r5, r1
 80043b0:	d9f4      	bls.n	800439c <_printf_i+0x114>
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d10b      	bne.n	80043ce <_printf_i+0x146>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	07df      	lsls	r7, r3, #31
 80043ba:	d508      	bpl.n	80043ce <_printf_i+0x146>
 80043bc:	6923      	ldr	r3, [r4, #16]
 80043be:	6861      	ldr	r1, [r4, #4]
 80043c0:	4299      	cmp	r1, r3
 80043c2:	bfde      	ittt	le
 80043c4:	2330      	movle	r3, #48	@ 0x30
 80043c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043ce:	1b92      	subs	r2, r2, r6
 80043d0:	6122      	str	r2, [r4, #16]
 80043d2:	464b      	mov	r3, r9
 80043d4:	4621      	mov	r1, r4
 80043d6:	4640      	mov	r0, r8
 80043d8:	f8cd a000 	str.w	sl, [sp]
 80043dc:	aa03      	add	r2, sp, #12
 80043de:	f7ff fee1 	bl	80041a4 <_printf_common>
 80043e2:	3001      	adds	r0, #1
 80043e4:	d14a      	bne.n	800447c <_printf_i+0x1f4>
 80043e6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ea:	b004      	add	sp, #16
 80043ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	f043 0320 	orr.w	r3, r3, #32
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	2778      	movs	r7, #120	@ 0x78
 80043fa:	4832      	ldr	r0, [pc, #200]	@ (80044c4 <_printf_i+0x23c>)
 80043fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	6831      	ldr	r1, [r6, #0]
 8004404:	061f      	lsls	r7, r3, #24
 8004406:	f851 5b04 	ldr.w	r5, [r1], #4
 800440a:	d402      	bmi.n	8004412 <_printf_i+0x18a>
 800440c:	065f      	lsls	r7, r3, #25
 800440e:	bf48      	it	mi
 8004410:	b2ad      	uxthmi	r5, r5
 8004412:	6031      	str	r1, [r6, #0]
 8004414:	07d9      	lsls	r1, r3, #31
 8004416:	bf44      	itt	mi
 8004418:	f043 0320 	orrmi.w	r3, r3, #32
 800441c:	6023      	strmi	r3, [r4, #0]
 800441e:	b11d      	cbz	r5, 8004428 <_printf_i+0x1a0>
 8004420:	2310      	movs	r3, #16
 8004422:	e7ab      	b.n	800437c <_printf_i+0xf4>
 8004424:	4826      	ldr	r0, [pc, #152]	@ (80044c0 <_printf_i+0x238>)
 8004426:	e7e9      	b.n	80043fc <_printf_i+0x174>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	f023 0320 	bic.w	r3, r3, #32
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	e7f6      	b.n	8004420 <_printf_i+0x198>
 8004432:	4616      	mov	r6, r2
 8004434:	e7bd      	b.n	80043b2 <_printf_i+0x12a>
 8004436:	6833      	ldr	r3, [r6, #0]
 8004438:	6825      	ldr	r5, [r4, #0]
 800443a:	1d18      	adds	r0, r3, #4
 800443c:	6961      	ldr	r1, [r4, #20]
 800443e:	6030      	str	r0, [r6, #0]
 8004440:	062e      	lsls	r6, r5, #24
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	d501      	bpl.n	800444a <_printf_i+0x1c2>
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e002      	b.n	8004450 <_printf_i+0x1c8>
 800444a:	0668      	lsls	r0, r5, #25
 800444c:	d5fb      	bpl.n	8004446 <_printf_i+0x1be>
 800444e:	8019      	strh	r1, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	4616      	mov	r6, r2
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	e7bc      	b.n	80043d2 <_printf_i+0x14a>
 8004458:	6833      	ldr	r3, [r6, #0]
 800445a:	2100      	movs	r1, #0
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	6032      	str	r2, [r6, #0]
 8004460:	681e      	ldr	r6, [r3, #0]
 8004462:	6862      	ldr	r2, [r4, #4]
 8004464:	4630      	mov	r0, r6
 8004466:	f000 f9b4 	bl	80047d2 <memchr>
 800446a:	b108      	cbz	r0, 8004470 <_printf_i+0x1e8>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	6060      	str	r0, [r4, #4]
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	2300      	movs	r3, #0
 8004476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800447a:	e7aa      	b.n	80043d2 <_printf_i+0x14a>
 800447c:	4632      	mov	r2, r6
 800447e:	4649      	mov	r1, r9
 8004480:	4640      	mov	r0, r8
 8004482:	6923      	ldr	r3, [r4, #16]
 8004484:	47d0      	blx	sl
 8004486:	3001      	adds	r0, #1
 8004488:	d0ad      	beq.n	80043e6 <_printf_i+0x15e>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	079b      	lsls	r3, r3, #30
 800448e:	d413      	bmi.n	80044b8 <_printf_i+0x230>
 8004490:	68e0      	ldr	r0, [r4, #12]
 8004492:	9b03      	ldr	r3, [sp, #12]
 8004494:	4298      	cmp	r0, r3
 8004496:	bfb8      	it	lt
 8004498:	4618      	movlt	r0, r3
 800449a:	e7a6      	b.n	80043ea <_printf_i+0x162>
 800449c:	2301      	movs	r3, #1
 800449e:	4632      	mov	r2, r6
 80044a0:	4649      	mov	r1, r9
 80044a2:	4640      	mov	r0, r8
 80044a4:	47d0      	blx	sl
 80044a6:	3001      	adds	r0, #1
 80044a8:	d09d      	beq.n	80043e6 <_printf_i+0x15e>
 80044aa:	3501      	adds	r5, #1
 80044ac:	68e3      	ldr	r3, [r4, #12]
 80044ae:	9903      	ldr	r1, [sp, #12]
 80044b0:	1a5b      	subs	r3, r3, r1
 80044b2:	42ab      	cmp	r3, r5
 80044b4:	dcf2      	bgt.n	800449c <_printf_i+0x214>
 80044b6:	e7eb      	b.n	8004490 <_printf_i+0x208>
 80044b8:	2500      	movs	r5, #0
 80044ba:	f104 0619 	add.w	r6, r4, #25
 80044be:	e7f5      	b.n	80044ac <_printf_i+0x224>
 80044c0:	080065f1 	.word	0x080065f1
 80044c4:	08006602 	.word	0x08006602

080044c8 <std>:
 80044c8:	2300      	movs	r3, #0
 80044ca:	b510      	push	{r4, lr}
 80044cc:	4604      	mov	r4, r0
 80044ce:	e9c0 3300 	strd	r3, r3, [r0]
 80044d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044d6:	6083      	str	r3, [r0, #8]
 80044d8:	8181      	strh	r1, [r0, #12]
 80044da:	6643      	str	r3, [r0, #100]	@ 0x64
 80044dc:	81c2      	strh	r2, [r0, #14]
 80044de:	6183      	str	r3, [r0, #24]
 80044e0:	4619      	mov	r1, r3
 80044e2:	2208      	movs	r2, #8
 80044e4:	305c      	adds	r0, #92	@ 0x5c
 80044e6:	f000 f8f4 	bl	80046d2 <memset>
 80044ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004520 <std+0x58>)
 80044ec:	6224      	str	r4, [r4, #32]
 80044ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80044f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004524 <std+0x5c>)
 80044f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80044f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <std+0x60>)
 80044f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <std+0x64>)
 80044fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80044fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <std+0x68>)
 80044fe:	429c      	cmp	r4, r3
 8004500:	d006      	beq.n	8004510 <std+0x48>
 8004502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004506:	4294      	cmp	r4, r2
 8004508:	d002      	beq.n	8004510 <std+0x48>
 800450a:	33d0      	adds	r3, #208	@ 0xd0
 800450c:	429c      	cmp	r4, r3
 800450e:	d105      	bne.n	800451c <std+0x54>
 8004510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	f000 b958 	b.w	80047cc <__retarget_lock_init_recursive>
 800451c:	bd10      	pop	{r4, pc}
 800451e:	bf00      	nop
 8004520:	0800464d 	.word	0x0800464d
 8004524:	0800466f 	.word	0x0800466f
 8004528:	080046a7 	.word	0x080046a7
 800452c:	080046cb 	.word	0x080046cb
 8004530:	200002b4 	.word	0x200002b4

08004534 <stdio_exit_handler>:
 8004534:	4a02      	ldr	r2, [pc, #8]	@ (8004540 <stdio_exit_handler+0xc>)
 8004536:	4903      	ldr	r1, [pc, #12]	@ (8004544 <stdio_exit_handler+0x10>)
 8004538:	4803      	ldr	r0, [pc, #12]	@ (8004548 <stdio_exit_handler+0x14>)
 800453a:	f000 b869 	b.w	8004610 <_fwalk_sglue>
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c
 8004544:	08005e8d 	.word	0x08005e8d
 8004548:	2000001c 	.word	0x2000001c

0800454c <cleanup_stdio>:
 800454c:	6841      	ldr	r1, [r0, #4]
 800454e:	4b0c      	ldr	r3, [pc, #48]	@ (8004580 <cleanup_stdio+0x34>)
 8004550:	b510      	push	{r4, lr}
 8004552:	4299      	cmp	r1, r3
 8004554:	4604      	mov	r4, r0
 8004556:	d001      	beq.n	800455c <cleanup_stdio+0x10>
 8004558:	f001 fc98 	bl	8005e8c <_fflush_r>
 800455c:	68a1      	ldr	r1, [r4, #8]
 800455e:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <cleanup_stdio+0x38>)
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <cleanup_stdio+0x1e>
 8004564:	4620      	mov	r0, r4
 8004566:	f001 fc91 	bl	8005e8c <_fflush_r>
 800456a:	68e1      	ldr	r1, [r4, #12]
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <cleanup_stdio+0x3c>)
 800456e:	4299      	cmp	r1, r3
 8004570:	d004      	beq.n	800457c <cleanup_stdio+0x30>
 8004572:	4620      	mov	r0, r4
 8004574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004578:	f001 bc88 	b.w	8005e8c <_fflush_r>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	200002b4 	.word	0x200002b4
 8004584:	2000031c 	.word	0x2000031c
 8004588:	20000384 	.word	0x20000384

0800458c <global_stdio_init.part.0>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4b0b      	ldr	r3, [pc, #44]	@ (80045bc <global_stdio_init.part.0+0x30>)
 8004590:	4c0b      	ldr	r4, [pc, #44]	@ (80045c0 <global_stdio_init.part.0+0x34>)
 8004592:	4a0c      	ldr	r2, [pc, #48]	@ (80045c4 <global_stdio_init.part.0+0x38>)
 8004594:	4620      	mov	r0, r4
 8004596:	601a      	str	r2, [r3, #0]
 8004598:	2104      	movs	r1, #4
 800459a:	2200      	movs	r2, #0
 800459c:	f7ff ff94 	bl	80044c8 <std>
 80045a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045a4:	2201      	movs	r2, #1
 80045a6:	2109      	movs	r1, #9
 80045a8:	f7ff ff8e 	bl	80044c8 <std>
 80045ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045b0:	2202      	movs	r2, #2
 80045b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045b6:	2112      	movs	r1, #18
 80045b8:	f7ff bf86 	b.w	80044c8 <std>
 80045bc:	200003ec 	.word	0x200003ec
 80045c0:	200002b4 	.word	0x200002b4
 80045c4:	08004535 	.word	0x08004535

080045c8 <__sfp_lock_acquire>:
 80045c8:	4801      	ldr	r0, [pc, #4]	@ (80045d0 <__sfp_lock_acquire+0x8>)
 80045ca:	f000 b900 	b.w	80047ce <__retarget_lock_acquire_recursive>
 80045ce:	bf00      	nop
 80045d0:	200003f5 	.word	0x200003f5

080045d4 <__sfp_lock_release>:
 80045d4:	4801      	ldr	r0, [pc, #4]	@ (80045dc <__sfp_lock_release+0x8>)
 80045d6:	f000 b8fb 	b.w	80047d0 <__retarget_lock_release_recursive>
 80045da:	bf00      	nop
 80045dc:	200003f5 	.word	0x200003f5

080045e0 <__sinit>:
 80045e0:	b510      	push	{r4, lr}
 80045e2:	4604      	mov	r4, r0
 80045e4:	f7ff fff0 	bl	80045c8 <__sfp_lock_acquire>
 80045e8:	6a23      	ldr	r3, [r4, #32]
 80045ea:	b11b      	cbz	r3, 80045f4 <__sinit+0x14>
 80045ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045f0:	f7ff bff0 	b.w	80045d4 <__sfp_lock_release>
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <__sinit+0x28>)
 80045f6:	6223      	str	r3, [r4, #32]
 80045f8:	4b04      	ldr	r3, [pc, #16]	@ (800460c <__sinit+0x2c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f5      	bne.n	80045ec <__sinit+0xc>
 8004600:	f7ff ffc4 	bl	800458c <global_stdio_init.part.0>
 8004604:	e7f2      	b.n	80045ec <__sinit+0xc>
 8004606:	bf00      	nop
 8004608:	0800454d 	.word	0x0800454d
 800460c:	200003ec 	.word	0x200003ec

08004610 <_fwalk_sglue>:
 8004610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004614:	4607      	mov	r7, r0
 8004616:	4688      	mov	r8, r1
 8004618:	4614      	mov	r4, r2
 800461a:	2600      	movs	r6, #0
 800461c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004620:	f1b9 0901 	subs.w	r9, r9, #1
 8004624:	d505      	bpl.n	8004632 <_fwalk_sglue+0x22>
 8004626:	6824      	ldr	r4, [r4, #0]
 8004628:	2c00      	cmp	r4, #0
 800462a:	d1f7      	bne.n	800461c <_fwalk_sglue+0xc>
 800462c:	4630      	mov	r0, r6
 800462e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d907      	bls.n	8004648 <_fwalk_sglue+0x38>
 8004638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800463c:	3301      	adds	r3, #1
 800463e:	d003      	beq.n	8004648 <_fwalk_sglue+0x38>
 8004640:	4629      	mov	r1, r5
 8004642:	4638      	mov	r0, r7
 8004644:	47c0      	blx	r8
 8004646:	4306      	orrs	r6, r0
 8004648:	3568      	adds	r5, #104	@ 0x68
 800464a:	e7e9      	b.n	8004620 <_fwalk_sglue+0x10>

0800464c <__sread>:
 800464c:	b510      	push	{r4, lr}
 800464e:	460c      	mov	r4, r1
 8004650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004654:	f000 f86c 	bl	8004730 <_read_r>
 8004658:	2800      	cmp	r0, #0
 800465a:	bfab      	itete	ge
 800465c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800465e:	89a3      	ldrhlt	r3, [r4, #12]
 8004660:	181b      	addge	r3, r3, r0
 8004662:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004666:	bfac      	ite	ge
 8004668:	6563      	strge	r3, [r4, #84]	@ 0x54
 800466a:	81a3      	strhlt	r3, [r4, #12]
 800466c:	bd10      	pop	{r4, pc}

0800466e <__swrite>:
 800466e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004672:	461f      	mov	r7, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	4605      	mov	r5, r0
 8004678:	05db      	lsls	r3, r3, #23
 800467a:	460c      	mov	r4, r1
 800467c:	4616      	mov	r6, r2
 800467e:	d505      	bpl.n	800468c <__swrite+0x1e>
 8004680:	2302      	movs	r3, #2
 8004682:	2200      	movs	r2, #0
 8004684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004688:	f000 f840 	bl	800470c <_lseek_r>
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	4632      	mov	r2, r6
 8004690:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	4628      	mov	r0, r5
 8004698:	463b      	mov	r3, r7
 800469a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800469e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	f000 b857 	b.w	8004754 <_write_r>

080046a6 <__sseek>:
 80046a6:	b510      	push	{r4, lr}
 80046a8:	460c      	mov	r4, r1
 80046aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ae:	f000 f82d 	bl	800470c <_lseek_r>
 80046b2:	1c43      	adds	r3, r0, #1
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	bf15      	itete	ne
 80046b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046c2:	81a3      	strheq	r3, [r4, #12]
 80046c4:	bf18      	it	ne
 80046c6:	81a3      	strhne	r3, [r4, #12]
 80046c8:	bd10      	pop	{r4, pc}

080046ca <__sclose>:
 80046ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ce:	f000 b80d 	b.w	80046ec <_close_r>

080046d2 <memset>:
 80046d2:	4603      	mov	r3, r0
 80046d4:	4402      	add	r2, r0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d100      	bne.n	80046dc <memset+0xa>
 80046da:	4770      	bx	lr
 80046dc:	f803 1b01 	strb.w	r1, [r3], #1
 80046e0:	e7f9      	b.n	80046d6 <memset+0x4>
	...

080046e4 <_localeconv_r>:
 80046e4:	4800      	ldr	r0, [pc, #0]	@ (80046e8 <_localeconv_r+0x4>)
 80046e6:	4770      	bx	lr
 80046e8:	20000158 	.word	0x20000158

080046ec <_close_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	2300      	movs	r3, #0
 80046f0:	4d05      	ldr	r5, [pc, #20]	@ (8004708 <_close_r+0x1c>)
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc ffdb 	bl	80016b2 <_close>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_close_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_close_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	200003f0 	.word	0x200003f0

0800470c <_lseek_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4604      	mov	r4, r0
 8004710:	4608      	mov	r0, r1
 8004712:	4611      	mov	r1, r2
 8004714:	2200      	movs	r2, #0
 8004716:	4d05      	ldr	r5, [pc, #20]	@ (800472c <_lseek_r+0x20>)
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fc ffed 	bl	80016fa <_lseek>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_lseek_r+0x1e>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_lseek_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200003f0 	.word	0x200003f0

08004730 <_read_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	2200      	movs	r2, #0
 800473a:	4d05      	ldr	r5, [pc, #20]	@ (8004750 <_read_r+0x20>)
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc ff7e 	bl	8001640 <_read>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_read_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_read_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200003f0 	.word	0x200003f0

08004754 <_write_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	2200      	movs	r2, #0
 800475e:	4d05      	ldr	r5, [pc, #20]	@ (8004774 <_write_r+0x20>)
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc ff89 	bl	800167a <_write>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_write_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_write_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	200003f0 	.word	0x200003f0

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	@ (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000018 	.word	0x20000018

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	2600      	movs	r6, #0
 8004788:	4d0c      	ldr	r5, [pc, #48]	@ (80047bc <__libc_init_array+0x38>)
 800478a:	4c0d      	ldr	r4, [pc, #52]	@ (80047c0 <__libc_init_array+0x3c>)
 800478c:	1b64      	subs	r4, r4, r5
 800478e:	10a4      	asrs	r4, r4, #2
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	f001 fec6 	bl	8006524 <_init>
 8004798:	2600      	movs	r6, #0
 800479a:	4d0a      	ldr	r5, [pc, #40]	@ (80047c4 <__libc_init_array+0x40>)
 800479c:	4c0a      	ldr	r4, [pc, #40]	@ (80047c8 <__libc_init_array+0x44>)
 800479e:	1b64      	subs	r4, r4, r5
 80047a0:	10a4      	asrs	r4, r4, #2
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08006958 	.word	0x08006958
 80047c0:	08006958 	.word	0x08006958
 80047c4:	08006958 	.word	0x08006958
 80047c8:	0800695c 	.word	0x0800695c

080047cc <__retarget_lock_init_recursive>:
 80047cc:	4770      	bx	lr

080047ce <__retarget_lock_acquire_recursive>:
 80047ce:	4770      	bx	lr

080047d0 <__retarget_lock_release_recursive>:
 80047d0:	4770      	bx	lr

080047d2 <memchr>:
 80047d2:	4603      	mov	r3, r0
 80047d4:	b510      	push	{r4, lr}
 80047d6:	b2c9      	uxtb	r1, r1
 80047d8:	4402      	add	r2, r0
 80047da:	4293      	cmp	r3, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	d101      	bne.n	80047e4 <memchr+0x12>
 80047e0:	2000      	movs	r0, #0
 80047e2:	e003      	b.n	80047ec <memchr+0x1a>
 80047e4:	7804      	ldrb	r4, [r0, #0]
 80047e6:	3301      	adds	r3, #1
 80047e8:	428c      	cmp	r4, r1
 80047ea:	d1f6      	bne.n	80047da <memchr+0x8>
 80047ec:	bd10      	pop	{r4, pc}

080047ee <quorem>:
 80047ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f2:	6903      	ldr	r3, [r0, #16]
 80047f4:	690c      	ldr	r4, [r1, #16]
 80047f6:	4607      	mov	r7, r0
 80047f8:	42a3      	cmp	r3, r4
 80047fa:	db7e      	blt.n	80048fa <quorem+0x10c>
 80047fc:	3c01      	subs	r4, #1
 80047fe:	00a3      	lsls	r3, r4, #2
 8004800:	f100 0514 	add.w	r5, r0, #20
 8004804:	f101 0814 	add.w	r8, r1, #20
 8004808:	9300      	str	r3, [sp, #0]
 800480a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004818:	3301      	adds	r3, #1
 800481a:	429a      	cmp	r2, r3
 800481c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004820:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004824:	d32e      	bcc.n	8004884 <quorem+0x96>
 8004826:	f04f 0a00 	mov.w	sl, #0
 800482a:	46c4      	mov	ip, r8
 800482c:	46ae      	mov	lr, r5
 800482e:	46d3      	mov	fp, sl
 8004830:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004834:	b298      	uxth	r0, r3
 8004836:	fb06 a000 	mla	r0, r6, r0, sl
 800483a:	0c1b      	lsrs	r3, r3, #16
 800483c:	0c02      	lsrs	r2, r0, #16
 800483e:	fb06 2303 	mla	r3, r6, r3, r2
 8004842:	f8de 2000 	ldr.w	r2, [lr]
 8004846:	b280      	uxth	r0, r0
 8004848:	b292      	uxth	r2, r2
 800484a:	1a12      	subs	r2, r2, r0
 800484c:	445a      	add	r2, fp
 800484e:	f8de 0000 	ldr.w	r0, [lr]
 8004852:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004856:	b29b      	uxth	r3, r3
 8004858:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800485c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004860:	b292      	uxth	r2, r2
 8004862:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004866:	45e1      	cmp	r9, ip
 8004868:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800486c:	f84e 2b04 	str.w	r2, [lr], #4
 8004870:	d2de      	bcs.n	8004830 <quorem+0x42>
 8004872:	9b00      	ldr	r3, [sp, #0]
 8004874:	58eb      	ldr	r3, [r5, r3]
 8004876:	b92b      	cbnz	r3, 8004884 <quorem+0x96>
 8004878:	9b01      	ldr	r3, [sp, #4]
 800487a:	3b04      	subs	r3, #4
 800487c:	429d      	cmp	r5, r3
 800487e:	461a      	mov	r2, r3
 8004880:	d32f      	bcc.n	80048e2 <quorem+0xf4>
 8004882:	613c      	str	r4, [r7, #16]
 8004884:	4638      	mov	r0, r7
 8004886:	f001 f979 	bl	8005b7c <__mcmp>
 800488a:	2800      	cmp	r0, #0
 800488c:	db25      	blt.n	80048da <quorem+0xec>
 800488e:	4629      	mov	r1, r5
 8004890:	2000      	movs	r0, #0
 8004892:	f858 2b04 	ldr.w	r2, [r8], #4
 8004896:	f8d1 c000 	ldr.w	ip, [r1]
 800489a:	fa1f fe82 	uxth.w	lr, r2
 800489e:	fa1f f38c 	uxth.w	r3, ip
 80048a2:	eba3 030e 	sub.w	r3, r3, lr
 80048a6:	4403      	add	r3, r0
 80048a8:	0c12      	lsrs	r2, r2, #16
 80048aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b8:	45c1      	cmp	r9, r8
 80048ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048be:	f841 3b04 	str.w	r3, [r1], #4
 80048c2:	d2e6      	bcs.n	8004892 <quorem+0xa4>
 80048c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048cc:	b922      	cbnz	r2, 80048d8 <quorem+0xea>
 80048ce:	3b04      	subs	r3, #4
 80048d0:	429d      	cmp	r5, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	d30b      	bcc.n	80048ee <quorem+0x100>
 80048d6:	613c      	str	r4, [r7, #16]
 80048d8:	3601      	adds	r6, #1
 80048da:	4630      	mov	r0, r6
 80048dc:	b003      	add	sp, #12
 80048de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e2:	6812      	ldr	r2, [r2, #0]
 80048e4:	3b04      	subs	r3, #4
 80048e6:	2a00      	cmp	r2, #0
 80048e8:	d1cb      	bne.n	8004882 <quorem+0x94>
 80048ea:	3c01      	subs	r4, #1
 80048ec:	e7c6      	b.n	800487c <quorem+0x8e>
 80048ee:	6812      	ldr	r2, [r2, #0]
 80048f0:	3b04      	subs	r3, #4
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	d1ef      	bne.n	80048d6 <quorem+0xe8>
 80048f6:	3c01      	subs	r4, #1
 80048f8:	e7ea      	b.n	80048d0 <quorem+0xe2>
 80048fa:	2000      	movs	r0, #0
 80048fc:	e7ee      	b.n	80048dc <quorem+0xee>
	...

08004900 <_dtoa_r>:
 8004900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004904:	4614      	mov	r4, r2
 8004906:	461d      	mov	r5, r3
 8004908:	69c7      	ldr	r7, [r0, #28]
 800490a:	b097      	sub	sp, #92	@ 0x5c
 800490c:	4683      	mov	fp, r0
 800490e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004912:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004914:	b97f      	cbnz	r7, 8004936 <_dtoa_r+0x36>
 8004916:	2010      	movs	r0, #16
 8004918:	f000 fe02 	bl	8005520 <malloc>
 800491c:	4602      	mov	r2, r0
 800491e:	f8cb 001c 	str.w	r0, [fp, #28]
 8004922:	b920      	cbnz	r0, 800492e <_dtoa_r+0x2e>
 8004924:	21ef      	movs	r1, #239	@ 0xef
 8004926:	4ba8      	ldr	r3, [pc, #672]	@ (8004bc8 <_dtoa_r+0x2c8>)
 8004928:	48a8      	ldr	r0, [pc, #672]	@ (8004bcc <_dtoa_r+0x2cc>)
 800492a:	f001 faf5 	bl	8005f18 <__assert_func>
 800492e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004932:	6007      	str	r7, [r0, #0]
 8004934:	60c7      	str	r7, [r0, #12]
 8004936:	f8db 301c 	ldr.w	r3, [fp, #28]
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	b159      	cbz	r1, 8004956 <_dtoa_r+0x56>
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2301      	movs	r3, #1
 8004942:	4093      	lsls	r3, r2
 8004944:	604a      	str	r2, [r1, #4]
 8004946:	608b      	str	r3, [r1, #8]
 8004948:	4658      	mov	r0, fp
 800494a:	f000 fedf 	bl	800570c <_Bfree>
 800494e:	2200      	movs	r2, #0
 8004950:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	1e2b      	subs	r3, r5, #0
 8004958:	bfaf      	iteee	ge
 800495a:	2300      	movge	r3, #0
 800495c:	2201      	movlt	r2, #1
 800495e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004962:	9303      	strlt	r3, [sp, #12]
 8004964:	bfa8      	it	ge
 8004966:	6033      	strge	r3, [r6, #0]
 8004968:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800496c:	4b98      	ldr	r3, [pc, #608]	@ (8004bd0 <_dtoa_r+0x2d0>)
 800496e:	bfb8      	it	lt
 8004970:	6032      	strlt	r2, [r6, #0]
 8004972:	ea33 0308 	bics.w	r3, r3, r8
 8004976:	d112      	bne.n	800499e <_dtoa_r+0x9e>
 8004978:	f242 730f 	movw	r3, #9999	@ 0x270f
 800497c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004984:	4323      	orrs	r3, r4
 8004986:	f000 8550 	beq.w	800542a <_dtoa_r+0xb2a>
 800498a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800498c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8004bd4 <_dtoa_r+0x2d4>
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8552 	beq.w	800543a <_dtoa_r+0xb3a>
 8004996:	f10a 0303 	add.w	r3, sl, #3
 800499a:	f000 bd4c 	b.w	8005436 <_dtoa_r+0xb36>
 800499e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80049a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80049a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049aa:	2200      	movs	r2, #0
 80049ac:	2300      	movs	r3, #0
 80049ae:	f7fb fffb 	bl	80009a8 <__aeabi_dcmpeq>
 80049b2:	4607      	mov	r7, r0
 80049b4:	b158      	cbz	r0, 80049ce <_dtoa_r+0xce>
 80049b6:	2301      	movs	r3, #1
 80049b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80049be:	b113      	cbz	r3, 80049c6 <_dtoa_r+0xc6>
 80049c0:	4b85      	ldr	r3, [pc, #532]	@ (8004bd8 <_dtoa_r+0x2d8>)
 80049c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004bdc <_dtoa_r+0x2dc>
 80049ca:	f000 bd36 	b.w	800543a <_dtoa_r+0xb3a>
 80049ce:	ab14      	add	r3, sp, #80	@ 0x50
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	ab15      	add	r3, sp, #84	@ 0x54
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	4658      	mov	r0, fp
 80049d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80049dc:	f001 f97e 	bl	8005cdc <__d2b>
 80049e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80049e4:	4681      	mov	r9, r0
 80049e6:	2e00      	cmp	r6, #0
 80049e8:	d077      	beq.n	8004ada <_dtoa_r+0x1da>
 80049ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80049f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80049fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a00:	9712      	str	r7, [sp, #72]	@ 0x48
 8004a02:	4619      	mov	r1, r3
 8004a04:	2200      	movs	r2, #0
 8004a06:	4b76      	ldr	r3, [pc, #472]	@ (8004be0 <_dtoa_r+0x2e0>)
 8004a08:	f7fb fbae 	bl	8000168 <__aeabi_dsub>
 8004a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8004bb0 <_dtoa_r+0x2b0>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fd61 	bl	80004d8 <__aeabi_dmul>
 8004a16:	a368      	add	r3, pc, #416	@ (adr r3, 8004bb8 <_dtoa_r+0x2b8>)
 8004a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1c:	f7fb fba6 	bl	800016c <__adddf3>
 8004a20:	4604      	mov	r4, r0
 8004a22:	4630      	mov	r0, r6
 8004a24:	460d      	mov	r5, r1
 8004a26:	f7fb fced 	bl	8000404 <__aeabi_i2d>
 8004a2a:	a365      	add	r3, pc, #404	@ (adr r3, 8004bc0 <_dtoa_r+0x2c0>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fd52 	bl	80004d8 <__aeabi_dmul>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	4629      	mov	r1, r5
 8004a3c:	f7fb fb96 	bl	800016c <__adddf3>
 8004a40:	4604      	mov	r4, r0
 8004a42:	460d      	mov	r5, r1
 8004a44:	f7fb fff8 	bl	8000a38 <__aeabi_d2iz>
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4607      	mov	r7, r0
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f7fb ffb3 	bl	80009bc <__aeabi_dcmplt>
 8004a56:	b140      	cbz	r0, 8004a6a <_dtoa_r+0x16a>
 8004a58:	4638      	mov	r0, r7
 8004a5a:	f7fb fcd3 	bl	8000404 <__aeabi_i2d>
 8004a5e:	4622      	mov	r2, r4
 8004a60:	462b      	mov	r3, r5
 8004a62:	f7fb ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 8004a66:	b900      	cbnz	r0, 8004a6a <_dtoa_r+0x16a>
 8004a68:	3f01      	subs	r7, #1
 8004a6a:	2f16      	cmp	r7, #22
 8004a6c:	d853      	bhi.n	8004b16 <_dtoa_r+0x216>
 8004a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a72:	4b5c      	ldr	r3, [pc, #368]	@ (8004be4 <_dtoa_r+0x2e4>)
 8004a74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb ff9e 	bl	80009bc <__aeabi_dcmplt>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d04a      	beq.n	8004b1a <_dtoa_r+0x21a>
 8004a84:	2300      	movs	r3, #0
 8004a86:	3f01      	subs	r7, #1
 8004a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a8c:	1b9b      	subs	r3, r3, r6
 8004a8e:	1e5a      	subs	r2, r3, #1
 8004a90:	bf46      	itte	mi
 8004a92:	f1c3 0801 	rsbmi	r8, r3, #1
 8004a96:	2300      	movmi	r3, #0
 8004a98:	f04f 0800 	movpl.w	r8, #0
 8004a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a9e:	bf48      	it	mi
 8004aa0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	db3b      	blt.n	8004b1e <_dtoa_r+0x21e>
 8004aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aa8:	970e      	str	r7, [sp, #56]	@ 0x38
 8004aaa:	443b      	add	r3, r7
 8004aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8004aae:	2300      	movs	r3, #0
 8004ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ab4:	2b09      	cmp	r3, #9
 8004ab6:	d866      	bhi.n	8004b86 <_dtoa_r+0x286>
 8004ab8:	2b05      	cmp	r3, #5
 8004aba:	bfc4      	itt	gt
 8004abc:	3b04      	subgt	r3, #4
 8004abe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004ac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004ac2:	bfc8      	it	gt
 8004ac4:	2400      	movgt	r4, #0
 8004ac6:	f1a3 0302 	sub.w	r3, r3, #2
 8004aca:	bfd8      	it	le
 8004acc:	2401      	movle	r4, #1
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d864      	bhi.n	8004b9c <_dtoa_r+0x29c>
 8004ad2:	e8df f003 	tbb	[pc, r3]
 8004ad6:	382b      	.short	0x382b
 8004ad8:	5636      	.short	0x5636
 8004ada:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004ade:	441e      	add	r6, r3
 8004ae0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	bfc1      	itttt	gt
 8004ae8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8004af0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004af4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004af8:	bfd6      	itet	le
 8004afa:	f1c3 0320 	rsble	r3, r3, #32
 8004afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8004b02:	fa04 f003 	lslle.w	r0, r4, r3
 8004b06:	f7fb fc6d 	bl	80003e4 <__aeabi_ui2d>
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b10:	3e01      	subs	r6, #1
 8004b12:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b14:	e775      	b.n	8004a02 <_dtoa_r+0x102>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e7b6      	b.n	8004a88 <_dtoa_r+0x188>
 8004b1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004b1c:	e7b5      	b.n	8004a8a <_dtoa_r+0x18a>
 8004b1e:	427b      	negs	r3, r7
 8004b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b22:	2300      	movs	r3, #0
 8004b24:	eba8 0807 	sub.w	r8, r8, r7
 8004b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8004b2a:	e7c2      	b.n	8004ab2 <_dtoa_r+0x1b2>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dc35      	bgt.n	8004ba2 <_dtoa_r+0x2a2>
 8004b36:	2301      	movs	r3, #1
 8004b38:	461a      	mov	r2, r3
 8004b3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8004b40:	e00b      	b.n	8004b5a <_dtoa_r+0x25a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e7f3      	b.n	8004b2e <_dtoa_r+0x22e>
 8004b46:	2300      	movs	r3, #0
 8004b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b4c:	18fb      	adds	r3, r7, r3
 8004b4e:	9308      	str	r3, [sp, #32]
 8004b50:	3301      	adds	r3, #1
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	9307      	str	r3, [sp, #28]
 8004b56:	bfb8      	it	lt
 8004b58:	2301      	movlt	r3, #1
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b62:	f102 0514 	add.w	r5, r2, #20
 8004b66:	429d      	cmp	r5, r3
 8004b68:	d91f      	bls.n	8004baa <_dtoa_r+0x2aa>
 8004b6a:	6041      	str	r1, [r0, #4]
 8004b6c:	4658      	mov	r0, fp
 8004b6e:	f000 fd8d 	bl	800568c <_Balloc>
 8004b72:	4682      	mov	sl, r0
 8004b74:	2800      	cmp	r0, #0
 8004b76:	d139      	bne.n	8004bec <_dtoa_r+0x2ec>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004be8 <_dtoa_r+0x2e8>)
 8004b80:	e6d2      	b.n	8004928 <_dtoa_r+0x28>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7e0      	b.n	8004b48 <_dtoa_r+0x248>
 8004b86:	2401      	movs	r4, #1
 8004b88:	2300      	movs	r3, #0
 8004b8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	2200      	movs	r2, #0
 8004b94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004b98:	2312      	movs	r3, #18
 8004b9a:	e7d0      	b.n	8004b3e <_dtoa_r+0x23e>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ba0:	e7f5      	b.n	8004b8e <_dtoa_r+0x28e>
 8004ba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004ba8:	e7d7      	b.n	8004b5a <_dtoa_r+0x25a>
 8004baa:	3101      	adds	r1, #1
 8004bac:	0052      	lsls	r2, r2, #1
 8004bae:	e7d8      	b.n	8004b62 <_dtoa_r+0x262>
 8004bb0:	636f4361 	.word	0x636f4361
 8004bb4:	3fd287a7 	.word	0x3fd287a7
 8004bb8:	8b60c8b3 	.word	0x8b60c8b3
 8004bbc:	3fc68a28 	.word	0x3fc68a28
 8004bc0:	509f79fb 	.word	0x509f79fb
 8004bc4:	3fd34413 	.word	0x3fd34413
 8004bc8:	08006620 	.word	0x08006620
 8004bcc:	08006637 	.word	0x08006637
 8004bd0:	7ff00000 	.word	0x7ff00000
 8004bd4:	0800661c 	.word	0x0800661c
 8004bd8:	080065f0 	.word	0x080065f0
 8004bdc:	080065ef 	.word	0x080065ef
 8004be0:	3ff80000 	.word	0x3ff80000
 8004be4:	08006730 	.word	0x08006730
 8004be8:	0800668f 	.word	0x0800668f
 8004bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004bf0:	6018      	str	r0, [r3, #0]
 8004bf2:	9b07      	ldr	r3, [sp, #28]
 8004bf4:	2b0e      	cmp	r3, #14
 8004bf6:	f200 80a4 	bhi.w	8004d42 <_dtoa_r+0x442>
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	f000 80a1 	beq.w	8004d42 <_dtoa_r+0x442>
 8004c00:	2f00      	cmp	r7, #0
 8004c02:	dd33      	ble.n	8004c6c <_dtoa_r+0x36c>
 8004c04:	4b86      	ldr	r3, [pc, #536]	@ (8004e20 <_dtoa_r+0x520>)
 8004c06:	f007 020f 	and.w	r2, r7, #15
 8004c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c0e:	05f8      	lsls	r0, r7, #23
 8004c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c1c:	d516      	bpl.n	8004c4c <_dtoa_r+0x34c>
 8004c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c22:	4b80      	ldr	r3, [pc, #512]	@ (8004e24 <_dtoa_r+0x524>)
 8004c24:	2603      	movs	r6, #3
 8004c26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c2a:	f7fb fd7f 	bl	800072c <__aeabi_ddiv>
 8004c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c32:	f004 040f 	and.w	r4, r4, #15
 8004c36:	4d7b      	ldr	r5, [pc, #492]	@ (8004e24 <_dtoa_r+0x524>)
 8004c38:	b954      	cbnz	r4, 8004c50 <_dtoa_r+0x350>
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c42:	f7fb fd73 	bl	800072c <__aeabi_ddiv>
 8004c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c4a:	e028      	b.n	8004c9e <_dtoa_r+0x39e>
 8004c4c:	2602      	movs	r6, #2
 8004c4e:	e7f2      	b.n	8004c36 <_dtoa_r+0x336>
 8004c50:	07e1      	lsls	r1, r4, #31
 8004c52:	d508      	bpl.n	8004c66 <_dtoa_r+0x366>
 8004c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c5c:	f7fb fc3c 	bl	80004d8 <__aeabi_dmul>
 8004c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c64:	3601      	adds	r6, #1
 8004c66:	1064      	asrs	r4, r4, #1
 8004c68:	3508      	adds	r5, #8
 8004c6a:	e7e5      	b.n	8004c38 <_dtoa_r+0x338>
 8004c6c:	f000 80d2 	beq.w	8004e14 <_dtoa_r+0x514>
 8004c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c74:	427c      	negs	r4, r7
 8004c76:	4b6a      	ldr	r3, [pc, #424]	@ (8004e20 <_dtoa_r+0x520>)
 8004c78:	f004 020f 	and.w	r2, r4, #15
 8004c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fc28 	bl	80004d8 <__aeabi_dmul>
 8004c88:	2602      	movs	r6, #2
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c90:	4d64      	ldr	r5, [pc, #400]	@ (8004e24 <_dtoa_r+0x524>)
 8004c92:	1124      	asrs	r4, r4, #4
 8004c94:	2c00      	cmp	r4, #0
 8004c96:	f040 80b2 	bne.w	8004dfe <_dtoa_r+0x4fe>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1d3      	bne.n	8004c46 <_dtoa_r+0x346>
 8004c9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80b7 	beq.w	8004e18 <_dtoa_r+0x518>
 8004caa:	2200      	movs	r2, #0
 8004cac:	4620      	mov	r0, r4
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8004e28 <_dtoa_r+0x528>)
 8004cb2:	f7fb fe83 	bl	80009bc <__aeabi_dcmplt>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	f000 80ae 	beq.w	8004e18 <_dtoa_r+0x518>
 8004cbc:	9b07      	ldr	r3, [sp, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80aa 	beq.w	8004e18 <_dtoa_r+0x518>
 8004cc4:	9b08      	ldr	r3, [sp, #32]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd37      	ble.n	8004d3a <_dtoa_r+0x43a>
 8004cca:	1e7b      	subs	r3, r7, #1
 8004ccc:	4620      	mov	r0, r4
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4b55      	ldr	r3, [pc, #340]	@ (8004e2c <_dtoa_r+0x52c>)
 8004cd6:	f7fb fbff 	bl	80004d8 <__aeabi_dmul>
 8004cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cde:	9c08      	ldr	r4, [sp, #32]
 8004ce0:	3601      	adds	r6, #1
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f7fb fb8e 	bl	8000404 <__aeabi_i2d>
 8004ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cec:	f7fb fbf4 	bl	80004d8 <__aeabi_dmul>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e30 <_dtoa_r+0x530>)
 8004cf4:	f7fb fa3a 	bl	800016c <__adddf3>
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004cfe:	2c00      	cmp	r4, #0
 8004d00:	f040 809a 	bne.w	8004e38 <_dtoa_r+0x538>
 8004d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e34 <_dtoa_r+0x534>)
 8004d0c:	f7fb fa2c 	bl	8000168 <__aeabi_dsub>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d18:	462a      	mov	r2, r5
 8004d1a:	4633      	mov	r3, r6
 8004d1c:	f7fb fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	f040 828e 	bne.w	8005242 <_dtoa_r+0x942>
 8004d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d2a:	462a      	mov	r2, r5
 8004d2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d30:	f7fb fe44 	bl	80009bc <__aeabi_dcmplt>
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f040 8127 	bne.w	8004f88 <_dtoa_r+0x688>
 8004d3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f2c0 8163 	blt.w	8005010 <_dtoa_r+0x710>
 8004d4a:	2f0e      	cmp	r7, #14
 8004d4c:	f300 8160 	bgt.w	8005010 <_dtoa_r+0x710>
 8004d50:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <_dtoa_r+0x520>)
 8004d52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004d5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	da03      	bge.n	8004d6c <_dtoa_r+0x46c>
 8004d64:	9b07      	ldr	r3, [sp, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f340 8100 	ble.w	8004f6c <_dtoa_r+0x66c>
 8004d6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d70:	4656      	mov	r6, sl
 8004d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d76:	4620      	mov	r0, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	f7fb fcd7 	bl	800072c <__aeabi_ddiv>
 8004d7e:	f7fb fe5b 	bl	8000a38 <__aeabi_d2iz>
 8004d82:	4680      	mov	r8, r0
 8004d84:	f7fb fb3e 	bl	8000404 <__aeabi_i2d>
 8004d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d8c:	f7fb fba4 	bl	80004d8 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f7fb f9e6 	bl	8000168 <__aeabi_dsub>
 8004d9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004da0:	9d07      	ldr	r5, [sp, #28]
 8004da2:	f806 4b01 	strb.w	r4, [r6], #1
 8004da6:	eba6 040a 	sub.w	r4, r6, sl
 8004daa:	42a5      	cmp	r5, r4
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	f040 8116 	bne.w	8004fe0 <_dtoa_r+0x6e0>
 8004db4:	f7fb f9da 	bl	800016c <__adddf3>
 8004db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dbc:	4604      	mov	r4, r0
 8004dbe:	460d      	mov	r5, r1
 8004dc0:	f7fb fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	f040 80f8 	bne.w	8004fba <_dtoa_r+0x6ba>
 8004dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f7fb fde9 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd6:	b118      	cbz	r0, 8004de0 <_dtoa_r+0x4e0>
 8004dd8:	f018 0f01 	tst.w	r8, #1
 8004ddc:	f040 80ed 	bne.w	8004fba <_dtoa_r+0x6ba>
 8004de0:	4649      	mov	r1, r9
 8004de2:	4658      	mov	r0, fp
 8004de4:	f000 fc92 	bl	800570c <_Bfree>
 8004de8:	2300      	movs	r3, #0
 8004dea:	7033      	strb	r3, [r6, #0]
 8004dec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004dee:	3701      	adds	r7, #1
 8004df0:	601f      	str	r7, [r3, #0]
 8004df2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8320 	beq.w	800543a <_dtoa_r+0xb3a>
 8004dfa:	601e      	str	r6, [r3, #0]
 8004dfc:	e31d      	b.n	800543a <_dtoa_r+0xb3a>
 8004dfe:	07e2      	lsls	r2, r4, #31
 8004e00:	d505      	bpl.n	8004e0e <_dtoa_r+0x50e>
 8004e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e06:	f7fb fb67 	bl	80004d8 <__aeabi_dmul>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	1064      	asrs	r4, r4, #1
 8004e10:	3508      	adds	r5, #8
 8004e12:	e73f      	b.n	8004c94 <_dtoa_r+0x394>
 8004e14:	2602      	movs	r6, #2
 8004e16:	e742      	b.n	8004c9e <_dtoa_r+0x39e>
 8004e18:	9c07      	ldr	r4, [sp, #28]
 8004e1a:	9704      	str	r7, [sp, #16]
 8004e1c:	e761      	b.n	8004ce2 <_dtoa_r+0x3e2>
 8004e1e:	bf00      	nop
 8004e20:	08006730 	.word	0x08006730
 8004e24:	08006708 	.word	0x08006708
 8004e28:	3ff00000 	.word	0x3ff00000
 8004e2c:	40240000 	.word	0x40240000
 8004e30:	401c0000 	.word	0x401c0000
 8004e34:	40140000 	.word	0x40140000
 8004e38:	4b70      	ldr	r3, [pc, #448]	@ (8004ffc <_dtoa_r+0x6fc>)
 8004e3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e44:	4454      	add	r4, sl
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d045      	beq.n	8004ed6 <_dtoa_r+0x5d6>
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	496c      	ldr	r1, [pc, #432]	@ (8005000 <_dtoa_r+0x700>)
 8004e4e:	f7fb fc6d 	bl	800072c <__aeabi_ddiv>
 8004e52:	4633      	mov	r3, r6
 8004e54:	462a      	mov	r2, r5
 8004e56:	f7fb f987 	bl	8000168 <__aeabi_dsub>
 8004e5a:	4656      	mov	r6, sl
 8004e5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e64:	f7fb fde8 	bl	8000a38 <__aeabi_d2iz>
 8004e68:	4605      	mov	r5, r0
 8004e6a:	f7fb facb 	bl	8000404 <__aeabi_i2d>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e76:	f7fb f977 	bl	8000168 <__aeabi_dsub>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	3530      	adds	r5, #48	@ 0x30
 8004e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e88:	f806 5b01 	strb.w	r5, [r6], #1
 8004e8c:	f7fb fd96 	bl	80009bc <__aeabi_dcmplt>
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d163      	bne.n	8004f5c <_dtoa_r+0x65c>
 8004e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e98:	2000      	movs	r0, #0
 8004e9a:	495a      	ldr	r1, [pc, #360]	@ (8005004 <_dtoa_r+0x704>)
 8004e9c:	f7fb f964 	bl	8000168 <__aeabi_dsub>
 8004ea0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004ea4:	f7fb fd8a 	bl	80009bc <__aeabi_dcmplt>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	f040 8087 	bne.w	8004fbc <_dtoa_r+0x6bc>
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	f43f af43 	beq.w	8004d3a <_dtoa_r+0x43a>
 8004eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4b53      	ldr	r3, [pc, #332]	@ (8005008 <_dtoa_r+0x708>)
 8004ebc:	f7fb fb0c 	bl	80004d8 <__aeabi_dmul>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eca:	4b4f      	ldr	r3, [pc, #316]	@ (8005008 <_dtoa_r+0x708>)
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ed4:	e7c4      	b.n	8004e60 <_dtoa_r+0x560>
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7fb fafd 	bl	80004d8 <__aeabi_dmul>
 8004ede:	4656      	mov	r6, sl
 8004ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ee4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eea:	f7fb fda5 	bl	8000a38 <__aeabi_d2iz>
 8004eee:	4605      	mov	r5, r0
 8004ef0:	f7fb fa88 	bl	8000404 <__aeabi_i2d>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004efc:	f7fb f934 	bl	8000168 <__aeabi_dsub>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	3530      	adds	r5, #48	@ 0x30
 8004f06:	f806 5b01 	strb.w	r5, [r6], #1
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	d124      	bne.n	8004f60 <_dtoa_r+0x660>
 8004f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f1a:	4b39      	ldr	r3, [pc, #228]	@ (8005000 <_dtoa_r+0x700>)
 8004f1c:	f7fb f926 	bl	800016c <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f28:	f7fb fd66 	bl	80009f8 <__aeabi_dcmpgt>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d145      	bne.n	8004fbc <_dtoa_r+0x6bc>
 8004f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f34:	2000      	movs	r0, #0
 8004f36:	4932      	ldr	r1, [pc, #200]	@ (8005000 <_dtoa_r+0x700>)
 8004f38:	f7fb f916 	bl	8000168 <__aeabi_dsub>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f44:	f7fb fd3a 	bl	80009bc <__aeabi_dcmplt>
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	f43f aef6 	beq.w	8004d3a <_dtoa_r+0x43a>
 8004f4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f50:	1e73      	subs	r3, r6, #1
 8004f52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d0f8      	beq.n	8004f4e <_dtoa_r+0x64e>
 8004f5c:	9f04      	ldr	r7, [sp, #16]
 8004f5e:	e73f      	b.n	8004de0 <_dtoa_r+0x4e0>
 8004f60:	4b29      	ldr	r3, [pc, #164]	@ (8005008 <_dtoa_r+0x708>)
 8004f62:	f7fb fab9 	bl	80004d8 <__aeabi_dmul>
 8004f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f6a:	e7bc      	b.n	8004ee6 <_dtoa_r+0x5e6>
 8004f6c:	d10c      	bne.n	8004f88 <_dtoa_r+0x688>
 8004f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f72:	2200      	movs	r2, #0
 8004f74:	4b25      	ldr	r3, [pc, #148]	@ (800500c <_dtoa_r+0x70c>)
 8004f76:	f7fb faaf 	bl	80004d8 <__aeabi_dmul>
 8004f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7e:	f7fb fd31 	bl	80009e4 <__aeabi_dcmpge>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	f000 815b 	beq.w	800523e <_dtoa_r+0x93e>
 8004f88:	2400      	movs	r4, #0
 8004f8a:	4625      	mov	r5, r4
 8004f8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004f8e:	4656      	mov	r6, sl
 8004f90:	43db      	mvns	r3, r3
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	2700      	movs	r7, #0
 8004f96:	4621      	mov	r1, r4
 8004f98:	4658      	mov	r0, fp
 8004f9a:	f000 fbb7 	bl	800570c <_Bfree>
 8004f9e:	2d00      	cmp	r5, #0
 8004fa0:	d0dc      	beq.n	8004f5c <_dtoa_r+0x65c>
 8004fa2:	b12f      	cbz	r7, 8004fb0 <_dtoa_r+0x6b0>
 8004fa4:	42af      	cmp	r7, r5
 8004fa6:	d003      	beq.n	8004fb0 <_dtoa_r+0x6b0>
 8004fa8:	4639      	mov	r1, r7
 8004faa:	4658      	mov	r0, fp
 8004fac:	f000 fbae 	bl	800570c <_Bfree>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4658      	mov	r0, fp
 8004fb4:	f000 fbaa 	bl	800570c <_Bfree>
 8004fb8:	e7d0      	b.n	8004f5c <_dtoa_r+0x65c>
 8004fba:	9704      	str	r7, [sp, #16]
 8004fbc:	4633      	mov	r3, r6
 8004fbe:	461e      	mov	r6, r3
 8004fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fc4:	2a39      	cmp	r2, #57	@ 0x39
 8004fc6:	d107      	bne.n	8004fd8 <_dtoa_r+0x6d8>
 8004fc8:	459a      	cmp	sl, r3
 8004fca:	d1f8      	bne.n	8004fbe <_dtoa_r+0x6be>
 8004fcc:	9a04      	ldr	r2, [sp, #16]
 8004fce:	3201      	adds	r2, #1
 8004fd0:	9204      	str	r2, [sp, #16]
 8004fd2:	2230      	movs	r2, #48	@ 0x30
 8004fd4:	f88a 2000 	strb.w	r2, [sl]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	e7bd      	b.n	8004f5c <_dtoa_r+0x65c>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4b09      	ldr	r3, [pc, #36]	@ (8005008 <_dtoa_r+0x708>)
 8004fe4:	f7fb fa78 	bl	80004d8 <__aeabi_dmul>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	4604      	mov	r4, r0
 8004fee:	460d      	mov	r5, r1
 8004ff0:	f7fb fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	f43f aebc 	beq.w	8004d72 <_dtoa_r+0x472>
 8004ffa:	e6f1      	b.n	8004de0 <_dtoa_r+0x4e0>
 8004ffc:	08006730 	.word	0x08006730
 8005000:	3fe00000 	.word	0x3fe00000
 8005004:	3ff00000 	.word	0x3ff00000
 8005008:	40240000 	.word	0x40240000
 800500c:	40140000 	.word	0x40140000
 8005010:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005012:	2a00      	cmp	r2, #0
 8005014:	f000 80db 	beq.w	80051ce <_dtoa_r+0x8ce>
 8005018:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800501a:	2a01      	cmp	r2, #1
 800501c:	f300 80bf 	bgt.w	800519e <_dtoa_r+0x89e>
 8005020:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005022:	2a00      	cmp	r2, #0
 8005024:	f000 80b7 	beq.w	8005196 <_dtoa_r+0x896>
 8005028:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800502c:	4646      	mov	r6, r8
 800502e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005032:	2101      	movs	r1, #1
 8005034:	441a      	add	r2, r3
 8005036:	4658      	mov	r0, fp
 8005038:	4498      	add	r8, r3
 800503a:	9209      	str	r2, [sp, #36]	@ 0x24
 800503c:	f000 fc1a 	bl	8005874 <__i2b>
 8005040:	4605      	mov	r5, r0
 8005042:	b15e      	cbz	r6, 800505c <_dtoa_r+0x75c>
 8005044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005046:	2b00      	cmp	r3, #0
 8005048:	dd08      	ble.n	800505c <_dtoa_r+0x75c>
 800504a:	42b3      	cmp	r3, r6
 800504c:	bfa8      	it	ge
 800504e:	4633      	movge	r3, r6
 8005050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005052:	eba8 0803 	sub.w	r8, r8, r3
 8005056:	1af6      	subs	r6, r6, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	9309      	str	r3, [sp, #36]	@ 0x24
 800505c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800505e:	b1f3      	cbz	r3, 800509e <_dtoa_r+0x79e>
 8005060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80b7 	beq.w	80051d6 <_dtoa_r+0x8d6>
 8005068:	b18c      	cbz	r4, 800508e <_dtoa_r+0x78e>
 800506a:	4629      	mov	r1, r5
 800506c:	4622      	mov	r2, r4
 800506e:	4658      	mov	r0, fp
 8005070:	f000 fcbe 	bl	80059f0 <__pow5mult>
 8005074:	464a      	mov	r2, r9
 8005076:	4601      	mov	r1, r0
 8005078:	4605      	mov	r5, r0
 800507a:	4658      	mov	r0, fp
 800507c:	f000 fc10 	bl	80058a0 <__multiply>
 8005080:	4649      	mov	r1, r9
 8005082:	9004      	str	r0, [sp, #16]
 8005084:	4658      	mov	r0, fp
 8005086:	f000 fb41 	bl	800570c <_Bfree>
 800508a:	9b04      	ldr	r3, [sp, #16]
 800508c:	4699      	mov	r9, r3
 800508e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005090:	1b1a      	subs	r2, r3, r4
 8005092:	d004      	beq.n	800509e <_dtoa_r+0x79e>
 8005094:	4649      	mov	r1, r9
 8005096:	4658      	mov	r0, fp
 8005098:	f000 fcaa 	bl	80059f0 <__pow5mult>
 800509c:	4681      	mov	r9, r0
 800509e:	2101      	movs	r1, #1
 80050a0:	4658      	mov	r0, fp
 80050a2:	f000 fbe7 	bl	8005874 <__i2b>
 80050a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050a8:	4604      	mov	r4, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 81c9 	beq.w	8005442 <_dtoa_r+0xb42>
 80050b0:	461a      	mov	r2, r3
 80050b2:	4601      	mov	r1, r0
 80050b4:	4658      	mov	r0, fp
 80050b6:	f000 fc9b 	bl	80059f0 <__pow5mult>
 80050ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050bc:	4604      	mov	r4, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	f300 808f 	bgt.w	80051e2 <_dtoa_r+0x8e2>
 80050c4:	9b02      	ldr	r3, [sp, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8087 	bne.w	80051da <_dtoa_r+0x8da>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f040 8083 	bne.w	80051de <_dtoa_r+0x8de>
 80050d8:	9b03      	ldr	r3, [sp, #12]
 80050da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050de:	0d1b      	lsrs	r3, r3, #20
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	b12b      	cbz	r3, 80050f0 <_dtoa_r+0x7f0>
 80050e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e6:	f108 0801 	add.w	r8, r8, #1
 80050ea:	3301      	adds	r3, #1
 80050ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ee:	2301      	movs	r3, #1
 80050f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80050f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 81aa 	beq.w	800544e <_dtoa_r+0xb4e>
 80050fa:	6923      	ldr	r3, [r4, #16]
 80050fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005100:	6918      	ldr	r0, [r3, #16]
 8005102:	f000 fb6b 	bl	80057dc <__hi0bits>
 8005106:	f1c0 0020 	rsb	r0, r0, #32
 800510a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800510c:	4418      	add	r0, r3
 800510e:	f010 001f 	ands.w	r0, r0, #31
 8005112:	d071      	beq.n	80051f8 <_dtoa_r+0x8f8>
 8005114:	f1c0 0320 	rsb	r3, r0, #32
 8005118:	2b04      	cmp	r3, #4
 800511a:	dd65      	ble.n	80051e8 <_dtoa_r+0x8e8>
 800511c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800511e:	f1c0 001c 	rsb	r0, r0, #28
 8005122:	4403      	add	r3, r0
 8005124:	4480      	add	r8, r0
 8005126:	4406      	add	r6, r0
 8005128:	9309      	str	r3, [sp, #36]	@ 0x24
 800512a:	f1b8 0f00 	cmp.w	r8, #0
 800512e:	dd05      	ble.n	800513c <_dtoa_r+0x83c>
 8005130:	4649      	mov	r1, r9
 8005132:	4642      	mov	r2, r8
 8005134:	4658      	mov	r0, fp
 8005136:	f000 fcb5 	bl	8005aa4 <__lshift>
 800513a:	4681      	mov	r9, r0
 800513c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	dd05      	ble.n	800514e <_dtoa_r+0x84e>
 8005142:	4621      	mov	r1, r4
 8005144:	461a      	mov	r2, r3
 8005146:	4658      	mov	r0, fp
 8005148:	f000 fcac 	bl	8005aa4 <__lshift>
 800514c:	4604      	mov	r4, r0
 800514e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d053      	beq.n	80051fc <_dtoa_r+0x8fc>
 8005154:	4621      	mov	r1, r4
 8005156:	4648      	mov	r0, r9
 8005158:	f000 fd10 	bl	8005b7c <__mcmp>
 800515c:	2800      	cmp	r0, #0
 800515e:	da4d      	bge.n	80051fc <_dtoa_r+0x8fc>
 8005160:	1e7b      	subs	r3, r7, #1
 8005162:	4649      	mov	r1, r9
 8005164:	9304      	str	r3, [sp, #16]
 8005166:	220a      	movs	r2, #10
 8005168:	2300      	movs	r3, #0
 800516a:	4658      	mov	r0, fp
 800516c:	f000 faf0 	bl	8005750 <__multadd>
 8005170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005172:	4681      	mov	r9, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 816c 	beq.w	8005452 <_dtoa_r+0xb52>
 800517a:	2300      	movs	r3, #0
 800517c:	4629      	mov	r1, r5
 800517e:	220a      	movs	r2, #10
 8005180:	4658      	mov	r0, fp
 8005182:	f000 fae5 	bl	8005750 <__multadd>
 8005186:	9b08      	ldr	r3, [sp, #32]
 8005188:	4605      	mov	r5, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	dc61      	bgt.n	8005252 <_dtoa_r+0x952>
 800518e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005190:	2b02      	cmp	r3, #2
 8005192:	dc3b      	bgt.n	800520c <_dtoa_r+0x90c>
 8005194:	e05d      	b.n	8005252 <_dtoa_r+0x952>
 8005196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005198:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800519c:	e746      	b.n	800502c <_dtoa_r+0x72c>
 800519e:	9b07      	ldr	r3, [sp, #28]
 80051a0:	1e5c      	subs	r4, r3, #1
 80051a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	bfbf      	itttt	lt
 80051a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80051aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80051ac:	1ae3      	sublt	r3, r4, r3
 80051ae:	18d2      	addlt	r2, r2, r3
 80051b0:	bfa8      	it	ge
 80051b2:	1b1c      	subge	r4, r3, r4
 80051b4:	9b07      	ldr	r3, [sp, #28]
 80051b6:	bfbe      	ittt	lt
 80051b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80051ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80051bc:	2400      	movlt	r4, #0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	bfb5      	itete	lt
 80051c2:	eba8 0603 	sublt.w	r6, r8, r3
 80051c6:	4646      	movge	r6, r8
 80051c8:	2300      	movlt	r3, #0
 80051ca:	9b07      	ldrge	r3, [sp, #28]
 80051cc:	e730      	b.n	8005030 <_dtoa_r+0x730>
 80051ce:	4646      	mov	r6, r8
 80051d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051d4:	e735      	b.n	8005042 <_dtoa_r+0x742>
 80051d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051d8:	e75c      	b.n	8005094 <_dtoa_r+0x794>
 80051da:	2300      	movs	r3, #0
 80051dc:	e788      	b.n	80050f0 <_dtoa_r+0x7f0>
 80051de:	9b02      	ldr	r3, [sp, #8]
 80051e0:	e786      	b.n	80050f0 <_dtoa_r+0x7f0>
 80051e2:	2300      	movs	r3, #0
 80051e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80051e6:	e788      	b.n	80050fa <_dtoa_r+0x7fa>
 80051e8:	d09f      	beq.n	800512a <_dtoa_r+0x82a>
 80051ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051ec:	331c      	adds	r3, #28
 80051ee:	441a      	add	r2, r3
 80051f0:	4498      	add	r8, r3
 80051f2:	441e      	add	r6, r3
 80051f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051f6:	e798      	b.n	800512a <_dtoa_r+0x82a>
 80051f8:	4603      	mov	r3, r0
 80051fa:	e7f6      	b.n	80051ea <_dtoa_r+0x8ea>
 80051fc:	9b07      	ldr	r3, [sp, #28]
 80051fe:	9704      	str	r7, [sp, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	dc20      	bgt.n	8005246 <_dtoa_r+0x946>
 8005204:	9308      	str	r3, [sp, #32]
 8005206:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005208:	2b02      	cmp	r3, #2
 800520a:	dd1e      	ble.n	800524a <_dtoa_r+0x94a>
 800520c:	9b08      	ldr	r3, [sp, #32]
 800520e:	2b00      	cmp	r3, #0
 8005210:	f47f aebc 	bne.w	8004f8c <_dtoa_r+0x68c>
 8005214:	4621      	mov	r1, r4
 8005216:	2205      	movs	r2, #5
 8005218:	4658      	mov	r0, fp
 800521a:	f000 fa99 	bl	8005750 <__multadd>
 800521e:	4601      	mov	r1, r0
 8005220:	4604      	mov	r4, r0
 8005222:	4648      	mov	r0, r9
 8005224:	f000 fcaa 	bl	8005b7c <__mcmp>
 8005228:	2800      	cmp	r0, #0
 800522a:	f77f aeaf 	ble.w	8004f8c <_dtoa_r+0x68c>
 800522e:	2331      	movs	r3, #49	@ 0x31
 8005230:	4656      	mov	r6, sl
 8005232:	f806 3b01 	strb.w	r3, [r6], #1
 8005236:	9b04      	ldr	r3, [sp, #16]
 8005238:	3301      	adds	r3, #1
 800523a:	9304      	str	r3, [sp, #16]
 800523c:	e6aa      	b.n	8004f94 <_dtoa_r+0x694>
 800523e:	9c07      	ldr	r4, [sp, #28]
 8005240:	9704      	str	r7, [sp, #16]
 8005242:	4625      	mov	r5, r4
 8005244:	e7f3      	b.n	800522e <_dtoa_r+0x92e>
 8005246:	9b07      	ldr	r3, [sp, #28]
 8005248:	9308      	str	r3, [sp, #32]
 800524a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8104 	beq.w	800545a <_dtoa_r+0xb5a>
 8005252:	2e00      	cmp	r6, #0
 8005254:	dd05      	ble.n	8005262 <_dtoa_r+0x962>
 8005256:	4629      	mov	r1, r5
 8005258:	4632      	mov	r2, r6
 800525a:	4658      	mov	r0, fp
 800525c:	f000 fc22 	bl	8005aa4 <__lshift>
 8005260:	4605      	mov	r5, r0
 8005262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05a      	beq.n	800531e <_dtoa_r+0xa1e>
 8005268:	4658      	mov	r0, fp
 800526a:	6869      	ldr	r1, [r5, #4]
 800526c:	f000 fa0e 	bl	800568c <_Balloc>
 8005270:	4606      	mov	r6, r0
 8005272:	b928      	cbnz	r0, 8005280 <_dtoa_r+0x980>
 8005274:	4602      	mov	r2, r0
 8005276:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800527a:	4b83      	ldr	r3, [pc, #524]	@ (8005488 <_dtoa_r+0xb88>)
 800527c:	f7ff bb54 	b.w	8004928 <_dtoa_r+0x28>
 8005280:	692a      	ldr	r2, [r5, #16]
 8005282:	f105 010c 	add.w	r1, r5, #12
 8005286:	3202      	adds	r2, #2
 8005288:	0092      	lsls	r2, r2, #2
 800528a:	300c      	adds	r0, #12
 800528c:	f000 fe36 	bl	8005efc <memcpy>
 8005290:	2201      	movs	r2, #1
 8005292:	4631      	mov	r1, r6
 8005294:	4658      	mov	r0, fp
 8005296:	f000 fc05 	bl	8005aa4 <__lshift>
 800529a:	462f      	mov	r7, r5
 800529c:	4605      	mov	r5, r0
 800529e:	f10a 0301 	add.w	r3, sl, #1
 80052a2:	9307      	str	r3, [sp, #28]
 80052a4:	9b08      	ldr	r3, [sp, #32]
 80052a6:	4453      	add	r3, sl
 80052a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052aa:	9b02      	ldr	r3, [sp, #8]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052b2:	9b07      	ldr	r3, [sp, #28]
 80052b4:	4621      	mov	r1, r4
 80052b6:	3b01      	subs	r3, #1
 80052b8:	4648      	mov	r0, r9
 80052ba:	9302      	str	r3, [sp, #8]
 80052bc:	f7ff fa97 	bl	80047ee <quorem>
 80052c0:	4639      	mov	r1, r7
 80052c2:	9008      	str	r0, [sp, #32]
 80052c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052c8:	4648      	mov	r0, r9
 80052ca:	f000 fc57 	bl	8005b7c <__mcmp>
 80052ce:	462a      	mov	r2, r5
 80052d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80052d2:	4621      	mov	r1, r4
 80052d4:	4658      	mov	r0, fp
 80052d6:	f000 fc6d 	bl	8005bb4 <__mdiff>
 80052da:	68c2      	ldr	r2, [r0, #12]
 80052dc:	4606      	mov	r6, r0
 80052de:	bb02      	cbnz	r2, 8005322 <_dtoa_r+0xa22>
 80052e0:	4601      	mov	r1, r0
 80052e2:	4648      	mov	r0, r9
 80052e4:	f000 fc4a 	bl	8005b7c <__mcmp>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4631      	mov	r1, r6
 80052ec:	4658      	mov	r0, fp
 80052ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80052f0:	f000 fa0c 	bl	800570c <_Bfree>
 80052f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80052f8:	9e07      	ldr	r6, [sp, #28]
 80052fa:	ea43 0102 	orr.w	r1, r3, r2
 80052fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005300:	4319      	orrs	r1, r3
 8005302:	d110      	bne.n	8005326 <_dtoa_r+0xa26>
 8005304:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005308:	d029      	beq.n	800535e <_dtoa_r+0xa5e>
 800530a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530c:	2b00      	cmp	r3, #0
 800530e:	dd02      	ble.n	8005316 <_dtoa_r+0xa16>
 8005310:	9b08      	ldr	r3, [sp, #32]
 8005312:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005316:	9b02      	ldr	r3, [sp, #8]
 8005318:	f883 8000 	strb.w	r8, [r3]
 800531c:	e63b      	b.n	8004f96 <_dtoa_r+0x696>
 800531e:	4628      	mov	r0, r5
 8005320:	e7bb      	b.n	800529a <_dtoa_r+0x99a>
 8005322:	2201      	movs	r2, #1
 8005324:	e7e1      	b.n	80052ea <_dtoa_r+0x9ea>
 8005326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	db04      	blt.n	8005336 <_dtoa_r+0xa36>
 800532c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800532e:	430b      	orrs	r3, r1
 8005330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005332:	430b      	orrs	r3, r1
 8005334:	d120      	bne.n	8005378 <_dtoa_r+0xa78>
 8005336:	2a00      	cmp	r2, #0
 8005338:	dded      	ble.n	8005316 <_dtoa_r+0xa16>
 800533a:	4649      	mov	r1, r9
 800533c:	2201      	movs	r2, #1
 800533e:	4658      	mov	r0, fp
 8005340:	f000 fbb0 	bl	8005aa4 <__lshift>
 8005344:	4621      	mov	r1, r4
 8005346:	4681      	mov	r9, r0
 8005348:	f000 fc18 	bl	8005b7c <__mcmp>
 800534c:	2800      	cmp	r0, #0
 800534e:	dc03      	bgt.n	8005358 <_dtoa_r+0xa58>
 8005350:	d1e1      	bne.n	8005316 <_dtoa_r+0xa16>
 8005352:	f018 0f01 	tst.w	r8, #1
 8005356:	d0de      	beq.n	8005316 <_dtoa_r+0xa16>
 8005358:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800535c:	d1d8      	bne.n	8005310 <_dtoa_r+0xa10>
 800535e:	2339      	movs	r3, #57	@ 0x39
 8005360:	9a02      	ldr	r2, [sp, #8]
 8005362:	7013      	strb	r3, [r2, #0]
 8005364:	4633      	mov	r3, r6
 8005366:	461e      	mov	r6, r3
 8005368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800536c:	3b01      	subs	r3, #1
 800536e:	2a39      	cmp	r2, #57	@ 0x39
 8005370:	d052      	beq.n	8005418 <_dtoa_r+0xb18>
 8005372:	3201      	adds	r2, #1
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	e60e      	b.n	8004f96 <_dtoa_r+0x696>
 8005378:	2a00      	cmp	r2, #0
 800537a:	dd07      	ble.n	800538c <_dtoa_r+0xa8c>
 800537c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005380:	d0ed      	beq.n	800535e <_dtoa_r+0xa5e>
 8005382:	9a02      	ldr	r2, [sp, #8]
 8005384:	f108 0301 	add.w	r3, r8, #1
 8005388:	7013      	strb	r3, [r2, #0]
 800538a:	e604      	b.n	8004f96 <_dtoa_r+0x696>
 800538c:	9b07      	ldr	r3, [sp, #28]
 800538e:	9a07      	ldr	r2, [sp, #28]
 8005390:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005396:	4293      	cmp	r3, r2
 8005398:	d028      	beq.n	80053ec <_dtoa_r+0xaec>
 800539a:	4649      	mov	r1, r9
 800539c:	2300      	movs	r3, #0
 800539e:	220a      	movs	r2, #10
 80053a0:	4658      	mov	r0, fp
 80053a2:	f000 f9d5 	bl	8005750 <__multadd>
 80053a6:	42af      	cmp	r7, r5
 80053a8:	4681      	mov	r9, r0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f04f 020a 	mov.w	r2, #10
 80053b2:	4639      	mov	r1, r7
 80053b4:	4658      	mov	r0, fp
 80053b6:	d107      	bne.n	80053c8 <_dtoa_r+0xac8>
 80053b8:	f000 f9ca 	bl	8005750 <__multadd>
 80053bc:	4607      	mov	r7, r0
 80053be:	4605      	mov	r5, r0
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	3301      	adds	r3, #1
 80053c4:	9307      	str	r3, [sp, #28]
 80053c6:	e774      	b.n	80052b2 <_dtoa_r+0x9b2>
 80053c8:	f000 f9c2 	bl	8005750 <__multadd>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4607      	mov	r7, r0
 80053d0:	2300      	movs	r3, #0
 80053d2:	220a      	movs	r2, #10
 80053d4:	4658      	mov	r0, fp
 80053d6:	f000 f9bb 	bl	8005750 <__multadd>
 80053da:	4605      	mov	r5, r0
 80053dc:	e7f0      	b.n	80053c0 <_dtoa_r+0xac0>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	2700      	movs	r7, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bfcc      	ite	gt
 80053e6:	461e      	movgt	r6, r3
 80053e8:	2601      	movle	r6, #1
 80053ea:	4456      	add	r6, sl
 80053ec:	4649      	mov	r1, r9
 80053ee:	2201      	movs	r2, #1
 80053f0:	4658      	mov	r0, fp
 80053f2:	f000 fb57 	bl	8005aa4 <__lshift>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4681      	mov	r9, r0
 80053fa:	f000 fbbf 	bl	8005b7c <__mcmp>
 80053fe:	2800      	cmp	r0, #0
 8005400:	dcb0      	bgt.n	8005364 <_dtoa_r+0xa64>
 8005402:	d102      	bne.n	800540a <_dtoa_r+0xb0a>
 8005404:	f018 0f01 	tst.w	r8, #1
 8005408:	d1ac      	bne.n	8005364 <_dtoa_r+0xa64>
 800540a:	4633      	mov	r3, r6
 800540c:	461e      	mov	r6, r3
 800540e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005412:	2a30      	cmp	r2, #48	@ 0x30
 8005414:	d0fa      	beq.n	800540c <_dtoa_r+0xb0c>
 8005416:	e5be      	b.n	8004f96 <_dtoa_r+0x696>
 8005418:	459a      	cmp	sl, r3
 800541a:	d1a4      	bne.n	8005366 <_dtoa_r+0xa66>
 800541c:	9b04      	ldr	r3, [sp, #16]
 800541e:	3301      	adds	r3, #1
 8005420:	9304      	str	r3, [sp, #16]
 8005422:	2331      	movs	r3, #49	@ 0x31
 8005424:	f88a 3000 	strb.w	r3, [sl]
 8005428:	e5b5      	b.n	8004f96 <_dtoa_r+0x696>
 800542a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800542c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800548c <_dtoa_r+0xb8c>
 8005430:	b11b      	cbz	r3, 800543a <_dtoa_r+0xb3a>
 8005432:	f10a 0308 	add.w	r3, sl, #8
 8005436:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4650      	mov	r0, sl
 800543c:	b017      	add	sp, #92	@ 0x5c
 800543e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005444:	2b01      	cmp	r3, #1
 8005446:	f77f ae3d 	ble.w	80050c4 <_dtoa_r+0x7c4>
 800544a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800544c:	930a      	str	r3, [sp, #40]	@ 0x28
 800544e:	2001      	movs	r0, #1
 8005450:	e65b      	b.n	800510a <_dtoa_r+0x80a>
 8005452:	9b08      	ldr	r3, [sp, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f77f aed6 	ble.w	8005206 <_dtoa_r+0x906>
 800545a:	4656      	mov	r6, sl
 800545c:	4621      	mov	r1, r4
 800545e:	4648      	mov	r0, r9
 8005460:	f7ff f9c5 	bl	80047ee <quorem>
 8005464:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005468:	9b08      	ldr	r3, [sp, #32]
 800546a:	f806 8b01 	strb.w	r8, [r6], #1
 800546e:	eba6 020a 	sub.w	r2, r6, sl
 8005472:	4293      	cmp	r3, r2
 8005474:	ddb3      	ble.n	80053de <_dtoa_r+0xade>
 8005476:	4649      	mov	r1, r9
 8005478:	2300      	movs	r3, #0
 800547a:	220a      	movs	r2, #10
 800547c:	4658      	mov	r0, fp
 800547e:	f000 f967 	bl	8005750 <__multadd>
 8005482:	4681      	mov	r9, r0
 8005484:	e7ea      	b.n	800545c <_dtoa_r+0xb5c>
 8005486:	bf00      	nop
 8005488:	0800668f 	.word	0x0800668f
 800548c:	08006613 	.word	0x08006613

08005490 <_free_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4605      	mov	r5, r0
 8005494:	2900      	cmp	r1, #0
 8005496:	d040      	beq.n	800551a <_free_r+0x8a>
 8005498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549c:	1f0c      	subs	r4, r1, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfb8      	it	lt
 80054a2:	18e4      	addlt	r4, r4, r3
 80054a4:	f000 f8e6 	bl	8005674 <__malloc_lock>
 80054a8:	4a1c      	ldr	r2, [pc, #112]	@ (800551c <_free_r+0x8c>)
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	b933      	cbnz	r3, 80054bc <_free_r+0x2c>
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	6014      	str	r4, [r2, #0]
 80054b2:	4628      	mov	r0, r5
 80054b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054b8:	f000 b8e2 	b.w	8005680 <__malloc_unlock>
 80054bc:	42a3      	cmp	r3, r4
 80054be:	d908      	bls.n	80054d2 <_free_r+0x42>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	1821      	adds	r1, r4, r0
 80054c4:	428b      	cmp	r3, r1
 80054c6:	bf01      	itttt	eq
 80054c8:	6819      	ldreq	r1, [r3, #0]
 80054ca:	685b      	ldreq	r3, [r3, #4]
 80054cc:	1809      	addeq	r1, r1, r0
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	e7ed      	b.n	80054ae <_free_r+0x1e>
 80054d2:	461a      	mov	r2, r3
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b10b      	cbz	r3, 80054dc <_free_r+0x4c>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d9fa      	bls.n	80054d2 <_free_r+0x42>
 80054dc:	6811      	ldr	r1, [r2, #0]
 80054de:	1850      	adds	r0, r2, r1
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d10b      	bne.n	80054fc <_free_r+0x6c>
 80054e4:	6820      	ldr	r0, [r4, #0]
 80054e6:	4401      	add	r1, r0
 80054e8:	1850      	adds	r0, r2, r1
 80054ea:	4283      	cmp	r3, r0
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	d1e0      	bne.n	80054b2 <_free_r+0x22>
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4408      	add	r0, r1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	6053      	str	r3, [r2, #4]
 80054fa:	e7da      	b.n	80054b2 <_free_r+0x22>
 80054fc:	d902      	bls.n	8005504 <_free_r+0x74>
 80054fe:	230c      	movs	r3, #12
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	e7d6      	b.n	80054b2 <_free_r+0x22>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1809      	addeq	r1, r1, r0
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	6063      	str	r3, [r4, #4]
 8005516:	6054      	str	r4, [r2, #4]
 8005518:	e7cb      	b.n	80054b2 <_free_r+0x22>
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200003fc 	.word	0x200003fc

08005520 <malloc>:
 8005520:	4b02      	ldr	r3, [pc, #8]	@ (800552c <malloc+0xc>)
 8005522:	4601      	mov	r1, r0
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	f000 b825 	b.w	8005574 <_malloc_r>
 800552a:	bf00      	nop
 800552c:	20000018 	.word	0x20000018

08005530 <sbrk_aligned>:
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4e0f      	ldr	r6, [pc, #60]	@ (8005570 <sbrk_aligned+0x40>)
 8005534:	460c      	mov	r4, r1
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	4605      	mov	r5, r0
 800553a:	b911      	cbnz	r1, 8005542 <sbrk_aligned+0x12>
 800553c:	f000 fcce 	bl	8005edc <_sbrk_r>
 8005540:	6030      	str	r0, [r6, #0]
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 fcc9 	bl	8005edc <_sbrk_r>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d103      	bne.n	8005556 <sbrk_aligned+0x26>
 800554e:	f04f 34ff 	mov.w	r4, #4294967295
 8005552:	4620      	mov	r0, r4
 8005554:	bd70      	pop	{r4, r5, r6, pc}
 8005556:	1cc4      	adds	r4, r0, #3
 8005558:	f024 0403 	bic.w	r4, r4, #3
 800555c:	42a0      	cmp	r0, r4
 800555e:	d0f8      	beq.n	8005552 <sbrk_aligned+0x22>
 8005560:	1a21      	subs	r1, r4, r0
 8005562:	4628      	mov	r0, r5
 8005564:	f000 fcba 	bl	8005edc <_sbrk_r>
 8005568:	3001      	adds	r0, #1
 800556a:	d1f2      	bne.n	8005552 <sbrk_aligned+0x22>
 800556c:	e7ef      	b.n	800554e <sbrk_aligned+0x1e>
 800556e:	bf00      	nop
 8005570:	200003f8 	.word	0x200003f8

08005574 <_malloc_r>:
 8005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005578:	1ccd      	adds	r5, r1, #3
 800557a:	f025 0503 	bic.w	r5, r5, #3
 800557e:	3508      	adds	r5, #8
 8005580:	2d0c      	cmp	r5, #12
 8005582:	bf38      	it	cc
 8005584:	250c      	movcc	r5, #12
 8005586:	2d00      	cmp	r5, #0
 8005588:	4606      	mov	r6, r0
 800558a:	db01      	blt.n	8005590 <_malloc_r+0x1c>
 800558c:	42a9      	cmp	r1, r5
 800558e:	d904      	bls.n	800559a <_malloc_r+0x26>
 8005590:	230c      	movs	r3, #12
 8005592:	6033      	str	r3, [r6, #0]
 8005594:	2000      	movs	r0, #0
 8005596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800559a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005670 <_malloc_r+0xfc>
 800559e:	f000 f869 	bl	8005674 <__malloc_lock>
 80055a2:	f8d8 3000 	ldr.w	r3, [r8]
 80055a6:	461c      	mov	r4, r3
 80055a8:	bb44      	cbnz	r4, 80055fc <_malloc_r+0x88>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff ffbf 	bl	8005530 <sbrk_aligned>
 80055b2:	1c43      	adds	r3, r0, #1
 80055b4:	4604      	mov	r4, r0
 80055b6:	d158      	bne.n	800566a <_malloc_r+0xf6>
 80055b8:	f8d8 4000 	ldr.w	r4, [r8]
 80055bc:	4627      	mov	r7, r4
 80055be:	2f00      	cmp	r7, #0
 80055c0:	d143      	bne.n	800564a <_malloc_r+0xd6>
 80055c2:	2c00      	cmp	r4, #0
 80055c4:	d04b      	beq.n	800565e <_malloc_r+0xea>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	4639      	mov	r1, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	eb04 0903 	add.w	r9, r4, r3
 80055d0:	f000 fc84 	bl	8005edc <_sbrk_r>
 80055d4:	4581      	cmp	r9, r0
 80055d6:	d142      	bne.n	800565e <_malloc_r+0xea>
 80055d8:	6821      	ldr	r1, [r4, #0]
 80055da:	4630      	mov	r0, r6
 80055dc:	1a6d      	subs	r5, r5, r1
 80055de:	4629      	mov	r1, r5
 80055e0:	f7ff ffa6 	bl	8005530 <sbrk_aligned>
 80055e4:	3001      	adds	r0, #1
 80055e6:	d03a      	beq.n	800565e <_malloc_r+0xea>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	442b      	add	r3, r5
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	f8d8 3000 	ldr.w	r3, [r8]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	bb62      	cbnz	r2, 8005650 <_malloc_r+0xdc>
 80055f6:	f8c8 7000 	str.w	r7, [r8]
 80055fa:	e00f      	b.n	800561c <_malloc_r+0xa8>
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	1b52      	subs	r2, r2, r5
 8005600:	d420      	bmi.n	8005644 <_malloc_r+0xd0>
 8005602:	2a0b      	cmp	r2, #11
 8005604:	d917      	bls.n	8005636 <_malloc_r+0xc2>
 8005606:	1961      	adds	r1, r4, r5
 8005608:	42a3      	cmp	r3, r4
 800560a:	6025      	str	r5, [r4, #0]
 800560c:	bf18      	it	ne
 800560e:	6059      	strne	r1, [r3, #4]
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	bf08      	it	eq
 8005614:	f8c8 1000 	streq.w	r1, [r8]
 8005618:	5162      	str	r2, [r4, r5]
 800561a:	604b      	str	r3, [r1, #4]
 800561c:	4630      	mov	r0, r6
 800561e:	f000 f82f 	bl	8005680 <__malloc_unlock>
 8005622:	f104 000b 	add.w	r0, r4, #11
 8005626:	1d23      	adds	r3, r4, #4
 8005628:	f020 0007 	bic.w	r0, r0, #7
 800562c:	1ac2      	subs	r2, r0, r3
 800562e:	bf1c      	itt	ne
 8005630:	1a1b      	subne	r3, r3, r0
 8005632:	50a3      	strne	r3, [r4, r2]
 8005634:	e7af      	b.n	8005596 <_malloc_r+0x22>
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	42a3      	cmp	r3, r4
 800563a:	bf0c      	ite	eq
 800563c:	f8c8 2000 	streq.w	r2, [r8]
 8005640:	605a      	strne	r2, [r3, #4]
 8005642:	e7eb      	b.n	800561c <_malloc_r+0xa8>
 8005644:	4623      	mov	r3, r4
 8005646:	6864      	ldr	r4, [r4, #4]
 8005648:	e7ae      	b.n	80055a8 <_malloc_r+0x34>
 800564a:	463c      	mov	r4, r7
 800564c:	687f      	ldr	r7, [r7, #4]
 800564e:	e7b6      	b.n	80055be <_malloc_r+0x4a>
 8005650:	461a      	mov	r2, r3
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	42a3      	cmp	r3, r4
 8005656:	d1fb      	bne.n	8005650 <_malloc_r+0xdc>
 8005658:	2300      	movs	r3, #0
 800565a:	6053      	str	r3, [r2, #4]
 800565c:	e7de      	b.n	800561c <_malloc_r+0xa8>
 800565e:	230c      	movs	r3, #12
 8005660:	4630      	mov	r0, r6
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	f000 f80c 	bl	8005680 <__malloc_unlock>
 8005668:	e794      	b.n	8005594 <_malloc_r+0x20>
 800566a:	6005      	str	r5, [r0, #0]
 800566c:	e7d6      	b.n	800561c <_malloc_r+0xa8>
 800566e:	bf00      	nop
 8005670:	200003fc 	.word	0x200003fc

08005674 <__malloc_lock>:
 8005674:	4801      	ldr	r0, [pc, #4]	@ (800567c <__malloc_lock+0x8>)
 8005676:	f7ff b8aa 	b.w	80047ce <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	200003f4 	.word	0x200003f4

08005680 <__malloc_unlock>:
 8005680:	4801      	ldr	r0, [pc, #4]	@ (8005688 <__malloc_unlock+0x8>)
 8005682:	f7ff b8a5 	b.w	80047d0 <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	200003f4 	.word	0x200003f4

0800568c <_Balloc>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	69c6      	ldr	r6, [r0, #28]
 8005690:	4604      	mov	r4, r0
 8005692:	460d      	mov	r5, r1
 8005694:	b976      	cbnz	r6, 80056b4 <_Balloc+0x28>
 8005696:	2010      	movs	r0, #16
 8005698:	f7ff ff42 	bl	8005520 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	61e0      	str	r0, [r4, #28]
 80056a0:	b920      	cbnz	r0, 80056ac <_Balloc+0x20>
 80056a2:	216b      	movs	r1, #107	@ 0x6b
 80056a4:	4b17      	ldr	r3, [pc, #92]	@ (8005704 <_Balloc+0x78>)
 80056a6:	4818      	ldr	r0, [pc, #96]	@ (8005708 <_Balloc+0x7c>)
 80056a8:	f000 fc36 	bl	8005f18 <__assert_func>
 80056ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056b0:	6006      	str	r6, [r0, #0]
 80056b2:	60c6      	str	r6, [r0, #12]
 80056b4:	69e6      	ldr	r6, [r4, #28]
 80056b6:	68f3      	ldr	r3, [r6, #12]
 80056b8:	b183      	cbz	r3, 80056dc <_Balloc+0x50>
 80056ba:	69e3      	ldr	r3, [r4, #28]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056c2:	b9b8      	cbnz	r0, 80056f4 <_Balloc+0x68>
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f605 	lsl.w	r6, r1, r5
 80056ca:	1d72      	adds	r2, r6, #5
 80056cc:	4620      	mov	r0, r4
 80056ce:	0092      	lsls	r2, r2, #2
 80056d0:	f000 fc40 	bl	8005f54 <_calloc_r>
 80056d4:	b160      	cbz	r0, 80056f0 <_Balloc+0x64>
 80056d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80056da:	e00e      	b.n	80056fa <_Balloc+0x6e>
 80056dc:	2221      	movs	r2, #33	@ 0x21
 80056de:	2104      	movs	r1, #4
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fc37 	bl	8005f54 <_calloc_r>
 80056e6:	69e3      	ldr	r3, [r4, #28]
 80056e8:	60f0      	str	r0, [r6, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e4      	bne.n	80056ba <_Balloc+0x2e>
 80056f0:	2000      	movs	r0, #0
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	6802      	ldr	r2, [r0, #0]
 80056f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80056fa:	2300      	movs	r3, #0
 80056fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005700:	e7f7      	b.n	80056f2 <_Balloc+0x66>
 8005702:	bf00      	nop
 8005704:	08006620 	.word	0x08006620
 8005708:	080066a0 	.word	0x080066a0

0800570c <_Bfree>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	69c6      	ldr	r6, [r0, #28]
 8005710:	4605      	mov	r5, r0
 8005712:	460c      	mov	r4, r1
 8005714:	b976      	cbnz	r6, 8005734 <_Bfree+0x28>
 8005716:	2010      	movs	r0, #16
 8005718:	f7ff ff02 	bl	8005520 <malloc>
 800571c:	4602      	mov	r2, r0
 800571e:	61e8      	str	r0, [r5, #28]
 8005720:	b920      	cbnz	r0, 800572c <_Bfree+0x20>
 8005722:	218f      	movs	r1, #143	@ 0x8f
 8005724:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <_Bfree+0x3c>)
 8005726:	4809      	ldr	r0, [pc, #36]	@ (800574c <_Bfree+0x40>)
 8005728:	f000 fbf6 	bl	8005f18 <__assert_func>
 800572c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005730:	6006      	str	r6, [r0, #0]
 8005732:	60c6      	str	r6, [r0, #12]
 8005734:	b13c      	cbz	r4, 8005746 <_Bfree+0x3a>
 8005736:	69eb      	ldr	r3, [r5, #28]
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005740:	6021      	str	r1, [r4, #0]
 8005742:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	08006620 	.word	0x08006620
 800574c:	080066a0 	.word	0x080066a0

08005750 <__multadd>:
 8005750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005754:	4607      	mov	r7, r0
 8005756:	460c      	mov	r4, r1
 8005758:	461e      	mov	r6, r3
 800575a:	2000      	movs	r0, #0
 800575c:	690d      	ldr	r5, [r1, #16]
 800575e:	f101 0c14 	add.w	ip, r1, #20
 8005762:	f8dc 3000 	ldr.w	r3, [ip]
 8005766:	3001      	adds	r0, #1
 8005768:	b299      	uxth	r1, r3
 800576a:	fb02 6101 	mla	r1, r2, r1, r6
 800576e:	0c1e      	lsrs	r6, r3, #16
 8005770:	0c0b      	lsrs	r3, r1, #16
 8005772:	fb02 3306 	mla	r3, r2, r6, r3
 8005776:	b289      	uxth	r1, r1
 8005778:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800577c:	4285      	cmp	r5, r0
 800577e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005782:	f84c 1b04 	str.w	r1, [ip], #4
 8005786:	dcec      	bgt.n	8005762 <__multadd+0x12>
 8005788:	b30e      	cbz	r6, 80057ce <__multadd+0x7e>
 800578a:	68a3      	ldr	r3, [r4, #8]
 800578c:	42ab      	cmp	r3, r5
 800578e:	dc19      	bgt.n	80057c4 <__multadd+0x74>
 8005790:	6861      	ldr	r1, [r4, #4]
 8005792:	4638      	mov	r0, r7
 8005794:	3101      	adds	r1, #1
 8005796:	f7ff ff79 	bl	800568c <_Balloc>
 800579a:	4680      	mov	r8, r0
 800579c:	b928      	cbnz	r0, 80057aa <__multadd+0x5a>
 800579e:	4602      	mov	r2, r0
 80057a0:	21ba      	movs	r1, #186	@ 0xba
 80057a2:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <__multadd+0x84>)
 80057a4:	480c      	ldr	r0, [pc, #48]	@ (80057d8 <__multadd+0x88>)
 80057a6:	f000 fbb7 	bl	8005f18 <__assert_func>
 80057aa:	6922      	ldr	r2, [r4, #16]
 80057ac:	f104 010c 	add.w	r1, r4, #12
 80057b0:	3202      	adds	r2, #2
 80057b2:	0092      	lsls	r2, r2, #2
 80057b4:	300c      	adds	r0, #12
 80057b6:	f000 fba1 	bl	8005efc <memcpy>
 80057ba:	4621      	mov	r1, r4
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ffa5 	bl	800570c <_Bfree>
 80057c2:	4644      	mov	r4, r8
 80057c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80057c8:	3501      	adds	r5, #1
 80057ca:	615e      	str	r6, [r3, #20]
 80057cc:	6125      	str	r5, [r4, #16]
 80057ce:	4620      	mov	r0, r4
 80057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d4:	0800668f 	.word	0x0800668f
 80057d8:	080066a0 	.word	0x080066a0

080057dc <__hi0bits>:
 80057dc:	4603      	mov	r3, r0
 80057de:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80057e2:	bf3a      	itte	cc
 80057e4:	0403      	lslcc	r3, r0, #16
 80057e6:	2010      	movcc	r0, #16
 80057e8:	2000      	movcs	r0, #0
 80057ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ee:	bf3c      	itt	cc
 80057f0:	021b      	lslcc	r3, r3, #8
 80057f2:	3008      	addcc	r0, #8
 80057f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057f8:	bf3c      	itt	cc
 80057fa:	011b      	lslcc	r3, r3, #4
 80057fc:	3004      	addcc	r0, #4
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005802:	bf3c      	itt	cc
 8005804:	009b      	lslcc	r3, r3, #2
 8005806:	3002      	addcc	r0, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	db05      	blt.n	8005818 <__hi0bits+0x3c>
 800580c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005810:	f100 0001 	add.w	r0, r0, #1
 8005814:	bf08      	it	eq
 8005816:	2020      	moveq	r0, #32
 8005818:	4770      	bx	lr

0800581a <__lo0bits>:
 800581a:	6803      	ldr	r3, [r0, #0]
 800581c:	4602      	mov	r2, r0
 800581e:	f013 0007 	ands.w	r0, r3, #7
 8005822:	d00b      	beq.n	800583c <__lo0bits+0x22>
 8005824:	07d9      	lsls	r1, r3, #31
 8005826:	d421      	bmi.n	800586c <__lo0bits+0x52>
 8005828:	0798      	lsls	r0, r3, #30
 800582a:	bf49      	itett	mi
 800582c:	085b      	lsrmi	r3, r3, #1
 800582e:	089b      	lsrpl	r3, r3, #2
 8005830:	2001      	movmi	r0, #1
 8005832:	6013      	strmi	r3, [r2, #0]
 8005834:	bf5c      	itt	pl
 8005836:	2002      	movpl	r0, #2
 8005838:	6013      	strpl	r3, [r2, #0]
 800583a:	4770      	bx	lr
 800583c:	b299      	uxth	r1, r3
 800583e:	b909      	cbnz	r1, 8005844 <__lo0bits+0x2a>
 8005840:	2010      	movs	r0, #16
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	b2d9      	uxtb	r1, r3
 8005846:	b909      	cbnz	r1, 800584c <__lo0bits+0x32>
 8005848:	3008      	adds	r0, #8
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	0719      	lsls	r1, r3, #28
 800584e:	bf04      	itt	eq
 8005850:	091b      	lsreq	r3, r3, #4
 8005852:	3004      	addeq	r0, #4
 8005854:	0799      	lsls	r1, r3, #30
 8005856:	bf04      	itt	eq
 8005858:	089b      	lsreq	r3, r3, #2
 800585a:	3002      	addeq	r0, #2
 800585c:	07d9      	lsls	r1, r3, #31
 800585e:	d403      	bmi.n	8005868 <__lo0bits+0x4e>
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f100 0001 	add.w	r0, r0, #1
 8005866:	d003      	beq.n	8005870 <__lo0bits+0x56>
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	4770      	bx	lr
 800586c:	2000      	movs	r0, #0
 800586e:	4770      	bx	lr
 8005870:	2020      	movs	r0, #32
 8005872:	4770      	bx	lr

08005874 <__i2b>:
 8005874:	b510      	push	{r4, lr}
 8005876:	460c      	mov	r4, r1
 8005878:	2101      	movs	r1, #1
 800587a:	f7ff ff07 	bl	800568c <_Balloc>
 800587e:	4602      	mov	r2, r0
 8005880:	b928      	cbnz	r0, 800588e <__i2b+0x1a>
 8005882:	f240 1145 	movw	r1, #325	@ 0x145
 8005886:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <__i2b+0x24>)
 8005888:	4804      	ldr	r0, [pc, #16]	@ (800589c <__i2b+0x28>)
 800588a:	f000 fb45 	bl	8005f18 <__assert_func>
 800588e:	2301      	movs	r3, #1
 8005890:	6144      	str	r4, [r0, #20]
 8005892:	6103      	str	r3, [r0, #16]
 8005894:	bd10      	pop	{r4, pc}
 8005896:	bf00      	nop
 8005898:	0800668f 	.word	0x0800668f
 800589c:	080066a0 	.word	0x080066a0

080058a0 <__multiply>:
 80058a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a4:	4614      	mov	r4, r2
 80058a6:	690a      	ldr	r2, [r1, #16]
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	460f      	mov	r7, r1
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bfa2      	ittt	ge
 80058b0:	4623      	movge	r3, r4
 80058b2:	460c      	movge	r4, r1
 80058b4:	461f      	movge	r7, r3
 80058b6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80058ba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	6861      	ldr	r1, [r4, #4]
 80058c2:	eb0a 0609 	add.w	r6, sl, r9
 80058c6:	42b3      	cmp	r3, r6
 80058c8:	b085      	sub	sp, #20
 80058ca:	bfb8      	it	lt
 80058cc:	3101      	addlt	r1, #1
 80058ce:	f7ff fedd 	bl	800568c <_Balloc>
 80058d2:	b930      	cbnz	r0, 80058e2 <__multiply+0x42>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80058da:	4b43      	ldr	r3, [pc, #268]	@ (80059e8 <__multiply+0x148>)
 80058dc:	4843      	ldr	r0, [pc, #268]	@ (80059ec <__multiply+0x14c>)
 80058de:	f000 fb1b 	bl	8005f18 <__assert_func>
 80058e2:	f100 0514 	add.w	r5, r0, #20
 80058e6:	462b      	mov	r3, r5
 80058e8:	2200      	movs	r2, #0
 80058ea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80058ee:	4543      	cmp	r3, r8
 80058f0:	d321      	bcc.n	8005936 <__multiply+0x96>
 80058f2:	f107 0114 	add.w	r1, r7, #20
 80058f6:	f104 0214 	add.w	r2, r4, #20
 80058fa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80058fe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	1b13      	subs	r3, r2, r4
 8005906:	3b15      	subs	r3, #21
 8005908:	f023 0303 	bic.w	r3, r3, #3
 800590c:	3304      	adds	r3, #4
 800590e:	f104 0715 	add.w	r7, r4, #21
 8005912:	42ba      	cmp	r2, r7
 8005914:	bf38      	it	cc
 8005916:	2304      	movcc	r3, #4
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	9b02      	ldr	r3, [sp, #8]
 800591c:	9103      	str	r1, [sp, #12]
 800591e:	428b      	cmp	r3, r1
 8005920:	d80c      	bhi.n	800593c <__multiply+0x9c>
 8005922:	2e00      	cmp	r6, #0
 8005924:	dd03      	ble.n	800592e <__multiply+0x8e>
 8005926:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800592a:	2b00      	cmp	r3, #0
 800592c:	d05a      	beq.n	80059e4 <__multiply+0x144>
 800592e:	6106      	str	r6, [r0, #16]
 8005930:	b005      	add	sp, #20
 8005932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005936:	f843 2b04 	str.w	r2, [r3], #4
 800593a:	e7d8      	b.n	80058ee <__multiply+0x4e>
 800593c:	f8b1 a000 	ldrh.w	sl, [r1]
 8005940:	f1ba 0f00 	cmp.w	sl, #0
 8005944:	d023      	beq.n	800598e <__multiply+0xee>
 8005946:	46a9      	mov	r9, r5
 8005948:	f04f 0c00 	mov.w	ip, #0
 800594c:	f104 0e14 	add.w	lr, r4, #20
 8005950:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005954:	f8d9 3000 	ldr.w	r3, [r9]
 8005958:	fa1f fb87 	uxth.w	fp, r7
 800595c:	b29b      	uxth	r3, r3
 800595e:	fb0a 330b 	mla	r3, sl, fp, r3
 8005962:	4463      	add	r3, ip
 8005964:	f8d9 c000 	ldr.w	ip, [r9]
 8005968:	0c3f      	lsrs	r7, r7, #16
 800596a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800596e:	fb0a c707 	mla	r7, sl, r7, ip
 8005972:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005976:	b29b      	uxth	r3, r3
 8005978:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800597c:	4572      	cmp	r2, lr
 800597e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005982:	f849 3b04 	str.w	r3, [r9], #4
 8005986:	d8e3      	bhi.n	8005950 <__multiply+0xb0>
 8005988:	9b01      	ldr	r3, [sp, #4]
 800598a:	f845 c003 	str.w	ip, [r5, r3]
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	3104      	adds	r1, #4
 8005992:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005996:	f1b9 0f00 	cmp.w	r9, #0
 800599a:	d021      	beq.n	80059e0 <__multiply+0x140>
 800599c:	46ae      	mov	lr, r5
 800599e:	f04f 0a00 	mov.w	sl, #0
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	f104 0c14 	add.w	ip, r4, #20
 80059a8:	f8bc b000 	ldrh.w	fp, [ip]
 80059ac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	fb09 770b 	mla	r7, r9, fp, r7
 80059b6:	4457      	add	r7, sl
 80059b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80059bc:	f84e 3b04 	str.w	r3, [lr], #4
 80059c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059c8:	f8be 3000 	ldrh.w	r3, [lr]
 80059cc:	4562      	cmp	r2, ip
 80059ce:	fb09 330a 	mla	r3, r9, sl, r3
 80059d2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80059d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059da:	d8e5      	bhi.n	80059a8 <__multiply+0x108>
 80059dc:	9f01      	ldr	r7, [sp, #4]
 80059de:	51eb      	str	r3, [r5, r7]
 80059e0:	3504      	adds	r5, #4
 80059e2:	e79a      	b.n	800591a <__multiply+0x7a>
 80059e4:	3e01      	subs	r6, #1
 80059e6:	e79c      	b.n	8005922 <__multiply+0x82>
 80059e8:	0800668f 	.word	0x0800668f
 80059ec:	080066a0 	.word	0x080066a0

080059f0 <__pow5mult>:
 80059f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f4:	4615      	mov	r5, r2
 80059f6:	f012 0203 	ands.w	r2, r2, #3
 80059fa:	4607      	mov	r7, r0
 80059fc:	460e      	mov	r6, r1
 80059fe:	d007      	beq.n	8005a10 <__pow5mult+0x20>
 8005a00:	4c25      	ldr	r4, [pc, #148]	@ (8005a98 <__pow5mult+0xa8>)
 8005a02:	3a01      	subs	r2, #1
 8005a04:	2300      	movs	r3, #0
 8005a06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a0a:	f7ff fea1 	bl	8005750 <__multadd>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	10ad      	asrs	r5, r5, #2
 8005a12:	d03d      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a14:	69fc      	ldr	r4, [r7, #28]
 8005a16:	b97c      	cbnz	r4, 8005a38 <__pow5mult+0x48>
 8005a18:	2010      	movs	r0, #16
 8005a1a:	f7ff fd81 	bl	8005520 <malloc>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	61f8      	str	r0, [r7, #28]
 8005a22:	b928      	cbnz	r0, 8005a30 <__pow5mult+0x40>
 8005a24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a28:	4b1c      	ldr	r3, [pc, #112]	@ (8005a9c <__pow5mult+0xac>)
 8005a2a:	481d      	ldr	r0, [pc, #116]	@ (8005aa0 <__pow5mult+0xb0>)
 8005a2c:	f000 fa74 	bl	8005f18 <__assert_func>
 8005a30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a34:	6004      	str	r4, [r0, #0]
 8005a36:	60c4      	str	r4, [r0, #12]
 8005a38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a40:	b94c      	cbnz	r4, 8005a56 <__pow5mult+0x66>
 8005a42:	f240 2171 	movw	r1, #625	@ 0x271
 8005a46:	4638      	mov	r0, r7
 8005a48:	f7ff ff14 	bl	8005874 <__i2b>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	4604      	mov	r4, r0
 8005a50:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a54:	6003      	str	r3, [r0, #0]
 8005a56:	f04f 0900 	mov.w	r9, #0
 8005a5a:	07eb      	lsls	r3, r5, #31
 8005a5c:	d50a      	bpl.n	8005a74 <__pow5mult+0x84>
 8005a5e:	4631      	mov	r1, r6
 8005a60:	4622      	mov	r2, r4
 8005a62:	4638      	mov	r0, r7
 8005a64:	f7ff ff1c 	bl	80058a0 <__multiply>
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff fe4d 	bl	800570c <_Bfree>
 8005a72:	4646      	mov	r6, r8
 8005a74:	106d      	asrs	r5, r5, #1
 8005a76:	d00b      	beq.n	8005a90 <__pow5mult+0xa0>
 8005a78:	6820      	ldr	r0, [r4, #0]
 8005a7a:	b938      	cbnz	r0, 8005a8c <__pow5mult+0x9c>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4621      	mov	r1, r4
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7ff ff0d 	bl	80058a0 <__multiply>
 8005a86:	6020      	str	r0, [r4, #0]
 8005a88:	f8c0 9000 	str.w	r9, [r0]
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	e7e4      	b.n	8005a5a <__pow5mult+0x6a>
 8005a90:	4630      	mov	r0, r6
 8005a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a96:	bf00      	nop
 8005a98:	080066fc 	.word	0x080066fc
 8005a9c:	08006620 	.word	0x08006620
 8005aa0:	080066a0 	.word	0x080066a0

08005aa4 <__lshift>:
 8005aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	4607      	mov	r7, r0
 8005aac:	4691      	mov	r9, r2
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	6849      	ldr	r1, [r1, #4]
 8005ab2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ab6:	68a3      	ldr	r3, [r4, #8]
 8005ab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005abc:	f108 0601 	add.w	r6, r8, #1
 8005ac0:	42b3      	cmp	r3, r6
 8005ac2:	db0b      	blt.n	8005adc <__lshift+0x38>
 8005ac4:	4638      	mov	r0, r7
 8005ac6:	f7ff fde1 	bl	800568c <_Balloc>
 8005aca:	4605      	mov	r5, r0
 8005acc:	b948      	cbnz	r0, 8005ae2 <__lshift+0x3e>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005ad4:	4b27      	ldr	r3, [pc, #156]	@ (8005b74 <__lshift+0xd0>)
 8005ad6:	4828      	ldr	r0, [pc, #160]	@ (8005b78 <__lshift+0xd4>)
 8005ad8:	f000 fa1e 	bl	8005f18 <__assert_func>
 8005adc:	3101      	adds	r1, #1
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	e7ee      	b.n	8005ac0 <__lshift+0x1c>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	f100 0114 	add.w	r1, r0, #20
 8005ae8:	f100 0210 	add.w	r2, r0, #16
 8005aec:	4618      	mov	r0, r3
 8005aee:	4553      	cmp	r3, sl
 8005af0:	db33      	blt.n	8005b5a <__lshift+0xb6>
 8005af2:	6920      	ldr	r0, [r4, #16]
 8005af4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005af8:	f104 0314 	add.w	r3, r4, #20
 8005afc:	f019 091f 	ands.w	r9, r9, #31
 8005b00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b08:	d02b      	beq.n	8005b62 <__lshift+0xbe>
 8005b0a:	468a      	mov	sl, r1
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f1c9 0e20 	rsb	lr, r9, #32
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	fa00 f009 	lsl.w	r0, r0, r9
 8005b18:	4310      	orrs	r0, r2
 8005b1a:	f84a 0b04 	str.w	r0, [sl], #4
 8005b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b22:	459c      	cmp	ip, r3
 8005b24:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b28:	d8f3      	bhi.n	8005b12 <__lshift+0x6e>
 8005b2a:	ebac 0304 	sub.w	r3, ip, r4
 8005b2e:	3b15      	subs	r3, #21
 8005b30:	f023 0303 	bic.w	r3, r3, #3
 8005b34:	3304      	adds	r3, #4
 8005b36:	f104 0015 	add.w	r0, r4, #21
 8005b3a:	4584      	cmp	ip, r0
 8005b3c:	bf38      	it	cc
 8005b3e:	2304      	movcc	r3, #4
 8005b40:	50ca      	str	r2, [r1, r3]
 8005b42:	b10a      	cbz	r2, 8005b48 <__lshift+0xa4>
 8005b44:	f108 0602 	add.w	r6, r8, #2
 8005b48:	3e01      	subs	r6, #1
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	612e      	str	r6, [r5, #16]
 8005b50:	f7ff fddc 	bl	800570c <_Bfree>
 8005b54:	4628      	mov	r0, r5
 8005b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b5e:	3301      	adds	r3, #1
 8005b60:	e7c5      	b.n	8005aee <__lshift+0x4a>
 8005b62:	3904      	subs	r1, #4
 8005b64:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b68:	459c      	cmp	ip, r3
 8005b6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005b6e:	d8f9      	bhi.n	8005b64 <__lshift+0xc0>
 8005b70:	e7ea      	b.n	8005b48 <__lshift+0xa4>
 8005b72:	bf00      	nop
 8005b74:	0800668f 	.word	0x0800668f
 8005b78:	080066a0 	.word	0x080066a0

08005b7c <__mcmp>:
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	690a      	ldr	r2, [r1, #16]
 8005b80:	6900      	ldr	r0, [r0, #16]
 8005b82:	b530      	push	{r4, r5, lr}
 8005b84:	1a80      	subs	r0, r0, r2
 8005b86:	d10e      	bne.n	8005ba6 <__mcmp+0x2a>
 8005b88:	3314      	adds	r3, #20
 8005b8a:	3114      	adds	r1, #20
 8005b8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005b90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005b94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005b98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005b9c:	4295      	cmp	r5, r2
 8005b9e:	d003      	beq.n	8005ba8 <__mcmp+0x2c>
 8005ba0:	d205      	bcs.n	8005bae <__mcmp+0x32>
 8005ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba6:	bd30      	pop	{r4, r5, pc}
 8005ba8:	42a3      	cmp	r3, r4
 8005baa:	d3f3      	bcc.n	8005b94 <__mcmp+0x18>
 8005bac:	e7fb      	b.n	8005ba6 <__mcmp+0x2a>
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e7f9      	b.n	8005ba6 <__mcmp+0x2a>
	...

08005bb4 <__mdiff>:
 8005bb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	4689      	mov	r9, r1
 8005bba:	4606      	mov	r6, r0
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4648      	mov	r0, r9
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	f7ff ffdb 	bl	8005b7c <__mcmp>
 8005bc6:	1e05      	subs	r5, r0, #0
 8005bc8:	d112      	bne.n	8005bf0 <__mdiff+0x3c>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff fd5d 	bl	800568c <_Balloc>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	b928      	cbnz	r0, 8005be2 <__mdiff+0x2e>
 8005bd6:	f240 2137 	movw	r1, #567	@ 0x237
 8005bda:	4b3e      	ldr	r3, [pc, #248]	@ (8005cd4 <__mdiff+0x120>)
 8005bdc:	483e      	ldr	r0, [pc, #248]	@ (8005cd8 <__mdiff+0x124>)
 8005bde:	f000 f99b 	bl	8005f18 <__assert_func>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005be8:	4610      	mov	r0, r2
 8005bea:	b003      	add	sp, #12
 8005bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf0:	bfbc      	itt	lt
 8005bf2:	464b      	movlt	r3, r9
 8005bf4:	46a1      	movlt	r9, r4
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005bfc:	bfba      	itte	lt
 8005bfe:	461c      	movlt	r4, r3
 8005c00:	2501      	movlt	r5, #1
 8005c02:	2500      	movge	r5, #0
 8005c04:	f7ff fd42 	bl	800568c <_Balloc>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	b918      	cbnz	r0, 8005c14 <__mdiff+0x60>
 8005c0c:	f240 2145 	movw	r1, #581	@ 0x245
 8005c10:	4b30      	ldr	r3, [pc, #192]	@ (8005cd4 <__mdiff+0x120>)
 8005c12:	e7e3      	b.n	8005bdc <__mdiff+0x28>
 8005c14:	f100 0b14 	add.w	fp, r0, #20
 8005c18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c1c:	f109 0310 	add.w	r3, r9, #16
 8005c20:	60c5      	str	r5, [r0, #12]
 8005c22:	f04f 0c00 	mov.w	ip, #0
 8005c26:	f109 0514 	add.w	r5, r9, #20
 8005c2a:	46d9      	mov	r9, fp
 8005c2c:	6926      	ldr	r6, [r4, #16]
 8005c2e:	f104 0e14 	add.w	lr, r4, #20
 8005c32:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	9b01      	ldr	r3, [sp, #4]
 8005c3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c46:	b281      	uxth	r1, r0
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	fa1f f38a 	uxth.w	r3, sl
 8005c4e:	1a5b      	subs	r3, r3, r1
 8005c50:	0c00      	lsrs	r0, r0, #16
 8005c52:	4463      	add	r3, ip
 8005c54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005c62:	4576      	cmp	r6, lr
 8005c64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005c68:	f849 3b04 	str.w	r3, [r9], #4
 8005c6c:	d8e6      	bhi.n	8005c3c <__mdiff+0x88>
 8005c6e:	1b33      	subs	r3, r6, r4
 8005c70:	3b15      	subs	r3, #21
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	3415      	adds	r4, #21
 8005c78:	3304      	adds	r3, #4
 8005c7a:	42a6      	cmp	r6, r4
 8005c7c:	bf38      	it	cc
 8005c7e:	2304      	movcc	r3, #4
 8005c80:	441d      	add	r5, r3
 8005c82:	445b      	add	r3, fp
 8005c84:	461e      	mov	r6, r3
 8005c86:	462c      	mov	r4, r5
 8005c88:	4544      	cmp	r4, r8
 8005c8a:	d30e      	bcc.n	8005caa <__mdiff+0xf6>
 8005c8c:	f108 0103 	add.w	r1, r8, #3
 8005c90:	1b49      	subs	r1, r1, r5
 8005c92:	f021 0103 	bic.w	r1, r1, #3
 8005c96:	3d03      	subs	r5, #3
 8005c98:	45a8      	cmp	r8, r5
 8005c9a:	bf38      	it	cc
 8005c9c:	2100      	movcc	r1, #0
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ca4:	b199      	cbz	r1, 8005cce <__mdiff+0x11a>
 8005ca6:	6117      	str	r7, [r2, #16]
 8005ca8:	e79e      	b.n	8005be8 <__mdiff+0x34>
 8005caa:	46e6      	mov	lr, ip
 8005cac:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cb0:	fa1f fc81 	uxth.w	ip, r1
 8005cb4:	44f4      	add	ip, lr
 8005cb6:	0c08      	lsrs	r0, r1, #16
 8005cb8:	4471      	add	r1, lr
 8005cba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cbe:	b289      	uxth	r1, r1
 8005cc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cc8:	f846 1b04 	str.w	r1, [r6], #4
 8005ccc:	e7dc      	b.n	8005c88 <__mdiff+0xd4>
 8005cce:	3f01      	subs	r7, #1
 8005cd0:	e7e6      	b.n	8005ca0 <__mdiff+0xec>
 8005cd2:	bf00      	nop
 8005cd4:	0800668f 	.word	0x0800668f
 8005cd8:	080066a0 	.word	0x080066a0

08005cdc <__d2b>:
 8005cdc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4690      	mov	r8, r2
 8005ce4:	4699      	mov	r9, r3
 8005ce6:	9e08      	ldr	r6, [sp, #32]
 8005ce8:	f7ff fcd0 	bl	800568c <_Balloc>
 8005cec:	4604      	mov	r4, r0
 8005cee:	b930      	cbnz	r0, 8005cfe <__d2b+0x22>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	f240 310f 	movw	r1, #783	@ 0x30f
 8005cf6:	4b23      	ldr	r3, [pc, #140]	@ (8005d84 <__d2b+0xa8>)
 8005cf8:	4823      	ldr	r0, [pc, #140]	@ (8005d88 <__d2b+0xac>)
 8005cfa:	f000 f90d 	bl	8005f18 <__assert_func>
 8005cfe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d02:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d06:	b10d      	cbz	r5, 8005d0c <__d2b+0x30>
 8005d08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f1b8 0300 	subs.w	r3, r8, #0
 8005d12:	d024      	beq.n	8005d5e <__d2b+0x82>
 8005d14:	4668      	mov	r0, sp
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	f7ff fd7f 	bl	800581a <__lo0bits>
 8005d1c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d20:	b1d8      	cbz	r0, 8005d5a <__d2b+0x7e>
 8005d22:	f1c0 0320 	rsb	r3, r0, #32
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	40c2      	lsrs	r2, r0
 8005d2e:	6163      	str	r3, [r4, #20]
 8005d30:	9201      	str	r2, [sp, #4]
 8005d32:	9b01      	ldr	r3, [sp, #4]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bf0c      	ite	eq
 8005d38:	2201      	moveq	r2, #1
 8005d3a:	2202      	movne	r2, #2
 8005d3c:	61a3      	str	r3, [r4, #24]
 8005d3e:	6122      	str	r2, [r4, #16]
 8005d40:	b1ad      	cbz	r5, 8005d6e <__d2b+0x92>
 8005d42:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d46:	4405      	add	r5, r0
 8005d48:	6035      	str	r5, [r6, #0]
 8005d4a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d50:	6018      	str	r0, [r3, #0]
 8005d52:	4620      	mov	r0, r4
 8005d54:	b002      	add	sp, #8
 8005d56:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005d5a:	6161      	str	r1, [r4, #20]
 8005d5c:	e7e9      	b.n	8005d32 <__d2b+0x56>
 8005d5e:	a801      	add	r0, sp, #4
 8005d60:	f7ff fd5b 	bl	800581a <__lo0bits>
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	6163      	str	r3, [r4, #20]
 8005d6a:	3020      	adds	r0, #32
 8005d6c:	e7e7      	b.n	8005d3e <__d2b+0x62>
 8005d6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005d72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005d76:	6030      	str	r0, [r6, #0]
 8005d78:	6918      	ldr	r0, [r3, #16]
 8005d7a:	f7ff fd2f 	bl	80057dc <__hi0bits>
 8005d7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005d82:	e7e4      	b.n	8005d4e <__d2b+0x72>
 8005d84:	0800668f 	.word	0x0800668f
 8005d88:	080066a0 	.word	0x080066a0

08005d8c <__sflush_r>:
 8005d8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d92:	0716      	lsls	r6, r2, #28
 8005d94:	4605      	mov	r5, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	d454      	bmi.n	8005e44 <__sflush_r+0xb8>
 8005d9a:	684b      	ldr	r3, [r1, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	dc02      	bgt.n	8005da6 <__sflush_r+0x1a>
 8005da0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd48      	ble.n	8005e38 <__sflush_r+0xac>
 8005da6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	d045      	beq.n	8005e38 <__sflush_r+0xac>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005db2:	682f      	ldr	r7, [r5, #0]
 8005db4:	6a21      	ldr	r1, [r4, #32]
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	d030      	beq.n	8005e1c <__sflush_r+0x90>
 8005dba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	0759      	lsls	r1, r3, #29
 8005dc0:	d505      	bpl.n	8005dce <__sflush_r+0x42>
 8005dc2:	6863      	ldr	r3, [r4, #4]
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005dc8:	b10b      	cbz	r3, 8005dce <__sflush_r+0x42>
 8005dca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005dcc:	1ad2      	subs	r2, r2, r3
 8005dce:	2300      	movs	r3, #0
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005dd4:	6a21      	ldr	r1, [r4, #32]
 8005dd6:	47b0      	blx	r6
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	d106      	bne.n	8005dec <__sflush_r+0x60>
 8005dde:	6829      	ldr	r1, [r5, #0]
 8005de0:	291d      	cmp	r1, #29
 8005de2:	d82b      	bhi.n	8005e3c <__sflush_r+0xb0>
 8005de4:	4a28      	ldr	r2, [pc, #160]	@ (8005e88 <__sflush_r+0xfc>)
 8005de6:	410a      	asrs	r2, r1
 8005de8:	07d6      	lsls	r6, r2, #31
 8005dea:	d427      	bmi.n	8005e3c <__sflush_r+0xb0>
 8005dec:	2200      	movs	r2, #0
 8005dee:	6062      	str	r2, [r4, #4]
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	04d9      	lsls	r1, r3, #19
 8005df4:	6022      	str	r2, [r4, #0]
 8005df6:	d504      	bpl.n	8005e02 <__sflush_r+0x76>
 8005df8:	1c42      	adds	r2, r0, #1
 8005dfa:	d101      	bne.n	8005e00 <__sflush_r+0x74>
 8005dfc:	682b      	ldr	r3, [r5, #0]
 8005dfe:	b903      	cbnz	r3, 8005e02 <__sflush_r+0x76>
 8005e00:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e04:	602f      	str	r7, [r5, #0]
 8005e06:	b1b9      	cbz	r1, 8005e38 <__sflush_r+0xac>
 8005e08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	d002      	beq.n	8005e16 <__sflush_r+0x8a>
 8005e10:	4628      	mov	r0, r5
 8005e12:	f7ff fb3d 	bl	8005490 <_free_r>
 8005e16:	2300      	movs	r3, #0
 8005e18:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e1a:	e00d      	b.n	8005e38 <__sflush_r+0xac>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b0      	blx	r6
 8005e22:	4602      	mov	r2, r0
 8005e24:	1c50      	adds	r0, r2, #1
 8005e26:	d1c9      	bne.n	8005dbc <__sflush_r+0x30>
 8005e28:	682b      	ldr	r3, [r5, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0c6      	beq.n	8005dbc <__sflush_r+0x30>
 8005e2e:	2b1d      	cmp	r3, #29
 8005e30:	d001      	beq.n	8005e36 <__sflush_r+0xaa>
 8005e32:	2b16      	cmp	r3, #22
 8005e34:	d11d      	bne.n	8005e72 <__sflush_r+0xe6>
 8005e36:	602f      	str	r7, [r5, #0]
 8005e38:	2000      	movs	r0, #0
 8005e3a:	e021      	b.n	8005e80 <__sflush_r+0xf4>
 8005e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e40:	b21b      	sxth	r3, r3
 8005e42:	e01a      	b.n	8005e7a <__sflush_r+0xee>
 8005e44:	690f      	ldr	r7, [r1, #16]
 8005e46:	2f00      	cmp	r7, #0
 8005e48:	d0f6      	beq.n	8005e38 <__sflush_r+0xac>
 8005e4a:	0793      	lsls	r3, r2, #30
 8005e4c:	bf18      	it	ne
 8005e4e:	2300      	movne	r3, #0
 8005e50:	680e      	ldr	r6, [r1, #0]
 8005e52:	bf08      	it	eq
 8005e54:	694b      	ldreq	r3, [r1, #20]
 8005e56:	1bf6      	subs	r6, r6, r7
 8005e58:	600f      	str	r7, [r1, #0]
 8005e5a:	608b      	str	r3, [r1, #8]
 8005e5c:	2e00      	cmp	r6, #0
 8005e5e:	ddeb      	ble.n	8005e38 <__sflush_r+0xac>
 8005e60:	4633      	mov	r3, r6
 8005e62:	463a      	mov	r2, r7
 8005e64:	4628      	mov	r0, r5
 8005e66:	6a21      	ldr	r1, [r4, #32]
 8005e68:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005e6c:	47e0      	blx	ip
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	dc07      	bgt.n	8005e82 <__sflush_r+0xf6>
 8005e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7e:	81a3      	strh	r3, [r4, #12]
 8005e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e82:	4407      	add	r7, r0
 8005e84:	1a36      	subs	r6, r6, r0
 8005e86:	e7e9      	b.n	8005e5c <__sflush_r+0xd0>
 8005e88:	dfbffffe 	.word	0xdfbffffe

08005e8c <_fflush_r>:
 8005e8c:	b538      	push	{r3, r4, r5, lr}
 8005e8e:	690b      	ldr	r3, [r1, #16]
 8005e90:	4605      	mov	r5, r0
 8005e92:	460c      	mov	r4, r1
 8005e94:	b913      	cbnz	r3, 8005e9c <_fflush_r+0x10>
 8005e96:	2500      	movs	r5, #0
 8005e98:	4628      	mov	r0, r5
 8005e9a:	bd38      	pop	{r3, r4, r5, pc}
 8005e9c:	b118      	cbz	r0, 8005ea6 <_fflush_r+0x1a>
 8005e9e:	6a03      	ldr	r3, [r0, #32]
 8005ea0:	b90b      	cbnz	r3, 8005ea6 <_fflush_r+0x1a>
 8005ea2:	f7fe fb9d 	bl	80045e0 <__sinit>
 8005ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f3      	beq.n	8005e96 <_fflush_r+0xa>
 8005eae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005eb0:	07d0      	lsls	r0, r2, #31
 8005eb2:	d404      	bmi.n	8005ebe <_fflush_r+0x32>
 8005eb4:	0599      	lsls	r1, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_fflush_r+0x32>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eba:	f7fe fc88 	bl	80047ce <__retarget_lock_acquire_recursive>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f7ff ff63 	bl	8005d8c <__sflush_r>
 8005ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ec8:	4605      	mov	r5, r0
 8005eca:	07da      	lsls	r2, r3, #31
 8005ecc:	d4e4      	bmi.n	8005e98 <_fflush_r+0xc>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	059b      	lsls	r3, r3, #22
 8005ed2:	d4e1      	bmi.n	8005e98 <_fflush_r+0xc>
 8005ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ed6:	f7fe fc7b 	bl	80047d0 <__retarget_lock_release_recursive>
 8005eda:	e7dd      	b.n	8005e98 <_fflush_r+0xc>

08005edc <_sbrk_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4d05      	ldr	r5, [pc, #20]	@ (8005ef8 <_sbrk_r+0x1c>)
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	602b      	str	r3, [r5, #0]
 8005ee8:	f7fb fc14 	bl	8001714 <_sbrk>
 8005eec:	1c43      	adds	r3, r0, #1
 8005eee:	d102      	bne.n	8005ef6 <_sbrk_r+0x1a>
 8005ef0:	682b      	ldr	r3, [r5, #0]
 8005ef2:	b103      	cbz	r3, 8005ef6 <_sbrk_r+0x1a>
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	bd38      	pop	{r3, r4, r5, pc}
 8005ef8:	200003f0 	.word	0x200003f0

08005efc <memcpy>:
 8005efc:	440a      	add	r2, r1
 8005efe:	4291      	cmp	r1, r2
 8005f00:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f04:	d100      	bne.n	8005f08 <memcpy+0xc>
 8005f06:	4770      	bx	lr
 8005f08:	b510      	push	{r4, lr}
 8005f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f14:	d1f9      	bne.n	8005f0a <memcpy+0xe>
 8005f16:	bd10      	pop	{r4, pc}

08005f18 <__assert_func>:
 8005f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f1a:	4614      	mov	r4, r2
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <__assert_func+0x2c>)
 8005f20:	4605      	mov	r5, r0
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68d8      	ldr	r0, [r3, #12]
 8005f26:	b954      	cbnz	r4, 8005f3e <__assert_func+0x26>
 8005f28:	4b07      	ldr	r3, [pc, #28]	@ (8005f48 <__assert_func+0x30>)
 8005f2a:	461c      	mov	r4, r3
 8005f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f30:	9100      	str	r1, [sp, #0]
 8005f32:	462b      	mov	r3, r5
 8005f34:	4905      	ldr	r1, [pc, #20]	@ (8005f4c <__assert_func+0x34>)
 8005f36:	f000 f841 	bl	8005fbc <fiprintf>
 8005f3a:	f000 f851 	bl	8005fe0 <abort>
 8005f3e:	4b04      	ldr	r3, [pc, #16]	@ (8005f50 <__assert_func+0x38>)
 8005f40:	e7f4      	b.n	8005f2c <__assert_func+0x14>
 8005f42:	bf00      	nop
 8005f44:	20000018 	.word	0x20000018
 8005f48:	0800683d 	.word	0x0800683d
 8005f4c:	0800680f 	.word	0x0800680f
 8005f50:	08006802 	.word	0x08006802

08005f54 <_calloc_r>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	fba1 5402 	umull	r5, r4, r1, r2
 8005f5a:	b93c      	cbnz	r4, 8005f6c <_calloc_r+0x18>
 8005f5c:	4629      	mov	r1, r5
 8005f5e:	f7ff fb09 	bl	8005574 <_malloc_r>
 8005f62:	4606      	mov	r6, r0
 8005f64:	b928      	cbnz	r0, 8005f72 <_calloc_r+0x1e>
 8005f66:	2600      	movs	r6, #0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	220c      	movs	r2, #12
 8005f6e:	6002      	str	r2, [r0, #0]
 8005f70:	e7f9      	b.n	8005f66 <_calloc_r+0x12>
 8005f72:	462a      	mov	r2, r5
 8005f74:	4621      	mov	r1, r4
 8005f76:	f7fe fbac 	bl	80046d2 <memset>
 8005f7a:	e7f5      	b.n	8005f68 <_calloc_r+0x14>

08005f7c <__ascii_mbtowc>:
 8005f7c:	b082      	sub	sp, #8
 8005f7e:	b901      	cbnz	r1, 8005f82 <__ascii_mbtowc+0x6>
 8005f80:	a901      	add	r1, sp, #4
 8005f82:	b142      	cbz	r2, 8005f96 <__ascii_mbtowc+0x1a>
 8005f84:	b14b      	cbz	r3, 8005f9a <__ascii_mbtowc+0x1e>
 8005f86:	7813      	ldrb	r3, [r2, #0]
 8005f88:	600b      	str	r3, [r1, #0]
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	1e10      	subs	r0, r2, #0
 8005f8e:	bf18      	it	ne
 8005f90:	2001      	movne	r0, #1
 8005f92:	b002      	add	sp, #8
 8005f94:	4770      	bx	lr
 8005f96:	4610      	mov	r0, r2
 8005f98:	e7fb      	b.n	8005f92 <__ascii_mbtowc+0x16>
 8005f9a:	f06f 0001 	mvn.w	r0, #1
 8005f9e:	e7f8      	b.n	8005f92 <__ascii_mbtowc+0x16>

08005fa0 <__ascii_wctomb>:
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	b141      	cbz	r1, 8005fb8 <__ascii_wctomb+0x18>
 8005fa6:	2aff      	cmp	r2, #255	@ 0xff
 8005fa8:	d904      	bls.n	8005fb4 <__ascii_wctomb+0x14>
 8005faa:	228a      	movs	r2, #138	@ 0x8a
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	4770      	bx	lr
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	700a      	strb	r2, [r1, #0]
 8005fb8:	4770      	bx	lr
	...

08005fbc <fiprintf>:
 8005fbc:	b40e      	push	{r1, r2, r3}
 8005fbe:	b503      	push	{r0, r1, lr}
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	ab03      	add	r3, sp, #12
 8005fc4:	4805      	ldr	r0, [pc, #20]	@ (8005fdc <fiprintf+0x20>)
 8005fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	f000 f835 	bl	800603c <_vfiprintf_r>
 8005fd2:	b002      	add	sp, #8
 8005fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fd8:	b003      	add	sp, #12
 8005fda:	4770      	bx	lr
 8005fdc:	20000018 	.word	0x20000018

08005fe0 <abort>:
 8005fe0:	2006      	movs	r0, #6
 8005fe2:	b508      	push	{r3, lr}
 8005fe4:	f000 f9fe 	bl	80063e4 <raise>
 8005fe8:	2001      	movs	r0, #1
 8005fea:	f7fb fb1e 	bl	800162a <_exit>

08005fee <__sfputc_r>:
 8005fee:	6893      	ldr	r3, [r2, #8]
 8005ff0:	b410      	push	{r4}
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	6093      	str	r3, [r2, #8]
 8005ff8:	da07      	bge.n	800600a <__sfputc_r+0x1c>
 8005ffa:	6994      	ldr	r4, [r2, #24]
 8005ffc:	42a3      	cmp	r3, r4
 8005ffe:	db01      	blt.n	8006004 <__sfputc_r+0x16>
 8006000:	290a      	cmp	r1, #10
 8006002:	d102      	bne.n	800600a <__sfputc_r+0x1c>
 8006004:	bc10      	pop	{r4}
 8006006:	f000 b931 	b.w	800626c <__swbuf_r>
 800600a:	6813      	ldr	r3, [r2, #0]
 800600c:	1c58      	adds	r0, r3, #1
 800600e:	6010      	str	r0, [r2, #0]
 8006010:	7019      	strb	r1, [r3, #0]
 8006012:	4608      	mov	r0, r1
 8006014:	bc10      	pop	{r4}
 8006016:	4770      	bx	lr

08006018 <__sfputs_r>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	4606      	mov	r6, r0
 800601c:	460f      	mov	r7, r1
 800601e:	4614      	mov	r4, r2
 8006020:	18d5      	adds	r5, r2, r3
 8006022:	42ac      	cmp	r4, r5
 8006024:	d101      	bne.n	800602a <__sfputs_r+0x12>
 8006026:	2000      	movs	r0, #0
 8006028:	e007      	b.n	800603a <__sfputs_r+0x22>
 800602a:	463a      	mov	r2, r7
 800602c:	4630      	mov	r0, r6
 800602e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006032:	f7ff ffdc 	bl	8005fee <__sfputc_r>
 8006036:	1c43      	adds	r3, r0, #1
 8006038:	d1f3      	bne.n	8006022 <__sfputs_r+0xa>
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800603c <_vfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460d      	mov	r5, r1
 8006042:	4614      	mov	r4, r2
 8006044:	4698      	mov	r8, r3
 8006046:	4606      	mov	r6, r0
 8006048:	b09d      	sub	sp, #116	@ 0x74
 800604a:	b118      	cbz	r0, 8006054 <_vfiprintf_r+0x18>
 800604c:	6a03      	ldr	r3, [r0, #32]
 800604e:	b90b      	cbnz	r3, 8006054 <_vfiprintf_r+0x18>
 8006050:	f7fe fac6 	bl	80045e0 <__sinit>
 8006054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006056:	07d9      	lsls	r1, r3, #31
 8006058:	d405      	bmi.n	8006066 <_vfiprintf_r+0x2a>
 800605a:	89ab      	ldrh	r3, [r5, #12]
 800605c:	059a      	lsls	r2, r3, #22
 800605e:	d402      	bmi.n	8006066 <_vfiprintf_r+0x2a>
 8006060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006062:	f7fe fbb4 	bl	80047ce <__retarget_lock_acquire_recursive>
 8006066:	89ab      	ldrh	r3, [r5, #12]
 8006068:	071b      	lsls	r3, r3, #28
 800606a:	d501      	bpl.n	8006070 <_vfiprintf_r+0x34>
 800606c:	692b      	ldr	r3, [r5, #16]
 800606e:	b99b      	cbnz	r3, 8006098 <_vfiprintf_r+0x5c>
 8006070:	4629      	mov	r1, r5
 8006072:	4630      	mov	r0, r6
 8006074:	f000 f938 	bl	80062e8 <__swsetup_r>
 8006078:	b170      	cbz	r0, 8006098 <_vfiprintf_r+0x5c>
 800607a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800607c:	07dc      	lsls	r4, r3, #31
 800607e:	d504      	bpl.n	800608a <_vfiprintf_r+0x4e>
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	b01d      	add	sp, #116	@ 0x74
 8006086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	0598      	lsls	r0, r3, #22
 800608e:	d4f7      	bmi.n	8006080 <_vfiprintf_r+0x44>
 8006090:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006092:	f7fe fb9d 	bl	80047d0 <__retarget_lock_release_recursive>
 8006096:	e7f3      	b.n	8006080 <_vfiprintf_r+0x44>
 8006098:	2300      	movs	r3, #0
 800609a:	9309      	str	r3, [sp, #36]	@ 0x24
 800609c:	2320      	movs	r3, #32
 800609e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060a2:	2330      	movs	r3, #48	@ 0x30
 80060a4:	f04f 0901 	mov.w	r9, #1
 80060a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006258 <_vfiprintf_r+0x21c>
 80060b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060b4:	4623      	mov	r3, r4
 80060b6:	469a      	mov	sl, r3
 80060b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060bc:	b10a      	cbz	r2, 80060c2 <_vfiprintf_r+0x86>
 80060be:	2a25      	cmp	r2, #37	@ 0x25
 80060c0:	d1f9      	bne.n	80060b6 <_vfiprintf_r+0x7a>
 80060c2:	ebba 0b04 	subs.w	fp, sl, r4
 80060c6:	d00b      	beq.n	80060e0 <_vfiprintf_r+0xa4>
 80060c8:	465b      	mov	r3, fp
 80060ca:	4622      	mov	r2, r4
 80060cc:	4629      	mov	r1, r5
 80060ce:	4630      	mov	r0, r6
 80060d0:	f7ff ffa2 	bl	8006018 <__sfputs_r>
 80060d4:	3001      	adds	r0, #1
 80060d6:	f000 80a7 	beq.w	8006228 <_vfiprintf_r+0x1ec>
 80060da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060dc:	445a      	add	r2, fp
 80060de:	9209      	str	r2, [sp, #36]	@ 0x24
 80060e0:	f89a 3000 	ldrb.w	r3, [sl]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 809f 	beq.w	8006228 <_vfiprintf_r+0x1ec>
 80060ea:	2300      	movs	r3, #0
 80060ec:	f04f 32ff 	mov.w	r2, #4294967295
 80060f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060f4:	f10a 0a01 	add.w	sl, sl, #1
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006100:	931a      	str	r3, [sp, #104]	@ 0x68
 8006102:	4654      	mov	r4, sl
 8006104:	2205      	movs	r2, #5
 8006106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800610a:	4853      	ldr	r0, [pc, #332]	@ (8006258 <_vfiprintf_r+0x21c>)
 800610c:	f7fe fb61 	bl	80047d2 <memchr>
 8006110:	9a04      	ldr	r2, [sp, #16]
 8006112:	b9d8      	cbnz	r0, 800614c <_vfiprintf_r+0x110>
 8006114:	06d1      	lsls	r1, r2, #27
 8006116:	bf44      	itt	mi
 8006118:	2320      	movmi	r3, #32
 800611a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800611e:	0713      	lsls	r3, r2, #28
 8006120:	bf44      	itt	mi
 8006122:	232b      	movmi	r3, #43	@ 0x2b
 8006124:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006128:	f89a 3000 	ldrb.w	r3, [sl]
 800612c:	2b2a      	cmp	r3, #42	@ 0x2a
 800612e:	d015      	beq.n	800615c <_vfiprintf_r+0x120>
 8006130:	4654      	mov	r4, sl
 8006132:	2000      	movs	r0, #0
 8006134:	f04f 0c0a 	mov.w	ip, #10
 8006138:	9a07      	ldr	r2, [sp, #28]
 800613a:	4621      	mov	r1, r4
 800613c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006140:	3b30      	subs	r3, #48	@ 0x30
 8006142:	2b09      	cmp	r3, #9
 8006144:	d94b      	bls.n	80061de <_vfiprintf_r+0x1a2>
 8006146:	b1b0      	cbz	r0, 8006176 <_vfiprintf_r+0x13a>
 8006148:	9207      	str	r2, [sp, #28]
 800614a:	e014      	b.n	8006176 <_vfiprintf_r+0x13a>
 800614c:	eba0 0308 	sub.w	r3, r0, r8
 8006150:	fa09 f303 	lsl.w	r3, r9, r3
 8006154:	4313      	orrs	r3, r2
 8006156:	46a2      	mov	sl, r4
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	e7d2      	b.n	8006102 <_vfiprintf_r+0xc6>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	1d19      	adds	r1, r3, #4
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	9103      	str	r1, [sp, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	bfbb      	ittet	lt
 8006168:	425b      	neglt	r3, r3
 800616a:	f042 0202 	orrlt.w	r2, r2, #2
 800616e:	9307      	strge	r3, [sp, #28]
 8006170:	9307      	strlt	r3, [sp, #28]
 8006172:	bfb8      	it	lt
 8006174:	9204      	strlt	r2, [sp, #16]
 8006176:	7823      	ldrb	r3, [r4, #0]
 8006178:	2b2e      	cmp	r3, #46	@ 0x2e
 800617a:	d10a      	bne.n	8006192 <_vfiprintf_r+0x156>
 800617c:	7863      	ldrb	r3, [r4, #1]
 800617e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006180:	d132      	bne.n	80061e8 <_vfiprintf_r+0x1ac>
 8006182:	9b03      	ldr	r3, [sp, #12]
 8006184:	3402      	adds	r4, #2
 8006186:	1d1a      	adds	r2, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	9203      	str	r2, [sp, #12]
 800618c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006190:	9305      	str	r3, [sp, #20]
 8006192:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800625c <_vfiprintf_r+0x220>
 8006196:	2203      	movs	r2, #3
 8006198:	4650      	mov	r0, sl
 800619a:	7821      	ldrb	r1, [r4, #0]
 800619c:	f7fe fb19 	bl	80047d2 <memchr>
 80061a0:	b138      	cbz	r0, 80061b2 <_vfiprintf_r+0x176>
 80061a2:	2240      	movs	r2, #64	@ 0x40
 80061a4:	9b04      	ldr	r3, [sp, #16]
 80061a6:	eba0 000a 	sub.w	r0, r0, sl
 80061aa:	4082      	lsls	r2, r0
 80061ac:	4313      	orrs	r3, r2
 80061ae:	3401      	adds	r4, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061b6:	2206      	movs	r2, #6
 80061b8:	4829      	ldr	r0, [pc, #164]	@ (8006260 <_vfiprintf_r+0x224>)
 80061ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061be:	f7fe fb08 	bl	80047d2 <memchr>
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d03f      	beq.n	8006246 <_vfiprintf_r+0x20a>
 80061c6:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <_vfiprintf_r+0x228>)
 80061c8:	bb1b      	cbnz	r3, 8006212 <_vfiprintf_r+0x1d6>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	3307      	adds	r3, #7
 80061ce:	f023 0307 	bic.w	r3, r3, #7
 80061d2:	3308      	adds	r3, #8
 80061d4:	9303      	str	r3, [sp, #12]
 80061d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061d8:	443b      	add	r3, r7
 80061da:	9309      	str	r3, [sp, #36]	@ 0x24
 80061dc:	e76a      	b.n	80060b4 <_vfiprintf_r+0x78>
 80061de:	460c      	mov	r4, r1
 80061e0:	2001      	movs	r0, #1
 80061e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80061e6:	e7a8      	b.n	800613a <_vfiprintf_r+0xfe>
 80061e8:	2300      	movs	r3, #0
 80061ea:	f04f 0c0a 	mov.w	ip, #10
 80061ee:	4619      	mov	r1, r3
 80061f0:	3401      	adds	r4, #1
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	4620      	mov	r0, r4
 80061f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061fa:	3a30      	subs	r2, #48	@ 0x30
 80061fc:	2a09      	cmp	r2, #9
 80061fe:	d903      	bls.n	8006208 <_vfiprintf_r+0x1cc>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0c6      	beq.n	8006192 <_vfiprintf_r+0x156>
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	e7c4      	b.n	8006192 <_vfiprintf_r+0x156>
 8006208:	4604      	mov	r4, r0
 800620a:	2301      	movs	r3, #1
 800620c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006210:	e7f0      	b.n	80061f4 <_vfiprintf_r+0x1b8>
 8006212:	ab03      	add	r3, sp, #12
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	462a      	mov	r2, r5
 8006218:	4630      	mov	r0, r6
 800621a:	4b13      	ldr	r3, [pc, #76]	@ (8006268 <_vfiprintf_r+0x22c>)
 800621c:	a904      	add	r1, sp, #16
 800621e:	f7fd fd95 	bl	8003d4c <_printf_float>
 8006222:	4607      	mov	r7, r0
 8006224:	1c78      	adds	r0, r7, #1
 8006226:	d1d6      	bne.n	80061d6 <_vfiprintf_r+0x19a>
 8006228:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800622a:	07d9      	lsls	r1, r3, #31
 800622c:	d405      	bmi.n	800623a <_vfiprintf_r+0x1fe>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	059a      	lsls	r2, r3, #22
 8006232:	d402      	bmi.n	800623a <_vfiprintf_r+0x1fe>
 8006234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006236:	f7fe facb 	bl	80047d0 <__retarget_lock_release_recursive>
 800623a:	89ab      	ldrh	r3, [r5, #12]
 800623c:	065b      	lsls	r3, r3, #25
 800623e:	f53f af1f 	bmi.w	8006080 <_vfiprintf_r+0x44>
 8006242:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006244:	e71e      	b.n	8006084 <_vfiprintf_r+0x48>
 8006246:	ab03      	add	r3, sp, #12
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	462a      	mov	r2, r5
 800624c:	4630      	mov	r0, r6
 800624e:	4b06      	ldr	r3, [pc, #24]	@ (8006268 <_vfiprintf_r+0x22c>)
 8006250:	a904      	add	r1, sp, #16
 8006252:	f7fe f819 	bl	8004288 <_printf_i>
 8006256:	e7e4      	b.n	8006222 <_vfiprintf_r+0x1e6>
 8006258:	0800693f 	.word	0x0800693f
 800625c:	08006945 	.word	0x08006945
 8006260:	08006949 	.word	0x08006949
 8006264:	08003d4d 	.word	0x08003d4d
 8006268:	08006019 	.word	0x08006019

0800626c <__swbuf_r>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	460e      	mov	r6, r1
 8006270:	4614      	mov	r4, r2
 8006272:	4605      	mov	r5, r0
 8006274:	b118      	cbz	r0, 800627e <__swbuf_r+0x12>
 8006276:	6a03      	ldr	r3, [r0, #32]
 8006278:	b90b      	cbnz	r3, 800627e <__swbuf_r+0x12>
 800627a:	f7fe f9b1 	bl	80045e0 <__sinit>
 800627e:	69a3      	ldr	r3, [r4, #24]
 8006280:	60a3      	str	r3, [r4, #8]
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	071a      	lsls	r2, r3, #28
 8006286:	d501      	bpl.n	800628c <__swbuf_r+0x20>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	b943      	cbnz	r3, 800629e <__swbuf_r+0x32>
 800628c:	4621      	mov	r1, r4
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f82a 	bl	80062e8 <__swsetup_r>
 8006294:	b118      	cbz	r0, 800629e <__swbuf_r+0x32>
 8006296:	f04f 37ff 	mov.w	r7, #4294967295
 800629a:	4638      	mov	r0, r7
 800629c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6922      	ldr	r2, [r4, #16]
 80062a2:	b2f6      	uxtb	r6, r6
 80062a4:	1a98      	subs	r0, r3, r2
 80062a6:	6963      	ldr	r3, [r4, #20]
 80062a8:	4637      	mov	r7, r6
 80062aa:	4283      	cmp	r3, r0
 80062ac:	dc05      	bgt.n	80062ba <__swbuf_r+0x4e>
 80062ae:	4621      	mov	r1, r4
 80062b0:	4628      	mov	r0, r5
 80062b2:	f7ff fdeb 	bl	8005e8c <_fflush_r>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d1ed      	bne.n	8006296 <__swbuf_r+0x2a>
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	701e      	strb	r6, [r3, #0]
 80062c8:	6962      	ldr	r2, [r4, #20]
 80062ca:	1c43      	adds	r3, r0, #1
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d004      	beq.n	80062da <__swbuf_r+0x6e>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	07db      	lsls	r3, r3, #31
 80062d4:	d5e1      	bpl.n	800629a <__swbuf_r+0x2e>
 80062d6:	2e0a      	cmp	r6, #10
 80062d8:	d1df      	bne.n	800629a <__swbuf_r+0x2e>
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f7ff fdd5 	bl	8005e8c <_fflush_r>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d0d9      	beq.n	800629a <__swbuf_r+0x2e>
 80062e6:	e7d6      	b.n	8006296 <__swbuf_r+0x2a>

080062e8 <__swsetup_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4b29      	ldr	r3, [pc, #164]	@ (8006390 <__swsetup_r+0xa8>)
 80062ec:	4605      	mov	r5, r0
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	460c      	mov	r4, r1
 80062f2:	b118      	cbz	r0, 80062fc <__swsetup_r+0x14>
 80062f4:	6a03      	ldr	r3, [r0, #32]
 80062f6:	b90b      	cbnz	r3, 80062fc <__swsetup_r+0x14>
 80062f8:	f7fe f972 	bl	80045e0 <__sinit>
 80062fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006300:	0719      	lsls	r1, r3, #28
 8006302:	d422      	bmi.n	800634a <__swsetup_r+0x62>
 8006304:	06da      	lsls	r2, r3, #27
 8006306:	d407      	bmi.n	8006318 <__swsetup_r+0x30>
 8006308:	2209      	movs	r2, #9
 800630a:	602a      	str	r2, [r5, #0]
 800630c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006310:	f04f 30ff 	mov.w	r0, #4294967295
 8006314:	81a3      	strh	r3, [r4, #12]
 8006316:	e033      	b.n	8006380 <__swsetup_r+0x98>
 8006318:	0758      	lsls	r0, r3, #29
 800631a:	d512      	bpl.n	8006342 <__swsetup_r+0x5a>
 800631c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800631e:	b141      	cbz	r1, 8006332 <__swsetup_r+0x4a>
 8006320:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006324:	4299      	cmp	r1, r3
 8006326:	d002      	beq.n	800632e <__swsetup_r+0x46>
 8006328:	4628      	mov	r0, r5
 800632a:	f7ff f8b1 	bl	8005490 <_free_r>
 800632e:	2300      	movs	r3, #0
 8006330:	6363      	str	r3, [r4, #52]	@ 0x34
 8006332:	89a3      	ldrh	r3, [r4, #12]
 8006334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006338:	81a3      	strh	r3, [r4, #12]
 800633a:	2300      	movs	r3, #0
 800633c:	6063      	str	r3, [r4, #4]
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	f043 0308 	orr.w	r3, r3, #8
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	b94b      	cbnz	r3, 8006362 <__swsetup_r+0x7a>
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006354:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006358:	d003      	beq.n	8006362 <__swsetup_r+0x7a>
 800635a:	4621      	mov	r1, r4
 800635c:	4628      	mov	r0, r5
 800635e:	f000 f882 	bl	8006466 <__smakebuf_r>
 8006362:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006366:	f013 0201 	ands.w	r2, r3, #1
 800636a:	d00a      	beq.n	8006382 <__swsetup_r+0x9a>
 800636c:	2200      	movs	r2, #0
 800636e:	60a2      	str	r2, [r4, #8]
 8006370:	6962      	ldr	r2, [r4, #20]
 8006372:	4252      	negs	r2, r2
 8006374:	61a2      	str	r2, [r4, #24]
 8006376:	6922      	ldr	r2, [r4, #16]
 8006378:	b942      	cbnz	r2, 800638c <__swsetup_r+0xa4>
 800637a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800637e:	d1c5      	bne.n	800630c <__swsetup_r+0x24>
 8006380:	bd38      	pop	{r3, r4, r5, pc}
 8006382:	0799      	lsls	r1, r3, #30
 8006384:	bf58      	it	pl
 8006386:	6962      	ldrpl	r2, [r4, #20]
 8006388:	60a2      	str	r2, [r4, #8]
 800638a:	e7f4      	b.n	8006376 <__swsetup_r+0x8e>
 800638c:	2000      	movs	r0, #0
 800638e:	e7f7      	b.n	8006380 <__swsetup_r+0x98>
 8006390:	20000018 	.word	0x20000018

08006394 <_raise_r>:
 8006394:	291f      	cmp	r1, #31
 8006396:	b538      	push	{r3, r4, r5, lr}
 8006398:	4605      	mov	r5, r0
 800639a:	460c      	mov	r4, r1
 800639c:	d904      	bls.n	80063a8 <_raise_r+0x14>
 800639e:	2316      	movs	r3, #22
 80063a0:	6003      	str	r3, [r0, #0]
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80063aa:	b112      	cbz	r2, 80063b2 <_raise_r+0x1e>
 80063ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80063b0:	b94b      	cbnz	r3, 80063c6 <_raise_r+0x32>
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f830 	bl	8006418 <_getpid_r>
 80063b8:	4622      	mov	r2, r4
 80063ba:	4601      	mov	r1, r0
 80063bc:	4628      	mov	r0, r5
 80063be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c2:	f000 b817 	b.w	80063f4 <_kill_r>
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d00a      	beq.n	80063e0 <_raise_r+0x4c>
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	d103      	bne.n	80063d6 <_raise_r+0x42>
 80063ce:	2316      	movs	r3, #22
 80063d0:	6003      	str	r3, [r0, #0]
 80063d2:	2001      	movs	r0, #1
 80063d4:	e7e7      	b.n	80063a6 <_raise_r+0x12>
 80063d6:	2100      	movs	r1, #0
 80063d8:	4620      	mov	r0, r4
 80063da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80063de:	4798      	blx	r3
 80063e0:	2000      	movs	r0, #0
 80063e2:	e7e0      	b.n	80063a6 <_raise_r+0x12>

080063e4 <raise>:
 80063e4:	4b02      	ldr	r3, [pc, #8]	@ (80063f0 <raise+0xc>)
 80063e6:	4601      	mov	r1, r0
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	f7ff bfd3 	b.w	8006394 <_raise_r>
 80063ee:	bf00      	nop
 80063f0:	20000018 	.word	0x20000018

080063f4 <_kill_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	2300      	movs	r3, #0
 80063f8:	4d06      	ldr	r5, [pc, #24]	@ (8006414 <_kill_r+0x20>)
 80063fa:	4604      	mov	r4, r0
 80063fc:	4608      	mov	r0, r1
 80063fe:	4611      	mov	r1, r2
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	f7fb f902 	bl	800160a <_kill>
 8006406:	1c43      	adds	r3, r0, #1
 8006408:	d102      	bne.n	8006410 <_kill_r+0x1c>
 800640a:	682b      	ldr	r3, [r5, #0]
 800640c:	b103      	cbz	r3, 8006410 <_kill_r+0x1c>
 800640e:	6023      	str	r3, [r4, #0]
 8006410:	bd38      	pop	{r3, r4, r5, pc}
 8006412:	bf00      	nop
 8006414:	200003f0 	.word	0x200003f0

08006418 <_getpid_r>:
 8006418:	f7fb b8f0 	b.w	80015fc <_getpid>

0800641c <__swhatbuf_r>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	460c      	mov	r4, r1
 8006420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006424:	4615      	mov	r5, r2
 8006426:	2900      	cmp	r1, #0
 8006428:	461e      	mov	r6, r3
 800642a:	b096      	sub	sp, #88	@ 0x58
 800642c:	da0c      	bge.n	8006448 <__swhatbuf_r+0x2c>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	2100      	movs	r1, #0
 8006432:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006436:	bf14      	ite	ne
 8006438:	2340      	movne	r3, #64	@ 0x40
 800643a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800643e:	2000      	movs	r0, #0
 8006440:	6031      	str	r1, [r6, #0]
 8006442:	602b      	str	r3, [r5, #0]
 8006444:	b016      	add	sp, #88	@ 0x58
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	466a      	mov	r2, sp
 800644a:	f000 f849 	bl	80064e0 <_fstat_r>
 800644e:	2800      	cmp	r0, #0
 8006450:	dbed      	blt.n	800642e <__swhatbuf_r+0x12>
 8006452:	9901      	ldr	r1, [sp, #4]
 8006454:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006458:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800645c:	4259      	negs	r1, r3
 800645e:	4159      	adcs	r1, r3
 8006460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006464:	e7eb      	b.n	800643e <__swhatbuf_r+0x22>

08006466 <__smakebuf_r>:
 8006466:	898b      	ldrh	r3, [r1, #12]
 8006468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800646a:	079d      	lsls	r5, r3, #30
 800646c:	4606      	mov	r6, r0
 800646e:	460c      	mov	r4, r1
 8006470:	d507      	bpl.n	8006482 <__smakebuf_r+0x1c>
 8006472:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	6123      	str	r3, [r4, #16]
 800647a:	2301      	movs	r3, #1
 800647c:	6163      	str	r3, [r4, #20]
 800647e:	b003      	add	sp, #12
 8006480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006482:	466a      	mov	r2, sp
 8006484:	ab01      	add	r3, sp, #4
 8006486:	f7ff ffc9 	bl	800641c <__swhatbuf_r>
 800648a:	9f00      	ldr	r7, [sp, #0]
 800648c:	4605      	mov	r5, r0
 800648e:	4639      	mov	r1, r7
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff f86f 	bl	8005574 <_malloc_r>
 8006496:	b948      	cbnz	r0, 80064ac <__smakebuf_r+0x46>
 8006498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649c:	059a      	lsls	r2, r3, #22
 800649e:	d4ee      	bmi.n	800647e <__smakebuf_r+0x18>
 80064a0:	f023 0303 	bic.w	r3, r3, #3
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e7e2      	b.n	8006472 <__smakebuf_r+0xc>
 80064ac:	89a3      	ldrh	r3, [r4, #12]
 80064ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b6:	81a3      	strh	r3, [r4, #12]
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	6020      	str	r0, [r4, #0]
 80064bc:	b15b      	cbz	r3, 80064d6 <__smakebuf_r+0x70>
 80064be:	4630      	mov	r0, r6
 80064c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064c4:	f000 f81e 	bl	8006504 <_isatty_r>
 80064c8:	b128      	cbz	r0, 80064d6 <__smakebuf_r+0x70>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f023 0303 	bic.w	r3, r3, #3
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	431d      	orrs	r5, r3
 80064da:	81a5      	strh	r5, [r4, #12]
 80064dc:	e7cf      	b.n	800647e <__smakebuf_r+0x18>
	...

080064e0 <_fstat_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	2300      	movs	r3, #0
 80064e4:	4d06      	ldr	r5, [pc, #24]	@ (8006500 <_fstat_r+0x20>)
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	602b      	str	r3, [r5, #0]
 80064ee:	f7fb f8eb 	bl	80016c8 <_fstat>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d102      	bne.n	80064fc <_fstat_r+0x1c>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	b103      	cbz	r3, 80064fc <_fstat_r+0x1c>
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	bf00      	nop
 8006500:	200003f0 	.word	0x200003f0

08006504 <_isatty_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	2300      	movs	r3, #0
 8006508:	4d05      	ldr	r5, [pc, #20]	@ (8006520 <_isatty_r+0x1c>)
 800650a:	4604      	mov	r4, r0
 800650c:	4608      	mov	r0, r1
 800650e:	602b      	str	r3, [r5, #0]
 8006510:	f7fb f8e9 	bl	80016e6 <_isatty>
 8006514:	1c43      	adds	r3, r0, #1
 8006516:	d102      	bne.n	800651e <_isatty_r+0x1a>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	b103      	cbz	r3, 800651e <_isatty_r+0x1a>
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	bd38      	pop	{r3, r4, r5, pc}
 8006520:	200003f0 	.word	0x200003f0

08006524 <_init>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr

08006530 <_fini>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr
