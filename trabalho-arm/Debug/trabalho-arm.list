
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  080098b8  080098b8  0000a8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e98  08009e98  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009e98  08009e98  0000ae98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea0  08009ea0  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea0  08009ea0  0000aea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ea4  08009ea4  0000aea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009ea8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001dc  0800a084  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a084  0000b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b91c  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244e  00000000  00000000  00016b21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00018f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e8  00000000  00000000  00019c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001994c  00000000  00000000  0001a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9c1  00000000  00000000  00033f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f455  00000000  00000000  00043955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2daa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  000d2df0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d77d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800989c 	.word	0x0800989c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800989c 	.word	0x0800989c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000
 800117c:	00000000 	.word	0x00000000

08001180 <Read_Temperature>:
#include "ambient.h"

// Temperature read function using floating-point calculation
float Read_Temperature(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 800118a:	2010      	movs	r0, #16
 800118c:	f000 f83e 	bl	800120c <read_adc_value>
 8001190:	60f8      	str	r0, [r7, #12]

    // Convert ADC value to voltage
	float adcVoltage = (adcValue / 4095.0) * 3.3; // Assuming 12-bit resolution and 3.3V reference
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	a315      	add	r3, pc, #84	@ (adr r3, 80011f0 <Read_Temperature+0x70>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fac5 	bl	800072c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	a313      	add	r3, pc, #76	@ (adr r3, 80011f8 <Read_Temperature+0x78>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc84 	bl	8000ac8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]

	// Temperature calculation
	// Temperature = (Vadc - V25) / Slope + T25
	// T25 = 25°C (reference temperature)

	float temperature = ((adcVoltage - VOLTAGE_AT_25C) / AVG_SLOPE) + 25;
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <Read_Temperature+0x80>)
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f7ff fcd2 	bl	8000b70 <__aeabi_fsub>
 80011cc:	4603      	mov	r3, r0
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <Read_Temperature+0x84>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe8b 	bl	8000eec <__aeabi_fdiv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	490b      	ldr	r1, [pc, #44]	@ (8001208 <Read_Temperature+0x88>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcca 	bl	8000b74 <__addsf3>
 80011e0:	4603      	mov	r3, r0
 80011e2:	607b      	str	r3, [r7, #4]

    return temperature;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40affe00 	.word	0x40affe00
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	3fb70a3d 	.word	0x3fb70a3d
 8001204:	4089999a 	.word	0x4089999a
 8001208:	41c80000 	.word	0x41c80000

0800120c <read_adc_value>:


uint32_t read_adc_value(uint32_t channel) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;  // Adjust as needed
 800122c:	2305      	movs	r3, #5
 800122e:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <read_adc_value+0x6c>)
 8001238:	f001 ffc0 	bl	80031bc <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <read_adc_value+0x3c>
        // Handle error
        return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e012      	b.n	800126e <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <read_adc_value+0x6c>)
 800124a:	f001 fdcb 	bl	8002de4 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800124e:	f04f 31ff 	mov.w	r1, #4294967295
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <read_adc_value+0x6c>)
 8001254:	f001 fea0 	bl	8002f98 <HAL_ADC_PollForConversion>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <read_adc_value+0x6c>)
 8001260:	f001 ffa0 	bl	80031a4 <HAL_ADC_GetValue>
 8001264:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <read_adc_value+0x6c>)
 8001268:	f001 fe6a 	bl	8002f40 <HAL_ADC_Stop>

    return adcValue;
 800126c:	697b      	ldr	r3, [r7, #20]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f8 	.word	0x200001f8

0800127c <read_light_outside>:

float read_light_outside(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]

    // Read LDR1 value from PA0 (ADC1_IN0)
    adcValue = read_adc_value(ADC_CHANNEL_0);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ffc0 	bl	800120c <read_adc_value>
 800128c:	6078      	str	r0, [r7, #4]

   // Convert ADC value to a percentage of light intensity
   float lightIntensity = (float)adcValue / ADC_FULL_SCALE;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fd20 	bl	8000cd4 <__aeabi_ui2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <read_light_outside+0x3c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe27 	bl	8000eec <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	603b      	str	r3, [r7, #0]

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012a8:	f7ff fc62 	bl	8000b70 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	457ff000 	.word	0x457ff000

080012bc <read_light_inside>:

float read_light_inside(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]

    // Read LDR1 value from PA0 (ADC1_IN0)
    adcValue = read_adc_value(ADC_CHANNEL_1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff ffa0 	bl	800120c <read_adc_value>
 80012cc:	6078      	str	r0, [r7, #4]

   // Convert ADC value to a percentage of light intensity
   float lightIntensity = (float)adcValue / ADC_FULL_SCALE;
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd00 	bl	8000cd4 <__aeabi_ui2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <read_light_inside+0x3c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe07 	bl	8000eec <__aeabi_fdiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	603b      	str	r3, [r7, #0]

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012e8:	f7ff fc42 	bl	8000b70 <__aeabi_fsub>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	457ff000 	.word	0x457ff000
 80012fc:	00000000 	.word	0x00000000

08001300 <Regulate_Light_Intensity>:


void Regulate_Light_Intensity(void) {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
    // Passo 1: Calcular a porcentagem do LDR
    float ldr_percentage = read_light_inside();
 8001306:	f7ff ffd9 	bl	80012bc <read_light_inside>
 800130a:	6178      	str	r0, [r7, #20]

    // Obter o ciclo de trabalho atual do PWM
    uint32_t current_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 800130c:	4b46      	ldr	r3, [pc, #280]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	613b      	str	r3, [r7, #16]

    if (ldr_percentage < LDR_MIN_THRESHOLD - LDR_DEAD_ZONE) {
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff f887 	bl	8000428 <__aeabi_f2d>
 800131a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001418 <Regulate_Light_Intensity+0x118>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff fb4c 	bl	80009bc <__aeabi_dcmplt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <Regulate_Light_Intensity+0x42>
        // Aumentar a intensidade da luz (aumentar o ciclo de trabalho do PWM) se estiver abaixo do limite
        if (current_compare < (htim4.Init.Period - PWM_STEP_SIZE)) {
 800132a:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3b02      	subs	r3, #2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	429a      	cmp	r2, r3
 8001334:	d25b      	bcs.n	80013ee <Regulate_Light_Intensity+0xee>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare + PWM_STEP_SIZE);
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	3202      	adds	r2, #2
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001340:	e055      	b.n	80013ee <Regulate_Light_Intensity+0xee>
        }
    } else if (ldr_percentage > LDR_MAX_THRESHOLD + LDR_DEAD_ZONE) {
 8001342:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff fed8 	bl	80010fc <__aeabi_fcmpgt>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <Regulate_Light_Intensity+0x6e>
        // Diminuir a intensidade da luz (diminuir o ciclo de trabalho do PWM) se estiver acima do limite
    	if (current_compare > PWM_STEP_SIZE) {
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d905      	bls.n	8001364 <Regulate_Light_Intensity+0x64>
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare - PWM_STEP_SIZE);
 8001358:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	3a02      	subs	r2, #2
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
 8001362:	e044      	b.n	80013ee <Regulate_Light_Intensity+0xee>
    	} else {
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001364:	4b30      	ldr	r3, [pc, #192]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40
 800136c:	e03f      	b.n	80013ee <Regulate_Light_Intensity+0xee>
    	}
    } else {
        // Se a leitura do LDR estiver dentro da faixa desejada, verifique a resposta do ajuste
        // Faça um ajuste pequeno para verificar a resposta
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
									current_compare - PWM_ADJUSTMENT_STEP : 0;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b02      	cmp	r3, #2
 8001372:	bf38      	it	cc
 8001374:	2302      	movcc	r3, #2
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
 8001376:	3b02      	subs	r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, adjusted_compare);
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(ADJUSTMENT_DELAY);  // Aguarde um curto período para estabilizar a leitura
 8001382:	2032      	movs	r0, #50	@ 0x32
 8001384:	f001 fc32 	bl	8002bec <HAL_Delay>

        // Leia o LDR após o ajuste
        float new_ldr_percentage = read_light_inside();
 8001388:	f7ff ff98 	bl	80012bc <read_light_inside>
 800138c:	60b8      	str	r0, [r7, #8]

        // Se o LDR ainda estiver dentro da faixa, considere o ajuste como adequado
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff f84a 	bl	8000428 <__aeabi_f2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	6978      	ldr	r0, [r7, #20]
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	a320      	add	r3, pc, #128	@ (adr r3, 8001420 <Regulate_Light_Intensity+0x120>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fee0 	bl	8000168 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff fb18 	bl	80009e4 <__aeabi_dcmpge>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d015      	beq.n	80013e6 <Regulate_Light_Intensity+0xe6>
            new_ldr_percentage <= ldr_percentage + LDR_DEAD_ZONE) {
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	a315      	add	r3, pc, #84	@ (adr r3, 8001420 <Regulate_Light_Intensity+0x120>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7fe fecc 	bl	800016c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff faf8 	bl	80009d0 <__aeabi_dcmple>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <Regulate_Light_Intensity+0xee>
            // Se o LDR não mudou significativamente, o ajuste foi adequado
        } else {
            // Se o LDR mudou significativamente, ajuste o PWM de volta ao valor anterior
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare);
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    // Garantir que o ciclo de trabalho do PWM permaneça dentro da faixa válida (0 a ARR)
	uint32_t final_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	607b      	str	r3, [r7, #4]
	if (final_compare > htim4.Init.Period) {
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d904      	bls.n	800140a <Regulate_Light_Intensity+0x10a>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, htim4.Init.Period);
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001406:	68d2      	ldr	r2, [r2, #12]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
	} else if (final_compare < 0) {
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
	}

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bdb0      	pop	{r4, r5, r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	99999999 	.word	0x99999999
 800141c:	3fe19999 	.word	0x3fe19999
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3fa99999 	.word	0x3fa99999
 8001428:	200002fc 	.word	0x200002fc
 800142c:	00000000 	.word	0x00000000

08001430 <Classify_Day_or_Night>:

void Classify_Day_or_Night(volatile char *flag_turno_dia) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    // Passo 1: Calcular a porcentagem do LDR
    float ldr_percentage = read_light_outside();
 8001438:	f7ff ff20 	bl	800127c <read_light_outside>
 800143c:	60f8      	str	r0, [r7, #12]

    // Verifica se é NOITE
    if (ldr_percentage < LDR_NIGHT_THRESHOLD - LDR_DEAD_ZONE) {
 800143e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff fe3c 	bl	80010c0 <__aeabi_fcmplt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <Classify_Day_or_Night+0x26>
    	*flag_turno_dia = 0;		// 1 = Dia, 0 = Noite
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    } else if (ldr_percentage > LDR_DAY_THRESHOLD + LDR_DEAD_ZONE) {
    	*flag_turno_dia = 1;		// 1 = Dia, 0 = Noite
    } else {

    }
}
 8001454:	e00e      	b.n	8001474 <Classify_Day_or_Night+0x44>
    } else if (ldr_percentage > LDR_DAY_THRESHOLD + LDR_DEAD_ZONE) {
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7fe ffe6 	bl	8000428 <__aeabi_f2d>
 800145c:	a308      	add	r3, pc, #32	@ (adr r3, 8001480 <Classify_Day_or_Night+0x50>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff fac9 	bl	80009f8 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <Classify_Day_or_Night+0x3e>
}
 800146c:	e002      	b.n	8001474 <Classify_Day_or_Night+0x44>
    	*flag_turno_dia = 1;		// 1 = Dia, 0 = Noite
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	cccccccd 	.word	0xcccccccd
 8001484:	3fe4cccc 	.word	0x3fe4cccc

08001488 <debounce>:
#include "main.h"
#include "keypad.h"
#include "lcd.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 800149c:	2301      	movs	r3, #1
 800149e:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d822      	bhi.n	80014f0 <debounce+0x68>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <debounce+0x28>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014cd 	.word	0x080014cd
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	080014e5 	.word	0x080014e5
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <debounce+0xac>)
 80014c2:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 80014c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c8:	81fb      	strh	r3, [r7, #14]
            break;
 80014ca:	e013      	b.n	80014f4 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <debounce+0xac>)
 80014ce:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	81fb      	strh	r3, [r7, #14]
            break;
 80014d6:	e00d      	b.n	80014f4 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <debounce+0xac>)
 80014da:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 80014dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e0:	81fb      	strh	r3, [r7, #14]
            break;
 80014e2:	e007      	b.n	80014f4 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <debounce+0xac>)
 80014e6:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 80014e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ec:	81fb      	strh	r3, [r7, #14]
            break;
 80014ee:	e001      	b.n	80014f4 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 80014f0:	2301      	movs	r3, #1
 80014f2:	e01a      	b.n	800152a <debounce+0xa2>
    }

    while (count < 7) {
 80014f4:	e015      	b.n	8001522 <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 fb78 	bl	8002bec <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	4619      	mov	r1, r3
 8001500:	6938      	ldr	r0, [r7, #16]
 8001502:	f002 fbe1 	bl	8003cc8 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 800150a:	7d7a      	ldrb	r2, [r7, #21]
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	429a      	cmp	r2, r3
 8001510:	d103      	bne.n	800151a <debounce+0x92>
            count++;
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	3301      	adds	r3, #1
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e001      	b.n	800151e <debounce+0x96>
        } else {
            count = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 800151e:	7d7b      	ldrb	r3, [r7, #21]
 8001520:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b06      	cmp	r3, #6
 8001526:	d9e6      	bls.n	80014f6 <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 8001528:	7d7b      	ldrb	r3, [r7, #21]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010c00 	.word	0x40010c00

08001538 <keypad_init>:

void keypad_init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    // Initialize all columns to high
    HAL_GPIO_WritePin(KEYPAD_COL1_GPIO_Port, KEYPAD_COL1_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	480a      	ldr	r0, [pc, #40]	@ (800156c <keypad_init+0x34>)
 8001542:	f002 fbd8 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2102      	movs	r1, #2
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <keypad_init+0x34>)
 800154c:	f002 fbd3 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <keypad_init+0x34>)
 8001558:	f002 fbcd 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001562:	4802      	ldr	r0, [pc, #8]	@ (800156c <keypad_init+0x34>)
 8001564:	f002 fbc7 	bl	8003cf6 <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010c00 	.word	0x40010c00

08001570 <keypad_getkey>:

char keypad_getkey(void) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <keypad_getkey+0xdc>)
 8001578:	1d3c      	adds	r4, r7, #4
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 8001580:	2300      	movs	r3, #0
 8001582:	77bb      	strb	r3, [r7, #30]
 8001584:	e059      	b.n	800163a <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 8001586:	7fbb      	ldrb	r3, [r7, #30]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d821      	bhi.n	80015d0 <keypad_getkey+0x60>
 800158c:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <keypad_getkey+0x24>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015af 	.word	0x080015af
 800159c:	080015b9 	.word	0x080015b9
 80015a0:	080015c5 	.word	0x080015c5
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <keypad_getkey+0xe0>)
 80015a6:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	82fb      	strh	r3, [r7, #22]
                break;
 80015ac:	e015      	b.n	80015da <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <keypad_getkey+0xe0>)
 80015b0:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 80015b2:	2302      	movs	r3, #2
 80015b4:	82fb      	strh	r3, [r7, #22]
                break;
 80015b6:	e010      	b.n	80015da <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <keypad_getkey+0xe0>)
 80015ba:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 80015bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c0:	82fb      	strh	r3, [r7, #22]
                break;
 80015c2:	e00a      	b.n	80015da <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <keypad_getkey+0xe0>)
 80015c6:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 80015c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015cc:	82fb      	strh	r3, [r7, #22]
                break;
 80015ce:	e004      	b.n	80015da <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	82fb      	strh	r3, [r7, #22]
                break;
 80015d8:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	69b8      	ldr	r0, [r7, #24]
 80015e2:	f002 fb88 	bl	8003cf6 <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e01a      	b.n	8001622 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 80015ec:	7fba      	ldrb	r2, [r7, #30]
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff48 	bl	8001488 <debounce>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	69b8      	ldr	r0, [r7, #24]
 8001606:	f002 fb76 	bl	8003cf6 <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 800160a:	7ffa      	ldrb	r2, [r7, #31]
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	3220      	adds	r2, #32
 8001612:	443a      	add	r2, r7
 8001614:	4413      	add	r3, r2
 8001616:	3b1c      	subs	r3, #28
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	e012      	b.n	8001642 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	3301      	adds	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d9e1      	bls.n	80015ec <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8001628:	8afb      	ldrh	r3, [r7, #22]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	69b8      	ldr	r0, [r7, #24]
 8001630:	f002 fb61 	bl	8003cf6 <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8001634:	7fbb      	ldrb	r3, [r7, #30]
 8001636:	3301      	adds	r3, #1
 8001638:	77bb      	strb	r3, [r7, #30]
 800163a:	7fbb      	ldrb	r3, [r7, #30]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d9a2      	bls.n	8001586 <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	080098b8 	.word	0x080098b8
 8001650:	40010c00 	.word	0x40010c00

08001654 <read_temperature_keypad>:

float read_temperature_keypad(char *buffer) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	char key;
	short index = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	81fb      	strh	r3, [r7, #14]
	float temperature_value;

	// Initialize buffer
	memset(buffer, 0, 2 + 1);
 8001660:	2203      	movs	r2, #3
 8001662:	2100      	movs	r1, #0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f005 fbd0 	bl	8006e0a <memset>

	while (index < 2) {
 800166a:	e03b      	b.n	80016e4 <read_temperature_keypad+0x90>
		key = keypad_getkey();
 800166c:	f7ff ff80 	bl	8001570 <keypad_getkey>
 8001670:	4603      	mov	r3, r0
 8001672:	737b      	strb	r3, [r7, #13]
		if (key != 0) { // Check if a key is pressed
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d034      	beq.n	80016e4 <read_temperature_keypad+0x90>
			if (key >= '0' && key <= '9') { // Check if the key is a digit
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	2b2f      	cmp	r3, #47	@ 0x2f
 800167e:	d917      	bls.n	80016b0 <read_temperature_keypad+0x5c>
 8001680:	7b7b      	ldrb	r3, [r7, #13]
 8001682:	2b39      	cmp	r3, #57	@ 0x39
 8001684:	d814      	bhi.n	80016b0 <read_temperature_keypad+0x5c>
				buffer[index++] = key; // Store the digit in the buffer
 8001686:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800168a:	b293      	uxth	r3, r2
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	7b7a      	ldrb	r2, [r7, #13]
 8001698:	701a      	strb	r2, [r3, #0]
				//write_data_LCD(key);
				clear_display();
 800169a:	f000 f9d0 	bl	8001a3e <clear_display>
				write_string_line(1,"Digite o Valor:");
 800169e:	492f      	ldr	r1, [pc, #188]	@ (800175c <read_temperature_keypad+0x108>)
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 f9b2 	bl	8001a0a <write_string_line>
				write_string_line(2,buffer);
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	2002      	movs	r0, #2
 80016aa:	f000 f9ae 	bl	8001a0a <write_string_line>
 80016ae:	e016      	b.n	80016de <read_temperature_keypad+0x8a>
				} else if (key == '#') { // Use '#' as an enter key
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	2b23      	cmp	r3, #35	@ 0x23
 80016b4:	d01b      	beq.n	80016ee <read_temperature_keypad+0x9a>
				break; // Exit loop when '#' is pressed
				} else if (key == '*') { // Use '*' to cancel input
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80016ba:	d110      	bne.n	80016de <read_temperature_keypad+0x8a>
				// Optionally, clear the buffer
				memset(buffer, 0, 2 + 1);
 80016bc:	2203      	movs	r2, #3
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f005 fba2 	bl	8006e0a <memset>
				index = 0; // Reset index
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
				clear_display();
 80016ca:	f000 f9b8 	bl	8001a3e <clear_display>
				write_string_line(1,"Digite o Valor:");
 80016ce:	4923      	ldr	r1, [pc, #140]	@ (800175c <read_temperature_keypad+0x108>)
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 f99a 	bl	8001a0a <write_string_line>
				write_string_line(2,buffer);
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2002      	movs	r0, #2
 80016da:	f000 f996 	bl	8001a0a <write_string_line>
			}
			// Add a small delay to debounce
			HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	@ 0x64
 80016e0:	f001 fa84 	bl	8002bec <HAL_Delay>
	while (index < 2) {
 80016e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	ddbf      	ble.n	800166c <read_temperature_keypad+0x18>
 80016ec:	e000      	b.n	80016f0 <read_temperature_keypad+0x9c>
				break; // Exit loop when '#' is pressed
 80016ee:	bf00      	nop
		}
	}
	buffer[index] = '\0'; // Null-terminate the card number
 80016f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

	temperature_value = atof(buffer);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f003 fff9 	bl	80056f4 <atof>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f9dd 	bl	8000ac8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	60bb      	str	r3, [r7, #8]
	if (temperature_value >= 19.0 && temperature_value <= 32.0) {
 8001712:	4913      	ldr	r1, [pc, #76]	@ (8001760 <read_temperature_keypad+0x10c>)
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7ff fce7 	bl	80010e8 <__aeabi_fcmpge>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <read_temperature_keypad+0xe0>
 8001720:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f7ff fcd5 	bl	80010d4 <__aeabi_fcmple>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <read_temperature_keypad+0xe0>
		return temperature_value;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	e00e      	b.n	8001752 <read_temperature_keypad+0xfe>
		} else {
		clear_display();
 8001734:	f000 f983 	bl	8001a3e <clear_display>
		write_string_line(1,"Valor Invalido!");
 8001738:	490a      	ldr	r1, [pc, #40]	@ (8001764 <read_temperature_keypad+0x110>)
 800173a:	2001      	movs	r0, #1
 800173c:	f000 f965 	bl	8001a0a <write_string_line>
		write_string_line(2," 19 < Temp < 32");
 8001740:	4909      	ldr	r1, [pc, #36]	@ (8001768 <read_temperature_keypad+0x114>)
 8001742:	2002      	movs	r0, #2
 8001744:	f000 f961 	bl	8001a0a <write_string_line>
		HAL_Delay(2000); // Exibe a mensagem de erro por 2 segundos
 8001748:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800174c:	f001 fa4e 	bl	8002bec <HAL_Delay>
		return 30.0; // Reseta o valor para 30.0
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <read_temperature_keypad+0x118>)
	}

}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	080098c8 	.word	0x080098c8
 8001760:	41980000 	.word	0x41980000
 8001764:	080098d8 	.word	0x080098d8
 8001768:	080098e8 	.word	0x080098e8
 800176c:	41f00000 	.word	0x41f00000

08001770 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	4841      	ldr	r0, [pc, #260]	@ (8001884 <write_command_LCD+0x114>)
 8001780:	f002 fab9 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2110      	movs	r1, #16
 8001788:	483e      	ldr	r0, [pc, #248]	@ (8001884 <write_command_LCD+0x114>)
 800178a:	f002 fab4 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	111b      	asrs	r3, r3, #4
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a0:	4839      	ldr	r0, [pc, #228]	@ (8001888 <write_command_LCD+0x118>)
 80017a2:	f002 faa8 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	115b      	asrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017b8:	4833      	ldr	r0, [pc, #204]	@ (8001888 <write_command_LCD+0x118>)
 80017ba:	f002 fa9c 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	119b      	asrs	r3, r3, #6
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d0:	482d      	ldr	r0, [pc, #180]	@ (8001888 <write_command_LCD+0x118>)
 80017d2:	f002 fa90 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	09db      	lsrs	r3, r3, #7
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e2:	4829      	ldr	r0, [pc, #164]	@ (8001888 <write_command_LCD+0x118>)
 80017e4:	f002 fa87 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f001 f9ff 	bl	8002bec <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2110      	movs	r1, #16
 80017f2:	4824      	ldr	r0, [pc, #144]	@ (8001884 <write_command_LCD+0x114>)
 80017f4:	f002 fa7f 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f001 f9f7 	bl	8002bec <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2110      	movs	r1, #16
 8001802:	4820      	ldr	r0, [pc, #128]	@ (8001884 <write_command_LCD+0x114>)
 8001804:	f002 fa77 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001816:	481c      	ldr	r0, [pc, #112]	@ (8001888 <write_command_LCD+0x118>)
 8001818:	f002 fa6d 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800182e:	4816      	ldr	r0, [pc, #88]	@ (8001888 <write_command_LCD+0x118>)
 8001830:	f002 fa61 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	109b      	asrs	r3, r3, #2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001846:	4810      	ldr	r0, [pc, #64]	@ (8001888 <write_command_LCD+0x118>)
 8001848:	f002 fa55 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	10db      	asrs	r3, r3, #3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800185e:	480a      	ldr	r0, [pc, #40]	@ (8001888 <write_command_LCD+0x118>)
 8001860:	f002 fa49 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f001 f9c1 	bl	8002bec <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2110      	movs	r1, #16
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <write_command_LCD+0x114>)
 8001870:	f002 fa41 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001874:	2002      	movs	r0, #2
 8001876:	f001 f9b9 	bl	8002bec <HAL_Delay>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010c00 	.word	0x40010c00
 8001888:	40010800 	.word	0x40010800

0800188c <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2108      	movs	r1, #8
 800189a:	4841      	ldr	r0, [pc, #260]	@ (80019a0 <write_data_LCD+0x114>)
 800189c:	f002 fa2b 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2110      	movs	r1, #16
 80018a4:	483e      	ldr	r0, [pc, #248]	@ (80019a0 <write_data_LCD+0x114>)
 80018a6:	f002 fa26 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	111b      	asrs	r3, r3, #4
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018bc:	4839      	ldr	r0, [pc, #228]	@ (80019a4 <write_data_LCD+0x118>)
 80018be:	f002 fa1a 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	115b      	asrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018d4:	4833      	ldr	r0, [pc, #204]	@ (80019a4 <write_data_LCD+0x118>)
 80018d6:	f002 fa0e 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	119b      	asrs	r3, r3, #6
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ec:	482d      	ldr	r0, [pc, #180]	@ (80019a4 <write_data_LCD+0x118>)
 80018ee:	f002 fa02 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	09db      	lsrs	r3, r3, #7
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fe:	4829      	ldr	r0, [pc, #164]	@ (80019a4 <write_data_LCD+0x118>)
 8001900:	f002 f9f9 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f001 f971 	bl	8002bec <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	4824      	ldr	r0, [pc, #144]	@ (80019a0 <write_data_LCD+0x114>)
 8001910:	f002 f9f1 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001914:	2002      	movs	r0, #2
 8001916:	f001 f969 	bl	8002bec <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2110      	movs	r1, #16
 800191e:	4820      	ldr	r0, [pc, #128]	@ (80019a0 <write_data_LCD+0x114>)
 8001920:	f002 f9e9 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001932:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <write_data_LCD+0x118>)
 8001934:	f002 f9df 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	105b      	asrs	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194a:	4816      	ldr	r0, [pc, #88]	@ (80019a4 <write_data_LCD+0x118>)
 800194c:	f002 f9d3 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	109b      	asrs	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001962:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <write_data_LCD+0x118>)
 8001964:	f002 f9c7 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	10db      	asrs	r3, r3, #3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197a:	480a      	ldr	r0, [pc, #40]	@ (80019a4 <write_data_LCD+0x118>)
 800197c:	f002 f9bb 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f001 f933 	bl	8002bec <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <write_data_LCD+0x114>)
 800198c:	f002 f9b3 	bl	8003cf6 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001990:	2002      	movs	r0, #2
 8001992:	f001 f92b 	bl	8002bec <HAL_Delay>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40010800 	.word	0x40010800

080019a8 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 80019ac:	2032      	movs	r0, #50	@ 0x32
 80019ae:	f001 f91d 	bl	8002bec <HAL_Delay>
    write_command_LCD(0x33);
 80019b2:	2033      	movs	r0, #51	@ 0x33
 80019b4:	f7ff fedc 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x32);
 80019b8:	2032      	movs	r0, #50	@ 0x32
 80019ba:	f7ff fed9 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x28);
 80019be:	2028      	movs	r0, #40	@ 0x28
 80019c0:	f7ff fed6 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x0C);
 80019c4:	200c      	movs	r0, #12
 80019c6:	f7ff fed3 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x06);
 80019ca:	2006      	movs	r0, #6
 80019cc:	f7ff fed0 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x01);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fecd 	bl	8001770 <write_command_LCD>
    HAL_Delay(2);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f001 f908 	bl	8002bec <HAL_Delay>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    while (*text) {
 80019e8:	e006      	b.n	80019f8 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff4a 	bl	800188c <write_data_LCD>
    while (*text) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f4      	bne.n	80019ea <write_string_LCD+0xa>
    }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <write_string_line>:

void write_string_line(char line, const char *text) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	6039      	str	r1, [r7, #0]
 8001a14:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d103      	bne.n	8001a24 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8001a1c:	2080      	movs	r0, #128	@ 0x80
 8001a1e:	f7ff fea7 	bl	8001770 <write_command_LCD>
 8001a22:	e005      	b.n	8001a30 <write_string_line+0x26>
    } else if (line == 2) {
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d102      	bne.n	8001a30 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 8001a2a:	20c0      	movs	r0, #192	@ 0xc0
 8001a2c:	f7ff fea0 	bl	8001770 <write_command_LCD>
    }
    write_string_LCD(text);
 8001a30:	6838      	ldr	r0, [r7, #0]
 8001a32:	f7ff ffd5 	bl	80019e0 <write_string_LCD>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <clear_display>:

void clear_display(void) {
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fe94 	bl	8001770 <write_command_LCD>
    HAL_Delay(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f001 f8cf 	bl	8002bec <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <navigate_options>:

// Function to display options and navigate between them
char navigate_options(const char *options[], char num_options) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
    short current_option = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	81fb      	strh	r3, [r7, #14]
    clear_display();
 8001a64:	f7ff ffeb 	bl	8001a3e <clear_display>
    write_string_line(1, options[current_option]);
 8001a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ffc7 	bl	8001a0a <write_string_line>
    write_string_line(2, "<-B  A->   [#OK]");
 8001a7c:	492a      	ldr	r1, [pc, #168]	@ (8001b28 <navigate_options+0xd4>)
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff ffc3 	bl	8001a0a <write_string_line>
    char key;
    while (1) {
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 8001a84:	f7ff fd74 	bl	8001570 <keypad_getkey>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	737b      	strb	r3, [r7, #13]
        if (key != 0) {
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f8      	beq.n	8001a84 <navigate_options+0x30>
            switch (key) {
 8001a92:	7b7b      	ldrb	r3, [r7, #13]
 8001a94:	2b42      	cmp	r3, #66	@ 0x42
 8001a96:	d006      	beq.n	8001aa6 <navigate_options+0x52>
 8001a98:	2b42      	cmp	r3, #66	@ 0x42
 8001a9a:	dc3f      	bgt.n	8001b1c <navigate_options+0xc8>
 8001a9c:	2b23      	cmp	r3, #35	@ 0x23
 8001a9e:	d03a      	beq.n	8001b16 <navigate_options+0xc2>
 8001aa0:	2b41      	cmp	r3, #65	@ 0x41
 8001aa2:	d01d      	beq.n	8001ae0 <navigate_options+0x8c>
                    write_string_line(2, "<-B  A->   [#OK]");
                    break;
                case '#':
                    return current_option;
                default:
                    break;
 8001aa4:	e03a      	b.n	8001b1c <navigate_options+0xc8>
                    current_option = (current_option - 1 + num_options) % num_options;
 8001aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aaa:	1e5a      	subs	r2, r3, #1
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	4413      	add	r3, r2
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ab6:	fb01 f202 	mul.w	r2, r1, r2
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001abe:	f7ff ffbe 	bl	8001a3e <clear_display>
                    write_string_line(1, options[current_option]);
 8001ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff9a 	bl	8001a0a <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001ad6:	4914      	ldr	r1, [pc, #80]	@ (8001b28 <navigate_options+0xd4>)
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff ff96 	bl	8001a0a <write_string_line>
                    break;
 8001ade:	e01e      	b.n	8001b1e <navigate_options+0xca>
                    current_option = (current_option + 1) % num_options;
 8001ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001aec:	fb01 f202 	mul.w	r2, r1, r2
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001af4:	f7ff ffa3 	bl	8001a3e <clear_display>
                    write_string_line(1, options[current_option]);
 8001af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff ff7f 	bl	8001a0a <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001b0c:	4906      	ldr	r1, [pc, #24]	@ (8001b28 <navigate_options+0xd4>)
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff ff7b 	bl	8001a0a <write_string_line>
                    break;
 8001b14:	e003      	b.n	8001b1e <navigate_options+0xca>
                    return current_option;
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e001      	b.n	8001b20 <navigate_options+0xcc>
                    break;
 8001b1c:	bf00      	nop
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 8001b1e:	e7b1      	b.n	8001a84 <navigate_options+0x30>
            }
        }
    }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	080098f8 	.word	0x080098f8

08001b2c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrupt handler for TIM2 Channel 1 and Channel 2

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	// TIMER 3 -> IRRIGACAO (Periodo 1s)
    if (htim->Instance == TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a35      	ldr	r2, [pc, #212]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d163      	bne.n	8001c06 <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b42:	4834      	ldr	r0, [pc, #208]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b44:	f002 f8ef 	bl	8003d26 <HAL_GPIO_TogglePin>

    	/* ============================== IRRIGACAO ============================== */
    	elapsed_time++;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b54:	701a      	strb	r2, [r3, #0]
    	if(elapsed_time >= tempo_irrigacao && flag_irrigacao_em_andamento == 1){
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d30d      	bcc.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x56>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2108      	movs	r1, #8
 8001b74:	482b      	ldr	r0, [pc, #172]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b76:	f002 f8be 	bl	8003cf6 <HAL_GPIO_WritePin>
    		flag_irrigacao_em_andamento=0;
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e025      	b.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
    	}
    	else if(elapsed_time < tempo_irrigacao && flag_irrigacao_em_andamento == 0){
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x88>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	4820      	ldr	r0, [pc, #128]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001ba2:	f002 f8a8 	bl	8003cf6 <HAL_GPIO_WritePin>
    		elapsed_time=0;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
    		flag_irrigacao_em_andamento=1;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e00c      	b.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
    	}
    	else if(elapsed_time >= 60 && flag_irrigacao_em_andamento == 0){
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bbc:	d907      	bls.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001bbe:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
			elapsed_time=0;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
		}

    	/* ==================== DEFINE VARIAVEIS DO SISTEMA ==================== */
    	temperatura_atual = Read_Temperature();
 8001bce:	f7ff fad7 	bl	8001180 <Read_Temperature>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bd6:	6013      	str	r3, [r2, #0]
		if(temperatura_atual > temperatura_limite){
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa8a 	bl	80010fc <__aeabi_fcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0xca>
			flag_temperatura_acima_limite = 1;	// 1 = Acima do Limite, 0 = Abaixo do Limite
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e002      	b.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>
		}else{
			flag_temperatura_acima_limite = 0;	// 1 = Acima do Limite, 0 = Abaixo do Limite
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
		}
		Classify_Day_or_Night(&flag_turno_dia);
 8001bfc:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bfe:	f7ff fc17 	bl	8001430 <Classify_Day_or_Night>
		select_params();
 8001c02:	f000 fac3 	bl	800218c <select_params>
    // TIMER 2 -> IRRIGACAO (Periodo 5s)
	if (htim->Instance == TIM2){

		//menu_actual_state();
	}
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40011000 	.word	0x40011000
 8001c18:	20000344 	.word	0x20000344
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000345 	.word	0x20000345
 8001c24:	40010800 	.word	0x40010800
 8001c28:	20000348 	.word	0x20000348
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000346 	.word	0x20000346
 8001c34:	20000001 	.word	0x20000001

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3e:	f000 ff73 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c42:	f000 f83f 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f000 fa0f 	bl	8002068 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c4a:	f000 f9ef 	bl	800202c <MX_DMA_Init>
  MX_ADC1_Init();
 8001c4e:	f000 f895 	bl	8001d7c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001c52:	f000 f91f 	bl	8001e94 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c56:	f000 f96b 	bl	8001f30 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001c5a:	f000 f8cd 	bl	8001df8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);

  /* Enable interrupt by timer 3*/
  HAL_TIM_Base_Start_IT(&htim3);
 8001c5e:	4814      	ldr	r0, [pc, #80]	@ (8001cb0 <main+0x78>)
 8001c60:	f002 fe32 	bl	80048c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c64:	210c      	movs	r1, #12
 8001c66:	4813      	ldr	r0, [pc, #76]	@ (8001cb4 <main+0x7c>)
 8001c68:	f002 fed8 	bl	8004a1c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c6c:	4812      	ldr	r0, [pc, #72]	@ (8001cb8 <main+0x80>)
 8001c6e:	f002 fe2b 	bl	80048c8 <HAL_TIM_Base_Start_IT>

  init_LCD();
 8001c72:	f7ff fe99 	bl	80019a8 <init_LCD>
  keypad_init();
 8001c76:	f7ff fc5f 	bl	8001538 <keypad_init>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	480f      	ldr	r0, [pc, #60]	@ (8001cbc <main+0x84>)
 8001c80:	f002 f851 	bl	8003d26 <HAL_GPIO_TogglePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  temperatura_atual = Read_Temperature();
 8001c84:	f7ff fa7c 	bl	8001180 <Read_Temperature>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc0 <main+0x88>)
 8001c8c:	6013      	str	r3, [r2, #0]
  menu_main();
 8001c8e:	f000 fc5d 	bl	800254c <menu_main>
  while (1)
  {
	  menu_actual_state();
 8001c92:	f000 fc89 	bl	80025a8 <menu_actual_state>
	 char key = keypad_getkey();
 8001c96:	f7ff fc6b 	bl	8001570 <keypad_getkey>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
	 if(key != 0){
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <main+0x70>
		 menu_selection();
 8001ca4:	f000 fb3c 	bl	8002320 <menu_selection>
	 }

	 Regulate_Light_Intensity();
 8001ca8:	f7ff fb2a 	bl	8001300 <Regulate_Light_Intensity>
  {
 8001cac:	e7f1      	b.n	8001c92 <main+0x5a>
 8001cae:	bf00      	nop
 8001cb0:	200002b4 	.word	0x200002b4
 8001cb4:	200002fc 	.word	0x200002fc
 8001cb8:	2000026c 	.word	0x2000026c
 8001cbc:	40011000 	.word	0x40011000
 8001cc0:	20000348 	.word	0x20000348

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b094      	sub	sp, #80	@ 0x50
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cce:	2228      	movs	r2, #40	@ 0x28
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f005 f899 	bl	8006e0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d02:	2301      	movs	r3, #1
 8001d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d10:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 f81c 	bl	8003d58 <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d26:	f000 fc9f 	bl	8002668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d3a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f002 fa88 	bl	800425c <HAL_RCC_ClockConfig>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d52:	f000 fc89 	bl	8002668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d56:	2302      	movs	r3, #2
 8001d58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fbf4 	bl	8004550 <HAL_RCCEx_PeriphCLKConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d6e:	f000 fc7b 	bl	8002668 <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	3750      	adds	r7, #80	@ 0x50
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d8c:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001d8e:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <MX_ADC1_Init+0x78>)
 8001d90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d98:	4b15      	ldr	r3, [pc, #84]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001da6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dac:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001db8:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001dba:	f000 ff3b 	bl	8002c34 <HAL_ADC_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dc4:	f000 fc50 	bl	8002668 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001dc8:	2310      	movs	r3, #16
 8001dca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_ADC1_Init+0x74>)
 8001dda:	f001 f9ef 	bl	80031bc <HAL_ADC_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001de4:	f000 fc40 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200001f8 	.word	0x200001f8
 8001df4:	40012400 	.word	0x40012400

08001df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e1e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e24:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e26:	2210      	movs	r2, #16
 8001e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001e2a:	4b19      	ldr	r3, [pc, #100]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e2c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e38:	4b15      	ldr	r3, [pc, #84]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e3a:	2280      	movs	r2, #128	@ 0x80
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e3e:	4814      	ldr	r0, [pc, #80]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e40:	f002 fcf2 	bl	8004828 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e4a:	f000 fc0d 	bl	8002668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e5c:	f003 f84a 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e66:	f000 fbff 	bl	8002668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e72:	463b      	mov	r3, r7
 8001e74:	4619      	mov	r1, r3
 8001e76:	4806      	ldr	r0, [pc, #24]	@ (8001e90 <MX_TIM2_Init+0x98>)
 8001e78:	f003 fbcc 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e82:	f000 fbf1 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000026c 	.word	0x2000026c

08001e94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f2c <MX_TIM3_Init+0x98>)
 8001eb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001eb8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ebc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ec4:	4b18      	ldr	r3, [pc, #96]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001ec6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001eca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ecc:	4b16      	ldr	r3, [pc, #88]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ed8:	4813      	ldr	r0, [pc, #76]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001eda:	f002 fca5 	bl	8004828 <HAL_TIM_Base_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ee4:	f000 fbc0 	bl	8002668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001ef6:	f002 fffd 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f00:	f000 fbb2 	bl	8002668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f04:	2300      	movs	r3, #0
 8001f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0c:	463b      	mov	r3, r7
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_TIM3_Init+0x94>)
 8001f12:	f003 fb7f 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f1c:	f000 fba4 	bl	8002668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200002b4 	.word	0x200002b4
 8001f2c:	40000400 	.word	0x40000400

08001f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08e      	sub	sp, #56	@ 0x38
 8001f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f44:	f107 0320 	add.w	r3, r7, #32
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4e:	1d3b      	adds	r3, r7, #4
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
 8001f5c:	615a      	str	r2, [r3, #20]
 8001f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f60:	4b30      	ldr	r3, [pc, #192]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f62:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <MX_TIM4_Init+0xf8>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001f66:	4b2f      	ldr	r3, [pc, #188]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f68:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f6c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 119;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f76:	2277      	movs	r2, #119	@ 0x77
 8001f78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f80:	4b28      	ldr	r3, [pc, #160]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f86:	4827      	ldr	r0, [pc, #156]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001f88:	f002 fc4e 	bl	8004828 <HAL_TIM_Base_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f92:	f000 fb69 	bl	8002668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4820      	ldr	r0, [pc, #128]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001fa4:	f002 ffa6 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001fae:	f000 fb5b 	bl	8002668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fb2:	481c      	ldr	r0, [pc, #112]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001fb4:	f002 fcda 	bl	800496c <HAL_TIM_PWM_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001fbe:	f000 fb53 	bl	8002668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4814      	ldr	r0, [pc, #80]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001fd2:	f003 fb1f 	bl	8005614 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001fdc:	f000 fb44 	bl	8002668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe0:	2360      	movs	r3, #96	@ 0x60
 8001fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 8001fe4:	233c      	movs	r3, #60	@ 0x3c
 8001fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480b      	ldr	r0, [pc, #44]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8001ff8:	f002 feba 	bl	8004d70 <HAL_TIM_PWM_ConfigChannel>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002002:	f000 fb31 	bl	8002668 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8002006:	4b07      	ldr	r3, [pc, #28]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <MX_TIM4_Init+0xf4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002014:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002016:	4803      	ldr	r0, [pc, #12]	@ (8002024 <MX_TIM4_Init+0xf4>)
 8002018:	f000 fc1a 	bl	8002850 <HAL_TIM_MspPostInit>

}
 800201c:	bf00      	nop
 800201e:	3738      	adds	r7, #56	@ 0x38
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200002fc 	.word	0x200002fc
 8002028:	40000800 	.word	0x40000800

0800202c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_DMA_Init+0x38>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <MX_DMA_Init+0x38>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_DMA_Init+0x38>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	200b      	movs	r0, #11
 8002050:	f001 fb1f 	bl	8003692 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002054:	200b      	movs	r0, #11
 8002056:	f001 fb38 	bl	80036ca <HAL_NVIC_EnableIRQ>

}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000

08002068 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207c:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <MX_GPIO_Init+0x114>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a3e      	ldr	r2, [pc, #248]	@ (800217c <MX_GPIO_Init+0x114>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b3c      	ldr	r3, [pc, #240]	@ (800217c <MX_GPIO_Init+0x114>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0310 	and.w	r3, r3, #16
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002094:	4b39      	ldr	r3, [pc, #228]	@ (800217c <MX_GPIO_Init+0x114>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	4a38      	ldr	r2, [pc, #224]	@ (800217c <MX_GPIO_Init+0x114>)
 800209a:	f043 0320 	orr.w	r3, r3, #32
 800209e:	6193      	str	r3, [r2, #24]
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <MX_GPIO_Init+0x114>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ac:	4b33      	ldr	r3, [pc, #204]	@ (800217c <MX_GPIO_Init+0x114>)
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	4a32      	ldr	r2, [pc, #200]	@ (800217c <MX_GPIO_Init+0x114>)
 80020b2:	f043 0304 	orr.w	r3, r3, #4
 80020b6:	6193      	str	r3, [r2, #24]
 80020b8:	4b30      	ldr	r3, [pc, #192]	@ (800217c <MX_GPIO_Init+0x114>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <MX_GPIO_Init+0x114>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a2c      	ldr	r2, [pc, #176]	@ (800217c <MX_GPIO_Init+0x114>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b2a      	ldr	r3, [pc, #168]	@ (800217c <MX_GPIO_Init+0x114>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020dc:	2200      	movs	r2, #0
 80020de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020e2:	4827      	ldr	r0, [pc, #156]	@ (8002180 <MX_GPIO_Init+0x118>)
 80020e4:	f001 fe07 	bl	8003cf6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80020e8:	2200      	movs	r2, #0
 80020ea:	f641 6108 	movw	r1, #7688	@ 0x1e08
 80020ee:	4825      	ldr	r0, [pc, #148]	@ (8002184 <MX_GPIO_Init+0x11c>)
 80020f0:	f001 fe01 	bl	8003cf6 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 80020f4:	2200      	movs	r2, #0
 80020f6:	f640 411b 	movw	r1, #3099	@ 0xc1b
 80020fa:	4823      	ldr	r0, [pc, #140]	@ (8002188 <MX_GPIO_Init+0x120>)
 80020fc:	f001 fdfb 	bl	8003cf6 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002112:	f107 0310 	add.w	r3, r7, #16
 8002116:	4619      	mov	r1, r3
 8002118:	4819      	ldr	r0, [pc, #100]	@ (8002180 <MX_GPIO_Init+0x118>)
 800211a:	f001 fc51 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRRIGACAO_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 800211e:	f641 6308 	movw	r3, #7688	@ 0x1e08
 8002122:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4813      	ldr	r0, [pc, #76]	@ (8002184 <MX_GPIO_Init+0x11c>)
 8002138:	f001 fc42 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 800213c:	f640 431b 	movw	r3, #3099	@ 0xc1b
 8002140:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	2301      	movs	r3, #1
 8002144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	480c      	ldr	r0, [pc, #48]	@ (8002188 <MX_GPIO_Init+0x120>)
 8002156:	f001 fc33 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 800215a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800215e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002164:	2301      	movs	r3, #1
 8002166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4619      	mov	r1, r3
 800216e:	4806      	ldr	r0, [pc, #24]	@ (8002188 <MX_GPIO_Init+0x120>)
 8002170:	f001 fc26 	bl	80039c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40011000 	.word	0x40011000
 8002184:	40010800 	.word	0x40010800
 8002188:	40010c00 	.word	0x40010c00

0800218c <select_params>:

/* USER CODE BEGIN 4 */

void select_params(void){
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

	switch(variedade){
 8002190:	4b5f      	ldr	r3, [pc, #380]	@ (8002310 <select_params+0x184>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d079      	beq.n	800228c <select_params+0x100>
 8002198:	2b02      	cmp	r3, #2
 800219a:	f300 80b5 	bgt.w	8002308 <select_params+0x17c>
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <select_params+0x1c>
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d039      	beq.n	800221a <select_params+0x8e>
				tempo_irrigacao = 10;
			}
			break;
	}

}
 80021a6:	e0af      	b.n	8002308 <select_params+0x17c>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 80021a8:	4b5a      	ldr	r3, [pc, #360]	@ (8002314 <select_params+0x188>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <select_params+0x38>
 80021b2:	4b59      	ldr	r3, [pc, #356]	@ (8002318 <select_params+0x18c>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d103      	bne.n	80021c4 <select_params+0x38>
				tempo_irrigacao = 17;
 80021bc:	4b57      	ldr	r3, [pc, #348]	@ (800231c <select_params+0x190>)
 80021be:	2211      	movs	r2, #17
 80021c0:	701a      	strb	r2, [r3, #0]
 80021c2:	e029      	b.n	8002218 <select_params+0x8c>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 80021c4:	4b53      	ldr	r3, [pc, #332]	@ (8002314 <select_params+0x188>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <select_params+0x54>
 80021ce:	4b52      	ldr	r3, [pc, #328]	@ (8002318 <select_params+0x18c>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <select_params+0x54>
				tempo_irrigacao = 15;
 80021d8:	4b50      	ldr	r3, [pc, #320]	@ (800231c <select_params+0x190>)
 80021da:	220f      	movs	r2, #15
 80021dc:	701a      	strb	r2, [r3, #0]
 80021de:	e01b      	b.n	8002218 <select_params+0x8c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <select_params+0x188>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d108      	bne.n	80021fc <select_params+0x70>
 80021ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <select_params+0x18c>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d103      	bne.n	80021fc <select_params+0x70>
				tempo_irrigacao = 10;
 80021f4:	4b49      	ldr	r3, [pc, #292]	@ (800231c <select_params+0x190>)
 80021f6:	220a      	movs	r2, #10
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	e00d      	b.n	8002218 <select_params+0x8c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 80021fc:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <select_params+0x188>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17b      	bne.n	80022fe <select_params+0x172>
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <select_params+0x18c>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d176      	bne.n	80022fe <select_params+0x172>
				tempo_irrigacao = 7;
 8002210:	4b42      	ldr	r3, [pc, #264]	@ (800231c <select_params+0x190>)
 8002212:	2207      	movs	r2, #7
 8002214:	701a      	strb	r2, [r3, #0]
			break;
 8002216:	e072      	b.n	80022fe <select_params+0x172>
 8002218:	e071      	b.n	80022fe <select_params+0x172>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 800221a:	4b3e      	ldr	r3, [pc, #248]	@ (8002314 <select_params+0x188>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <select_params+0xaa>
 8002224:	4b3c      	ldr	r3, [pc, #240]	@ (8002318 <select_params+0x18c>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d103      	bne.n	8002236 <select_params+0xaa>
				tempo_irrigacao = 13;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <select_params+0x190>)
 8002230:	220d      	movs	r2, #13
 8002232:	701a      	strb	r2, [r3, #0]
 8002234:	e029      	b.n	800228a <select_params+0xfe>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 8002236:	4b37      	ldr	r3, [pc, #220]	@ (8002314 <select_params+0x188>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <select_params+0xc6>
 8002240:	4b35      	ldr	r3, [pc, #212]	@ (8002318 <select_params+0x18c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d103      	bne.n	8002252 <select_params+0xc6>
				tempo_irrigacao = 10;
 800224a:	4b34      	ldr	r3, [pc, #208]	@ (800231c <select_params+0x190>)
 800224c:	220a      	movs	r2, #10
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e01b      	b.n	800228a <select_params+0xfe>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 8002252:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <select_params+0x188>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <select_params+0xe2>
 800225c:	4b2e      	ldr	r3, [pc, #184]	@ (8002318 <select_params+0x18c>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d103      	bne.n	800226e <select_params+0xe2>
				tempo_irrigacao = 6;
 8002266:	4b2d      	ldr	r3, [pc, #180]	@ (800231c <select_params+0x190>)
 8002268:	2206      	movs	r2, #6
 800226a:	701a      	strb	r2, [r3, #0]
 800226c:	e00d      	b.n	800228a <select_params+0xfe>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 800226e:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <select_params+0x188>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d144      	bne.n	8002302 <select_params+0x176>
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <select_params+0x18c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d13f      	bne.n	8002302 <select_params+0x176>
				tempo_irrigacao = 3;
 8002282:	4b26      	ldr	r3, [pc, #152]	@ (800231c <select_params+0x190>)
 8002284:	2203      	movs	r2, #3
 8002286:	701a      	strb	r2, [r3, #0]
			break;
 8002288:	e03b      	b.n	8002302 <select_params+0x176>
 800228a:	e03a      	b.n	8002302 <select_params+0x176>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <select_params+0x188>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <select_params+0x11c>
 8002296:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <select_params+0x18c>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d103      	bne.n	80022a8 <select_params+0x11c>
				tempo_irrigacao = 19;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	@ (800231c <select_params+0x190>)
 80022a2:	2213      	movs	r2, #19
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e029      	b.n	80022fc <select_params+0x170>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <select_params+0x188>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d108      	bne.n	80022c4 <select_params+0x138>
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <select_params+0x18c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <select_params+0x138>
				tempo_irrigacao = 17;
 80022bc:	4b17      	ldr	r3, [pc, #92]	@ (800231c <select_params+0x190>)
 80022be:	2211      	movs	r2, #17
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	e01b      	b.n	80022fc <select_params+0x170>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <select_params+0x188>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d108      	bne.n	80022e0 <select_params+0x154>
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <select_params+0x18c>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d103      	bne.n	80022e0 <select_params+0x154>
				tempo_irrigacao = 13;
 80022d8:	4b10      	ldr	r3, [pc, #64]	@ (800231c <select_params+0x190>)
 80022da:	220d      	movs	r2, #13
 80022dc:	701a      	strb	r2, [r3, #0]
 80022de:	e00d      	b.n	80022fc <select_params+0x170>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <select_params+0x188>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <select_params+0x17a>
 80022ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <select_params+0x18c>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d108      	bne.n	8002306 <select_params+0x17a>
				tempo_irrigacao = 10;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <select_params+0x190>)
 80022f6:	220a      	movs	r2, #10
 80022f8:	701a      	strb	r2, [r3, #0]
			break;
 80022fa:	e004      	b.n	8002306 <select_params+0x17a>
 80022fc:	e003      	b.n	8002306 <select_params+0x17a>
			break;
 80022fe:	bf00      	nop
 8002300:	e002      	b.n	8002308 <select_params+0x17c>
			break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <select_params+0x17c>
			break;
 8002306:	bf00      	nop
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000347 	.word	0x20000347
 8002314:	20000001 	.word	0x20000001
 8002318:	20000346 	.word	0x20000346
 800231c:	20000000 	.word	0x20000000

08002320 <menu_selection>:

void menu_selection(void){
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
	const char *options[] = {" Mudar Temp " "\xDF" "C", "  Mudar Planta", "      Sair"};
 8002326:	4a17      	ldr	r2, [pc, #92]	@ (8002384 <menu_selection+0x64>)
 8002328:	463b      	mov	r3, r7
 800232a:	ca07      	ldmia	r2, {r0, r1, r2}
 800232c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char num_options = sizeof(options) / sizeof(options[0]);
 8002330:	2303      	movs	r3, #3
 8002332:	73fb      	strb	r3, [r7, #15]
	char option = navigate_options(options, num_options);
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	463b      	mov	r3, r7
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb8a 	bl	8001a54 <navigate_options>
 8002340:	4603      	mov	r3, r0
 8002342:	73bb      	strb	r3, [r7, #14]
	switch(option){
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d014      	beq.n	8002374 <menu_selection+0x54>
 800234a:	2b02      	cmp	r3, #2
 800234c:	dc15      	bgt.n	800237a <menu_selection+0x5a>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <menu_selection+0x38>
 8002352:	2b01      	cmp	r3, #1
 8002354:	d007      	beq.n	8002366 <menu_selection+0x46>
			break;
		case 2:
			menu_main();
			break;
	}
}
 8002356:	e010      	b.n	800237a <menu_selection+0x5a>
			menu_temperature_selection();
 8002358:	f000 f816 	bl	8002388 <menu_temperature_selection>
			menu_main();
 800235c:	f000 f8f6 	bl	800254c <menu_main>
			select_params();
 8002360:	f7ff ff14 	bl	800218c <select_params>
			break;
 8002364:	e009      	b.n	800237a <menu_selection+0x5a>
			menu_plant_selection();
 8002366:	f000 f843 	bl	80023f0 <menu_plant_selection>
			menu_main();
 800236a:	f000 f8ef 	bl	800254c <menu_main>
			select_params();
 800236e:	f7ff ff0d 	bl	800218c <select_params>
			break;
 8002372:	e002      	b.n	800237a <menu_selection+0x5a>
			menu_main();
 8002374:	f000 f8ea 	bl	800254c <menu_main>
			break;
 8002378:	bf00      	nop
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08009938 	.word	0x08009938

08002388 <menu_temperature_selection>:

void menu_temperature_selection(void){
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
	clear_display();
 800238e:	f7ff fb56 	bl	8001a3e <clear_display>
	write_string_line(1,"Digite o Valor:");
 8002392:	4912      	ldr	r1, [pc, #72]	@ (80023dc <menu_temperature_selection+0x54>)
 8002394:	2001      	movs	r0, #1
 8002396:	f7ff fb38 	bl	8001a0a <write_string_line>
	char buffer[3];
	temperatura_limite = read_temperature_keypad(buffer);
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f959 	bl	8001654 <read_temperature_keypad>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4a0e      	ldr	r2, [pc, #56]	@ (80023e0 <menu_temperature_selection+0x58>)
 80023a6:	6013      	str	r3, [r2, #0]
	clear_display();
 80023a8:	f7ff fb49 	bl	8001a3e <clear_display>
	write_string_line(1, "Temp Selecionada");
 80023ac:	490d      	ldr	r1, [pc, #52]	@ (80023e4 <menu_temperature_selection+0x5c>)
 80023ae:	2001      	movs	r0, #1
 80023b0:	f7ff fb2b 	bl	8001a0a <write_string_line>
	write_string_line(2, "      ");
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <menu_temperature_selection+0x60>)
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7ff fb27 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb0e 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 80023c4:	4809      	ldr	r0, [pc, #36]	@ (80023ec <menu_temperature_selection+0x64>)
 80023c6:	f7ff fb0b 	bl	80019e0 <write_string_LCD>
	HAL_Delay(3000);
 80023ca:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80023ce:	f000 fc0d 	bl	8002bec <HAL_Delay>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	08009944 	.word	0x08009944
 80023e0:	20000004 	.word	0x20000004
 80023e4:	08009954 	.word	0x08009954
 80023e8:	08009968 	.word	0x08009968
 80023ec:	08009970 	.word	0x08009970

080023f0 <menu_plant_selection>:

void menu_plant_selection(void){
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af00      	add	r7, sp, #0
	const char *options[] = {"     Alface", "    Pimentao", "    Morango"};
 80023f6:	4a18      	ldr	r2, [pc, #96]	@ (8002458 <menu_plant_selection+0x68>)
 80023f8:	f107 0310 	add.w	r3, r7, #16
 80023fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80023fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char num_options = sizeof(options) / sizeof(options[0]);
 8002402:	2303      	movs	r3, #3
 8002404:	77fb      	strb	r3, [r7, #31]
	variedade = navigate_options(options, num_options);
 8002406:	7ffa      	ldrb	r2, [r7, #31]
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fb20 	bl	8001a54 <navigate_options>
 8002414:	4603      	mov	r3, r0
 8002416:	461a      	mov	r2, r3
 8002418:	4b10      	ldr	r3, [pc, #64]	@ (800245c <menu_plant_selection+0x6c>)
 800241a:	701a      	strb	r2, [r3, #0]
	char buffer[16];
	get_name(variedade, buffer);
 800241c:	4b0f      	ldr	r3, [pc, #60]	@ (800245c <menu_plant_selection+0x6c>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	463a      	mov	r2, r7
 8002422:	4611      	mov	r1, r2
 8002424:	4618      	mov	r0, r3
 8002426:	f000 f81f 	bl	8002468 <get_name>
	clear_display();
 800242a:	f7ff fb08 	bl	8001a3e <clear_display>
	write_string_line(1, "   ");
 800242e:	490c      	ldr	r1, [pc, #48]	@ (8002460 <menu_plant_selection+0x70>)
 8002430:	2001      	movs	r0, #1
 8002432:	f7ff faea 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 8002436:	463b      	mov	r3, r7
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fad1 	bl	80019e0 <write_string_LCD>
	write_string_line(2, "  Selecionado");
 800243e:	4909      	ldr	r1, [pc, #36]	@ (8002464 <menu_plant_selection+0x74>)
 8002440:	2002      	movs	r0, #2
 8002442:	f7ff fae2 	bl	8001a0a <write_string_line>
	HAL_Delay(3000);
 8002446:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800244a:	f000 fbcf 	bl	8002bec <HAL_Delay>
}
 800244e:	bf00      	nop
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	080099b0 	.word	0x080099b0
 800245c:	20000347 	.word	0x20000347
 8002460:	08009974 	.word	0x08009974
 8002464:	08009978 	.word	0x08009978

08002468 <get_name>:

void get_name(char code, char* buffer) {
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	4603      	mov	r3, r0
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	71fb      	strb	r3, [r7, #7]
    switch(code) {
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d01a      	beq.n	80024b0 <get_name+0x48>
 800247a:	2b02      	cmp	r3, #2
 800247c:	dc22      	bgt.n	80024c4 <get_name+0x5c>
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <get_name+0x20>
 8002482:	2b01      	cmp	r3, #1
 8002484:	d00a      	beq.n	800249c <get_name+0x34>
 8002486:	e01d      	b.n	80024c4 <get_name+0x5c>
        case 0:
            strcpy(buffer, "Alface  ");
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4916      	ldr	r1, [pc, #88]	@ (80024e4 <get_name+0x7c>)
 800248c:	461a      	mov	r2, r3
 800248e:	460b      	mov	r3, r1
 8002490:	cb03      	ldmia	r3!, {r0, r1}
 8002492:	6010      	str	r0, [r2, #0]
 8002494:	6051      	str	r1, [r2, #4]
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	7213      	strb	r3, [r2, #8]
            break;
 800249a:	e01d      	b.n	80024d8 <get_name+0x70>
        case 1:
            strcpy(buffer, "Pimentao");
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4912      	ldr	r1, [pc, #72]	@ (80024e8 <get_name+0x80>)
 80024a0:	461a      	mov	r2, r3
 80024a2:	460b      	mov	r3, r1
 80024a4:	cb03      	ldmia	r3!, {r0, r1}
 80024a6:	6010      	str	r0, [r2, #0]
 80024a8:	6051      	str	r1, [r2, #4]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	7213      	strb	r3, [r2, #8]
            break;
 80024ae:	e013      	b.n	80024d8 <get_name+0x70>
        case 2:
            strcpy(buffer, "Morango ");
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	490e      	ldr	r1, [pc, #56]	@ (80024ec <get_name+0x84>)
 80024b4:	461a      	mov	r2, r3
 80024b6:	460b      	mov	r3, r1
 80024b8:	cb03      	ldmia	r3!, {r0, r1}
 80024ba:	6010      	str	r0, [r2, #0]
 80024bc:	6051      	str	r1, [r2, #4]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	7213      	strb	r3, [r2, #8]
            break;
 80024c2:	e009      	b.n	80024d8 <get_name+0x70>
        default:
            strcpy(buffer, "Unknown "); // Handle unexpected code values
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	490a      	ldr	r1, [pc, #40]	@ (80024f0 <get_name+0x88>)
 80024c8:	461a      	mov	r2, r3
 80024ca:	460b      	mov	r3, r1
 80024cc:	cb03      	ldmia	r3!, {r0, r1}
 80024ce:	6010      	str	r0, [r2, #0]
 80024d0:	6051      	str	r1, [r2, #4]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	7213      	strb	r3, [r2, #8]
            break;
 80024d6:	bf00      	nop
    }
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	080099bc 	.word	0x080099bc
 80024e8:	080099c8 	.word	0x080099c8
 80024ec:	080099d4 	.word	0x080099d4
 80024f0:	080099e0 	.word	0x080099e0

080024f4 <get_day_night>:

void get_day_night(char code, char* buffer) {
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
    switch(code) {
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <get_day_night+0x18>
 8002506:	2b01      	cmp	r3, #1
 8002508:	d007      	beq.n	800251a <get_day_night+0x26>
 800250a:	e00b      	b.n	8002524 <get_day_night+0x30>
        case 0:
            strcpy(buffer, "Noite");
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <get_day_night+0x4c>)
 8002510:	6810      	ldr	r0, [r2, #0]
 8002512:	6018      	str	r0, [r3, #0]
 8002514:	8892      	ldrh	r2, [r2, #4]
 8002516:	809a      	strh	r2, [r3, #4]
            break;
 8002518:	e00c      	b.n	8002534 <get_day_night+0x40>
        case 1:
            strcpy(buffer, "Dia");
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <get_day_night+0x50>)
 800251e:	6810      	ldr	r0, [r2, #0]
 8002520:	6018      	str	r0, [r3, #0]
            break;
 8002522:	e007      	b.n	8002534 <get_day_night+0x40>
        default:
            strcpy(buffer, "Unknown"); // Handle unexpected code values
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <get_day_night+0x54>)
 8002528:	461a      	mov	r2, r3
 800252a:	460b      	mov	r3, r1
 800252c:	cb03      	ldmia	r3!, {r0, r1}
 800252e:	6010      	str	r0, [r2, #0]
 8002530:	6051      	str	r1, [r2, #4]
            break;
 8002532:	bf00      	nop
    }
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	080099ec 	.word	0x080099ec
 8002544:	080099f4 	.word	0x080099f4
 8002548:	080099f8 	.word	0x080099f8

0800254c <menu_main>:

void menu_main(void){
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
	char buffer [16];
	sprintf(buffer, "%.2f", temperatura_atual);  // Convert float to string with 2 decimal places
 8002552:	4b10      	ldr	r3, [pc, #64]	@ (8002594 <menu_main+0x48>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fd ff66 	bl	8000428 <__aeabi_f2d>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4638      	mov	r0, r7
 8002562:	490d      	ldr	r1, [pc, #52]	@ (8002598 <menu_main+0x4c>)
 8002564:	f004 fbee 	bl	8006d44 <siprintf>
	clear_display();
 8002568:	f7ff fa69 	bl	8001a3e <clear_display>
	write_string_line(1,"   Smart-fARM");
 800256c:	490b      	ldr	r1, [pc, #44]	@ (800259c <menu_main+0x50>)
 800256e:	2001      	movs	r0, #1
 8002570:	f7ff fa4b 	bl	8001a0a <write_string_line>
	write_string_line(2,"    ");
 8002574:	490a      	ldr	r1, [pc, #40]	@ (80025a0 <menu_main+0x54>)
 8002576:	2002      	movs	r0, #2
 8002578:	f7ff fa47 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 800257c:	463b      	mov	r3, r7
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fa2e 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 8002584:	4807      	ldr	r0, [pc, #28]	@ (80025a4 <menu_main+0x58>)
 8002586:	f7ff fa2b 	bl	80019e0 <write_string_LCD>
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000348 	.word	0x20000348
 8002598:	08009a00 	.word	0x08009a00
 800259c:	08009a08 	.word	0x08009a08
 80025a0:	08009a18 	.word	0x08009a18
 80025a4:	08009970 	.word	0x08009970

080025a8 <menu_actual_state>:

void menu_actual_state(void){
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
	char buffer [16];
	sprintf(buffer, "%.2f", temperatura_atual);  // Convert float to string with 2 decimal places
 80025ae:	4b24      	ldr	r3, [pc, #144]	@ (8002640 <menu_actual_state+0x98>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff38 	bl	8000428 <__aeabi_f2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4638      	mov	r0, r7
 80025be:	4921      	ldr	r1, [pc, #132]	@ (8002644 <menu_actual_state+0x9c>)
 80025c0:	f004 fbc0 	bl	8006d44 <siprintf>
	clear_display();
 80025c4:	f7ff fa3b 	bl	8001a3e <clear_display>
	write_string_line(1,"");
 80025c8:	491f      	ldr	r1, [pc, #124]	@ (8002648 <menu_actual_state+0xa0>)
 80025ca:	2001      	movs	r0, #1
 80025cc:	f7ff fa1d 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 80025d0:	463b      	mov	r3, r7
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa04 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C |TL:");
 80025d8:	481c      	ldr	r0, [pc, #112]	@ (800264c <menu_actual_state+0xa4>)
 80025da:	f7ff fa01 	bl	80019e0 <write_string_LCD>
	sprintf(buffer, "%.0f", temperatura_limite);  // Convert float to string with 2 decimal places
 80025de:	4b1c      	ldr	r3, [pc, #112]	@ (8002650 <menu_actual_state+0xa8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fd ff20 	bl	8000428 <__aeabi_f2d>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4638      	mov	r0, r7
 80025ee:	4919      	ldr	r1, [pc, #100]	@ (8002654 <menu_actual_state+0xac>)
 80025f0:	f004 fba8 	bl	8006d44 <siprintf>
	write_string_LCD(buffer);
 80025f4:	463b      	mov	r3, r7
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff f9f2 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 80025fc:	4816      	ldr	r0, [pc, #88]	@ (8002658 <menu_actual_state+0xb0>)
 80025fe:	f7ff f9ef 	bl	80019e0 <write_string_LCD>
	get_name(variedade,buffer);
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <menu_actual_state+0xb4>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	463a      	mov	r2, r7
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff ff2c 	bl	8002468 <get_name>
	write_string_line(2,buffer);
 8002610:	463b      	mov	r3, r7
 8002612:	4619      	mov	r1, r3
 8002614:	2002      	movs	r0, #2
 8002616:	f7ff f9f8 	bl	8001a0a <write_string_line>
	write_string_LCD("| ");
 800261a:	4811      	ldr	r0, [pc, #68]	@ (8002660 <menu_actual_state+0xb8>)
 800261c:	f7ff f9e0 	bl	80019e0 <write_string_LCD>
	get_day_night(flag_turno_dia,buffer);
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <menu_actual_state+0xbc>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	463a      	mov	r2, r7
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff62 	bl	80024f4 <get_day_night>
	write_string_LCD(buffer);
 8002630:	463b      	mov	r3, r7
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f9d4 	bl	80019e0 <write_string_LCD>
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000348 	.word	0x20000348
 8002644:	08009a00 	.word	0x08009a00
 8002648:	08009a20 	.word	0x08009a20
 800264c:	08009a24 	.word	0x08009a24
 8002650:	20000004 	.word	0x20000004
 8002654:	08009a2c 	.word	0x08009a2c
 8002658:	08009970 	.word	0x08009970
 800265c:	20000347 	.word	0x20000347
 8002660:	08009a34 	.word	0x08009a34
 8002664:	20000001 	.word	0x20000001

08002668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800266c:	b672      	cpsid	i
}
 800266e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <Error_Handler+0x8>

08002674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800267a:	4b15      	ldr	r3, [pc, #84]	@ (80026d0 <HAL_MspInit+0x5c>)
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <HAL_MspInit+0x5c>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6193      	str	r3, [r2, #24]
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_MspInit+0x5c>)
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_MspInit+0x5c>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a0e      	ldr	r2, [pc, #56]	@ (80026d0 <HAL_MspInit+0x5c>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b0c      	ldr	r3, [pc, #48]	@ (80026d0 <HAL_MspInit+0x5c>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026aa:	4b0a      	ldr	r3, [pc, #40]	@ (80026d4 <HAL_MspInit+0x60>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	4a04      	ldr	r2, [pc, #16]	@ (80026d4 <HAL_MspInit+0x60>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40010000 	.word	0x40010000

080026d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a28      	ldr	r2, [pc, #160]	@ (8002794 <HAL_ADC_MspInit+0xbc>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d149      	bne.n	800278c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 80026fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002702:	6193      	str	r3, [r2, #24]
 8002704:	4b24      	ldr	r3, [pc, #144]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	4b21      	ldr	r3, [pc, #132]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4a20      	ldr	r2, [pc, #128]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6193      	str	r3, [r2, #24]
 800271c:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_ADC_MspInit+0xc0>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8002728:	2303      	movs	r3, #3
 800272a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272c:	2303      	movs	r3, #3
 800272e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002730:	f107 0310 	add.w	r3, r7, #16
 8002734:	4619      	mov	r1, r3
 8002736:	4819      	ldr	r0, [pc, #100]	@ (800279c <HAL_ADC_MspInit+0xc4>)
 8002738:	f001 f942 	bl	80039c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800273c:	4b18      	ldr	r3, [pc, #96]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 800273e:	4a19      	ldr	r2, [pc, #100]	@ (80027a4 <HAL_ADC_MspInit+0xcc>)
 8002740:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002742:	4b17      	ldr	r3, [pc, #92]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002748:	4b15      	ldr	r3, [pc, #84]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800274e:	4b14      	ldr	r3, [pc, #80]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002750:	2280      	movs	r2, #128	@ 0x80
 8002752:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800275a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800275c:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 800275e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002762:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002764:	4b0e      	ldr	r3, [pc, #56]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002766:	2200      	movs	r2, #0
 8002768:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002770:	480b      	ldr	r0, [pc, #44]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002772:	f000 ffc5 	bl	8003700 <HAL_DMA_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800277c:	f7ff ff74 	bl	8002668 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a07      	ldr	r2, [pc, #28]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002784:	621a      	str	r2, [r3, #32]
 8002786:	4a06      	ldr	r2, [pc, #24]	@ (80027a0 <HAL_ADC_MspInit+0xc8>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012400 	.word	0x40012400
 8002798:	40021000 	.word	0x40021000
 800279c:	40010800 	.word	0x40010800
 80027a0:	20000228 	.word	0x20000228
 80027a4:	40020008 	.word	0x40020008

080027a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027b8:	d114      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ba:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	4a21      	ldr	r2, [pc, #132]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	61d3      	str	r3, [r2, #28]
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	201c      	movs	r0, #28
 80027d8:	f000 ff5b 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027dc:	201c      	movs	r0, #28
 80027de:	f000 ff74 	bl	80036ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80027e2:	e02a      	b.n	800283a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a17      	ldr	r2, [pc, #92]	@ (8002848 <HAL_TIM_Base_MspInit+0xa0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d114      	bne.n	8002818 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	4a14      	ldr	r2, [pc, #80]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027f4:	f043 0302 	orr.w	r3, r3, #2
 80027f8:	61d3      	str	r3, [r2, #28]
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	201d      	movs	r0, #29
 800280c:	f000 ff41 	bl	8003692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002810:	201d      	movs	r0, #29
 8002812:	f000 ff5a 	bl	80036ca <HAL_NVIC_EnableIRQ>
}
 8002816:	e010      	b.n	800283a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	@ (800284c <HAL_TIM_Base_MspInit+0xa4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10b      	bne.n	800283a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002822:	4b08      	ldr	r3, [pc, #32]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	4a07      	ldr	r2, [pc, #28]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	61d3      	str	r3, [r2, #28]
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_TIM_Base_MspInit+0x9c>)
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	40000400 	.word	0x40000400
 800284c:	40000800 	.word	0x40000800

08002850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0310 	add.w	r3, r7, #16
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a10      	ldr	r2, [pc, #64]	@ (80028ac <HAL_TIM_MspPostInit+0x5c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d118      	bne.n	80028a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	4b0f      	ldr	r3, [pc, #60]	@ (80028b0 <HAL_TIM_MspPostInit+0x60>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a0e      	ldr	r2, [pc, #56]	@ (80028b0 <HAL_TIM_MspPostInit+0x60>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <HAL_TIM_MspPostInit+0x60>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 8002888:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800288c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2302      	movs	r3, #2
 8002894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 0310 	add.w	r3, r7, #16
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	@ (80028b4 <HAL_TIM_MspPostInit+0x64>)
 800289e:	f001 f88f 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40000800 	.word	0x40000800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	40010c00 	.word	0x40010c00

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <NMI_Handler+0x4>

080028c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <MemManage_Handler+0x4>

080028d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <UsageFault_Handler+0x4>

080028e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 f954 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <DMA1_Channel1_IRQHandler+0x10>)
 8002916:	f000 ff4d 	bl	80037b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000228 	.word	0x20000228

08002924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <TIM2_IRQHandler+0x10>)
 800292a:	f002 f919 	bl	8004b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	2000026c 	.word	0x2000026c

08002938 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <TIM3_IRQHandler+0x10>)
 800293e:	f002 f90f 	bl	8004b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200002b4 	.word	0x200002b4

0800294c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return 1;
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <_kill>:

int _kill(int pid, int sig)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002964:	f004 fab6 	bl	8006ed4 <__errno>
 8002968:	4603      	mov	r3, r0
 800296a:	2216      	movs	r2, #22
 800296c:	601a      	str	r2, [r3, #0]
  return -1;
 800296e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_exit>:

void _exit (int status)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002982:	f04f 31ff 	mov.w	r1, #4294967295
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7ff ffe7 	bl	800295a <_kill>
  while (1) {}    /* Make sure we hang here */
 800298c:	bf00      	nop
 800298e:	e7fd      	b.n	800298c <_exit+0x12>

08002990 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e00a      	b.n	80029b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029a2:	f3af 8000 	nop.w
 80029a6:	4601      	mov	r1, r0
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	b2ca      	uxtb	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dbf0      	blt.n	80029a2 <_read+0x12>
  }

  return len;
 80029c0:	687b      	ldr	r3, [r7, #4]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
 80029da:	e009      	b.n	80029f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	dbf1      	blt.n	80029dc <_write+0x12>
  }
  return len;
 80029f8:	687b      	ldr	r3, [r7, #4]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_close>:

int _close(int file)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a28:	605a      	str	r2, [r3, #4]
  return 0;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <_isatty>:

int _isatty(int file)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
	...

08002a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a6c:	4a14      	ldr	r2, [pc, #80]	@ (8002ac0 <_sbrk+0x5c>)
 8002a6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ac4 <_sbrk+0x60>)
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a78:	4b13      	ldr	r3, [pc, #76]	@ (8002ac8 <_sbrk+0x64>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a80:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <_sbrk+0x64>)
 8002a82:	4a12      	ldr	r2, [pc, #72]	@ (8002acc <_sbrk+0x68>)
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a86:	4b10      	ldr	r3, [pc, #64]	@ (8002ac8 <_sbrk+0x64>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d207      	bcs.n	8002aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a94:	f004 fa1e 	bl	8006ed4 <__errno>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	220c      	movs	r2, #12
 8002a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	e009      	b.n	8002ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aa4:	4b08      	ldr	r3, [pc, #32]	@ (8002ac8 <_sbrk+0x64>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aaa:	4b07      	ldr	r3, [pc, #28]	@ (8002ac8 <_sbrk+0x64>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a05      	ldr	r2, [pc, #20]	@ (8002ac8 <_sbrk+0x64>)
 8002ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20005000 	.word	0x20005000
 8002ac4:	00000400 	.word	0x00000400
 8002ac8:	2000034c 	.word	0x2000034c
 8002acc:	200004a0 	.word	0x200004a0

08002ad0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002adc:	f7ff fff8 	bl	8002ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae0:	480b      	ldr	r0, [pc, #44]	@ (8002b10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ae2:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae8:	e002      	b.n	8002af0 <LoopCopyDataInit>

08002aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aee:	3304      	adds	r3, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af4:	d3f9      	bcc.n	8002aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002af8:	4c09      	ldr	r4, [pc, #36]	@ (8002b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002afc:	e001      	b.n	8002b02 <LoopFillZerobss>

08002afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b00:	3204      	adds	r2, #4

08002b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b04:	d3fb      	bcc.n	8002afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b06:	f004 f9eb 	bl	8006ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b0a:	f7ff f895 	bl	8001c38 <main>
  bx lr
 8002b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b14:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b18:	08009ea8 	.word	0x08009ea8
  ldr r2, =_sbss
 8002b1c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b20:	200004a0 	.word	0x200004a0

08002b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC1_2_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_Init+0x28>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_Init+0x28>)
 8002b32:	f043 0310 	orr.w	r3, r3, #16
 8002b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 fd9f 	bl	800367c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff fd96 	bl	8002674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fdb7 	bl	80036e6 <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 fd7f 	bl	8003692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	20000010 	.word	0x20000010
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <HAL_IncTick+0x1c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a03      	ldr	r2, [pc, #12]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	20000010 	.word	0x20000010
 8002bd4:	20000350 	.word	0x20000350

08002bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return uwTick;
 8002bdc:	4b02      	ldr	r3, [pc, #8]	@ (8002be8 <HAL_GetTick+0x10>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	20000350 	.word	0x20000350

08002bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_GetTick>
 8002bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c04:	d005      	beq.n	8002c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_Delay+0x44>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4413      	add	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c12:	bf00      	nop
 8002c14:	f7ff ffe0 	bl	8002bd8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d8f7      	bhi.n	8002c14 <HAL_Delay+0x28>
  {
  }
}
 8002c24:	bf00      	nop
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000010 	.word	0x20000010

08002c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e0be      	b.n	8002dd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d109      	bne.n	8002c78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fd30 	bl	80026d8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fbf1 	bl	8003460 <ADC_ConversionStop_Disable>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 8099 	bne.w	8002dc2 <HAL_ADC_Init+0x18e>
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 8095 	bne.w	8002dc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	f043 0202 	orr.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7b1b      	ldrb	r3, [r3, #12]
 8002cba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ccc:	d003      	beq.n	8002cd6 <HAL_ADC_Init+0xa2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_ADC_Init+0xa8>
 8002cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cda:	e000      	b.n	8002cde <HAL_ADC_Init+0xaa>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7d1b      	ldrb	r3, [r3, #20]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d119      	bne.n	8002d20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7b1b      	ldrb	r3, [r3, #12]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	035a      	lsls	r2, r3, #13
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	e00b      	b.n	8002d20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0c:	f043 0220 	orr.w	r2, r3, #32
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	4b28      	ldr	r3, [pc, #160]	@ (8002ddc <HAL_ADC_Init+0x1a8>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d50:	d003      	beq.n	8002d5a <HAL_ADC_Init+0x126>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d104      	bne.n	8002d64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	051b      	lsls	r3, r3, #20
 8002d62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4b18      	ldr	r3, [pc, #96]	@ (8002de0 <HAL_ADC_Init+0x1ac>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d10b      	bne.n	8002da0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	f023 0303 	bic.w	r3, r3, #3
 8002d96:	f043 0201 	orr.w	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d9e:	e018      	b.n	8002dd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da4:	f023 0312 	bic.w	r3, r3, #18
 8002da8:	f043 0210 	orr.w	r2, r3, #16
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dc0:	e007      	b.n	8002dd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	f043 0210 	orr.w	r2, r3, #16
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	ffe1f7fd 	.word	0xffe1f7fd
 8002de0:	ff1f0efe 	.word	0xff1f0efe

08002de4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dec:	2300      	movs	r3, #0
 8002dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Start+0x1a>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e098      	b.n	8002f30 <HAL_ADC_Start+0x14c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fad0 	bl	80033ac <ADC_Enable>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8087 	bne.w	8002f26 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a41      	ldr	r2, [pc, #260]	@ (8002f38 <HAL_ADC_Start+0x154>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_Start+0x5e>
 8002e36:	4b41      	ldr	r3, [pc, #260]	@ (8002f3c <HAL_ADC_Start+0x158>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d115      	bne.n	8002e6e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d026      	beq.n	8002eaa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	e01d      	b.n	8002eaa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f3c <HAL_ADC_Start+0x158>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_Start+0xaa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2b      	ldr	r2, [pc, #172]	@ (8002f38 <HAL_ADC_Start+0x154>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <HAL_ADC_Start+0xc6>
 8002e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f3c <HAL_ADC_Start+0x158>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ea2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	f023 0206 	bic.w	r2, r3, #6
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0202 	mvn.w	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ee6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002eea:	d113      	bne.n	8002f14 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ef0:	4a11      	ldr	r2, [pc, #68]	@ (8002f38 <HAL_ADC_Start+0x154>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ef6:	4b11      	ldr	r3, [pc, #68]	@ (8002f3c <HAL_ADC_Start+0x158>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e00c      	b.n	8002f2e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40012800 	.word	0x40012800
 8002f3c:	40012400 	.word	0x40012400

08002f40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_ADC_Stop+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e01a      	b.n	8002f90 <HAL_ADC_Stop+0x50>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fa7c 	bl	8003460 <ADC_ConversionStop_Disable>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f7a:	f023 0301 	bic.w	r3, r3, #1
 8002f7e:	f043 0201 	orr.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f98:	b590      	push	{r4, r7, lr}
 8002f9a:	b087      	sub	sp, #28
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fae:	f7ff fe13 	bl	8002bd8 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00b      	beq.n	8002fda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e0d3      	b.n	8003182 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d131      	bne.n	800304c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12a      	bne.n	800304c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ff6:	e021      	b.n	800303c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d01d      	beq.n	800303c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_ADC_PollForConversion+0x7e>
 8003006:	f7ff fde7 	bl	8002bd8 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	683a      	ldr	r2, [r7, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	d212      	bcs.n	800303c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e0a2      	b.n	8003182 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0d6      	beq.n	8002ff8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800304a:	e070      	b.n	800312e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800304c:	4b4f      	ldr	r3, [pc, #316]	@ (800318c <HAL_ADC_PollForConversion+0x1f4>)
 800304e:	681c      	ldr	r4, [r3, #0]
 8003050:	2002      	movs	r0, #2
 8003052:	f001 fb33 	bl	80046bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003056:	4603      	mov	r3, r0
 8003058:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6919      	ldr	r1, [r3, #16]
 8003062:	4b4b      	ldr	r3, [pc, #300]	@ (8003190 <HAL_ADC_PollForConversion+0x1f8>)
 8003064:	400b      	ands	r3, r1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_ADC_PollForConversion+0x104>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68d9      	ldr	r1, [r3, #12]
 8003070:	4b48      	ldr	r3, [pc, #288]	@ (8003194 <HAL_ADC_PollForConversion+0x1fc>)
 8003072:	400b      	ands	r3, r1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d111      	bne.n	800309c <HAL_ADC_PollForConversion+0x104>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6919      	ldr	r1, [r3, #16]
 800307e:	4b46      	ldr	r3, [pc, #280]	@ (8003198 <HAL_ADC_PollForConversion+0x200>)
 8003080:	400b      	ands	r3, r1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_ADC_PollForConversion+0x100>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68d9      	ldr	r1, [r3, #12]
 800308c:	4b43      	ldr	r3, [pc, #268]	@ (800319c <HAL_ADC_PollForConversion+0x204>)
 800308e:	400b      	ands	r3, r1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADC_PollForConversion+0x100>
 8003094:	2314      	movs	r3, #20
 8003096:	e020      	b.n	80030da <HAL_ADC_PollForConversion+0x142>
 8003098:	2329      	movs	r3, #41	@ 0x29
 800309a:	e01e      	b.n	80030da <HAL_ADC_PollForConversion+0x142>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003198 <HAL_ADC_PollForConversion+0x200>)
 80030a4:	400b      	ands	r3, r1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_ADC_PollForConversion+0x120>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68d9      	ldr	r1, [r3, #12]
 80030b0:	4b3a      	ldr	r3, [pc, #232]	@ (800319c <HAL_ADC_PollForConversion+0x204>)
 80030b2:	400b      	ands	r3, r1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00d      	beq.n	80030d4 <HAL_ADC_PollForConversion+0x13c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	4b38      	ldr	r3, [pc, #224]	@ (80031a0 <HAL_ADC_PollForConversion+0x208>)
 80030c0:	400b      	ands	r3, r1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d108      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x140>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68d9      	ldr	r1, [r3, #12]
 80030cc:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <HAL_ADC_PollForConversion+0x208>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_PollForConversion+0x140>
 80030d4:	2354      	movs	r3, #84	@ 0x54
 80030d6:	e000      	b.n	80030da <HAL_ADC_PollForConversion+0x142>
 80030d8:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030e0:	e021      	b.n	8003126 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d01a      	beq.n	8003120 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_ADC_PollForConversion+0x168>
 80030f0:	f7ff fd72 	bl	8002bd8 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d20f      	bcs.n	8003120 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	429a      	cmp	r2, r3
 8003106:	d90b      	bls.n	8003120 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e030      	b.n	8003182 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3301      	adds	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	429a      	cmp	r2, r3
 800312c:	d8d9      	bhi.n	80030e2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0212 	mvn.w	r2, #18
 8003136:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800314e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003152:	d115      	bne.n	8003180 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	bf00      	nop
 800318c:	20000008 	.word	0x20000008
 8003190:	24924924 	.word	0x24924924
 8003194:	00924924 	.word	0x00924924
 8003198:	12492492 	.word	0x12492492
 800319c:	00492492 	.word	0x00492492
 80031a0:	00249249 	.word	0x00249249

080031a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr

080031bc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x20>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0dc      	b.n	8003396 <HAL_ADC_ConfigChannel+0x1da>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b06      	cmp	r3, #6
 80031ea:	d81c      	bhi.n	8003226 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b05      	subs	r3, #5
 80031fe:	221f      	movs	r2, #31
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	4019      	ands	r1, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6818      	ldr	r0, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	3b05      	subs	r3, #5
 8003218:	fa00 f203 	lsl.w	r2, r0, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	635a      	str	r2, [r3, #52]	@ 0x34
 8003224:	e03c      	b.n	80032a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d81c      	bhi.n	8003268 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	3b23      	subs	r3, #35	@ 0x23
 8003240:	221f      	movs	r2, #31
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43db      	mvns	r3, r3
 8003248:	4019      	ands	r1, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	3b23      	subs	r3, #35	@ 0x23
 800325a:	fa00 f203 	lsl.w	r2, r0, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	631a      	str	r2, [r3, #48]	@ 0x30
 8003266:	e01b      	b.n	80032a0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	3b41      	subs	r3, #65	@ 0x41
 800327a:	221f      	movs	r2, #31
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	4019      	ands	r1, r3
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b41      	subs	r3, #65	@ 0x41
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b09      	cmp	r3, #9
 80032a6:	d91c      	bls.n	80032e2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68d9      	ldr	r1, [r3, #12]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	3b1e      	subs	r3, #30
 80032ba:	2207      	movs	r2, #7
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	4019      	ands	r1, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6898      	ldr	r0, [r3, #8]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	3b1e      	subs	r3, #30
 80032d4:	fa00 f203 	lsl.w	r2, r0, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]
 80032e0:	e019      	b.n	8003316 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6919      	ldr	r1, [r3, #16]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	2207      	movs	r2, #7
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	4019      	ands	r1, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	6898      	ldr	r0, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	fa00 f203 	lsl.w	r2, r0, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b10      	cmp	r3, #16
 800331c:	d003      	beq.n	8003326 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003322:	2b11      	cmp	r3, #17
 8003324:	d132      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_ADC_ConfigChannel+0x1e4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d125      	bne.n	800337c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d126      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800334c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b10      	cmp	r3, #16
 8003354:	d11a      	bne.n	800338c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003356:	4b13      	ldr	r3, [pc, #76]	@ (80033a4 <HAL_ADC_ConfigChannel+0x1e8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_ADC_ConfigChannel+0x1ec>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	0c9a      	lsrs	r2, r3, #18
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800336c:	e002      	b.n	8003374 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	3b01      	subs	r3, #1
 8003372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f9      	bne.n	800336e <HAL_ADC_ConfigChannel+0x1b2>
 800337a:	e007      	b.n	800338c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012400 	.word	0x40012400
 80033a4:	20000008 	.word	0x20000008
 80033a8:	431bde83 	.word	0x431bde83

080033ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d040      	beq.n	800344c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033da:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <ADC_Enable+0xac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <ADC_Enable+0xb0>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	0c9b      	lsrs	r3, r3, #18
 80033e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033e8:	e002      	b.n	80033f0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033f6:	f7ff fbef 	bl	8002bd8 <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80033fc:	e01f      	b.n	800343e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033fe:	f7ff fbeb 	bl	8002bd8 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d918      	bls.n	800343e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d011      	beq.n	800343e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341e:	f043 0210 	orr.w	r2, r3, #16
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e007      	b.n	800344e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d1d8      	bne.n	80033fe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000008 	.word	0x20000008
 800345c:	431bde83 	.word	0x431bde83

08003460 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d12e      	bne.n	80034d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0201 	bic.w	r2, r2, #1
 8003488:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800348a:	f7ff fba5 	bl	8002bd8 <HAL_GetTick>
 800348e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003490:	e01b      	b.n	80034ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003492:	f7ff fba1 	bl	8002bd8 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d914      	bls.n	80034ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10d      	bne.n	80034ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d0dc      	beq.n	8003492 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0b      	blt.n	8003572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	4906      	ldr	r1, [pc, #24]	@ (800357c <__NVIC_EnableIRQ+0x34>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2001      	movs	r0, #1
 800356a:	fa00 f202 	lsl.w	r2, r0, r2
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr
 800357c:	e000e100 	.word	0xe000e100

08003580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	6039      	str	r1, [r7, #0]
 800358a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	2b00      	cmp	r3, #0
 8003592:	db0a      	blt.n	80035aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	b2da      	uxtb	r2, r3
 8003598:	490c      	ldr	r1, [pc, #48]	@ (80035cc <__NVIC_SetPriority+0x4c>)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	0112      	lsls	r2, r2, #4
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	440b      	add	r3, r1
 80035a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035a8:	e00a      	b.n	80035c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4908      	ldr	r1, [pc, #32]	@ (80035d0 <__NVIC_SetPriority+0x50>)
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3b04      	subs	r3, #4
 80035b8:	0112      	lsls	r2, r2, #4
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	440b      	add	r3, r1
 80035be:	761a      	strb	r2, [r3, #24]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000e100 	.word	0xe000e100
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b089      	sub	sp, #36	@ 0x24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	bf28      	it	cs
 80035f2:	2304      	movcs	r3, #4
 80035f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d902      	bls.n	8003604 <NVIC_EncodePriority+0x30>
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3b03      	subs	r3, #3
 8003602:	e000      	b.n	8003606 <NVIC_EncodePriority+0x32>
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	401a      	ands	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800361c:	f04f 31ff 	mov.w	r1, #4294967295
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	43d9      	mvns	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	4313      	orrs	r3, r2
         );
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	@ 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr

08003638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3b01      	subs	r3, #1
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003648:	d301      	bcc.n	800364e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800364a:	2301      	movs	r3, #1
 800364c:	e00f      	b.n	800366e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800364e:	4a0a      	ldr	r2, [pc, #40]	@ (8003678 <SysTick_Config+0x40>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003656:	210f      	movs	r1, #15
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	f7ff ff90 	bl	8003580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003660:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <SysTick_Config+0x40>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <SysTick_Config+0x40>)
 8003668:	2207      	movs	r2, #7
 800366a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	e000e010 	.word	0xe000e010

0800367c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ff2d 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036a4:	f7ff ff42 	bl	800352c <__NVIC_GetPriorityGrouping>
 80036a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68b9      	ldr	r1, [r7, #8]
 80036ae:	6978      	ldr	r0, [r7, #20]
 80036b0:	f7ff ff90 	bl	80035d4 <NVIC_EncodePriority>
 80036b4:	4602      	mov	r2, r0
 80036b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff5f 	bl	8003580 <__NVIC_SetPriority>
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff35 	bl	8003548 <__NVIC_EnableIRQ>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ffa2 	bl	8003638 <SysTick_Config>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e043      	b.n	800379e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_DMA_Init+0xa8>)
 800371e:	4413      	add	r3, r2
 8003720:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_DMA_Init+0xac>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	009a      	lsls	r2, r3, #2
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1f      	ldr	r2, [pc, #124]	@ (80037b0 <HAL_DMA_Init+0xb0>)
 8003732:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800374a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800374e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003770:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	bffdfff8 	.word	0xbffdfff8
 80037ac:	cccccccd 	.word	0xcccccccd
 80037b0:	40020000 	.word	0x40020000

080037b4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	2204      	movs	r2, #4
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d04f      	beq.n	800387c <HAL_DMA_IRQHandler+0xc8>
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d04a      	beq.n	800387c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0320 	and.w	r3, r3, #32
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a66      	ldr	r2, [pc, #408]	@ (80039a4 <HAL_DMA_IRQHandler+0x1f0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d029      	beq.n	8003862 <HAL_DMA_IRQHandler+0xae>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a65      	ldr	r2, [pc, #404]	@ (80039a8 <HAL_DMA_IRQHandler+0x1f4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_DMA_IRQHandler+0xaa>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a63      	ldr	r2, [pc, #396]	@ (80039ac <HAL_DMA_IRQHandler+0x1f8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01a      	beq.n	8003858 <HAL_DMA_IRQHandler+0xa4>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a62      	ldr	r2, [pc, #392]	@ (80039b0 <HAL_DMA_IRQHandler+0x1fc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d012      	beq.n	8003852 <HAL_DMA_IRQHandler+0x9e>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a60      	ldr	r2, [pc, #384]	@ (80039b4 <HAL_DMA_IRQHandler+0x200>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00a      	beq.n	800384c <HAL_DMA_IRQHandler+0x98>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_DMA_IRQHandler+0x204>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d102      	bne.n	8003846 <HAL_DMA_IRQHandler+0x92>
 8003840:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003844:	e00e      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 8003846:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800384a:	e00b      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 800384c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003850:	e008      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 8003852:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003856:	e005      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 8003858:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800385c:	e002      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 800385e:	2340      	movs	r3, #64	@ 0x40
 8003860:	e000      	b.n	8003864 <HAL_DMA_IRQHandler+0xb0>
 8003862:	2304      	movs	r3, #4
 8003864:	4a55      	ldr	r2, [pc, #340]	@ (80039bc <HAL_DMA_IRQHandler+0x208>)
 8003866:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8094 	beq.w	800399a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800387a:	e08e      	b.n	800399a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	2202      	movs	r2, #2
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d056      	beq.n	800393a <HAL_DMA_IRQHandler+0x186>
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d051      	beq.n	800393a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020a 	bic.w	r2, r2, #10
 80038b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a38      	ldr	r2, [pc, #224]	@ (80039a4 <HAL_DMA_IRQHandler+0x1f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d029      	beq.n	800391a <HAL_DMA_IRQHandler+0x166>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a37      	ldr	r2, [pc, #220]	@ (80039a8 <HAL_DMA_IRQHandler+0x1f4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_IRQHandler+0x162>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a35      	ldr	r2, [pc, #212]	@ (80039ac <HAL_DMA_IRQHandler+0x1f8>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x15c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a34      	ldr	r2, [pc, #208]	@ (80039b0 <HAL_DMA_IRQHandler+0x1fc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d012      	beq.n	800390a <HAL_DMA_IRQHandler+0x156>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a32      	ldr	r2, [pc, #200]	@ (80039b4 <HAL_DMA_IRQHandler+0x200>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00a      	beq.n	8003904 <HAL_DMA_IRQHandler+0x150>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a31      	ldr	r2, [pc, #196]	@ (80039b8 <HAL_DMA_IRQHandler+0x204>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d102      	bne.n	80038fe <HAL_DMA_IRQHandler+0x14a>
 80038f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038fc:	e00e      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 80038fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003902:	e00b      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 8003904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003908:	e008      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 800390a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800390e:	e005      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 8003910:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003914:	e002      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 8003916:	2320      	movs	r3, #32
 8003918:	e000      	b.n	800391c <HAL_DMA_IRQHandler+0x168>
 800391a:	2302      	movs	r3, #2
 800391c:	4a27      	ldr	r2, [pc, #156]	@ (80039bc <HAL_DMA_IRQHandler+0x208>)
 800391e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392c:	2b00      	cmp	r3, #0
 800392e:	d034      	beq.n	800399a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003938:	e02f      	b.n	800399a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	2208      	movs	r2, #8
 8003940:	409a      	lsls	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4013      	ands	r3, r2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d028      	beq.n	800399c <HAL_DMA_IRQHandler+0x1e8>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f003 0308 	and.w	r3, r3, #8
 8003950:	2b00      	cmp	r3, #0
 8003952:	d023      	beq.n	800399c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
    }
  }
  return;
 800399a:	bf00      	nop
 800399c:	bf00      	nop
}
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40020008 	.word	0x40020008
 80039a8:	4002001c 	.word	0x4002001c
 80039ac:	40020030 	.word	0x40020030
 80039b0:	40020044 	.word	0x40020044
 80039b4:	40020058 	.word	0x40020058
 80039b8:	4002006c 	.word	0x4002006c
 80039bc:	40020000 	.word	0x40020000

080039c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b08b      	sub	sp, #44	@ 0x2c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039d2:	e169      	b.n	8003ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039d4:	2201      	movs	r2, #1
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	f040 8158 	bne.w	8003ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a9a      	ldr	r2, [pc, #616]	@ (8003c60 <HAL_GPIO_Init+0x2a0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d05e      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
 80039fc:	4a98      	ldr	r2, [pc, #608]	@ (8003c60 <HAL_GPIO_Init+0x2a0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d875      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a02:	4a98      	ldr	r2, [pc, #608]	@ (8003c64 <HAL_GPIO_Init+0x2a4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d058      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
 8003a08:	4a96      	ldr	r2, [pc, #600]	@ (8003c64 <HAL_GPIO_Init+0x2a4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d86f      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a0e:	4a96      	ldr	r2, [pc, #600]	@ (8003c68 <HAL_GPIO_Init+0x2a8>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d052      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
 8003a14:	4a94      	ldr	r2, [pc, #592]	@ (8003c68 <HAL_GPIO_Init+0x2a8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d869      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a1a:	4a94      	ldr	r2, [pc, #592]	@ (8003c6c <HAL_GPIO_Init+0x2ac>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d04c      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
 8003a20:	4a92      	ldr	r2, [pc, #584]	@ (8003c6c <HAL_GPIO_Init+0x2ac>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d863      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a26:	4a92      	ldr	r2, [pc, #584]	@ (8003c70 <HAL_GPIO_Init+0x2b0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d046      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
 8003a2c:	4a90      	ldr	r2, [pc, #576]	@ (8003c70 <HAL_GPIO_Init+0x2b0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d85d      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a32:	2b12      	cmp	r3, #18
 8003a34:	d82a      	bhi.n	8003a8c <HAL_GPIO_Init+0xcc>
 8003a36:	2b12      	cmp	r3, #18
 8003a38:	d859      	bhi.n	8003aee <HAL_GPIO_Init+0x12e>
 8003a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_GPIO_Init+0x80>)
 8003a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a40:	08003abb 	.word	0x08003abb
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003aa7 	.word	0x08003aa7
 8003a4c:	08003ae9 	.word	0x08003ae9
 8003a50:	08003aef 	.word	0x08003aef
 8003a54:	08003aef 	.word	0x08003aef
 8003a58:	08003aef 	.word	0x08003aef
 8003a5c:	08003aef 	.word	0x08003aef
 8003a60:	08003aef 	.word	0x08003aef
 8003a64:	08003aef 	.word	0x08003aef
 8003a68:	08003aef 	.word	0x08003aef
 8003a6c:	08003aef 	.word	0x08003aef
 8003a70:	08003aef 	.word	0x08003aef
 8003a74:	08003aef 	.word	0x08003aef
 8003a78:	08003aef 	.word	0x08003aef
 8003a7c:	08003aef 	.word	0x08003aef
 8003a80:	08003aef 	.word	0x08003aef
 8003a84:	08003a9d 	.word	0x08003a9d
 8003a88:	08003ab1 	.word	0x08003ab1
 8003a8c:	4a79      	ldr	r2, [pc, #484]	@ (8003c74 <HAL_GPIO_Init+0x2b4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a92:	e02c      	b.n	8003aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	623b      	str	r3, [r7, #32]
          break;
 8003a9a:	e029      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	623b      	str	r3, [r7, #32]
          break;
 8003aa4:	e024      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	3308      	adds	r3, #8
 8003aac:	623b      	str	r3, [r7, #32]
          break;
 8003aae:	e01f      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	623b      	str	r3, [r7, #32]
          break;
 8003ab8:	e01a      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	623b      	str	r3, [r7, #32]
          break;
 8003ac6:	e013      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d105      	bne.n	8003adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ad0:	2308      	movs	r3, #8
 8003ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	611a      	str	r2, [r3, #16]
          break;
 8003ada:	e009      	b.n	8003af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003adc:	2308      	movs	r3, #8
 8003ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	615a      	str	r2, [r3, #20]
          break;
 8003ae6:	e003      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	623b      	str	r3, [r7, #32]
          break;
 8003aec:	e000      	b.n	8003af0 <HAL_GPIO_Init+0x130>
          break;
 8003aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2bff      	cmp	r3, #255	@ 0xff
 8003af4:	d801      	bhi.n	8003afa <HAL_GPIO_Init+0x13a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	e001      	b.n	8003afe <HAL_GPIO_Init+0x13e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3304      	adds	r3, #4
 8003afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2bff      	cmp	r3, #255	@ 0xff
 8003b04:	d802      	bhi.n	8003b0c <HAL_GPIO_Init+0x14c>
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	e002      	b.n	8003b12 <HAL_GPIO_Init+0x152>
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0e:	3b08      	subs	r3, #8
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	210f      	movs	r1, #15
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	401a      	ands	r2, r3
 8003b24:	6a39      	ldr	r1, [r7, #32]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80b1 	beq.w	8003ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b40:	4b4d      	ldr	r3, [pc, #308]	@ (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	4a4c      	ldr	r2, [pc, #304]	@ (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	6193      	str	r3, [r2, #24]
 8003b4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_GPIO_Init+0x2b8>)
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	60bb      	str	r3, [r7, #8]
 8003b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b58:	4a48      	ldr	r2, [pc, #288]	@ (8003c7c <HAL_GPIO_Init+0x2bc>)
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3302      	adds	r3, #2
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	220f      	movs	r2, #15
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a40      	ldr	r2, [pc, #256]	@ (8003c80 <HAL_GPIO_Init+0x2c0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_GPIO_Init+0x1ec>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a3f      	ldr	r2, [pc, #252]	@ (8003c84 <HAL_GPIO_Init+0x2c4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_GPIO_Init+0x1e8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c88 <HAL_GPIO_Init+0x2c8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <HAL_GPIO_Init+0x1e4>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a3d      	ldr	r2, [pc, #244]	@ (8003c8c <HAL_GPIO_Init+0x2cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d101      	bne.n	8003ba0 <HAL_GPIO_Init+0x1e0>
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e006      	b.n	8003bae <HAL_GPIO_Init+0x1ee>
 8003ba0:	2304      	movs	r3, #4
 8003ba2:	e004      	b.n	8003bae <HAL_GPIO_Init+0x1ee>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e002      	b.n	8003bae <HAL_GPIO_Init+0x1ee>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <HAL_GPIO_Init+0x1ee>
 8003bac:	2300      	movs	r3, #0
 8003bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb0:	f002 0203 	and.w	r2, r2, #3
 8003bb4:	0092      	lsls	r2, r2, #2
 8003bb6:	4093      	lsls	r3, r2
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bbe:	492f      	ldr	r1, [pc, #188]	@ (8003c7c <HAL_GPIO_Init+0x2bc>)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d006      	beq.n	8003be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	492c      	ldr	r1, [pc, #176]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003be6:	4b2a      	ldr	r3, [pc, #168]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003be8:	689a      	ldr	r2, [r3, #8]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	43db      	mvns	r3, r3
 8003bee:	4928      	ldr	r1, [pc, #160]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d006      	beq.n	8003c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c00:	4b23      	ldr	r3, [pc, #140]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	4922      	ldr	r1, [pc, #136]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60cb      	str	r3, [r1, #12]
 8003c0c:	e006      	b.n	8003c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	491e      	ldr	r1, [pc, #120]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d006      	beq.n	8003c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c28:	4b19      	ldr	r3, [pc, #100]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	4918      	ldr	r1, [pc, #96]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	604b      	str	r3, [r1, #4]
 8003c34:	e006      	b.n	8003c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c36:	4b16      	ldr	r3, [pc, #88]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	4914      	ldr	r1, [pc, #80]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d021      	beq.n	8003c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c50:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	490e      	ldr	r1, [pc, #56]	@ (8003c90 <HAL_GPIO_Init+0x2d0>)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
 8003c5c:	e021      	b.n	8003ca2 <HAL_GPIO_Init+0x2e2>
 8003c5e:	bf00      	nop
 8003c60:	10320000 	.word	0x10320000
 8003c64:	10310000 	.word	0x10310000
 8003c68:	10220000 	.word	0x10220000
 8003c6c:	10210000 	.word	0x10210000
 8003c70:	10120000 	.word	0x10120000
 8003c74:	10110000 	.word	0x10110000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40010000 	.word	0x40010000
 8003c80:	40010800 	.word	0x40010800
 8003c84:	40010c00 	.word	0x40010c00
 8003c88:	40011000 	.word	0x40011000
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_GPIO_Init+0x304>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	4909      	ldr	r1, [pc, #36]	@ (8003cc4 <HAL_GPIO_Init+0x304>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f47f ae8e 	bne.w	80039d4 <HAL_GPIO_Init+0x14>
  }
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	372c      	adds	r7, #44	@ 0x2c
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	40010400 	.word	0x40010400

08003cc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	887b      	ldrh	r3, [r7, #2]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e001      	b.n	8003cea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	807b      	strh	r3, [r7, #2]
 8003d02:	4613      	mov	r3, r2
 8003d04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d06:	787b      	ldrb	r3, [r7, #1]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d12:	e003      	b.n	8003d1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d14:	887b      	ldrh	r3, [r7, #2]
 8003d16:	041a      	lsls	r2, r3, #16
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	611a      	str	r2, [r3, #16]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bc80      	pop	{r7}
 8003d24:	4770      	bx	lr

08003d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d38:	887a      	ldrh	r2, [r7, #2]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	041a      	lsls	r2, r3, #16
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	43d9      	mvns	r1, r3
 8003d44:	887b      	ldrh	r3, [r7, #2]
 8003d46:	400b      	ands	r3, r1
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bc80      	pop	{r7}
 8003d56:	4770      	bx	lr

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e272      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8087 	beq.w	8003e86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d78:	4b92      	ldr	r3, [pc, #584]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d00c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d84:	4b8f      	ldr	r3, [pc, #572]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 030c 	and.w	r3, r3, #12
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d112      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5e>
 8003d90:	4b8c      	ldr	r3, [pc, #560]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d9c:	d10b      	bne.n	8003db6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d9e:	4b89      	ldr	r3, [pc, #548]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d06c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x12c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d168      	bne.n	8003e84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e24c      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbe:	d106      	bne.n	8003dce <HAL_RCC_OscConfig+0x76>
 8003dc0:	4b80      	ldr	r3, [pc, #512]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	e02e      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x98>
 8003dd6:	4b7b      	ldr	r3, [pc, #492]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	4b78      	ldr	r3, [pc, #480]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a77      	ldr	r2, [pc, #476]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0xbc>
 8003dfa:	4b72      	ldr	r3, [pc, #456]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a71      	ldr	r2, [pc, #452]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6f      	ldr	r3, [pc, #444]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6e      	ldr	r2, [pc, #440]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xd4>
 8003e14:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b68      	ldr	r3, [pc, #416]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a67      	ldr	r2, [pc, #412]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fed0 	bl	8002bd8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fecc 	bl	8002bd8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e200      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xe4>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe febc 	bl	8002bd8 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe feb8 	bl	8002bd8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	@ 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1ec      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b53      	ldr	r3, [pc, #332]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x10c>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e92:	4b4c      	ldr	r3, [pc, #304]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e9e:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x18c>
 8003eaa:	4b46      	ldr	r3, [pc, #280]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x176>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1c0      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3d      	ldr	r3, [pc, #244]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4939      	ldr	r1, [pc, #228]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b36      	ldr	r3, [pc, #216]	@ (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fe71 	bl	8002bd8 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fe fe6d 	bl	8002bd8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a1      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4927      	ldr	r1, [pc, #156]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fe fe50 	bl	8002bd8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fe4c 	bl	8002bd8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e180      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03a      	beq.n	8003fdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d019      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b17      	ldr	r3, [pc, #92]	@ (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f74:	f7fe fe30 	bl	8002bd8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fe2c 	bl	8002bd8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e160      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f000 faba 	bl	8004514 <RCC_Delay>
 8003fa0:	e01c      	b.n	8003fdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fe16 	bl	8002bd8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fae:	e00f      	b.n	8003fd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fe fe12 	bl	8002bd8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d908      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e146      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
 8003fc2:	bf00      	nop
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	42420000 	.word	0x42420000
 8003fcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	4b92      	ldr	r3, [pc, #584]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e9      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a6 	beq.w	8004136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fee:	4b8b      	ldr	r3, [pc, #556]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10d      	bne.n	8004016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ffa:	4b88      	ldr	r3, [pc, #544]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4a87      	ldr	r2, [pc, #540]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004004:	61d3      	str	r3, [r2, #28]
 8004006:	4b85      	ldr	r3, [pc, #532]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b82      	ldr	r3, [pc, #520]	@ (8004220 <HAL_RCC_OscConfig+0x4c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d118      	bne.n	8004054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004022:	4b7f      	ldr	r3, [pc, #508]	@ (8004220 <HAL_RCC_OscConfig+0x4c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7e      	ldr	r2, [pc, #504]	@ (8004220 <HAL_RCC_OscConfig+0x4c8>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800402c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402e:	f7fe fdd3 	bl	8002bd8 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004036:	f7fe fdcf 	bl	8002bd8 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b64      	cmp	r3, #100	@ 0x64
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e103      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004048:	4b75      	ldr	r3, [pc, #468]	@ (8004220 <HAL_RCC_OscConfig+0x4c8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d106      	bne.n	800406a <HAL_RCC_OscConfig+0x312>
 800405c:	4b6f      	ldr	r3, [pc, #444]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800405e:	6a1b      	ldr	r3, [r3, #32]
 8004060:	4a6e      	ldr	r2, [pc, #440]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6213      	str	r3, [r2, #32]
 8004068:	e02d      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x334>
 8004072:	4b6a      	ldr	r3, [pc, #424]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4a69      	ldr	r2, [pc, #420]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6213      	str	r3, [r2, #32]
 800407e:	4b67      	ldr	r3, [pc, #412]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	4a66      	ldr	r2, [pc, #408]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	6213      	str	r3, [r2, #32]
 800408a:	e01c      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b05      	cmp	r3, #5
 8004092:	d10c      	bne.n	80040ae <HAL_RCC_OscConfig+0x356>
 8004094:	4b61      	ldr	r3, [pc, #388]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	4a60      	ldr	r2, [pc, #384]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800409a:	f043 0304 	orr.w	r3, r3, #4
 800409e:	6213      	str	r3, [r2, #32]
 80040a0:	4b5e      	ldr	r3, [pc, #376]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	4a5d      	ldr	r2, [pc, #372]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6213      	str	r3, [r2, #32]
 80040ac:	e00b      	b.n	80040c6 <HAL_RCC_OscConfig+0x36e>
 80040ae:	4b5b      	ldr	r3, [pc, #364]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a5a      	ldr	r2, [pc, #360]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040b4:	f023 0301 	bic.w	r3, r3, #1
 80040b8:	6213      	str	r3, [r2, #32]
 80040ba:	4b58      	ldr	r3, [pc, #352]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	4a57      	ldr	r2, [pc, #348]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	f023 0304 	bic.w	r3, r3, #4
 80040c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7fe fd83 	bl	8002bd8 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7fe fd7f 	bl	8002bd8 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0b1      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ec:	4b4b      	ldr	r3, [pc, #300]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0ee      	beq.n	80040d6 <HAL_RCC_OscConfig+0x37e>
 80040f8:	e014      	b.n	8004124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fe fd6d 	bl	8002bd8 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe fd69 	bl	8002bd8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e09b      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004118:	4b40      	ldr	r3, [pc, #256]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ee      	bne.n	8004102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412a:	4b3c      	ldr	r3, [pc, #240]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4a3b      	ldr	r2, [pc, #236]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f000 8087 	beq.w	800424e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004140:	4b36      	ldr	r3, [pc, #216]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	2b08      	cmp	r3, #8
 800414a:	d061      	beq.n	8004210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	2b02      	cmp	r3, #2
 8004152:	d146      	bne.n	80041e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b33      	ldr	r3, [pc, #204]	@ (8004224 <HAL_RCC_OscConfig+0x4cc>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415a:	f7fe fd3d 	bl	8002bd8 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004162:	f7fe fd39 	bl	8002bd8 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e06d      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004174:	4b29      	ldr	r3, [pc, #164]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f0      	bne.n	8004162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004188:	d108      	bne.n	800419c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4921      	ldr	r1, [pc, #132]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004198:	4313      	orrs	r3, r2
 800419a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800419c:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a19      	ldr	r1, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	430b      	orrs	r3, r1
 80041ae:	491b      	ldr	r1, [pc, #108]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004224 <HAL_RCC_OscConfig+0x4cc>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe fd0d 	bl	8002bd8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c2:	f7fe fd09 	bl	8002bd8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e03d      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041d4:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x46a>
 80041e0:	e035      	b.n	800424e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <HAL_RCC_OscConfig+0x4cc>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e8:	f7fe fcf6 	bl	8002bd8 <HAL_GetTick>
 80041ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f0:	f7fe fcf2 	bl	8002bd8 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e026      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004202:	4b06      	ldr	r3, [pc, #24]	@ (800421c <HAL_RCC_OscConfig+0x4c4>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1f0      	bne.n	80041f0 <HAL_RCC_OscConfig+0x498>
 800420e:	e01e      	b.n	800424e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d107      	bne.n	8004228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e019      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
 8004224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004228:	4b0b      	ldr	r3, [pc, #44]	@ (8004258 <HAL_RCC_OscConfig+0x500>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	429a      	cmp	r2, r3
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40021000 	.word	0x40021000

0800425c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0d0      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004270:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d910      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 0207 	bic.w	r2, r3, #7
 8004286:	4965      	ldr	r1, [pc, #404]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	4313      	orrs	r3, r2
 800428c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b63      	ldr	r3, [pc, #396]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0b8      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0304 	and.w	r3, r3, #4
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d005      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b8:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a58      	ldr	r2, [pc, #352]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80042c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d0:	4b53      	ldr	r3, [pc, #332]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a52      	ldr	r2, [pc, #328]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80042da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b50      	ldr	r3, [pc, #320]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	494d      	ldr	r1, [pc, #308]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d040      	beq.n	800437c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d115      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e07f      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431a:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e073      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	4b3d      	ldr	r3, [pc, #244]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06b      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433a:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f023 0203 	bic.w	r2, r3, #3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	4936      	ldr	r1, [pc, #216]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800434c:	f7fe fc44 	bl	8002bd8 <HAL_GetTick>
 8004350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	e00a      	b.n	800436a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004354:	f7fe fc40 	bl	8002bd8 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e053      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b2d      	ldr	r3, [pc, #180]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 020c 	and.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	429a      	cmp	r2, r3
 800437a:	d1eb      	bne.n	8004354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b27      	ldr	r3, [pc, #156]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d210      	bcs.n	80043ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 0207 	bic.w	r2, r3, #7
 8004392:	4922      	ldr	r1, [pc, #136]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	4313      	orrs	r3, r2
 8004398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439a:	4b20      	ldr	r3, [pc, #128]	@ (800441c <HAL_RCC_ClockConfig+0x1c0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e032      	b.n	8004412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b8:	4b19      	ldr	r3, [pc, #100]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4916      	ldr	r1, [pc, #88]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d009      	beq.n	80043ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043d6:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	490e      	ldr	r1, [pc, #56]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ea:	f000 f821 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043ee:	4602      	mov	r2, r0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	490a      	ldr	r1, [pc, #40]	@ (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043fc:	5ccb      	ldrb	r3, [r1, r3]
 80043fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004402:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <HAL_RCC_ClockConfig+0x1cc>)
 8004404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004406:	4b09      	ldr	r3, [pc, #36]	@ (800442c <HAL_RCC_ClockConfig+0x1d0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fba2 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40022000 	.word	0x40022000
 8004420:	40021000 	.word	0x40021000
 8004424:	08009a38 	.word	0x08009a38
 8004428:	20000008 	.word	0x20000008
 800442c:	2000000c 	.word	0x2000000c

08004430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800444a:	4b1e      	ldr	r3, [pc, #120]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d002      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x30>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0x36>
 800445e:	e027      	b.n	80044b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004460:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004462:	613b      	str	r3, [r7, #16]
      break;
 8004464:	e027      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	0c9b      	lsrs	r3, r3, #18
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	4a17      	ldr	r2, [pc, #92]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004470:	5cd3      	ldrb	r3, [r2, r3]
 8004472:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d010      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800447e:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	0c5b      	lsrs	r3, r3, #17
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	4a11      	ldr	r2, [pc, #68]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e004      	b.n	80044aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a0c      	ldr	r2, [pc, #48]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	613b      	str	r3, [r7, #16]
      break;
 80044ae:	e002      	b.n	80044b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b05      	ldr	r3, [pc, #20]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80044b2:	613b      	str	r3, [r7, #16]
      break;
 80044b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044b6:	693b      	ldr	r3, [r7, #16]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
 80044c8:	007a1200 	.word	0x007a1200
 80044cc:	08009a50 	.word	0x08009a50
 80044d0:	08009a60 	.word	0x08009a60
 80044d4:	003d0900 	.word	0x003d0900

080044d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b02      	ldr	r3, [pc, #8]	@ (80044e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	20000008 	.word	0x20000008

080044ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044f0:	f7ff fff2 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b05      	ldr	r3, [pc, #20]	@ (800450c <HAL_RCC_GetPCLK2Freq+0x20>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	0adb      	lsrs	r3, r3, #11
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	4903      	ldr	r1, [pc, #12]	@ (8004510 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004502:	5ccb      	ldrb	r3, [r1, r3]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40021000 	.word	0x40021000
 8004510:	08009a48 	.word	0x08009a48

08004514 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800451c:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <RCC_Delay+0x34>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a0a      	ldr	r2, [pc, #40]	@ (800454c <RCC_Delay+0x38>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	0a5b      	lsrs	r3, r3, #9
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004530:	bf00      	nop
  }
  while (Delay --);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1e5a      	subs	r2, r3, #1
 8004536:	60fa      	str	r2, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1f9      	bne.n	8004530 <RCC_Delay+0x1c>
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	20000008 	.word	0x20000008
 800454c:	10624dd3 	.word	0x10624dd3

08004550 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d07d      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800456c:	2300      	movs	r3, #0
 800456e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004570:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10d      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457c:	4b4c      	ldr	r3, [pc, #304]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4a4b      	ldr	r2, [pc, #300]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004586:	61d3      	str	r3, [r2, #28]
 8004588:	4b49      	ldr	r3, [pc, #292]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004594:	2301      	movs	r3, #1
 8004596:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	4b46      	ldr	r3, [pc, #280]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d118      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045a4:	4b43      	ldr	r3, [pc, #268]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a42      	ldr	r2, [pc, #264]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b0:	f7fe fb12 	bl	8002bd8 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045b6:	e008      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045b8:	f7fe fb0e 	bl	8002bd8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	@ 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e06d      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b3a      	ldr	r3, [pc, #232]	@ (80046b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045d6:	4b36      	ldr	r3, [pc, #216]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d02e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d027      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045f4:	4b2e      	ldr	r3, [pc, #184]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045fe:	4b2e      	ldr	r3, [pc, #184]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004600:	2201      	movs	r2, #1
 8004602:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004604:	4b2c      	ldr	r3, [pc, #176]	@ (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800460a:	4a29      	ldr	r2, [pc, #164]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7fe fadd 	bl	8002bd8 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fe fad9 	bl	8002bd8 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e036      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ee      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004644:	4b1a      	ldr	r3, [pc, #104]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4917      	ldr	r1, [pc, #92]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004652:	4313      	orrs	r3, r2
 8004654:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b14      	ldr	r3, [pc, #80]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	4a13      	ldr	r2, [pc, #76]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004666:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004674:	4b0e      	ldr	r3, [pc, #56]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	490b      	ldr	r1, [pc, #44]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004692:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40021000 	.word	0x40021000
 80046b4:	40007000 	.word	0x40007000
 80046b8:	42420440 	.word	0x42420440

080046bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	2300      	movs	r3, #0
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	2300      	movs	r3, #0
 80046ce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	2300      	movs	r3, #0
 80046d6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b10      	cmp	r3, #16
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	f200 808a 	bhi.w	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d045      	beq.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d075      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80046f2:	e082      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80046f4:	4b46      	ldr	r3, [pc, #280]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80046fa:	4b45      	ldr	r3, [pc, #276]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d07b      	beq.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0c9b      	lsrs	r3, r3, #18
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	4a41      	ldr	r2, [pc, #260]	@ (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d015      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800471e:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	0c5b      	lsrs	r3, r3, #17
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	4a3b      	ldr	r2, [pc, #236]	@ (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004738:	4a38      	ldr	r2, [pc, #224]	@ (800481c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	fb02 f303 	mul.w	r3, r2, r3
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	e004      	b.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4a34      	ldr	r2, [pc, #208]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004754:	4b2e      	ldr	r3, [pc, #184]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004760:	d102      	bne.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	61bb      	str	r3, [r7, #24]
      break;
 8004766:	e04a      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4a2d      	ldr	r2, [pc, #180]	@ (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
      break;
 8004776:	e042      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004778:	4b25      	ldr	r3, [pc, #148]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004788:	d108      	bne.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004794:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e01f      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a6:	d109      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047a8:	4b19      	ldr	r3, [pc, #100]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80047b4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	e00f      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c6:	d11c      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047c8:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d016      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80047d4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80047d8:	61bb      	str	r3, [r7, #24]
      break;
 80047da:	e012      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80047dc:	e011      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80047de:	f7ff fe85 	bl	80044ec <HAL_RCC_GetPCLK2Freq>
 80047e2:	4602      	mov	r2, r0
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	0b9b      	lsrs	r3, r3, #14
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	3301      	adds	r3, #1
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f6:	61bb      	str	r3, [r7, #24]
      break;
 80047f8:	e004      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004802:	bf00      	nop
    }
  }
  return (frequency);
 8004804:	69bb      	ldr	r3, [r7, #24]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3720      	adds	r7, #32
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
 8004814:	08009a64 	.word	0x08009a64
 8004818:	08009a74 	.word	0x08009a74
 800481c:	007a1200 	.word	0x007a1200
 8004820:	003d0900 	.word	0x003d0900
 8004824:	aaaaaaab 	.word	0xaaaaaaab

08004828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e041      	b.n	80048be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd ffaa 	bl	80027a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fc30 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d001      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e03a      	b.n	8004956 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	@ (8004960 <HAL_TIM_Base_Start_IT+0x98>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00e      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x58>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490a:	d009      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x58>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a14      	ldr	r2, [pc, #80]	@ (8004964 <HAL_TIM_Base_Start_IT+0x9c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d004      	beq.n	8004920 <HAL_TIM_Base_Start_IT+0x58>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a13      	ldr	r2, [pc, #76]	@ (8004968 <HAL_TIM_Base_Start_IT+0xa0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d111      	bne.n	8004944 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b06      	cmp	r3, #6
 8004930:	d010      	beq.n	8004954 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	e007      	b.n	8004954 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	bc80      	pop	{r7}
 800495e:	4770      	bx	lr
 8004960:	40012c00 	.word	0x40012c00
 8004964:	40000400 	.word	0x40000400
 8004968:	40000800 	.word	0x40000800

0800496c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e041      	b.n	8004a02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f839 	bl	8004a0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fb8e 	bl	80050cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr

08004a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <HAL_TIM_PWM_Start+0x24>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	bf14      	ite	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	2300      	moveq	r3, #0
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e022      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d109      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x3e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	bf14      	ite	ne
 8004a52:	2301      	movne	r3, #1
 8004a54:	2300      	moveq	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	e015      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d109      	bne.n	8004a74 <HAL_TIM_PWM_Start+0x58>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	bf14      	ite	ne
 8004a6c:	2301      	movne	r3, #1
 8004a6e:	2300      	moveq	r3, #0
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	e008      	b.n	8004a86 <HAL_TIM_PWM_Start+0x6a>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e05e      	b.n	8004b4c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x82>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a9c:	e013      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b04      	cmp	r3, #4
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Start+0x92>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004aac:	e00b      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Start+0xa2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_PWM_Start+0xaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2201      	movs	r2, #1
 8004acc:	6839      	ldr	r1, [r7, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fd7c 	bl	80055cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8004b54 <HAL_TIM_PWM_Start+0x138>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d107      	bne.n	8004aee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	@ (8004b54 <HAL_TIM_PWM_Start+0x138>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b00:	d009      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a14      	ldr	r2, [pc, #80]	@ (8004b58 <HAL_TIM_PWM_Start+0x13c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_PWM_Start+0xfa>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <HAL_TIM_PWM_Start+0x140>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d111      	bne.n	8004b3a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0307 	and.w	r3, r3, #7
 8004b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d010      	beq.n	8004b4a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0201 	orr.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	e007      	b.n	8004b4a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800

08004b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d122      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d11b      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0202 	mvn.w	r2, #2
 8004b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa76 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa69 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fa78 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d122      	bne.n	8004c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11b      	bne.n	8004c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0204 	mvn.w	r2, #4
 8004be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2202      	movs	r2, #2
 8004be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa4c 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e005      	b.n	8004c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa3f 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fa4e 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d122      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d11b      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0208 	mvn.w	r2, #8
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa22 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa15 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa24 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	2b10      	cmp	r3, #16
 8004c70:	d122      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d11b      	bne.n	8004cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f9f8 	bl	8005094 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f9eb 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f9fa 	bl	80050a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d10e      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d107      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0201 	mvn.w	r2, #1
 8004cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc ff24 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b80      	cmp	r3, #128	@ 0x80
 8004cf0:	d10e      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfc:	2b80      	cmp	r3, #128	@ 0x80
 8004cfe:	d107      	bne.n	8004d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fce9 	bl	80056e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d10e      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d28:	2b40      	cmp	r3, #64	@ 0x40
 8004d2a:	d107      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9be 	bl	80050b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d107      	bne.n	8004d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0220 	mvn.w	r2, #32
 8004d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fcb4 	bl	80056d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e0ae      	b.n	8004eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b0c      	cmp	r3, #12
 8004d9a:	f200 809f 	bhi.w	8004edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004edd 	.word	0x08004edd
 8004dac:	08004edd 	.word	0x08004edd
 8004db0:	08004edd 	.word	0x08004edd
 8004db4:	08004e19 	.word	0x08004e19
 8004db8:	08004edd 	.word	0x08004edd
 8004dbc:	08004edd 	.word	0x08004edd
 8004dc0:	08004edd 	.word	0x08004edd
 8004dc4:	08004e5b 	.word	0x08004e5b
 8004dc8:	08004edd 	.word	0x08004edd
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	08004edd 	.word	0x08004edd
 8004dd4:	08004e9b 	.word	0x08004e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f9d6 	bl	8005190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0208 	orr.w	r2, r2, #8
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0204 	bic.w	r2, r2, #4
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	619a      	str	r2, [r3, #24]
      break;
 8004e16:	e064      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa1c 	bl	800525c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	021a      	lsls	r2, r3, #8
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	619a      	str	r2, [r3, #24]
      break;
 8004e58:	e043      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fa65 	bl	8005330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0208 	orr.w	r2, r2, #8
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0204 	bic.w	r2, r2, #4
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	61da      	str	r2, [r3, #28]
      break;
 8004e98:	e023      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 faaf 	bl	8005404 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	021a      	lsls	r2, r3, #8
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	61da      	str	r2, [r3, #28]
      break;
 8004eda:	e002      	b.n	8004ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3718      	adds	r7, #24
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b4      	b.n	800507a <HAL_TIM_ConfigClockSource+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f56:	f000 8086 	beq.w	8005066 <HAL_TIM_ConfigClockSource+0x172>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b70      	cmp	r3, #112	@ 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa6>
 8004f64:	2b70      	cmp	r3, #112	@ 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b60      	cmp	r3, #96	@ 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x11a>
 8004f6c:	2b60      	cmp	r3, #96	@ 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b50      	cmp	r3, #80	@ 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xfa>
 8004f74:	2b50      	cmp	r3, #80	@ 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b40      	cmp	r3, #64	@ 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x13a>
 8004f7c:	2b40      	cmp	r3, #64	@ 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b30      	cmp	r3, #48	@ 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b30      	cmp	r3, #48	@ 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004faa:	f000 faf0 	bl	800558e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04f      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	f000 fad9 	bl	800558e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 fa50 	bl	80054a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	@ 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 faa7 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 800500c:	e02c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800501a:	461a      	mov	r2, r3
 800501c:	f000 fa6e 	bl	80054fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	@ 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fa97 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 800502c:	e01c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fa30 	bl	80054a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	@ 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fa87 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 800504c:	e00c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 fa7e 	bl	800555a <TIM_ITRx_SetConfig>
      break;
 800505e:	e003      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bc80      	pop	{r7}
 80050a4:	4770      	bx	lr

080050a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr
	...

080050cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a29      	ldr	r2, [pc, #164]	@ (8005184 <TIM_Base_SetConfig+0xb8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d00b      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	d007      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a26      	ldr	r2, [pc, #152]	@ (8005188 <TIM_Base_SetConfig+0xbc>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_Base_SetConfig+0x30>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a25      	ldr	r2, [pc, #148]	@ (800518c <TIM_Base_SetConfig+0xc0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d108      	bne.n	800510e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <TIM_Base_SetConfig+0xb8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d007      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <TIM_Base_SetConfig+0xbc>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_Base_SetConfig+0x62>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a18      	ldr	r2, [pc, #96]	@ (800518c <TIM_Base_SetConfig+0xc0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d108      	bne.n	8005140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a07      	ldr	r2, [pc, #28]	@ (8005184 <TIM_Base_SetConfig+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d103      	bne.n	8005174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	615a      	str	r2, [r3, #20]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800

08005190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0201 	bic.w	r2, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0303 	bic.w	r3, r3, #3
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 0302 	bic.w	r3, r3, #2
 80051d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <TIM_OC1_SetConfig+0xc8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10c      	bne.n	8005206 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0308 	bic.w	r3, r3, #8
 80051f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 0304 	bic.w	r3, r3, #4
 8005204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a13      	ldr	r2, [pc, #76]	@ (8005258 <TIM_OC1_SetConfig+0xc8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d111      	bne.n	8005232 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800521c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	621a      	str	r2, [r3, #32]
}
 800524c:	bf00      	nop
 800524e:	371c      	adds	r7, #28
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40012c00 	.word	0x40012c00

0800525c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f023 0210 	bic.w	r2, r3, #16
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800528a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 0320 	bic.w	r3, r3, #32
 80052a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1d      	ldr	r2, [pc, #116]	@ (800532c <TIM_OC2_SetConfig+0xd0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10d      	bne.n	80052d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a14      	ldr	r2, [pc, #80]	@ (800532c <TIM_OC2_SetConfig+0xd0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d113      	bne.n	8005308 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr
 800532c:	40012c00 	.word	0x40012c00

08005330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <TIM_OC3_SetConfig+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a14      	ldr	r2, [pc, #80]	@ (8005400 <TIM_OC3_SetConfig+0xd0>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d113      	bne.n	80053da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	621a      	str	r2, [r3, #32]
}
 80053f4:	bf00      	nop
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00

08005404 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800543a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4313      	orrs	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800544e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a0f      	ldr	r2, [pc, #60]	@ (800549c <TIM_OC4_SetConfig+0x98>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d109      	bne.n	8005478 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800546a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	019b      	lsls	r3, r3, #6
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	40012c00 	.word	0x40012c00

080054a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 030a 	bic.w	r3, r3, #10
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr

080054fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f023 0210 	bic.w	r2, r3, #16
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	031b      	lsls	r3, r3, #12
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005538:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	621a      	str	r2, [r3, #32]
}
 8005550:	bf00      	nop
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005570:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	f043 0307 	orr.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr

0800558e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	021a      	lsls	r2, r3, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	609a      	str	r2, [r3, #8]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 031f 	and.w	r3, r3, #31
 80055de:	2201      	movs	r2, #1
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1a      	ldr	r2, [r3, #32]
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	401a      	ands	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1a      	ldr	r2, [r3, #32]
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	fa01 f303 	lsl.w	r3, r1, r3
 8005604:	431a      	orrs	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005628:	2302      	movs	r3, #2
 800562a:	e046      	b.n	80056ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005652:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a16      	ldr	r2, [pc, #88]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00e      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005678:	d009      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d004      	beq.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a10      	ldr	r2, [pc, #64]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10c      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005694:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68ba      	ldr	r2, [r7, #8]
 800569c:	4313      	orrs	r3, r2
 800569e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bc80      	pop	{r7}
 80056c2:	4770      	bx	lr
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40000400 	.word	0x40000400
 80056cc:	40000800 	.word	0x40000800

080056d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr

080056e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <atof>:
 80056f4:	2100      	movs	r1, #0
 80056f6:	f000 bdfb 	b.w	80062f0 <strtod>

080056fa <sulp>:
 80056fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	460f      	mov	r7, r1
 8005700:	4690      	mov	r8, r2
 8005702:	f003 fa45 	bl	8008b90 <__ulp>
 8005706:	4604      	mov	r4, r0
 8005708:	460d      	mov	r5, r1
 800570a:	f1b8 0f00 	cmp.w	r8, #0
 800570e:	d011      	beq.n	8005734 <sulp+0x3a>
 8005710:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005714:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005718:	2b00      	cmp	r3, #0
 800571a:	dd0b      	ble.n	8005734 <sulp+0x3a>
 800571c:	2400      	movs	r4, #0
 800571e:	051b      	lsls	r3, r3, #20
 8005720:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005724:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005728:	4622      	mov	r2, r4
 800572a:	462b      	mov	r3, r5
 800572c:	f7fa fed4 	bl	80004d8 <__aeabi_dmul>
 8005730:	4604      	mov	r4, r0
 8005732:	460d      	mov	r5, r1
 8005734:	4620      	mov	r0, r4
 8005736:	4629      	mov	r1, r5
 8005738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800573c:	0000      	movs	r0, r0
	...

08005740 <_strtod_l>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	b09f      	sub	sp, #124	@ 0x7c
 8005746:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005748:	2200      	movs	r2, #0
 800574a:	460c      	mov	r4, r1
 800574c:	921a      	str	r2, [sp, #104]	@ 0x68
 800574e:	f04f 0a00 	mov.w	sl, #0
 8005752:	f04f 0b00 	mov.w	fp, #0
 8005756:	460a      	mov	r2, r1
 8005758:	9005      	str	r0, [sp, #20]
 800575a:	9219      	str	r2, [sp, #100]	@ 0x64
 800575c:	7811      	ldrb	r1, [r2, #0]
 800575e:	292b      	cmp	r1, #43	@ 0x2b
 8005760:	d048      	beq.n	80057f4 <_strtod_l+0xb4>
 8005762:	d836      	bhi.n	80057d2 <_strtod_l+0x92>
 8005764:	290d      	cmp	r1, #13
 8005766:	d830      	bhi.n	80057ca <_strtod_l+0x8a>
 8005768:	2908      	cmp	r1, #8
 800576a:	d830      	bhi.n	80057ce <_strtod_l+0x8e>
 800576c:	2900      	cmp	r1, #0
 800576e:	d039      	beq.n	80057e4 <_strtod_l+0xa4>
 8005770:	2200      	movs	r2, #0
 8005772:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005774:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005776:	782a      	ldrb	r2, [r5, #0]
 8005778:	2a30      	cmp	r2, #48	@ 0x30
 800577a:	f040 80b1 	bne.w	80058e0 <_strtod_l+0x1a0>
 800577e:	786a      	ldrb	r2, [r5, #1]
 8005780:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005784:	2a58      	cmp	r2, #88	@ 0x58
 8005786:	d16c      	bne.n	8005862 <_strtod_l+0x122>
 8005788:	9302      	str	r3, [sp, #8]
 800578a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800578c:	4a8e      	ldr	r2, [pc, #568]	@ (80059c8 <_strtod_l+0x288>)
 800578e:	9301      	str	r3, [sp, #4]
 8005790:	ab1a      	add	r3, sp, #104	@ 0x68
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	9805      	ldr	r0, [sp, #20]
 8005796:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005798:	a919      	add	r1, sp, #100	@ 0x64
 800579a:	f002 faed 	bl	8007d78 <__gethex>
 800579e:	f010 060f 	ands.w	r6, r0, #15
 80057a2:	4604      	mov	r4, r0
 80057a4:	d005      	beq.n	80057b2 <_strtod_l+0x72>
 80057a6:	2e06      	cmp	r6, #6
 80057a8:	d126      	bne.n	80057f8 <_strtod_l+0xb8>
 80057aa:	2300      	movs	r3, #0
 80057ac:	3501      	adds	r5, #1
 80057ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80057b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f040 8584 	bne.w	80062c2 <_strtod_l+0xb82>
 80057ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057bc:	b1bb      	cbz	r3, 80057ee <_strtod_l+0xae>
 80057be:	4650      	mov	r0, sl
 80057c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80057c4:	b01f      	add	sp, #124	@ 0x7c
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	2920      	cmp	r1, #32
 80057cc:	d1d0      	bne.n	8005770 <_strtod_l+0x30>
 80057ce:	3201      	adds	r2, #1
 80057d0:	e7c3      	b.n	800575a <_strtod_l+0x1a>
 80057d2:	292d      	cmp	r1, #45	@ 0x2d
 80057d4:	d1cc      	bne.n	8005770 <_strtod_l+0x30>
 80057d6:	2101      	movs	r1, #1
 80057d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80057da:	1c51      	adds	r1, r2, #1
 80057dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80057de:	7852      	ldrb	r2, [r2, #1]
 80057e0:	2a00      	cmp	r2, #0
 80057e2:	d1c7      	bne.n	8005774 <_strtod_l+0x34>
 80057e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 8568 	bne.w	80062be <_strtod_l+0xb7e>
 80057ee:	4650      	mov	r0, sl
 80057f0:	4659      	mov	r1, fp
 80057f2:	e7e7      	b.n	80057c4 <_strtod_l+0x84>
 80057f4:	2100      	movs	r1, #0
 80057f6:	e7ef      	b.n	80057d8 <_strtod_l+0x98>
 80057f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057fa:	b13a      	cbz	r2, 800580c <_strtod_l+0xcc>
 80057fc:	2135      	movs	r1, #53	@ 0x35
 80057fe:	a81c      	add	r0, sp, #112	@ 0x70
 8005800:	f003 fab6 	bl	8008d70 <__copybits>
 8005804:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005806:	9805      	ldr	r0, [sp, #20]
 8005808:	f002 fe90 	bl	800852c <_Bfree>
 800580c:	3e01      	subs	r6, #1
 800580e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005810:	2e04      	cmp	r6, #4
 8005812:	d806      	bhi.n	8005822 <_strtod_l+0xe2>
 8005814:	e8df f006 	tbb	[pc, r6]
 8005818:	201d0314 	.word	0x201d0314
 800581c:	14          	.byte	0x14
 800581d:	00          	.byte	0x00
 800581e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005822:	05e1      	lsls	r1, r4, #23
 8005824:	bf48      	it	mi
 8005826:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800582a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800582e:	0d1b      	lsrs	r3, r3, #20
 8005830:	051b      	lsls	r3, r3, #20
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1bd      	bne.n	80057b2 <_strtod_l+0x72>
 8005836:	f001 fb4d 	bl	8006ed4 <__errno>
 800583a:	2322      	movs	r3, #34	@ 0x22
 800583c:	6003      	str	r3, [r0, #0]
 800583e:	e7b8      	b.n	80057b2 <_strtod_l+0x72>
 8005840:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005844:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005848:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800584c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005850:	e7e7      	b.n	8005822 <_strtod_l+0xe2>
 8005852:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80059cc <_strtod_l+0x28c>
 8005856:	e7e4      	b.n	8005822 <_strtod_l+0xe2>
 8005858:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800585c:	f04f 3aff 	mov.w	sl, #4294967295
 8005860:	e7df      	b.n	8005822 <_strtod_l+0xe2>
 8005862:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	9219      	str	r2, [sp, #100]	@ 0x64
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b30      	cmp	r3, #48	@ 0x30
 800586c:	d0f9      	beq.n	8005862 <_strtod_l+0x122>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d09f      	beq.n	80057b2 <_strtod_l+0x72>
 8005872:	2301      	movs	r3, #1
 8005874:	9309      	str	r3, [sp, #36]	@ 0x24
 8005876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005878:	220a      	movs	r2, #10
 800587a:	930c      	str	r3, [sp, #48]	@ 0x30
 800587c:	2300      	movs	r3, #0
 800587e:	461f      	mov	r7, r3
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	930a      	str	r3, [sp, #40]	@ 0x28
 8005884:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005886:	7805      	ldrb	r5, [r0, #0]
 8005888:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800588c:	b2d9      	uxtb	r1, r3
 800588e:	2909      	cmp	r1, #9
 8005890:	d928      	bls.n	80058e4 <_strtod_l+0x1a4>
 8005892:	2201      	movs	r2, #1
 8005894:	494e      	ldr	r1, [pc, #312]	@ (80059d0 <_strtod_l+0x290>)
 8005896:	f001 fac0 	bl	8006e1a <strncmp>
 800589a:	2800      	cmp	r0, #0
 800589c:	d032      	beq.n	8005904 <_strtod_l+0x1c4>
 800589e:	2000      	movs	r0, #0
 80058a0:	462a      	mov	r2, r5
 80058a2:	4681      	mov	r9, r0
 80058a4:	463d      	mov	r5, r7
 80058a6:	4603      	mov	r3, r0
 80058a8:	2a65      	cmp	r2, #101	@ 0x65
 80058aa:	d001      	beq.n	80058b0 <_strtod_l+0x170>
 80058ac:	2a45      	cmp	r2, #69	@ 0x45
 80058ae:	d114      	bne.n	80058da <_strtod_l+0x19a>
 80058b0:	b91d      	cbnz	r5, 80058ba <_strtod_l+0x17a>
 80058b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058b4:	4302      	orrs	r2, r0
 80058b6:	d095      	beq.n	80057e4 <_strtod_l+0xa4>
 80058b8:	2500      	movs	r5, #0
 80058ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80058bc:	1c62      	adds	r2, r4, #1
 80058be:	9219      	str	r2, [sp, #100]	@ 0x64
 80058c0:	7862      	ldrb	r2, [r4, #1]
 80058c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80058c4:	d077      	beq.n	80059b6 <_strtod_l+0x276>
 80058c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80058c8:	d07b      	beq.n	80059c2 <_strtod_l+0x282>
 80058ca:	f04f 0c00 	mov.w	ip, #0
 80058ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80058d2:	2909      	cmp	r1, #9
 80058d4:	f240 8082 	bls.w	80059dc <_strtod_l+0x29c>
 80058d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80058da:	f04f 0800 	mov.w	r8, #0
 80058de:	e0a2      	b.n	8005a26 <_strtod_l+0x2e6>
 80058e0:	2300      	movs	r3, #0
 80058e2:	e7c7      	b.n	8005874 <_strtod_l+0x134>
 80058e4:	2f08      	cmp	r7, #8
 80058e6:	bfd5      	itete	le
 80058e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80058ea:	9908      	ldrgt	r1, [sp, #32]
 80058ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80058f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80058f4:	f100 0001 	add.w	r0, r0, #1
 80058f8:	bfd4      	ite	le
 80058fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80058fc:	9308      	strgt	r3, [sp, #32]
 80058fe:	3701      	adds	r7, #1
 8005900:	9019      	str	r0, [sp, #100]	@ 0x64
 8005902:	e7bf      	b.n	8005884 <_strtod_l+0x144>
 8005904:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	9219      	str	r2, [sp, #100]	@ 0x64
 800590a:	785a      	ldrb	r2, [r3, #1]
 800590c:	b37f      	cbz	r7, 800596e <_strtod_l+0x22e>
 800590e:	4681      	mov	r9, r0
 8005910:	463d      	mov	r5, r7
 8005912:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005916:	2b09      	cmp	r3, #9
 8005918:	d912      	bls.n	8005940 <_strtod_l+0x200>
 800591a:	2301      	movs	r3, #1
 800591c:	e7c4      	b.n	80058a8 <_strtod_l+0x168>
 800591e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005920:	3001      	adds	r0, #1
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	9219      	str	r2, [sp, #100]	@ 0x64
 8005926:	785a      	ldrb	r2, [r3, #1]
 8005928:	2a30      	cmp	r2, #48	@ 0x30
 800592a:	d0f8      	beq.n	800591e <_strtod_l+0x1de>
 800592c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005930:	2b08      	cmp	r3, #8
 8005932:	f200 84cb 	bhi.w	80062cc <_strtod_l+0xb8c>
 8005936:	4681      	mov	r9, r0
 8005938:	2000      	movs	r0, #0
 800593a:	4605      	mov	r5, r0
 800593c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800593e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005940:	3a30      	subs	r2, #48	@ 0x30
 8005942:	f100 0301 	add.w	r3, r0, #1
 8005946:	d02a      	beq.n	800599e <_strtod_l+0x25e>
 8005948:	4499      	add	r9, r3
 800594a:	210a      	movs	r1, #10
 800594c:	462b      	mov	r3, r5
 800594e:	eb00 0c05 	add.w	ip, r0, r5
 8005952:	4563      	cmp	r3, ip
 8005954:	d10d      	bne.n	8005972 <_strtod_l+0x232>
 8005956:	1c69      	adds	r1, r5, #1
 8005958:	4401      	add	r1, r0
 800595a:	4428      	add	r0, r5
 800595c:	2808      	cmp	r0, #8
 800595e:	dc16      	bgt.n	800598e <_strtod_l+0x24e>
 8005960:	230a      	movs	r3, #10
 8005962:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005964:	fb03 2300 	mla	r3, r3, r0, r2
 8005968:	930a      	str	r3, [sp, #40]	@ 0x28
 800596a:	2300      	movs	r3, #0
 800596c:	e018      	b.n	80059a0 <_strtod_l+0x260>
 800596e:	4638      	mov	r0, r7
 8005970:	e7da      	b.n	8005928 <_strtod_l+0x1e8>
 8005972:	2b08      	cmp	r3, #8
 8005974:	f103 0301 	add.w	r3, r3, #1
 8005978:	dc03      	bgt.n	8005982 <_strtod_l+0x242>
 800597a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800597c:	434e      	muls	r6, r1
 800597e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005980:	e7e7      	b.n	8005952 <_strtod_l+0x212>
 8005982:	2b10      	cmp	r3, #16
 8005984:	bfde      	ittt	le
 8005986:	9e08      	ldrle	r6, [sp, #32]
 8005988:	434e      	mulle	r6, r1
 800598a:	9608      	strle	r6, [sp, #32]
 800598c:	e7e1      	b.n	8005952 <_strtod_l+0x212>
 800598e:	280f      	cmp	r0, #15
 8005990:	dceb      	bgt.n	800596a <_strtod_l+0x22a>
 8005992:	230a      	movs	r3, #10
 8005994:	9808      	ldr	r0, [sp, #32]
 8005996:	fb03 2300 	mla	r3, r3, r0, r2
 800599a:	9308      	str	r3, [sp, #32]
 800599c:	e7e5      	b.n	800596a <_strtod_l+0x22a>
 800599e:	4629      	mov	r1, r5
 80059a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059a2:	460d      	mov	r5, r1
 80059a4:	1c50      	adds	r0, r2, #1
 80059a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80059a8:	7852      	ldrb	r2, [r2, #1]
 80059aa:	4618      	mov	r0, r3
 80059ac:	e7b1      	b.n	8005912 <_strtod_l+0x1d2>
 80059ae:	f04f 0900 	mov.w	r9, #0
 80059b2:	2301      	movs	r3, #1
 80059b4:	e77d      	b.n	80058b2 <_strtod_l+0x172>
 80059b6:	f04f 0c00 	mov.w	ip, #0
 80059ba:	1ca2      	adds	r2, r4, #2
 80059bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80059be:	78a2      	ldrb	r2, [r4, #2]
 80059c0:	e785      	b.n	80058ce <_strtod_l+0x18e>
 80059c2:	f04f 0c01 	mov.w	ip, #1
 80059c6:	e7f8      	b.n	80059ba <_strtod_l+0x27a>
 80059c8:	08009a8c 	.word	0x08009a8c
 80059cc:	7ff00000 	.word	0x7ff00000
 80059d0:	08009a76 	.word	0x08009a76
 80059d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059d6:	1c51      	adds	r1, r2, #1
 80059d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80059da:	7852      	ldrb	r2, [r2, #1]
 80059dc:	2a30      	cmp	r2, #48	@ 0x30
 80059de:	d0f9      	beq.n	80059d4 <_strtod_l+0x294>
 80059e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80059e4:	2908      	cmp	r1, #8
 80059e6:	f63f af78 	bhi.w	80058da <_strtod_l+0x19a>
 80059ea:	f04f 080a 	mov.w	r8, #10
 80059ee:	3a30      	subs	r2, #48	@ 0x30
 80059f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80059f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80059f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059f8:	1c56      	adds	r6, r2, #1
 80059fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80059fc:	7852      	ldrb	r2, [r2, #1]
 80059fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005a02:	f1be 0f09 	cmp.w	lr, #9
 8005a06:	d939      	bls.n	8005a7c <_strtod_l+0x33c>
 8005a08:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005a0e:	1a76      	subs	r6, r6, r1
 8005a10:	2e08      	cmp	r6, #8
 8005a12:	dc03      	bgt.n	8005a1c <_strtod_l+0x2dc>
 8005a14:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005a16:	4588      	cmp	r8, r1
 8005a18:	bfa8      	it	ge
 8005a1a:	4688      	movge	r8, r1
 8005a1c:	f1bc 0f00 	cmp.w	ip, #0
 8005a20:	d001      	beq.n	8005a26 <_strtod_l+0x2e6>
 8005a22:	f1c8 0800 	rsb	r8, r8, #0
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	d14e      	bne.n	8005ac8 <_strtod_l+0x388>
 8005a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a2c:	4308      	orrs	r0, r1
 8005a2e:	f47f aec0 	bne.w	80057b2 <_strtod_l+0x72>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f47f aed6 	bne.w	80057e4 <_strtod_l+0xa4>
 8005a38:	2a69      	cmp	r2, #105	@ 0x69
 8005a3a:	d028      	beq.n	8005a8e <_strtod_l+0x34e>
 8005a3c:	dc25      	bgt.n	8005a8a <_strtod_l+0x34a>
 8005a3e:	2a49      	cmp	r2, #73	@ 0x49
 8005a40:	d025      	beq.n	8005a8e <_strtod_l+0x34e>
 8005a42:	2a4e      	cmp	r2, #78	@ 0x4e
 8005a44:	f47f aece 	bne.w	80057e4 <_strtod_l+0xa4>
 8005a48:	499a      	ldr	r1, [pc, #616]	@ (8005cb4 <_strtod_l+0x574>)
 8005a4a:	a819      	add	r0, sp, #100	@ 0x64
 8005a4c:	f002 fbb6 	bl	80081bc <__match>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	f43f aec7 	beq.w	80057e4 <_strtod_l+0xa4>
 8005a56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b28      	cmp	r3, #40	@ 0x28
 8005a5c:	d12e      	bne.n	8005abc <_strtod_l+0x37c>
 8005a5e:	4996      	ldr	r1, [pc, #600]	@ (8005cb8 <_strtod_l+0x578>)
 8005a60:	aa1c      	add	r2, sp, #112	@ 0x70
 8005a62:	a819      	add	r0, sp, #100	@ 0x64
 8005a64:	f002 fbbe 	bl	80081e4 <__hexnan>
 8005a68:	2805      	cmp	r0, #5
 8005a6a:	d127      	bne.n	8005abc <_strtod_l+0x37c>
 8005a6c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005a6e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005a72:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005a76:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005a7a:	e69a      	b.n	80057b2 <_strtod_l+0x72>
 8005a7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005a7e:	fb08 2101 	mla	r1, r8, r1, r2
 8005a82:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005a86:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a88:	e7b5      	b.n	80059f6 <_strtod_l+0x2b6>
 8005a8a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005a8c:	e7da      	b.n	8005a44 <_strtod_l+0x304>
 8005a8e:	498b      	ldr	r1, [pc, #556]	@ (8005cbc <_strtod_l+0x57c>)
 8005a90:	a819      	add	r0, sp, #100	@ 0x64
 8005a92:	f002 fb93 	bl	80081bc <__match>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f43f aea4 	beq.w	80057e4 <_strtod_l+0xa4>
 8005a9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a9e:	4988      	ldr	r1, [pc, #544]	@ (8005cc0 <_strtod_l+0x580>)
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	a819      	add	r0, sp, #100	@ 0x64
 8005aa4:	9319      	str	r3, [sp, #100]	@ 0x64
 8005aa6:	f002 fb89 	bl	80081bc <__match>
 8005aaa:	b910      	cbnz	r0, 8005ab2 <_strtod_l+0x372>
 8005aac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aae:	3301      	adds	r3, #1
 8005ab0:	9319      	str	r3, [sp, #100]	@ 0x64
 8005ab2:	f04f 0a00 	mov.w	sl, #0
 8005ab6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005cc4 <_strtod_l+0x584>
 8005aba:	e67a      	b.n	80057b2 <_strtod_l+0x72>
 8005abc:	4882      	ldr	r0, [pc, #520]	@ (8005cc8 <_strtod_l+0x588>)
 8005abe:	f001 fa53 	bl	8006f68 <nan>
 8005ac2:	4682      	mov	sl, r0
 8005ac4:	468b      	mov	fp, r1
 8005ac6:	e674      	b.n	80057b2 <_strtod_l+0x72>
 8005ac8:	eba8 0309 	sub.w	r3, r8, r9
 8005acc:	2f00      	cmp	r7, #0
 8005ace:	bf08      	it	eq
 8005ad0:	462f      	moveq	r7, r5
 8005ad2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005ad4:	2d10      	cmp	r5, #16
 8005ad6:	462c      	mov	r4, r5
 8005ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ada:	bfa8      	it	ge
 8005adc:	2410      	movge	r4, #16
 8005ade:	f7fa fc81 	bl	80003e4 <__aeabi_ui2d>
 8005ae2:	2d09      	cmp	r5, #9
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	468b      	mov	fp, r1
 8005ae8:	dc11      	bgt.n	8005b0e <_strtod_l+0x3ce>
 8005aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f43f ae60 	beq.w	80057b2 <_strtod_l+0x72>
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	dd76      	ble.n	8005be4 <_strtod_l+0x4a4>
 8005af6:	2b16      	cmp	r3, #22
 8005af8:	dc5d      	bgt.n	8005bb6 <_strtod_l+0x476>
 8005afa:	4974      	ldr	r1, [pc, #464]	@ (8005ccc <_strtod_l+0x58c>)
 8005afc:	4652      	mov	r2, sl
 8005afe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b02:	465b      	mov	r3, fp
 8005b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b08:	f7fa fce6 	bl	80004d8 <__aeabi_dmul>
 8005b0c:	e7d9      	b.n	8005ac2 <_strtod_l+0x382>
 8005b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8005ccc <_strtod_l+0x58c>)
 8005b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005b18:	f7fa fcde 	bl	80004d8 <__aeabi_dmul>
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	9808      	ldr	r0, [sp, #32]
 8005b20:	468b      	mov	fp, r1
 8005b22:	f7fa fc5f 	bl	80003e4 <__aeabi_ui2d>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	f7fa fb1d 	bl	800016c <__adddf3>
 8005b32:	2d0f      	cmp	r5, #15
 8005b34:	4682      	mov	sl, r0
 8005b36:	468b      	mov	fp, r1
 8005b38:	ddd7      	ble.n	8005aea <_strtod_l+0x3aa>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	1b2c      	subs	r4, r5, r4
 8005b3e:	441c      	add	r4, r3
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	f340 8096 	ble.w	8005c72 <_strtod_l+0x532>
 8005b46:	f014 030f 	ands.w	r3, r4, #15
 8005b4a:	d00a      	beq.n	8005b62 <_strtod_l+0x422>
 8005b4c:	495f      	ldr	r1, [pc, #380]	@ (8005ccc <_strtod_l+0x58c>)
 8005b4e:	4652      	mov	r2, sl
 8005b50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b58:	465b      	mov	r3, fp
 8005b5a:	f7fa fcbd 	bl	80004d8 <__aeabi_dmul>
 8005b5e:	4682      	mov	sl, r0
 8005b60:	468b      	mov	fp, r1
 8005b62:	f034 040f 	bics.w	r4, r4, #15
 8005b66:	d073      	beq.n	8005c50 <_strtod_l+0x510>
 8005b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005b6c:	dd48      	ble.n	8005c00 <_strtod_l+0x4c0>
 8005b6e:	2400      	movs	r4, #0
 8005b70:	46a0      	mov	r8, r4
 8005b72:	46a1      	mov	r9, r4
 8005b74:	940a      	str	r4, [sp, #40]	@ 0x28
 8005b76:	2322      	movs	r3, #34	@ 0x22
 8005b78:	f04f 0a00 	mov.w	sl, #0
 8005b7c:	9a05      	ldr	r2, [sp, #20]
 8005b7e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005cc4 <_strtod_l+0x584>
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f ae13 	beq.w	80057b2 <_strtod_l+0x72>
 8005b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b8e:	9805      	ldr	r0, [sp, #20]
 8005b90:	f002 fccc 	bl	800852c <_Bfree>
 8005b94:	4649      	mov	r1, r9
 8005b96:	9805      	ldr	r0, [sp, #20]
 8005b98:	f002 fcc8 	bl	800852c <_Bfree>
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	9805      	ldr	r0, [sp, #20]
 8005ba0:	f002 fcc4 	bl	800852c <_Bfree>
 8005ba4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ba6:	9805      	ldr	r0, [sp, #20]
 8005ba8:	f002 fcc0 	bl	800852c <_Bfree>
 8005bac:	4621      	mov	r1, r4
 8005bae:	9805      	ldr	r0, [sp, #20]
 8005bb0:	f002 fcbc 	bl	800852c <_Bfree>
 8005bb4:	e5fd      	b.n	80057b2 <_strtod_l+0x72>
 8005bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	dbbc      	blt.n	8005b3a <_strtod_l+0x3fa>
 8005bc0:	4c42      	ldr	r4, [pc, #264]	@ (8005ccc <_strtod_l+0x58c>)
 8005bc2:	f1c5 050f 	rsb	r5, r5, #15
 8005bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005bca:	4652      	mov	r2, sl
 8005bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bd0:	465b      	mov	r3, fp
 8005bd2:	f7fa fc81 	bl	80004d8 <__aeabi_dmul>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	1b5d      	subs	r5, r3, r5
 8005bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005be2:	e791      	b.n	8005b08 <_strtod_l+0x3c8>
 8005be4:	3316      	adds	r3, #22
 8005be6:	dba8      	blt.n	8005b3a <_strtod_l+0x3fa>
 8005be8:	4b38      	ldr	r3, [pc, #224]	@ (8005ccc <_strtod_l+0x58c>)
 8005bea:	eba9 0808 	sub.w	r8, r9, r8
 8005bee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	f7fa fd97 	bl	800072c <__aeabi_ddiv>
 8005bfe:	e760      	b.n	8005ac2 <_strtod_l+0x382>
 8005c00:	4b33      	ldr	r3, [pc, #204]	@ (8005cd0 <_strtod_l+0x590>)
 8005c02:	4650      	mov	r0, sl
 8005c04:	9308      	str	r3, [sp, #32]
 8005c06:	2300      	movs	r3, #0
 8005c08:	4659      	mov	r1, fp
 8005c0a:	461e      	mov	r6, r3
 8005c0c:	1124      	asrs	r4, r4, #4
 8005c0e:	2c01      	cmp	r4, #1
 8005c10:	dc21      	bgt.n	8005c56 <_strtod_l+0x516>
 8005c12:	b10b      	cbz	r3, 8005c18 <_strtod_l+0x4d8>
 8005c14:	4682      	mov	sl, r0
 8005c16:	468b      	mov	fp, r1
 8005c18:	492d      	ldr	r1, [pc, #180]	@ (8005cd0 <_strtod_l+0x590>)
 8005c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005c22:	4652      	mov	r2, sl
 8005c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c28:	465b      	mov	r3, fp
 8005c2a:	f7fa fc55 	bl	80004d8 <__aeabi_dmul>
 8005c2e:	4b25      	ldr	r3, [pc, #148]	@ (8005cc4 <_strtod_l+0x584>)
 8005c30:	460a      	mov	r2, r1
 8005c32:	400b      	ands	r3, r1
 8005c34:	4927      	ldr	r1, [pc, #156]	@ (8005cd4 <_strtod_l+0x594>)
 8005c36:	4682      	mov	sl, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	d898      	bhi.n	8005b6e <_strtod_l+0x42e>
 8005c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf86      	itte	hi
 8005c44:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c48:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005cd8 <_strtod_l+0x598>
 8005c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005c50:	2300      	movs	r3, #0
 8005c52:	9308      	str	r3, [sp, #32]
 8005c54:	e07a      	b.n	8005d4c <_strtod_l+0x60c>
 8005c56:	07e2      	lsls	r2, r4, #31
 8005c58:	d505      	bpl.n	8005c66 <_strtod_l+0x526>
 8005c5a:	9b08      	ldr	r3, [sp, #32]
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fc3a 	bl	80004d8 <__aeabi_dmul>
 8005c64:	2301      	movs	r3, #1
 8005c66:	9a08      	ldr	r2, [sp, #32]
 8005c68:	3601      	adds	r6, #1
 8005c6a:	3208      	adds	r2, #8
 8005c6c:	1064      	asrs	r4, r4, #1
 8005c6e:	9208      	str	r2, [sp, #32]
 8005c70:	e7cd      	b.n	8005c0e <_strtod_l+0x4ce>
 8005c72:	d0ed      	beq.n	8005c50 <_strtod_l+0x510>
 8005c74:	4264      	negs	r4, r4
 8005c76:	f014 020f 	ands.w	r2, r4, #15
 8005c7a:	d00a      	beq.n	8005c92 <_strtod_l+0x552>
 8005c7c:	4b13      	ldr	r3, [pc, #76]	@ (8005ccc <_strtod_l+0x58c>)
 8005c7e:	4650      	mov	r0, sl
 8005c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c84:	4659      	mov	r1, fp
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fd4f 	bl	800072c <__aeabi_ddiv>
 8005c8e:	4682      	mov	sl, r0
 8005c90:	468b      	mov	fp, r1
 8005c92:	1124      	asrs	r4, r4, #4
 8005c94:	d0dc      	beq.n	8005c50 <_strtod_l+0x510>
 8005c96:	2c1f      	cmp	r4, #31
 8005c98:	dd20      	ble.n	8005cdc <_strtod_l+0x59c>
 8005c9a:	2400      	movs	r4, #0
 8005c9c:	46a0      	mov	r8, r4
 8005c9e:	46a1      	mov	r9, r4
 8005ca0:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ca2:	2322      	movs	r3, #34	@ 0x22
 8005ca4:	9a05      	ldr	r2, [sp, #20]
 8005ca6:	f04f 0a00 	mov.w	sl, #0
 8005caa:	f04f 0b00 	mov.w	fp, #0
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	e768      	b.n	8005b84 <_strtod_l+0x444>
 8005cb2:	bf00      	nop
 8005cb4:	08009ad5 	.word	0x08009ad5
 8005cb8:	08009a78 	.word	0x08009a78
 8005cbc:	08009acd 	.word	0x08009acd
 8005cc0:	08009b07 	.word	0x08009b07
 8005cc4:	7ff00000 	.word	0x7ff00000
 8005cc8:	08009e95 	.word	0x08009e95
 8005ccc:	08009c80 	.word	0x08009c80
 8005cd0:	08009c58 	.word	0x08009c58
 8005cd4:	7ca00000 	.word	0x7ca00000
 8005cd8:	7fefffff 	.word	0x7fefffff
 8005cdc:	f014 0310 	ands.w	r3, r4, #16
 8005ce0:	bf18      	it	ne
 8005ce2:	236a      	movne	r3, #106	@ 0x6a
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	9308      	str	r3, [sp, #32]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	2300      	movs	r3, #0
 8005cec:	4ea9      	ldr	r6, [pc, #676]	@ (8005f94 <_strtod_l+0x854>)
 8005cee:	07e2      	lsls	r2, r4, #31
 8005cf0:	d504      	bpl.n	8005cfc <_strtod_l+0x5bc>
 8005cf2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cf6:	f7fa fbef 	bl	80004d8 <__aeabi_dmul>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	1064      	asrs	r4, r4, #1
 8005cfe:	f106 0608 	add.w	r6, r6, #8
 8005d02:	d1f4      	bne.n	8005cee <_strtod_l+0x5ae>
 8005d04:	b10b      	cbz	r3, 8005d0a <_strtod_l+0x5ca>
 8005d06:	4682      	mov	sl, r0
 8005d08:	468b      	mov	fp, r1
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	b1b3      	cbz	r3, 8005d3c <_strtod_l+0x5fc>
 8005d0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	4659      	mov	r1, fp
 8005d1a:	dd0f      	ble.n	8005d3c <_strtod_l+0x5fc>
 8005d1c:	2b1f      	cmp	r3, #31
 8005d1e:	dd57      	ble.n	8005dd0 <_strtod_l+0x690>
 8005d20:	2b34      	cmp	r3, #52	@ 0x34
 8005d22:	bfd8      	it	le
 8005d24:	f04f 33ff 	movle.w	r3, #4294967295
 8005d28:	f04f 0a00 	mov.w	sl, #0
 8005d2c:	bfcf      	iteee	gt
 8005d2e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005d32:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005d36:	4093      	lslle	r3, r2
 8005d38:	ea03 0b01 	andle.w	fp, r3, r1
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	4650      	mov	r0, sl
 8005d42:	4659      	mov	r1, fp
 8005d44:	f7fa fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d1a6      	bne.n	8005c9a <_strtod_l+0x55a>
 8005d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d4e:	463a      	mov	r2, r7
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d54:	462b      	mov	r3, r5
 8005d56:	9805      	ldr	r0, [sp, #20]
 8005d58:	f002 fc50 	bl	80085fc <__s2b>
 8005d5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f af05 	beq.w	8005b6e <_strtod_l+0x42e>
 8005d64:	2400      	movs	r4, #0
 8005d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d68:	eba9 0308 	sub.w	r3, r9, r8
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	bfa8      	it	ge
 8005d70:	2300      	movge	r3, #0
 8005d72:	46a0      	mov	r8, r4
 8005d74:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d7e:	9805      	ldr	r0, [sp, #20]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	f002 fb93 	bl	80084ac <_Balloc>
 8005d86:	4681      	mov	r9, r0
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f43f aef4 	beq.w	8005b76 <_strtod_l+0x436>
 8005d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d90:	300c      	adds	r0, #12
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	f103 010c 	add.w	r1, r3, #12
 8005d98:	3202      	adds	r2, #2
 8005d9a:	0092      	lsls	r2, r2, #2
 8005d9c:	f001 f8d5 	bl	8006f4a <memcpy>
 8005da0:	ab1c      	add	r3, sp, #112	@ 0x70
 8005da2:	9301      	str	r3, [sp, #4]
 8005da4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4652      	mov	r2, sl
 8005daa:	465b      	mov	r3, fp
 8005dac:	9805      	ldr	r0, [sp, #20]
 8005dae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005db2:	f002 ff55 	bl	8008c60 <__d2b>
 8005db6:	901a      	str	r0, [sp, #104]	@ 0x68
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f43f aedc 	beq.w	8005b76 <_strtod_l+0x436>
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	9805      	ldr	r0, [sp, #20]
 8005dc2:	f002 fcb1 	bl	8008728 <__i2b>
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	b948      	cbnz	r0, 8005dde <_strtod_l+0x69e>
 8005dca:	f04f 0800 	mov.w	r8, #0
 8005dce:	e6d2      	b.n	8005b76 <_strtod_l+0x436>
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd8:	ea03 0a0a 	and.w	sl, r3, sl
 8005ddc:	e7ae      	b.n	8005d3c <_strtod_l+0x5fc>
 8005dde:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005de0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	bfab      	itete	ge
 8005de6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005de8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005dea:	18ef      	addge	r7, r5, r3
 8005dec:	1b5e      	sublt	r6, r3, r5
 8005dee:	9b08      	ldr	r3, [sp, #32]
 8005df0:	bfa8      	it	ge
 8005df2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005df4:	eba5 0503 	sub.w	r5, r5, r3
 8005df8:	4415      	add	r5, r2
 8005dfa:	4b67      	ldr	r3, [pc, #412]	@ (8005f98 <_strtod_l+0x858>)
 8005dfc:	f105 35ff 	add.w	r5, r5, #4294967295
 8005e00:	bfb8      	it	lt
 8005e02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e04:	429d      	cmp	r5, r3
 8005e06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005e0a:	da50      	bge.n	8005eae <_strtod_l+0x76e>
 8005e0c:	1b5b      	subs	r3, r3, r5
 8005e0e:	2b1f      	cmp	r3, #31
 8005e10:	f04f 0101 	mov.w	r1, #1
 8005e14:	eba2 0203 	sub.w	r2, r2, r3
 8005e18:	dc3d      	bgt.n	8005e96 <_strtod_l+0x756>
 8005e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e20:	2300      	movs	r3, #0
 8005e22:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e24:	18bd      	adds	r5, r7, r2
 8005e26:	9b08      	ldr	r3, [sp, #32]
 8005e28:	42af      	cmp	r7, r5
 8005e2a:	4416      	add	r6, r2
 8005e2c:	441e      	add	r6, r3
 8005e2e:	463b      	mov	r3, r7
 8005e30:	bfa8      	it	ge
 8005e32:	462b      	movge	r3, r5
 8005e34:	42b3      	cmp	r3, r6
 8005e36:	bfa8      	it	ge
 8005e38:	4633      	movge	r3, r6
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bfc2      	ittt	gt
 8005e3e:	1aed      	subgt	r5, r5, r3
 8005e40:	1af6      	subgt	r6, r6, r3
 8005e42:	1aff      	subgt	r7, r7, r3
 8005e44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	dd16      	ble.n	8005e78 <_strtod_l+0x738>
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	9805      	ldr	r0, [sp, #20]
 8005e50:	f002 fd28 	bl	80088a4 <__pow5mult>
 8005e54:	4680      	mov	r8, r0
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d0b7      	beq.n	8005dca <_strtod_l+0x68a>
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005e5e:	9805      	ldr	r0, [sp, #20]
 8005e60:	f002 fc78 	bl	8008754 <__multiply>
 8005e64:	900e      	str	r0, [sp, #56]	@ 0x38
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f43f ae85 	beq.w	8005b76 <_strtod_l+0x436>
 8005e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e6e:	9805      	ldr	r0, [sp, #20]
 8005e70:	f002 fb5c 	bl	800852c <_Bfree>
 8005e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e76:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e78:	2d00      	cmp	r5, #0
 8005e7a:	dc1d      	bgt.n	8005eb8 <_strtod_l+0x778>
 8005e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dd23      	ble.n	8005eca <_strtod_l+0x78a>
 8005e82:	4649      	mov	r1, r9
 8005e84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005e86:	9805      	ldr	r0, [sp, #20]
 8005e88:	f002 fd0c 	bl	80088a4 <__pow5mult>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	b9e0      	cbnz	r0, 8005eca <_strtod_l+0x78a>
 8005e90:	f04f 0900 	mov.w	r9, #0
 8005e94:	e66f      	b.n	8005b76 <_strtod_l+0x436>
 8005e96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005e9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005e9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ea2:	35e2      	adds	r5, #226	@ 0xe2
 8005ea4:	fa01 f305 	lsl.w	r3, r1, r5
 8005ea8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005eac:	e7ba      	b.n	8005e24 <_strtod_l+0x6e4>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005eb6:	e7b5      	b.n	8005e24 <_strtod_l+0x6e4>
 8005eb8:	462a      	mov	r2, r5
 8005eba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ebc:	9805      	ldr	r0, [sp, #20]
 8005ebe:	f002 fd4b 	bl	8008958 <__lshift>
 8005ec2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	d1d9      	bne.n	8005e7c <_strtod_l+0x73c>
 8005ec8:	e655      	b.n	8005b76 <_strtod_l+0x436>
 8005eca:	2e00      	cmp	r6, #0
 8005ecc:	dd07      	ble.n	8005ede <_strtod_l+0x79e>
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	9805      	ldr	r0, [sp, #20]
 8005ed4:	f002 fd40 	bl	8008958 <__lshift>
 8005ed8:	4681      	mov	r9, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0d8      	beq.n	8005e90 <_strtod_l+0x750>
 8005ede:	2f00      	cmp	r7, #0
 8005ee0:	dd08      	ble.n	8005ef4 <_strtod_l+0x7b4>
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	9805      	ldr	r0, [sp, #20]
 8005ee8:	f002 fd36 	bl	8008958 <__lshift>
 8005eec:	4680      	mov	r8, r0
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f ae41 	beq.w	8005b76 <_strtod_l+0x436>
 8005ef4:	464a      	mov	r2, r9
 8005ef6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ef8:	9805      	ldr	r0, [sp, #20]
 8005efa:	f002 fdb5 	bl	8008a68 <__mdiff>
 8005efe:	4604      	mov	r4, r0
 8005f00:	2800      	cmp	r0, #0
 8005f02:	f43f ae38 	beq.w	8005b76 <_strtod_l+0x436>
 8005f06:	68c3      	ldr	r3, [r0, #12]
 8005f08:	4641      	mov	r1, r8
 8005f0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60c3      	str	r3, [r0, #12]
 8005f10:	f002 fd8e 	bl	8008a30 <__mcmp>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	da45      	bge.n	8005fa4 <_strtod_l+0x864>
 8005f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f1a:	ea53 030a 	orrs.w	r3, r3, sl
 8005f1e:	d16b      	bne.n	8005ff8 <_strtod_l+0x8b8>
 8005f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d167      	bne.n	8005ff8 <_strtod_l+0x8b8>
 8005f28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f2c:	0d1b      	lsrs	r3, r3, #20
 8005f2e:	051b      	lsls	r3, r3, #20
 8005f30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f34:	d960      	bls.n	8005ff8 <_strtod_l+0x8b8>
 8005f36:	6963      	ldr	r3, [r4, #20]
 8005f38:	b913      	cbnz	r3, 8005f40 <_strtod_l+0x800>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	dd5b      	ble.n	8005ff8 <_strtod_l+0x8b8>
 8005f40:	4621      	mov	r1, r4
 8005f42:	2201      	movs	r2, #1
 8005f44:	9805      	ldr	r0, [sp, #20]
 8005f46:	f002 fd07 	bl	8008958 <__lshift>
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	f002 fd6f 	bl	8008a30 <__mcmp>
 8005f52:	2800      	cmp	r0, #0
 8005f54:	dd50      	ble.n	8005ff8 <_strtod_l+0x8b8>
 8005f56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f5a:	9a08      	ldr	r2, [sp, #32]
 8005f5c:	0d1b      	lsrs	r3, r3, #20
 8005f5e:	051b      	lsls	r3, r3, #20
 8005f60:	2a00      	cmp	r2, #0
 8005f62:	d06a      	beq.n	800603a <_strtod_l+0x8fa>
 8005f64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f68:	d867      	bhi.n	800603a <_strtod_l+0x8fa>
 8005f6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005f6e:	f67f ae98 	bls.w	8005ca2 <_strtod_l+0x562>
 8005f72:	4650      	mov	r0, sl
 8005f74:	4659      	mov	r1, fp
 8005f76:	4b09      	ldr	r3, [pc, #36]	@ (8005f9c <_strtod_l+0x85c>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f7fa faad 	bl	80004d8 <__aeabi_dmul>
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <_strtod_l+0x860>)
 8005f80:	4682      	mov	sl, r0
 8005f82:	400b      	ands	r3, r1
 8005f84:	468b      	mov	fp, r1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f ae00 	bne.w	8005b8c <_strtod_l+0x44c>
 8005f8c:	2322      	movs	r3, #34	@ 0x22
 8005f8e:	9a05      	ldr	r2, [sp, #20]
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	e5fb      	b.n	8005b8c <_strtod_l+0x44c>
 8005f94:	08009aa0 	.word	0x08009aa0
 8005f98:	fffffc02 	.word	0xfffffc02
 8005f9c:	39500000 	.word	0x39500000
 8005fa0:	7ff00000 	.word	0x7ff00000
 8005fa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005fa8:	d165      	bne.n	8006076 <_strtod_l+0x936>
 8005faa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005fac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fb0:	b35a      	cbz	r2, 800600a <_strtod_l+0x8ca>
 8005fb2:	4a99      	ldr	r2, [pc, #612]	@ (8006218 <_strtod_l+0xad8>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d12b      	bne.n	8006010 <_strtod_l+0x8d0>
 8005fb8:	9b08      	ldr	r3, [sp, #32]
 8005fba:	4651      	mov	r1, sl
 8005fbc:	b303      	cbz	r3, 8006000 <_strtod_l+0x8c0>
 8005fbe:	465a      	mov	r2, fp
 8005fc0:	4b96      	ldr	r3, [pc, #600]	@ (800621c <_strtod_l+0xadc>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fcc:	d81b      	bhi.n	8006006 <_strtod_l+0x8c6>
 8005fce:	0d1b      	lsrs	r3, r3, #20
 8005fd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	4299      	cmp	r1, r3
 8005fda:	d119      	bne.n	8006010 <_strtod_l+0x8d0>
 8005fdc:	4b90      	ldr	r3, [pc, #576]	@ (8006220 <_strtod_l+0xae0>)
 8005fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d102      	bne.n	8005fea <_strtod_l+0x8aa>
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	f43f adc6 	beq.w	8005b76 <_strtod_l+0x436>
 8005fea:	f04f 0a00 	mov.w	sl, #0
 8005fee:	4b8b      	ldr	r3, [pc, #556]	@ (800621c <_strtod_l+0xadc>)
 8005ff0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005ff8:	9b08      	ldr	r3, [sp, #32]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1b9      	bne.n	8005f72 <_strtod_l+0x832>
 8005ffe:	e5c5      	b.n	8005b8c <_strtod_l+0x44c>
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
 8006004:	e7e8      	b.n	8005fd8 <_strtod_l+0x898>
 8006006:	4613      	mov	r3, r2
 8006008:	e7e6      	b.n	8005fd8 <_strtod_l+0x898>
 800600a:	ea53 030a 	orrs.w	r3, r3, sl
 800600e:	d0a2      	beq.n	8005f56 <_strtod_l+0x816>
 8006010:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006012:	b1db      	cbz	r3, 800604c <_strtod_l+0x90c>
 8006014:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006016:	4213      	tst	r3, r2
 8006018:	d0ee      	beq.n	8005ff8 <_strtod_l+0x8b8>
 800601a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800601c:	4650      	mov	r0, sl
 800601e:	4659      	mov	r1, fp
 8006020:	9a08      	ldr	r2, [sp, #32]
 8006022:	b1bb      	cbz	r3, 8006054 <_strtod_l+0x914>
 8006024:	f7ff fb69 	bl	80056fa <sulp>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006030:	f7fa f89c 	bl	800016c <__adddf3>
 8006034:	4682      	mov	sl, r0
 8006036:	468b      	mov	fp, r1
 8006038:	e7de      	b.n	8005ff8 <_strtod_l+0x8b8>
 800603a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800603e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006042:	f04f 3aff 	mov.w	sl, #4294967295
 8006046:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800604a:	e7d5      	b.n	8005ff8 <_strtod_l+0x8b8>
 800604c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800604e:	ea13 0f0a 	tst.w	r3, sl
 8006052:	e7e1      	b.n	8006018 <_strtod_l+0x8d8>
 8006054:	f7ff fb51 	bl	80056fa <sulp>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006060:	f7fa f882 	bl	8000168 <__aeabi_dsub>
 8006064:	2200      	movs	r2, #0
 8006066:	2300      	movs	r3, #0
 8006068:	4682      	mov	sl, r0
 800606a:	468b      	mov	fp, r1
 800606c:	f7fa fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006070:	2800      	cmp	r0, #0
 8006072:	d0c1      	beq.n	8005ff8 <_strtod_l+0x8b8>
 8006074:	e615      	b.n	8005ca2 <_strtod_l+0x562>
 8006076:	4641      	mov	r1, r8
 8006078:	4620      	mov	r0, r4
 800607a:	f002 fe49 	bl	8008d10 <__ratio>
 800607e:	2200      	movs	r2, #0
 8006080:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006084:	4606      	mov	r6, r0
 8006086:	460f      	mov	r7, r1
 8006088:	f7fa fca2 	bl	80009d0 <__aeabi_dcmple>
 800608c:	2800      	cmp	r0, #0
 800608e:	d06d      	beq.n	800616c <_strtod_l+0xa2c>
 8006090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d178      	bne.n	8006188 <_strtod_l+0xa48>
 8006096:	f1ba 0f00 	cmp.w	sl, #0
 800609a:	d156      	bne.n	800614a <_strtod_l+0xa0a>
 800609c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800609e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d158      	bne.n	8006158 <_strtod_l+0xa18>
 80060a6:	2200      	movs	r2, #0
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006224 <_strtod_l+0xae4>)
 80060ae:	f7fa fc85 	bl	80009bc <__aeabi_dcmplt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d157      	bne.n	8006166 <_strtod_l+0xa26>
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	2200      	movs	r2, #0
 80060bc:	4b5a      	ldr	r3, [pc, #360]	@ (8006228 <_strtod_l+0xae8>)
 80060be:	f7fa fa0b 	bl	80004d8 <__aeabi_dmul>
 80060c2:	4606      	mov	r6, r0
 80060c4:	460f      	mov	r7, r1
 80060c6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80060ca:	9606      	str	r6, [sp, #24]
 80060cc:	9307      	str	r3, [sp, #28]
 80060ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060d2:	4d52      	ldr	r5, [pc, #328]	@ (800621c <_strtod_l+0xadc>)
 80060d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80060d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060da:	401d      	ands	r5, r3
 80060dc:	4b53      	ldr	r3, [pc, #332]	@ (800622c <_strtod_l+0xaec>)
 80060de:	429d      	cmp	r5, r3
 80060e0:	f040 80aa 	bne.w	8006238 <_strtod_l+0xaf8>
 80060e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e6:	4650      	mov	r0, sl
 80060e8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80060ec:	4659      	mov	r1, fp
 80060ee:	f002 fd4f 	bl	8008b90 <__ulp>
 80060f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060f6:	f7fa f9ef 	bl	80004d8 <__aeabi_dmul>
 80060fa:	4652      	mov	r2, sl
 80060fc:	465b      	mov	r3, fp
 80060fe:	f7fa f835 	bl	800016c <__adddf3>
 8006102:	460b      	mov	r3, r1
 8006104:	4945      	ldr	r1, [pc, #276]	@ (800621c <_strtod_l+0xadc>)
 8006106:	4a4a      	ldr	r2, [pc, #296]	@ (8006230 <_strtod_l+0xaf0>)
 8006108:	4019      	ands	r1, r3
 800610a:	4291      	cmp	r1, r2
 800610c:	4682      	mov	sl, r0
 800610e:	d942      	bls.n	8006196 <_strtod_l+0xa56>
 8006110:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006112:	4b43      	ldr	r3, [pc, #268]	@ (8006220 <_strtod_l+0xae0>)
 8006114:	429a      	cmp	r2, r3
 8006116:	d103      	bne.n	8006120 <_strtod_l+0x9e0>
 8006118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800611a:	3301      	adds	r3, #1
 800611c:	f43f ad2b 	beq.w	8005b76 <_strtod_l+0x436>
 8006120:	f04f 3aff 	mov.w	sl, #4294967295
 8006124:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006220 <_strtod_l+0xae0>
 8006128:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800612a:	9805      	ldr	r0, [sp, #20]
 800612c:	f002 f9fe 	bl	800852c <_Bfree>
 8006130:	4649      	mov	r1, r9
 8006132:	9805      	ldr	r0, [sp, #20]
 8006134:	f002 f9fa 	bl	800852c <_Bfree>
 8006138:	4641      	mov	r1, r8
 800613a:	9805      	ldr	r0, [sp, #20]
 800613c:	f002 f9f6 	bl	800852c <_Bfree>
 8006140:	4621      	mov	r1, r4
 8006142:	9805      	ldr	r0, [sp, #20]
 8006144:	f002 f9f2 	bl	800852c <_Bfree>
 8006148:	e618      	b.n	8005d7c <_strtod_l+0x63c>
 800614a:	f1ba 0f01 	cmp.w	sl, #1
 800614e:	d103      	bne.n	8006158 <_strtod_l+0xa18>
 8006150:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006152:	2b00      	cmp	r3, #0
 8006154:	f43f ada5 	beq.w	8005ca2 <_strtod_l+0x562>
 8006158:	2200      	movs	r2, #0
 800615a:	4b36      	ldr	r3, [pc, #216]	@ (8006234 <_strtod_l+0xaf4>)
 800615c:	2600      	movs	r6, #0
 800615e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006162:	4f30      	ldr	r7, [pc, #192]	@ (8006224 <_strtod_l+0xae4>)
 8006164:	e7b3      	b.n	80060ce <_strtod_l+0x98e>
 8006166:	2600      	movs	r6, #0
 8006168:	4f2f      	ldr	r7, [pc, #188]	@ (8006228 <_strtod_l+0xae8>)
 800616a:	e7ac      	b.n	80060c6 <_strtod_l+0x986>
 800616c:	4630      	mov	r0, r6
 800616e:	4639      	mov	r1, r7
 8006170:	4b2d      	ldr	r3, [pc, #180]	@ (8006228 <_strtod_l+0xae8>)
 8006172:	2200      	movs	r2, #0
 8006174:	f7fa f9b0 	bl	80004d8 <__aeabi_dmul>
 8006178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800617a:	4606      	mov	r6, r0
 800617c:	460f      	mov	r7, r1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0a1      	beq.n	80060c6 <_strtod_l+0x986>
 8006182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006186:	e7a2      	b.n	80060ce <_strtod_l+0x98e>
 8006188:	2200      	movs	r2, #0
 800618a:	4b26      	ldr	r3, [pc, #152]	@ (8006224 <_strtod_l+0xae4>)
 800618c:	4616      	mov	r6, r2
 800618e:	461f      	mov	r7, r3
 8006190:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006194:	e79b      	b.n	80060ce <_strtod_l+0x98e>
 8006196:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800619a:	9b08      	ldr	r3, [sp, #32]
 800619c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1c1      	bne.n	8006128 <_strtod_l+0x9e8>
 80061a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061a8:	0d1b      	lsrs	r3, r3, #20
 80061aa:	051b      	lsls	r3, r3, #20
 80061ac:	429d      	cmp	r5, r3
 80061ae:	d1bb      	bne.n	8006128 <_strtod_l+0x9e8>
 80061b0:	4630      	mov	r0, r6
 80061b2:	4639      	mov	r1, r7
 80061b4:	f7fa ffac 	bl	8001110 <__aeabi_d2lz>
 80061b8:	f7fa f960 	bl	800047c <__aeabi_l2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4630      	mov	r0, r6
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7f9 ffd0 	bl	8000168 <__aeabi_dsub>
 80061c8:	460b      	mov	r3, r1
 80061ca:	4602      	mov	r2, r0
 80061cc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80061d0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061d6:	ea46 060a 	orr.w	r6, r6, sl
 80061da:	431e      	orrs	r6, r3
 80061dc:	d069      	beq.n	80062b2 <_strtod_l+0xb72>
 80061de:	a30a      	add	r3, pc, #40	@ (adr r3, 8006208 <_strtod_l+0xac8>)
 80061e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e4:	f7fa fbea 	bl	80009bc <__aeabi_dcmplt>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	f47f accf 	bne.w	8005b8c <_strtod_l+0x44c>
 80061ee:	a308      	add	r3, pc, #32	@ (adr r3, 8006210 <_strtod_l+0xad0>)
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061f8:	f7fa fbfe 	bl	80009f8 <__aeabi_dcmpgt>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d093      	beq.n	8006128 <_strtod_l+0x9e8>
 8006200:	e4c4      	b.n	8005b8c <_strtod_l+0x44c>
 8006202:	bf00      	nop
 8006204:	f3af 8000 	nop.w
 8006208:	94a03595 	.word	0x94a03595
 800620c:	3fdfffff 	.word	0x3fdfffff
 8006210:	35afe535 	.word	0x35afe535
 8006214:	3fe00000 	.word	0x3fe00000
 8006218:	000fffff 	.word	0x000fffff
 800621c:	7ff00000 	.word	0x7ff00000
 8006220:	7fefffff 	.word	0x7fefffff
 8006224:	3ff00000 	.word	0x3ff00000
 8006228:	3fe00000 	.word	0x3fe00000
 800622c:	7fe00000 	.word	0x7fe00000
 8006230:	7c9fffff 	.word	0x7c9fffff
 8006234:	bff00000 	.word	0xbff00000
 8006238:	9b08      	ldr	r3, [sp, #32]
 800623a:	b323      	cbz	r3, 8006286 <_strtod_l+0xb46>
 800623c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006240:	d821      	bhi.n	8006286 <_strtod_l+0xb46>
 8006242:	a327      	add	r3, pc, #156	@ (adr r3, 80062e0 <_strtod_l+0xba0>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa fbc0 	bl	80009d0 <__aeabi_dcmple>
 8006250:	b1a0      	cbz	r0, 800627c <_strtod_l+0xb3c>
 8006252:	4639      	mov	r1, r7
 8006254:	4630      	mov	r0, r6
 8006256:	f7fa fc17 	bl	8000a88 <__aeabi_d2uiz>
 800625a:	2801      	cmp	r0, #1
 800625c:	bf38      	it	cc
 800625e:	2001      	movcc	r0, #1
 8006260:	f7fa f8c0 	bl	80003e4 <__aeabi_ui2d>
 8006264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006266:	4606      	mov	r6, r0
 8006268:	460f      	mov	r7, r1
 800626a:	b9fb      	cbnz	r3, 80062ac <_strtod_l+0xb6c>
 800626c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006270:	9014      	str	r0, [sp, #80]	@ 0x50
 8006272:	9315      	str	r3, [sp, #84]	@ 0x54
 8006274:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006278:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800627c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800627e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006282:	1b5b      	subs	r3, r3, r5
 8006284:	9311      	str	r3, [sp, #68]	@ 0x44
 8006286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800628a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800628e:	f002 fc7f 	bl	8008b90 <__ulp>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4650      	mov	r0, sl
 8006298:	4659      	mov	r1, fp
 800629a:	f7fa f91d 	bl	80004d8 <__aeabi_dmul>
 800629e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062a2:	f7f9 ff63 	bl	800016c <__adddf3>
 80062a6:	4682      	mov	sl, r0
 80062a8:	468b      	mov	fp, r1
 80062aa:	e776      	b.n	800619a <_strtod_l+0xa5a>
 80062ac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80062b0:	e7e0      	b.n	8006274 <_strtod_l+0xb34>
 80062b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80062e8 <_strtod_l+0xba8>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f7fa fb80 	bl	80009bc <__aeabi_dcmplt>
 80062bc:	e79e      	b.n	80061fc <_strtod_l+0xabc>
 80062be:	2300      	movs	r3, #0
 80062c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062c4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	f7ff ba77 	b.w	80057ba <_strtod_l+0x7a>
 80062cc:	2a65      	cmp	r2, #101	@ 0x65
 80062ce:	f43f ab6e 	beq.w	80059ae <_strtod_l+0x26e>
 80062d2:	2a45      	cmp	r2, #69	@ 0x45
 80062d4:	f43f ab6b 	beq.w	80059ae <_strtod_l+0x26e>
 80062d8:	2301      	movs	r3, #1
 80062da:	f7ff bba6 	b.w	8005a2a <_strtod_l+0x2ea>
 80062de:	bf00      	nop
 80062e0:	ffc00000 	.word	0xffc00000
 80062e4:	41dfffff 	.word	0x41dfffff
 80062e8:	94a03595 	.word	0x94a03595
 80062ec:	3fcfffff 	.word	0x3fcfffff

080062f0 <strtod>:
 80062f0:	460a      	mov	r2, r1
 80062f2:	4601      	mov	r1, r0
 80062f4:	4802      	ldr	r0, [pc, #8]	@ (8006300 <strtod+0x10>)
 80062f6:	4b03      	ldr	r3, [pc, #12]	@ (8006304 <strtod+0x14>)
 80062f8:	6800      	ldr	r0, [r0, #0]
 80062fa:	f7ff ba21 	b.w	8005740 <_strtod_l>
 80062fe:	bf00      	nop
 8006300:	2000018c 	.word	0x2000018c
 8006304:	20000020 	.word	0x20000020

08006308 <__cvt>:
 8006308:	2b00      	cmp	r3, #0
 800630a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630e:	461d      	mov	r5, r3
 8006310:	bfbb      	ittet	lt
 8006312:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006316:	461d      	movlt	r5, r3
 8006318:	2300      	movge	r3, #0
 800631a:	232d      	movlt	r3, #45	@ 0x2d
 800631c:	b088      	sub	sp, #32
 800631e:	4614      	mov	r4, r2
 8006320:	bfb8      	it	lt
 8006322:	4614      	movlt	r4, r2
 8006324:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006326:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006328:	7013      	strb	r3, [r2, #0]
 800632a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800632c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006330:	f023 0820 	bic.w	r8, r3, #32
 8006334:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006338:	d005      	beq.n	8006346 <__cvt+0x3e>
 800633a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800633e:	d100      	bne.n	8006342 <__cvt+0x3a>
 8006340:	3601      	adds	r6, #1
 8006342:	2302      	movs	r3, #2
 8006344:	e000      	b.n	8006348 <__cvt+0x40>
 8006346:	2303      	movs	r3, #3
 8006348:	aa07      	add	r2, sp, #28
 800634a:	9204      	str	r2, [sp, #16]
 800634c:	aa06      	add	r2, sp, #24
 800634e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006352:	e9cd 3600 	strd	r3, r6, [sp]
 8006356:	4622      	mov	r2, r4
 8006358:	462b      	mov	r3, r5
 800635a:	f000 fe95 	bl	8007088 <_dtoa_r>
 800635e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006362:	4607      	mov	r7, r0
 8006364:	d119      	bne.n	800639a <__cvt+0x92>
 8006366:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006368:	07db      	lsls	r3, r3, #31
 800636a:	d50e      	bpl.n	800638a <__cvt+0x82>
 800636c:	eb00 0906 	add.w	r9, r0, r6
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4620      	mov	r0, r4
 8006376:	4629      	mov	r1, r5
 8006378:	f7fa fb16 	bl	80009a8 <__aeabi_dcmpeq>
 800637c:	b108      	cbz	r0, 8006382 <__cvt+0x7a>
 800637e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006382:	2230      	movs	r2, #48	@ 0x30
 8006384:	9b07      	ldr	r3, [sp, #28]
 8006386:	454b      	cmp	r3, r9
 8006388:	d31e      	bcc.n	80063c8 <__cvt+0xc0>
 800638a:	4638      	mov	r0, r7
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006390:	1bdb      	subs	r3, r3, r7
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	b008      	add	sp, #32
 8006396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800639e:	eb00 0906 	add.w	r9, r0, r6
 80063a2:	d1e5      	bne.n	8006370 <__cvt+0x68>
 80063a4:	7803      	ldrb	r3, [r0, #0]
 80063a6:	2b30      	cmp	r3, #48	@ 0x30
 80063a8:	d10a      	bne.n	80063c0 <__cvt+0xb8>
 80063aa:	2200      	movs	r2, #0
 80063ac:	2300      	movs	r3, #0
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fa faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80063b6:	b918      	cbnz	r0, 80063c0 <__cvt+0xb8>
 80063b8:	f1c6 0601 	rsb	r6, r6, #1
 80063bc:	f8ca 6000 	str.w	r6, [sl]
 80063c0:	f8da 3000 	ldr.w	r3, [sl]
 80063c4:	4499      	add	r9, r3
 80063c6:	e7d3      	b.n	8006370 <__cvt+0x68>
 80063c8:	1c59      	adds	r1, r3, #1
 80063ca:	9107      	str	r1, [sp, #28]
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e7d9      	b.n	8006384 <__cvt+0x7c>

080063d0 <__exponent>:
 80063d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063d2:	2900      	cmp	r1, #0
 80063d4:	bfb6      	itet	lt
 80063d6:	232d      	movlt	r3, #45	@ 0x2d
 80063d8:	232b      	movge	r3, #43	@ 0x2b
 80063da:	4249      	neglt	r1, r1
 80063dc:	2909      	cmp	r1, #9
 80063de:	7002      	strb	r2, [r0, #0]
 80063e0:	7043      	strb	r3, [r0, #1]
 80063e2:	dd29      	ble.n	8006438 <__exponent+0x68>
 80063e4:	f10d 0307 	add.w	r3, sp, #7
 80063e8:	461d      	mov	r5, r3
 80063ea:	270a      	movs	r7, #10
 80063ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80063f0:	461a      	mov	r2, r3
 80063f2:	fb07 1416 	mls	r4, r7, r6, r1
 80063f6:	3430      	adds	r4, #48	@ 0x30
 80063f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063fc:	460c      	mov	r4, r1
 80063fe:	2c63      	cmp	r4, #99	@ 0x63
 8006400:	4631      	mov	r1, r6
 8006402:	f103 33ff 	add.w	r3, r3, #4294967295
 8006406:	dcf1      	bgt.n	80063ec <__exponent+0x1c>
 8006408:	3130      	adds	r1, #48	@ 0x30
 800640a:	1e94      	subs	r4, r2, #2
 800640c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006410:	4623      	mov	r3, r4
 8006412:	1c41      	adds	r1, r0, #1
 8006414:	42ab      	cmp	r3, r5
 8006416:	d30a      	bcc.n	800642e <__exponent+0x5e>
 8006418:	f10d 0309 	add.w	r3, sp, #9
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	42ac      	cmp	r4, r5
 8006420:	bf88      	it	hi
 8006422:	2300      	movhi	r3, #0
 8006424:	3302      	adds	r3, #2
 8006426:	4403      	add	r3, r0
 8006428:	1a18      	subs	r0, r3, r0
 800642a:	b003      	add	sp, #12
 800642c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006432:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006436:	e7ed      	b.n	8006414 <__exponent+0x44>
 8006438:	2330      	movs	r3, #48	@ 0x30
 800643a:	3130      	adds	r1, #48	@ 0x30
 800643c:	7083      	strb	r3, [r0, #2]
 800643e:	70c1      	strb	r1, [r0, #3]
 8006440:	1d03      	adds	r3, r0, #4
 8006442:	e7f1      	b.n	8006428 <__exponent+0x58>

08006444 <_printf_float>:
 8006444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006448:	b091      	sub	sp, #68	@ 0x44
 800644a:	460c      	mov	r4, r1
 800644c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006450:	4616      	mov	r6, r2
 8006452:	461f      	mov	r7, r3
 8006454:	4605      	mov	r5, r0
 8006456:	f000 fcf3 	bl	8006e40 <_localeconv_r>
 800645a:	6803      	ldr	r3, [r0, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	9308      	str	r3, [sp, #32]
 8006460:	f7f9 fe76 	bl	8000150 <strlen>
 8006464:	2300      	movs	r3, #0
 8006466:	930e      	str	r3, [sp, #56]	@ 0x38
 8006468:	f8d8 3000 	ldr.w	r3, [r8]
 800646c:	9009      	str	r0, [sp, #36]	@ 0x24
 800646e:	3307      	adds	r3, #7
 8006470:	f023 0307 	bic.w	r3, r3, #7
 8006474:	f103 0208 	add.w	r2, r3, #8
 8006478:	f894 a018 	ldrb.w	sl, [r4, #24]
 800647c:	f8d4 b000 	ldr.w	fp, [r4]
 8006480:	f8c8 2000 	str.w	r2, [r8]
 8006484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006488:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800648c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800648e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800649a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800649e:	4b9c      	ldr	r3, [pc, #624]	@ (8006710 <_printf_float+0x2cc>)
 80064a0:	f7fa fab4 	bl	8000a0c <__aeabi_dcmpun>
 80064a4:	bb70      	cbnz	r0, 8006504 <_printf_float+0xc0>
 80064a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064aa:	f04f 32ff 	mov.w	r2, #4294967295
 80064ae:	4b98      	ldr	r3, [pc, #608]	@ (8006710 <_printf_float+0x2cc>)
 80064b0:	f7fa fa8e 	bl	80009d0 <__aeabi_dcmple>
 80064b4:	bb30      	cbnz	r0, 8006504 <_printf_float+0xc0>
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	f7fa fa7d 	bl	80009bc <__aeabi_dcmplt>
 80064c2:	b110      	cbz	r0, 80064ca <_printf_float+0x86>
 80064c4:	232d      	movs	r3, #45	@ 0x2d
 80064c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ca:	4a92      	ldr	r2, [pc, #584]	@ (8006714 <_printf_float+0x2d0>)
 80064cc:	4b92      	ldr	r3, [pc, #584]	@ (8006718 <_printf_float+0x2d4>)
 80064ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064d2:	bf94      	ite	ls
 80064d4:	4690      	movls	r8, r2
 80064d6:	4698      	movhi	r8, r3
 80064d8:	2303      	movs	r3, #3
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	f02b 0304 	bic.w	r3, fp, #4
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	4633      	mov	r3, r6
 80064e8:	4621      	mov	r1, r4
 80064ea:	4628      	mov	r0, r5
 80064ec:	9700      	str	r7, [sp, #0]
 80064ee:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064f0:	f000 f9d4 	bl	800689c <_printf_common>
 80064f4:	3001      	adds	r0, #1
 80064f6:	f040 8090 	bne.w	800661a <_printf_float+0x1d6>
 80064fa:	f04f 30ff 	mov.w	r0, #4294967295
 80064fe:	b011      	add	sp, #68	@ 0x44
 8006500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006504:	4642      	mov	r2, r8
 8006506:	464b      	mov	r3, r9
 8006508:	4640      	mov	r0, r8
 800650a:	4649      	mov	r1, r9
 800650c:	f7fa fa7e 	bl	8000a0c <__aeabi_dcmpun>
 8006510:	b148      	cbz	r0, 8006526 <_printf_float+0xe2>
 8006512:	464b      	mov	r3, r9
 8006514:	2b00      	cmp	r3, #0
 8006516:	bfb8      	it	lt
 8006518:	232d      	movlt	r3, #45	@ 0x2d
 800651a:	4a80      	ldr	r2, [pc, #512]	@ (800671c <_printf_float+0x2d8>)
 800651c:	bfb8      	it	lt
 800651e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006522:	4b7f      	ldr	r3, [pc, #508]	@ (8006720 <_printf_float+0x2dc>)
 8006524:	e7d3      	b.n	80064ce <_printf_float+0x8a>
 8006526:	6863      	ldr	r3, [r4, #4]
 8006528:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	d13f      	bne.n	80065b0 <_printf_float+0x16c>
 8006530:	2306      	movs	r3, #6
 8006532:	6063      	str	r3, [r4, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	9206      	str	r2, [sp, #24]
 800653e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006540:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006544:	aa0d      	add	r2, sp, #52	@ 0x34
 8006546:	9203      	str	r2, [sp, #12]
 8006548:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800654c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	4642      	mov	r2, r8
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4628      	mov	r0, r5
 8006558:	464b      	mov	r3, r9
 800655a:	910a      	str	r1, [sp, #40]	@ 0x28
 800655c:	f7ff fed4 	bl	8006308 <__cvt>
 8006560:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006562:	4680      	mov	r8, r0
 8006564:	2947      	cmp	r1, #71	@ 0x47
 8006566:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006568:	d128      	bne.n	80065bc <_printf_float+0x178>
 800656a:	1cc8      	adds	r0, r1, #3
 800656c:	db02      	blt.n	8006574 <_printf_float+0x130>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	4299      	cmp	r1, r3
 8006572:	dd40      	ble.n	80065f6 <_printf_float+0x1b2>
 8006574:	f1aa 0a02 	sub.w	sl, sl, #2
 8006578:	fa5f fa8a 	uxtb.w	sl, sl
 800657c:	4652      	mov	r2, sl
 800657e:	3901      	subs	r1, #1
 8006580:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006584:	910d      	str	r1, [sp, #52]	@ 0x34
 8006586:	f7ff ff23 	bl	80063d0 <__exponent>
 800658a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800658c:	4681      	mov	r9, r0
 800658e:	1813      	adds	r3, r2, r0
 8006590:	2a01      	cmp	r2, #1
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	dc02      	bgt.n	800659c <_printf_float+0x158>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	07d2      	lsls	r2, r2, #31
 800659a:	d501      	bpl.n	80065a0 <_printf_float+0x15c>
 800659c:	3301      	adds	r3, #1
 800659e:	6123      	str	r3, [r4, #16]
 80065a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d09e      	beq.n	80064e6 <_printf_float+0xa2>
 80065a8:	232d      	movs	r3, #45	@ 0x2d
 80065aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ae:	e79a      	b.n	80064e6 <_printf_float+0xa2>
 80065b0:	2947      	cmp	r1, #71	@ 0x47
 80065b2:	d1bf      	bne.n	8006534 <_printf_float+0xf0>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1bd      	bne.n	8006534 <_printf_float+0xf0>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7ba      	b.n	8006532 <_printf_float+0xee>
 80065bc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065c0:	d9dc      	bls.n	800657c <_printf_float+0x138>
 80065c2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065c6:	d118      	bne.n	80065fa <_printf_float+0x1b6>
 80065c8:	2900      	cmp	r1, #0
 80065ca:	6863      	ldr	r3, [r4, #4]
 80065cc:	dd0b      	ble.n	80065e6 <_printf_float+0x1a2>
 80065ce:	6121      	str	r1, [r4, #16]
 80065d0:	b913      	cbnz	r3, 80065d8 <_printf_float+0x194>
 80065d2:	6822      	ldr	r2, [r4, #0]
 80065d4:	07d0      	lsls	r0, r2, #31
 80065d6:	d502      	bpl.n	80065de <_printf_float+0x19a>
 80065d8:	3301      	adds	r3, #1
 80065da:	440b      	add	r3, r1
 80065dc:	6123      	str	r3, [r4, #16]
 80065de:	f04f 0900 	mov.w	r9, #0
 80065e2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065e4:	e7dc      	b.n	80065a0 <_printf_float+0x15c>
 80065e6:	b913      	cbnz	r3, 80065ee <_printf_float+0x1aa>
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	07d2      	lsls	r2, r2, #31
 80065ec:	d501      	bpl.n	80065f2 <_printf_float+0x1ae>
 80065ee:	3302      	adds	r3, #2
 80065f0:	e7f4      	b.n	80065dc <_printf_float+0x198>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e7f2      	b.n	80065dc <_printf_float+0x198>
 80065f6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	4299      	cmp	r1, r3
 80065fe:	db05      	blt.n	800660c <_printf_float+0x1c8>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	6121      	str	r1, [r4, #16]
 8006604:	07d8      	lsls	r0, r3, #31
 8006606:	d5ea      	bpl.n	80065de <_printf_float+0x19a>
 8006608:	1c4b      	adds	r3, r1, #1
 800660a:	e7e7      	b.n	80065dc <_printf_float+0x198>
 800660c:	2900      	cmp	r1, #0
 800660e:	bfcc      	ite	gt
 8006610:	2201      	movgt	r2, #1
 8006612:	f1c1 0202 	rsble	r2, r1, #2
 8006616:	4413      	add	r3, r2
 8006618:	e7e0      	b.n	80065dc <_printf_float+0x198>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	055a      	lsls	r2, r3, #21
 800661e:	d407      	bmi.n	8006630 <_printf_float+0x1ec>
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	4642      	mov	r2, r8
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	d12b      	bne.n	8006686 <_printf_float+0x242>
 800662e:	e764      	b.n	80064fa <_printf_float+0xb6>
 8006630:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006634:	f240 80dc 	bls.w	80067f0 <_printf_float+0x3ac>
 8006638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663c:	2200      	movs	r2, #0
 800663e:	2300      	movs	r3, #0
 8006640:	f7fa f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8006644:	2800      	cmp	r0, #0
 8006646:	d033      	beq.n	80066b0 <_printf_float+0x26c>
 8006648:	2301      	movs	r3, #1
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	4a35      	ldr	r2, [pc, #212]	@ (8006724 <_printf_float+0x2e0>)
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f af51 	beq.w	80064fa <_printf_float+0xb6>
 8006658:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800665c:	4543      	cmp	r3, r8
 800665e:	db02      	blt.n	8006666 <_printf_float+0x222>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	07d8      	lsls	r0, r3, #31
 8006664:	d50f      	bpl.n	8006686 <_printf_float+0x242>
 8006666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f af42 	beq.w	80064fa <_printf_float+0xb6>
 8006676:	f04f 0900 	mov.w	r9, #0
 800667a:	f108 38ff 	add.w	r8, r8, #4294967295
 800667e:	f104 0a1a 	add.w	sl, r4, #26
 8006682:	45c8      	cmp	r8, r9
 8006684:	dc09      	bgt.n	800669a <_printf_float+0x256>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	079b      	lsls	r3, r3, #30
 800668a:	f100 8102 	bmi.w	8006892 <_printf_float+0x44e>
 800668e:	68e0      	ldr	r0, [r4, #12]
 8006690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006692:	4298      	cmp	r0, r3
 8006694:	bfb8      	it	lt
 8006696:	4618      	movlt	r0, r3
 8006698:	e731      	b.n	80064fe <_printf_float+0xba>
 800669a:	2301      	movs	r3, #1
 800669c:	4652      	mov	r2, sl
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f af28 	beq.w	80064fa <_printf_float+0xb6>
 80066aa:	f109 0901 	add.w	r9, r9, #1
 80066ae:	e7e8      	b.n	8006682 <_printf_float+0x23e>
 80066b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	dc38      	bgt.n	8006728 <_printf_float+0x2e4>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4631      	mov	r1, r6
 80066ba:	4628      	mov	r0, r5
 80066bc:	4a19      	ldr	r2, [pc, #100]	@ (8006724 <_printf_float+0x2e0>)
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f af1a 	beq.w	80064fa <_printf_float+0xb6>
 80066c6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80066ca:	ea59 0303 	orrs.w	r3, r9, r3
 80066ce:	d102      	bne.n	80066d6 <_printf_float+0x292>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07d9      	lsls	r1, r3, #31
 80066d4:	d5d7      	bpl.n	8006686 <_printf_float+0x242>
 80066d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f af0a 	beq.w	80064fa <_printf_float+0xb6>
 80066e6:	f04f 0a00 	mov.w	sl, #0
 80066ea:	f104 0b1a 	add.w	fp, r4, #26
 80066ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066f0:	425b      	negs	r3, r3
 80066f2:	4553      	cmp	r3, sl
 80066f4:	dc01      	bgt.n	80066fa <_printf_float+0x2b6>
 80066f6:	464b      	mov	r3, r9
 80066f8:	e793      	b.n	8006622 <_printf_float+0x1de>
 80066fa:	2301      	movs	r3, #1
 80066fc:	465a      	mov	r2, fp
 80066fe:	4631      	mov	r1, r6
 8006700:	4628      	mov	r0, r5
 8006702:	47b8      	blx	r7
 8006704:	3001      	adds	r0, #1
 8006706:	f43f aef8 	beq.w	80064fa <_printf_float+0xb6>
 800670a:	f10a 0a01 	add.w	sl, sl, #1
 800670e:	e7ee      	b.n	80066ee <_printf_float+0x2aa>
 8006710:	7fefffff 	.word	0x7fefffff
 8006714:	08009ac8 	.word	0x08009ac8
 8006718:	08009acc 	.word	0x08009acc
 800671c:	08009ad0 	.word	0x08009ad0
 8006720:	08009ad4 	.word	0x08009ad4
 8006724:	08009ad8 	.word	0x08009ad8
 8006728:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800672a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800672e:	4553      	cmp	r3, sl
 8006730:	bfa8      	it	ge
 8006732:	4653      	movge	r3, sl
 8006734:	2b00      	cmp	r3, #0
 8006736:	4699      	mov	r9, r3
 8006738:	dc36      	bgt.n	80067a8 <_printf_float+0x364>
 800673a:	f04f 0b00 	mov.w	fp, #0
 800673e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006742:	f104 021a 	add.w	r2, r4, #26
 8006746:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006748:	930a      	str	r3, [sp, #40]	@ 0x28
 800674a:	eba3 0309 	sub.w	r3, r3, r9
 800674e:	455b      	cmp	r3, fp
 8006750:	dc31      	bgt.n	80067b6 <_printf_float+0x372>
 8006752:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006754:	459a      	cmp	sl, r3
 8006756:	dc3a      	bgt.n	80067ce <_printf_float+0x38a>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	07da      	lsls	r2, r3, #31
 800675c:	d437      	bmi.n	80067ce <_printf_float+0x38a>
 800675e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006760:	ebaa 0903 	sub.w	r9, sl, r3
 8006764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006766:	ebaa 0303 	sub.w	r3, sl, r3
 800676a:	4599      	cmp	r9, r3
 800676c:	bfa8      	it	ge
 800676e:	4699      	movge	r9, r3
 8006770:	f1b9 0f00 	cmp.w	r9, #0
 8006774:	dc33      	bgt.n	80067de <_printf_float+0x39a>
 8006776:	f04f 0800 	mov.w	r8, #0
 800677a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800677e:	f104 0b1a 	add.w	fp, r4, #26
 8006782:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006784:	ebaa 0303 	sub.w	r3, sl, r3
 8006788:	eba3 0309 	sub.w	r3, r3, r9
 800678c:	4543      	cmp	r3, r8
 800678e:	f77f af7a 	ble.w	8006686 <_printf_float+0x242>
 8006792:	2301      	movs	r3, #1
 8006794:	465a      	mov	r2, fp
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	f43f aeac 	beq.w	80064fa <_printf_float+0xb6>
 80067a2:	f108 0801 	add.w	r8, r8, #1
 80067a6:	e7ec      	b.n	8006782 <_printf_float+0x33e>
 80067a8:	4642      	mov	r2, r8
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	d1c2      	bne.n	800673a <_printf_float+0x2f6>
 80067b4:	e6a1      	b.n	80064fa <_printf_float+0xb6>
 80067b6:	2301      	movs	r3, #1
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80067be:	47b8      	blx	r7
 80067c0:	3001      	adds	r0, #1
 80067c2:	f43f ae9a 	beq.w	80064fa <_printf_float+0xb6>
 80067c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c8:	f10b 0b01 	add.w	fp, fp, #1
 80067cc:	e7bb      	b.n	8006746 <_printf_float+0x302>
 80067ce:	4631      	mov	r1, r6
 80067d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	d1c0      	bne.n	800675e <_printf_float+0x31a>
 80067dc:	e68d      	b.n	80064fa <_printf_float+0xb6>
 80067de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067e0:	464b      	mov	r3, r9
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	4442      	add	r2, r8
 80067e8:	47b8      	blx	r7
 80067ea:	3001      	adds	r0, #1
 80067ec:	d1c3      	bne.n	8006776 <_printf_float+0x332>
 80067ee:	e684      	b.n	80064fa <_printf_float+0xb6>
 80067f0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067f4:	f1ba 0f01 	cmp.w	sl, #1
 80067f8:	dc01      	bgt.n	80067fe <_printf_float+0x3ba>
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	d536      	bpl.n	800686c <_printf_float+0x428>
 80067fe:	2301      	movs	r3, #1
 8006800:	4642      	mov	r2, r8
 8006802:	4631      	mov	r1, r6
 8006804:	4628      	mov	r0, r5
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f ae76 	beq.w	80064fa <_printf_float+0xb6>
 800680e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f ae6e 	beq.w	80064fa <_printf_float+0xb6>
 800681e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006822:	2200      	movs	r2, #0
 8006824:	2300      	movs	r3, #0
 8006826:	f10a 3aff 	add.w	sl, sl, #4294967295
 800682a:	f7fa f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800682e:	b9c0      	cbnz	r0, 8006862 <_printf_float+0x41e>
 8006830:	4653      	mov	r3, sl
 8006832:	f108 0201 	add.w	r2, r8, #1
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d10c      	bne.n	800685a <_printf_float+0x416>
 8006840:	e65b      	b.n	80064fa <_printf_float+0xb6>
 8006842:	2301      	movs	r3, #1
 8006844:	465a      	mov	r2, fp
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	47b8      	blx	r7
 800684c:	3001      	adds	r0, #1
 800684e:	f43f ae54 	beq.w	80064fa <_printf_float+0xb6>
 8006852:	f108 0801 	add.w	r8, r8, #1
 8006856:	45d0      	cmp	r8, sl
 8006858:	dbf3      	blt.n	8006842 <_printf_float+0x3fe>
 800685a:	464b      	mov	r3, r9
 800685c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006860:	e6e0      	b.n	8006624 <_printf_float+0x1e0>
 8006862:	f04f 0800 	mov.w	r8, #0
 8006866:	f104 0b1a 	add.w	fp, r4, #26
 800686a:	e7f4      	b.n	8006856 <_printf_float+0x412>
 800686c:	2301      	movs	r3, #1
 800686e:	4642      	mov	r2, r8
 8006870:	e7e1      	b.n	8006836 <_printf_float+0x3f2>
 8006872:	2301      	movs	r3, #1
 8006874:	464a      	mov	r2, r9
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae3c 	beq.w	80064fa <_printf_float+0xb6>
 8006882:	f108 0801 	add.w	r8, r8, #1
 8006886:	68e3      	ldr	r3, [r4, #12]
 8006888:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800688a:	1a5b      	subs	r3, r3, r1
 800688c:	4543      	cmp	r3, r8
 800688e:	dcf0      	bgt.n	8006872 <_printf_float+0x42e>
 8006890:	e6fd      	b.n	800668e <_printf_float+0x24a>
 8006892:	f04f 0800 	mov.w	r8, #0
 8006896:	f104 0919 	add.w	r9, r4, #25
 800689a:	e7f4      	b.n	8006886 <_printf_float+0x442>

0800689c <_printf_common>:
 800689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a0:	4616      	mov	r6, r2
 80068a2:	4698      	mov	r8, r3
 80068a4:	688a      	ldr	r2, [r1, #8]
 80068a6:	690b      	ldr	r3, [r1, #16]
 80068a8:	4607      	mov	r7, r0
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bfb8      	it	lt
 80068ae:	4613      	movlt	r3, r2
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068b6:	460c      	mov	r4, r1
 80068b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068bc:	b10a      	cbz	r2, 80068c2 <_printf_common+0x26>
 80068be:	3301      	adds	r3, #1
 80068c0:	6033      	str	r3, [r6, #0]
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	0699      	lsls	r1, r3, #26
 80068c6:	bf42      	ittt	mi
 80068c8:	6833      	ldrmi	r3, [r6, #0]
 80068ca:	3302      	addmi	r3, #2
 80068cc:	6033      	strmi	r3, [r6, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	f015 0506 	ands.w	r5, r5, #6
 80068d4:	d106      	bne.n	80068e4 <_printf_common+0x48>
 80068d6:	f104 0a19 	add.w	sl, r4, #25
 80068da:	68e3      	ldr	r3, [r4, #12]
 80068dc:	6832      	ldr	r2, [r6, #0]
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	42ab      	cmp	r3, r5
 80068e2:	dc2b      	bgt.n	800693c <_printf_common+0xa0>
 80068e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068e8:	6822      	ldr	r2, [r4, #0]
 80068ea:	3b00      	subs	r3, #0
 80068ec:	bf18      	it	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	0692      	lsls	r2, r2, #26
 80068f2:	d430      	bmi.n	8006956 <_printf_common+0xba>
 80068f4:	4641      	mov	r1, r8
 80068f6:	4638      	mov	r0, r7
 80068f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068fc:	47c8      	blx	r9
 80068fe:	3001      	adds	r0, #1
 8006900:	d023      	beq.n	800694a <_printf_common+0xae>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6922      	ldr	r2, [r4, #16]
 8006906:	f003 0306 	and.w	r3, r3, #6
 800690a:	2b04      	cmp	r3, #4
 800690c:	bf14      	ite	ne
 800690e:	2500      	movne	r5, #0
 8006910:	6833      	ldreq	r3, [r6, #0]
 8006912:	f04f 0600 	mov.w	r6, #0
 8006916:	bf08      	it	eq
 8006918:	68e5      	ldreq	r5, [r4, #12]
 800691a:	f104 041a 	add.w	r4, r4, #26
 800691e:	bf08      	it	eq
 8006920:	1aed      	subeq	r5, r5, r3
 8006922:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006926:	bf08      	it	eq
 8006928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800692c:	4293      	cmp	r3, r2
 800692e:	bfc4      	itt	gt
 8006930:	1a9b      	subgt	r3, r3, r2
 8006932:	18ed      	addgt	r5, r5, r3
 8006934:	42b5      	cmp	r5, r6
 8006936:	d11a      	bne.n	800696e <_printf_common+0xd2>
 8006938:	2000      	movs	r0, #0
 800693a:	e008      	b.n	800694e <_printf_common+0xb2>
 800693c:	2301      	movs	r3, #1
 800693e:	4652      	mov	r2, sl
 8006940:	4641      	mov	r1, r8
 8006942:	4638      	mov	r0, r7
 8006944:	47c8      	blx	r9
 8006946:	3001      	adds	r0, #1
 8006948:	d103      	bne.n	8006952 <_printf_common+0xb6>
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006952:	3501      	adds	r5, #1
 8006954:	e7c1      	b.n	80068da <_printf_common+0x3e>
 8006956:	2030      	movs	r0, #48	@ 0x30
 8006958:	18e1      	adds	r1, r4, r3
 800695a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006964:	4422      	add	r2, r4
 8006966:	3302      	adds	r3, #2
 8006968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800696c:	e7c2      	b.n	80068f4 <_printf_common+0x58>
 800696e:	2301      	movs	r3, #1
 8006970:	4622      	mov	r2, r4
 8006972:	4641      	mov	r1, r8
 8006974:	4638      	mov	r0, r7
 8006976:	47c8      	blx	r9
 8006978:	3001      	adds	r0, #1
 800697a:	d0e6      	beq.n	800694a <_printf_common+0xae>
 800697c:	3601      	adds	r6, #1
 800697e:	e7d9      	b.n	8006934 <_printf_common+0x98>

08006980 <_printf_i>:
 8006980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006984:	7e0f      	ldrb	r7, [r1, #24]
 8006986:	4691      	mov	r9, r2
 8006988:	2f78      	cmp	r7, #120	@ 0x78
 800698a:	4680      	mov	r8, r0
 800698c:	460c      	mov	r4, r1
 800698e:	469a      	mov	sl, r3
 8006990:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006992:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006996:	d807      	bhi.n	80069a8 <_printf_i+0x28>
 8006998:	2f62      	cmp	r7, #98	@ 0x62
 800699a:	d80a      	bhi.n	80069b2 <_printf_i+0x32>
 800699c:	2f00      	cmp	r7, #0
 800699e:	f000 80d3 	beq.w	8006b48 <_printf_i+0x1c8>
 80069a2:	2f58      	cmp	r7, #88	@ 0x58
 80069a4:	f000 80ba 	beq.w	8006b1c <_printf_i+0x19c>
 80069a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069b0:	e03a      	b.n	8006a28 <_printf_i+0xa8>
 80069b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069b6:	2b15      	cmp	r3, #21
 80069b8:	d8f6      	bhi.n	80069a8 <_printf_i+0x28>
 80069ba:	a101      	add	r1, pc, #4	@ (adr r1, 80069c0 <_printf_i+0x40>)
 80069bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c0:	08006a19 	.word	0x08006a19
 80069c4:	08006a2d 	.word	0x08006a2d
 80069c8:	080069a9 	.word	0x080069a9
 80069cc:	080069a9 	.word	0x080069a9
 80069d0:	080069a9 	.word	0x080069a9
 80069d4:	080069a9 	.word	0x080069a9
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	080069a9 	.word	0x080069a9
 80069e0:	080069a9 	.word	0x080069a9
 80069e4:	080069a9 	.word	0x080069a9
 80069e8:	080069a9 	.word	0x080069a9
 80069ec:	08006b2f 	.word	0x08006b2f
 80069f0:	08006a57 	.word	0x08006a57
 80069f4:	08006ae9 	.word	0x08006ae9
 80069f8:	080069a9 	.word	0x080069a9
 80069fc:	080069a9 	.word	0x080069a9
 8006a00:	08006b51 	.word	0x08006b51
 8006a04:	080069a9 	.word	0x080069a9
 8006a08:	08006a57 	.word	0x08006a57
 8006a0c:	080069a9 	.word	0x080069a9
 8006a10:	080069a9 	.word	0x080069a9
 8006a14:	08006af1 	.word	0x08006af1
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	1d1a      	adds	r2, r3, #4
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6032      	str	r2, [r6, #0]
 8006a20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e09e      	b.n	8006b6a <_printf_i+0x1ea>
 8006a2c:	6833      	ldr	r3, [r6, #0]
 8006a2e:	6820      	ldr	r0, [r4, #0]
 8006a30:	1d19      	adds	r1, r3, #4
 8006a32:	6031      	str	r1, [r6, #0]
 8006a34:	0606      	lsls	r6, r0, #24
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0xbc>
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	e003      	b.n	8006a44 <_printf_i+0xc4>
 8006a3c:	0645      	lsls	r5, r0, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0xb8>
 8006a40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a44:	2d00      	cmp	r5, #0
 8006a46:	da03      	bge.n	8006a50 <_printf_i+0xd0>
 8006a48:	232d      	movs	r3, #45	@ 0x2d
 8006a4a:	426d      	negs	r5, r5
 8006a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a50:	230a      	movs	r3, #10
 8006a52:	4859      	ldr	r0, [pc, #356]	@ (8006bb8 <_printf_i+0x238>)
 8006a54:	e011      	b.n	8006a7a <_printf_i+0xfa>
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	6833      	ldr	r3, [r6, #0]
 8006a5a:	0608      	lsls	r0, r1, #24
 8006a5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a60:	d402      	bmi.n	8006a68 <_printf_i+0xe8>
 8006a62:	0649      	lsls	r1, r1, #25
 8006a64:	bf48      	it	mi
 8006a66:	b2ad      	uxthmi	r5, r5
 8006a68:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a6a:	6033      	str	r3, [r6, #0]
 8006a6c:	bf14      	ite	ne
 8006a6e:	230a      	movne	r3, #10
 8006a70:	2308      	moveq	r3, #8
 8006a72:	4851      	ldr	r0, [pc, #324]	@ (8006bb8 <_printf_i+0x238>)
 8006a74:	2100      	movs	r1, #0
 8006a76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a7a:	6866      	ldr	r6, [r4, #4]
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	bfa8      	it	ge
 8006a80:	6821      	ldrge	r1, [r4, #0]
 8006a82:	60a6      	str	r6, [r4, #8]
 8006a84:	bfa4      	itt	ge
 8006a86:	f021 0104 	bicge.w	r1, r1, #4
 8006a8a:	6021      	strge	r1, [r4, #0]
 8006a8c:	b90d      	cbnz	r5, 8006a92 <_printf_i+0x112>
 8006a8e:	2e00      	cmp	r6, #0
 8006a90:	d04b      	beq.n	8006b2a <_printf_i+0x1aa>
 8006a92:	4616      	mov	r6, r2
 8006a94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a98:	fb03 5711 	mls	r7, r3, r1, r5
 8006a9c:	5dc7      	ldrb	r7, [r0, r7]
 8006a9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aa2:	462f      	mov	r7, r5
 8006aa4:	42bb      	cmp	r3, r7
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	d9f4      	bls.n	8006a94 <_printf_i+0x114>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d10b      	bne.n	8006ac6 <_printf_i+0x146>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	07df      	lsls	r7, r3, #31
 8006ab2:	d508      	bpl.n	8006ac6 <_printf_i+0x146>
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	6861      	ldr	r1, [r4, #4]
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	bfde      	ittt	le
 8006abc:	2330      	movle	r3, #48	@ 0x30
 8006abe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ac2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ac6:	1b92      	subs	r2, r2, r6
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	464b      	mov	r3, r9
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	aa03      	add	r2, sp, #12
 8006ad6:	f7ff fee1 	bl	800689c <_printf_common>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d14a      	bne.n	8006b74 <_printf_i+0x1f4>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	b004      	add	sp, #16
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2778      	movs	r7, #120	@ 0x78
 8006af2:	4832      	ldr	r0, [pc, #200]	@ (8006bbc <_printf_i+0x23c>)
 8006af4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	6831      	ldr	r1, [r6, #0]
 8006afc:	061f      	lsls	r7, r3, #24
 8006afe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b02:	d402      	bmi.n	8006b0a <_printf_i+0x18a>
 8006b04:	065f      	lsls	r7, r3, #25
 8006b06:	bf48      	it	mi
 8006b08:	b2ad      	uxthmi	r5, r5
 8006b0a:	6031      	str	r1, [r6, #0]
 8006b0c:	07d9      	lsls	r1, r3, #31
 8006b0e:	bf44      	itt	mi
 8006b10:	f043 0320 	orrmi.w	r3, r3, #32
 8006b14:	6023      	strmi	r3, [r4, #0]
 8006b16:	b11d      	cbz	r5, 8006b20 <_printf_i+0x1a0>
 8006b18:	2310      	movs	r3, #16
 8006b1a:	e7ab      	b.n	8006a74 <_printf_i+0xf4>
 8006b1c:	4826      	ldr	r0, [pc, #152]	@ (8006bb8 <_printf_i+0x238>)
 8006b1e:	e7e9      	b.n	8006af4 <_printf_i+0x174>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	f023 0320 	bic.w	r3, r3, #32
 8006b26:	6023      	str	r3, [r4, #0]
 8006b28:	e7f6      	b.n	8006b18 <_printf_i+0x198>
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	e7bd      	b.n	8006aaa <_printf_i+0x12a>
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	6825      	ldr	r5, [r4, #0]
 8006b32:	1d18      	adds	r0, r3, #4
 8006b34:	6961      	ldr	r1, [r4, #20]
 8006b36:	6030      	str	r0, [r6, #0]
 8006b38:	062e      	lsls	r6, r5, #24
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0x1c2>
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <_printf_i+0x1c8>
 8006b42:	0668      	lsls	r0, r5, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0x1be>
 8006b46:	8019      	strh	r1, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4616      	mov	r6, r2
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	e7bc      	b.n	8006aca <_printf_i+0x14a>
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	2100      	movs	r1, #0
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	6032      	str	r2, [r6, #0]
 8006b58:	681e      	ldr	r6, [r3, #0]
 8006b5a:	6862      	ldr	r2, [r4, #4]
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 f9e6 	bl	8006f2e <memchr>
 8006b62:	b108      	cbz	r0, 8006b68 <_printf_i+0x1e8>
 8006b64:	1b80      	subs	r0, r0, r6
 8006b66:	6060      	str	r0, [r4, #4]
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b72:	e7aa      	b.n	8006aca <_printf_i+0x14a>
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	47d0      	blx	sl
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0ad      	beq.n	8006ade <_printf_i+0x15e>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	079b      	lsls	r3, r3, #30
 8006b86:	d413      	bmi.n	8006bb0 <_printf_i+0x230>
 8006b88:	68e0      	ldr	r0, [r4, #12]
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	bfb8      	it	lt
 8006b90:	4618      	movlt	r0, r3
 8006b92:	e7a6      	b.n	8006ae2 <_printf_i+0x162>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4632      	mov	r2, r6
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	47d0      	blx	sl
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d09d      	beq.n	8006ade <_printf_i+0x15e>
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	68e3      	ldr	r3, [r4, #12]
 8006ba6:	9903      	ldr	r1, [sp, #12]
 8006ba8:	1a5b      	subs	r3, r3, r1
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	dcf2      	bgt.n	8006b94 <_printf_i+0x214>
 8006bae:	e7eb      	b.n	8006b88 <_printf_i+0x208>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	f104 0619 	add.w	r6, r4, #25
 8006bb6:	e7f5      	b.n	8006ba4 <_printf_i+0x224>
 8006bb8:	08009ada 	.word	0x08009ada
 8006bbc:	08009aeb 	.word	0x08009aeb

08006bc0 <std>:
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	e9c0 3300 	strd	r3, r3, [r0]
 8006bca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bce:	6083      	str	r3, [r0, #8]
 8006bd0:	8181      	strh	r1, [r0, #12]
 8006bd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bd4:	81c2      	strh	r2, [r0, #14]
 8006bd6:	6183      	str	r3, [r0, #24]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	2208      	movs	r2, #8
 8006bdc:	305c      	adds	r0, #92	@ 0x5c
 8006bde:	f000 f914 	bl	8006e0a <memset>
 8006be2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c18 <std+0x58>)
 8006be4:	6224      	str	r4, [r4, #32]
 8006be6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006be8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <std+0x5c>)
 8006bea:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <std+0x60>)
 8006bee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c24 <std+0x64>)
 8006bf2:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c28 <std+0x68>)
 8006bf6:	429c      	cmp	r4, r3
 8006bf8:	d006      	beq.n	8006c08 <std+0x48>
 8006bfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bfe:	4294      	cmp	r4, r2
 8006c00:	d002      	beq.n	8006c08 <std+0x48>
 8006c02:	33d0      	adds	r3, #208	@ 0xd0
 8006c04:	429c      	cmp	r4, r3
 8006c06:	d105      	bne.n	8006c14 <std+0x54>
 8006c08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c10:	f000 b98a 	b.w	8006f28 <__retarget_lock_init_recursive>
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop
 8006c18:	08006d85 	.word	0x08006d85
 8006c1c:	08006da7 	.word	0x08006da7
 8006c20:	08006ddf 	.word	0x08006ddf
 8006c24:	08006e03 	.word	0x08006e03
 8006c28:	20000354 	.word	0x20000354

08006c2c <stdio_exit_handler>:
 8006c2c:	4a02      	ldr	r2, [pc, #8]	@ (8006c38 <stdio_exit_handler+0xc>)
 8006c2e:	4903      	ldr	r1, [pc, #12]	@ (8006c3c <stdio_exit_handler+0x10>)
 8006c30:	4803      	ldr	r0, [pc, #12]	@ (8006c40 <stdio_exit_handler+0x14>)
 8006c32:	f000 b869 	b.w	8006d08 <_fwalk_sglue>
 8006c36:	bf00      	nop
 8006c38:	20000014 	.word	0x20000014
 8006c3c:	080091c1 	.word	0x080091c1
 8006c40:	20000190 	.word	0x20000190

08006c44 <cleanup_stdio>:
 8006c44:	6841      	ldr	r1, [r0, #4]
 8006c46:	4b0c      	ldr	r3, [pc, #48]	@ (8006c78 <cleanup_stdio+0x34>)
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	d001      	beq.n	8006c54 <cleanup_stdio+0x10>
 8006c50:	f002 fab6 	bl	80091c0 <_fflush_r>
 8006c54:	68a1      	ldr	r1, [r4, #8]
 8006c56:	4b09      	ldr	r3, [pc, #36]	@ (8006c7c <cleanup_stdio+0x38>)
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	d002      	beq.n	8006c62 <cleanup_stdio+0x1e>
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f002 faaf 	bl	80091c0 <_fflush_r>
 8006c62:	68e1      	ldr	r1, [r4, #12]
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <cleanup_stdio+0x3c>)
 8006c66:	4299      	cmp	r1, r3
 8006c68:	d004      	beq.n	8006c74 <cleanup_stdio+0x30>
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c70:	f002 baa6 	b.w	80091c0 <_fflush_r>
 8006c74:	bd10      	pop	{r4, pc}
 8006c76:	bf00      	nop
 8006c78:	20000354 	.word	0x20000354
 8006c7c:	200003bc 	.word	0x200003bc
 8006c80:	20000424 	.word	0x20000424

08006c84 <global_stdio_init.part.0>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <global_stdio_init.part.0+0x30>)
 8006c88:	4c0b      	ldr	r4, [pc, #44]	@ (8006cb8 <global_stdio_init.part.0+0x34>)
 8006c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006cbc <global_stdio_init.part.0+0x38>)
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	2104      	movs	r1, #4
 8006c92:	2200      	movs	r2, #0
 8006c94:	f7ff ff94 	bl	8006bc0 <std>
 8006c98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	2109      	movs	r1, #9
 8006ca0:	f7ff ff8e 	bl	8006bc0 <std>
 8006ca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ca8:	2202      	movs	r2, #2
 8006caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cae:	2112      	movs	r1, #18
 8006cb0:	f7ff bf86 	b.w	8006bc0 <std>
 8006cb4:	2000048c 	.word	0x2000048c
 8006cb8:	20000354 	.word	0x20000354
 8006cbc:	08006c2d 	.word	0x08006c2d

08006cc0 <__sfp_lock_acquire>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	@ (8006cc8 <__sfp_lock_acquire+0x8>)
 8006cc2:	f000 b932 	b.w	8006f2a <__retarget_lock_acquire_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	20000495 	.word	0x20000495

08006ccc <__sfp_lock_release>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	@ (8006cd4 <__sfp_lock_release+0x8>)
 8006cce:	f000 b92d 	b.w	8006f2c <__retarget_lock_release_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000495 	.word	0x20000495

08006cd8 <__sinit>:
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	4604      	mov	r4, r0
 8006cdc:	f7ff fff0 	bl	8006cc0 <__sfp_lock_acquire>
 8006ce0:	6a23      	ldr	r3, [r4, #32]
 8006ce2:	b11b      	cbz	r3, 8006cec <__sinit+0x14>
 8006ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce8:	f7ff bff0 	b.w	8006ccc <__sfp_lock_release>
 8006cec:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <__sinit+0x28>)
 8006cee:	6223      	str	r3, [r4, #32]
 8006cf0:	4b04      	ldr	r3, [pc, #16]	@ (8006d04 <__sinit+0x2c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1f5      	bne.n	8006ce4 <__sinit+0xc>
 8006cf8:	f7ff ffc4 	bl	8006c84 <global_stdio_init.part.0>
 8006cfc:	e7f2      	b.n	8006ce4 <__sinit+0xc>
 8006cfe:	bf00      	nop
 8006d00:	08006c45 	.word	0x08006c45
 8006d04:	2000048c 	.word	0x2000048c

08006d08 <_fwalk_sglue>:
 8006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	4688      	mov	r8, r1
 8006d10:	4614      	mov	r4, r2
 8006d12:	2600      	movs	r6, #0
 8006d14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d18:	f1b9 0901 	subs.w	r9, r9, #1
 8006d1c:	d505      	bpl.n	8006d2a <_fwalk_sglue+0x22>
 8006d1e:	6824      	ldr	r4, [r4, #0]
 8006d20:	2c00      	cmp	r4, #0
 8006d22:	d1f7      	bne.n	8006d14 <_fwalk_sglue+0xc>
 8006d24:	4630      	mov	r0, r6
 8006d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d907      	bls.n	8006d40 <_fwalk_sglue+0x38>
 8006d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d34:	3301      	adds	r3, #1
 8006d36:	d003      	beq.n	8006d40 <_fwalk_sglue+0x38>
 8006d38:	4629      	mov	r1, r5
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	47c0      	blx	r8
 8006d3e:	4306      	orrs	r6, r0
 8006d40:	3568      	adds	r5, #104	@ 0x68
 8006d42:	e7e9      	b.n	8006d18 <_fwalk_sglue+0x10>

08006d44 <siprintf>:
 8006d44:	b40e      	push	{r1, r2, r3}
 8006d46:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d4a:	b500      	push	{lr}
 8006d4c:	b09c      	sub	sp, #112	@ 0x70
 8006d4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d50:	9002      	str	r0, [sp, #8]
 8006d52:	9006      	str	r0, [sp, #24]
 8006d54:	9107      	str	r1, [sp, #28]
 8006d56:	9104      	str	r1, [sp, #16]
 8006d58:	4808      	ldr	r0, [pc, #32]	@ (8006d7c <siprintf+0x38>)
 8006d5a:	4909      	ldr	r1, [pc, #36]	@ (8006d80 <siprintf+0x3c>)
 8006d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d60:	9105      	str	r1, [sp, #20]
 8006d62:	6800      	ldr	r0, [r0, #0]
 8006d64:	a902      	add	r1, sp, #8
 8006d66:	9301      	str	r3, [sp, #4]
 8006d68:	f002 f8ae 	bl	8008ec8 <_svfiprintf_r>
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	701a      	strb	r2, [r3, #0]
 8006d72:	b01c      	add	sp, #112	@ 0x70
 8006d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d78:	b003      	add	sp, #12
 8006d7a:	4770      	bx	lr
 8006d7c:	2000018c 	.word	0x2000018c
 8006d80:	ffff0208 	.word	0xffff0208

08006d84 <__sread>:
 8006d84:	b510      	push	{r4, lr}
 8006d86:	460c      	mov	r4, r1
 8006d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d8c:	f000 f87e 	bl	8006e8c <_read_r>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	bfab      	itete	ge
 8006d94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d96:	89a3      	ldrhlt	r3, [r4, #12]
 8006d98:	181b      	addge	r3, r3, r0
 8006d9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d9e:	bfac      	ite	ge
 8006da0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006da2:	81a3      	strhlt	r3, [r4, #12]
 8006da4:	bd10      	pop	{r4, pc}

08006da6 <__swrite>:
 8006da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006daa:	461f      	mov	r7, r3
 8006dac:	898b      	ldrh	r3, [r1, #12]
 8006dae:	4605      	mov	r5, r0
 8006db0:	05db      	lsls	r3, r3, #23
 8006db2:	460c      	mov	r4, r1
 8006db4:	4616      	mov	r6, r2
 8006db6:	d505      	bpl.n	8006dc4 <__swrite+0x1e>
 8006db8:	2302      	movs	r3, #2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	f000 f852 	bl	8006e68 <_lseek_r>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	4628      	mov	r0, r5
 8006dd0:	463b      	mov	r3, r7
 8006dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dda:	f000 b869 	b.w	8006eb0 <_write_r>

08006dde <__sseek>:
 8006dde:	b510      	push	{r4, lr}
 8006de0:	460c      	mov	r4, r1
 8006de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de6:	f000 f83f 	bl	8006e68 <_lseek_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	bf15      	itete	ne
 8006df0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006df2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006df6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dfa:	81a3      	strheq	r3, [r4, #12]
 8006dfc:	bf18      	it	ne
 8006dfe:	81a3      	strhne	r3, [r4, #12]
 8006e00:	bd10      	pop	{r4, pc}

08006e02 <__sclose>:
 8006e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e06:	f000 b81f 	b.w	8006e48 <_close_r>

08006e0a <memset>:
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	4402      	add	r2, r0
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d100      	bne.n	8006e14 <memset+0xa>
 8006e12:	4770      	bx	lr
 8006e14:	f803 1b01 	strb.w	r1, [r3], #1
 8006e18:	e7f9      	b.n	8006e0e <memset+0x4>

08006e1a <strncmp>:
 8006e1a:	b510      	push	{r4, lr}
 8006e1c:	b16a      	cbz	r2, 8006e3a <strncmp+0x20>
 8006e1e:	3901      	subs	r1, #1
 8006e20:	1884      	adds	r4, r0, r2
 8006e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e26:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d103      	bne.n	8006e36 <strncmp+0x1c>
 8006e2e:	42a0      	cmp	r0, r4
 8006e30:	d001      	beq.n	8006e36 <strncmp+0x1c>
 8006e32:	2a00      	cmp	r2, #0
 8006e34:	d1f5      	bne.n	8006e22 <strncmp+0x8>
 8006e36:	1ad0      	subs	r0, r2, r3
 8006e38:	bd10      	pop	{r4, pc}
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	e7fc      	b.n	8006e38 <strncmp+0x1e>
	...

08006e40 <_localeconv_r>:
 8006e40:	4800      	ldr	r0, [pc, #0]	@ (8006e44 <_localeconv_r+0x4>)
 8006e42:	4770      	bx	lr
 8006e44:	20000110 	.word	0x20000110

08006e48 <_close_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	4d05      	ldr	r5, [pc, #20]	@ (8006e64 <_close_r+0x1c>)
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	f7fb fdd5 	bl	8002a02 <_close>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_close_r+0x1a>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_close_r+0x1a>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000490 	.word	0x20000490

08006e68 <_lseek_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	4608      	mov	r0, r1
 8006e6e:	4611      	mov	r1, r2
 8006e70:	2200      	movs	r2, #0
 8006e72:	4d05      	ldr	r5, [pc, #20]	@ (8006e88 <_lseek_r+0x20>)
 8006e74:	602a      	str	r2, [r5, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	f7fb fde7 	bl	8002a4a <_lseek>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_lseek_r+0x1e>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_lseek_r+0x1e>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	20000490 	.word	0x20000490

08006e8c <_read_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	4d05      	ldr	r5, [pc, #20]	@ (8006eac <_read_r+0x20>)
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7fb fd78 	bl	8002990 <_read>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_read_r+0x1e>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_read_r+0x1e>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	20000490 	.word	0x20000490

08006eb0 <_write_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4d05      	ldr	r5, [pc, #20]	@ (8006ed0 <_write_r+0x20>)
 8006ebc:	602a      	str	r2, [r5, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f7fb fd83 	bl	80029ca <_write>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_write_r+0x1e>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_write_r+0x1e>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	20000490 	.word	0x20000490

08006ed4 <__errno>:
 8006ed4:	4b01      	ldr	r3, [pc, #4]	@ (8006edc <__errno+0x8>)
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	2000018c 	.word	0x2000018c

08006ee0 <__libc_init_array>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4d0c      	ldr	r5, [pc, #48]	@ (8006f18 <__libc_init_array+0x38>)
 8006ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8006f1c <__libc_init_array+0x3c>)
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	42a6      	cmp	r6, r4
 8006eee:	d109      	bne.n	8006f04 <__libc_init_array+0x24>
 8006ef0:	f002 fcd4 	bl	800989c <_init>
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	4d0a      	ldr	r5, [pc, #40]	@ (8006f20 <__libc_init_array+0x40>)
 8006ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8006f24 <__libc_init_array+0x44>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	42a6      	cmp	r6, r4
 8006f00:	d105      	bne.n	8006f0e <__libc_init_array+0x2e>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f08:	4798      	blx	r3
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7ee      	b.n	8006eec <__libc_init_array+0xc>
 8006f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f12:	4798      	blx	r3
 8006f14:	3601      	adds	r6, #1
 8006f16:	e7f2      	b.n	8006efe <__libc_init_array+0x1e>
 8006f18:	08009ea0 	.word	0x08009ea0
 8006f1c:	08009ea0 	.word	0x08009ea0
 8006f20:	08009ea0 	.word	0x08009ea0
 8006f24:	08009ea4 	.word	0x08009ea4

08006f28 <__retarget_lock_init_recursive>:
 8006f28:	4770      	bx	lr

08006f2a <__retarget_lock_acquire_recursive>:
 8006f2a:	4770      	bx	lr

08006f2c <__retarget_lock_release_recursive>:
 8006f2c:	4770      	bx	lr

08006f2e <memchr>:
 8006f2e:	4603      	mov	r3, r0
 8006f30:	b510      	push	{r4, lr}
 8006f32:	b2c9      	uxtb	r1, r1
 8006f34:	4402      	add	r2, r0
 8006f36:	4293      	cmp	r3, r2
 8006f38:	4618      	mov	r0, r3
 8006f3a:	d101      	bne.n	8006f40 <memchr+0x12>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e003      	b.n	8006f48 <memchr+0x1a>
 8006f40:	7804      	ldrb	r4, [r0, #0]
 8006f42:	3301      	adds	r3, #1
 8006f44:	428c      	cmp	r4, r1
 8006f46:	d1f6      	bne.n	8006f36 <memchr+0x8>
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <memcpy>:
 8006f4a:	440a      	add	r2, r1
 8006f4c:	4291      	cmp	r1, r2
 8006f4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f52:	d100      	bne.n	8006f56 <memcpy+0xc>
 8006f54:	4770      	bx	lr
 8006f56:	b510      	push	{r4, lr}
 8006f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f5c:	4291      	cmp	r1, r2
 8006f5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f62:	d1f9      	bne.n	8006f58 <memcpy+0xe>
 8006f64:	bd10      	pop	{r4, pc}
	...

08006f68 <nan>:
 8006f68:	2000      	movs	r0, #0
 8006f6a:	4901      	ldr	r1, [pc, #4]	@ (8006f70 <nan+0x8>)
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	7ff80000 	.word	0x7ff80000

08006f74 <quorem>:
 8006f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	6903      	ldr	r3, [r0, #16]
 8006f7a:	690c      	ldr	r4, [r1, #16]
 8006f7c:	4607      	mov	r7, r0
 8006f7e:	42a3      	cmp	r3, r4
 8006f80:	db7e      	blt.n	8007080 <quorem+0x10c>
 8006f82:	3c01      	subs	r4, #1
 8006f84:	00a3      	lsls	r3, r4, #2
 8006f86:	f100 0514 	add.w	r5, r0, #20
 8006f8a:	f101 0814 	add.w	r8, r1, #20
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006faa:	d32e      	bcc.n	800700a <quorem+0x96>
 8006fac:	f04f 0a00 	mov.w	sl, #0
 8006fb0:	46c4      	mov	ip, r8
 8006fb2:	46ae      	mov	lr, r5
 8006fb4:	46d3      	mov	fp, sl
 8006fb6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fba:	b298      	uxth	r0, r3
 8006fbc:	fb06 a000 	mla	r0, r6, r0, sl
 8006fc0:	0c1b      	lsrs	r3, r3, #16
 8006fc2:	0c02      	lsrs	r2, r0, #16
 8006fc4:	fb06 2303 	mla	r3, r6, r3, r2
 8006fc8:	f8de 2000 	ldr.w	r2, [lr]
 8006fcc:	b280      	uxth	r0, r0
 8006fce:	b292      	uxth	r2, r2
 8006fd0:	1a12      	subs	r2, r2, r0
 8006fd2:	445a      	add	r2, fp
 8006fd4:	f8de 0000 	ldr.w	r0, [lr]
 8006fd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fe2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fe6:	b292      	uxth	r2, r2
 8006fe8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fec:	45e1      	cmp	r9, ip
 8006fee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ff2:	f84e 2b04 	str.w	r2, [lr], #4
 8006ff6:	d2de      	bcs.n	8006fb6 <quorem+0x42>
 8006ff8:	9b00      	ldr	r3, [sp, #0]
 8006ffa:	58eb      	ldr	r3, [r5, r3]
 8006ffc:	b92b      	cbnz	r3, 800700a <quorem+0x96>
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	3b04      	subs	r3, #4
 8007002:	429d      	cmp	r5, r3
 8007004:	461a      	mov	r2, r3
 8007006:	d32f      	bcc.n	8007068 <quorem+0xf4>
 8007008:	613c      	str	r4, [r7, #16]
 800700a:	4638      	mov	r0, r7
 800700c:	f001 fd10 	bl	8008a30 <__mcmp>
 8007010:	2800      	cmp	r0, #0
 8007012:	db25      	blt.n	8007060 <quorem+0xec>
 8007014:	4629      	mov	r1, r5
 8007016:	2000      	movs	r0, #0
 8007018:	f858 2b04 	ldr.w	r2, [r8], #4
 800701c:	f8d1 c000 	ldr.w	ip, [r1]
 8007020:	fa1f fe82 	uxth.w	lr, r2
 8007024:	fa1f f38c 	uxth.w	r3, ip
 8007028:	eba3 030e 	sub.w	r3, r3, lr
 800702c:	4403      	add	r3, r0
 800702e:	0c12      	lsrs	r2, r2, #16
 8007030:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007034:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007038:	b29b      	uxth	r3, r3
 800703a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800703e:	45c1      	cmp	r9, r8
 8007040:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007044:	f841 3b04 	str.w	r3, [r1], #4
 8007048:	d2e6      	bcs.n	8007018 <quorem+0xa4>
 800704a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800704e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007052:	b922      	cbnz	r2, 800705e <quorem+0xea>
 8007054:	3b04      	subs	r3, #4
 8007056:	429d      	cmp	r5, r3
 8007058:	461a      	mov	r2, r3
 800705a:	d30b      	bcc.n	8007074 <quorem+0x100>
 800705c:	613c      	str	r4, [r7, #16]
 800705e:	3601      	adds	r6, #1
 8007060:	4630      	mov	r0, r6
 8007062:	b003      	add	sp, #12
 8007064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	3b04      	subs	r3, #4
 800706c:	2a00      	cmp	r2, #0
 800706e:	d1cb      	bne.n	8007008 <quorem+0x94>
 8007070:	3c01      	subs	r4, #1
 8007072:	e7c6      	b.n	8007002 <quorem+0x8e>
 8007074:	6812      	ldr	r2, [r2, #0]
 8007076:	3b04      	subs	r3, #4
 8007078:	2a00      	cmp	r2, #0
 800707a:	d1ef      	bne.n	800705c <quorem+0xe8>
 800707c:	3c01      	subs	r4, #1
 800707e:	e7ea      	b.n	8007056 <quorem+0xe2>
 8007080:	2000      	movs	r0, #0
 8007082:	e7ee      	b.n	8007062 <quorem+0xee>
 8007084:	0000      	movs	r0, r0
	...

08007088 <_dtoa_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	69c7      	ldr	r7, [r0, #28]
 8007092:	b097      	sub	sp, #92	@ 0x5c
 8007094:	4683      	mov	fp, r0
 8007096:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800709a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800709c:	b97f      	cbnz	r7, 80070be <_dtoa_r+0x36>
 800709e:	2010      	movs	r0, #16
 80070a0:	f001 f93c 	bl	800831c <malloc>
 80070a4:	4602      	mov	r2, r0
 80070a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80070aa:	b920      	cbnz	r0, 80070b6 <_dtoa_r+0x2e>
 80070ac:	21ef      	movs	r1, #239	@ 0xef
 80070ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007350 <_dtoa_r+0x2c8>)
 80070b0:	48a8      	ldr	r0, [pc, #672]	@ (8007354 <_dtoa_r+0x2cc>)
 80070b2:	f002 f8d7 	bl	8009264 <__assert_func>
 80070b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070ba:	6007      	str	r7, [r0, #0]
 80070bc:	60c7      	str	r7, [r0, #12]
 80070be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	b159      	cbz	r1, 80070de <_dtoa_r+0x56>
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	2301      	movs	r3, #1
 80070ca:	4093      	lsls	r3, r2
 80070cc:	604a      	str	r2, [r1, #4]
 80070ce:	608b      	str	r3, [r1, #8]
 80070d0:	4658      	mov	r0, fp
 80070d2:	f001 fa2b 	bl	800852c <_Bfree>
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	1e2b      	subs	r3, r5, #0
 80070e0:	bfaf      	iteee	ge
 80070e2:	2300      	movge	r3, #0
 80070e4:	2201      	movlt	r2, #1
 80070e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070ea:	9303      	strlt	r3, [sp, #12]
 80070ec:	bfa8      	it	ge
 80070ee:	6033      	strge	r3, [r6, #0]
 80070f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80070f4:	4b98      	ldr	r3, [pc, #608]	@ (8007358 <_dtoa_r+0x2d0>)
 80070f6:	bfb8      	it	lt
 80070f8:	6032      	strlt	r2, [r6, #0]
 80070fa:	ea33 0308 	bics.w	r3, r3, r8
 80070fe:	d112      	bne.n	8007126 <_dtoa_r+0x9e>
 8007100:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007104:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007106:	6013      	str	r3, [r2, #0]
 8007108:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800710c:	4323      	orrs	r3, r4
 800710e:	f000 8550 	beq.w	8007bb2 <_dtoa_r+0xb2a>
 8007112:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007114:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800735c <_dtoa_r+0x2d4>
 8007118:	2b00      	cmp	r3, #0
 800711a:	f000 8552 	beq.w	8007bc2 <_dtoa_r+0xb3a>
 800711e:	f10a 0303 	add.w	r3, sl, #3
 8007122:	f000 bd4c 	b.w	8007bbe <_dtoa_r+0xb36>
 8007126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800712a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800712e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	f7f9 fc37 	bl	80009a8 <__aeabi_dcmpeq>
 800713a:	4607      	mov	r7, r0
 800713c:	b158      	cbz	r0, 8007156 <_dtoa_r+0xce>
 800713e:	2301      	movs	r3, #1
 8007140:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007142:	6013      	str	r3, [r2, #0]
 8007144:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007146:	b113      	cbz	r3, 800714e <_dtoa_r+0xc6>
 8007148:	4b85      	ldr	r3, [pc, #532]	@ (8007360 <_dtoa_r+0x2d8>)
 800714a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800714c:	6013      	str	r3, [r2, #0]
 800714e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007364 <_dtoa_r+0x2dc>
 8007152:	f000 bd36 	b.w	8007bc2 <_dtoa_r+0xb3a>
 8007156:	ab14      	add	r3, sp, #80	@ 0x50
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	ab15      	add	r3, sp, #84	@ 0x54
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4658      	mov	r0, fp
 8007160:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007164:	f001 fd7c 	bl	8008c60 <__d2b>
 8007168:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800716c:	4681      	mov	r9, r0
 800716e:	2e00      	cmp	r6, #0
 8007170:	d077      	beq.n	8007262 <_dtoa_r+0x1da>
 8007172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007178:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800717c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007180:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007184:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007188:	9712      	str	r7, [sp, #72]	@ 0x48
 800718a:	4619      	mov	r1, r3
 800718c:	2200      	movs	r2, #0
 800718e:	4b76      	ldr	r3, [pc, #472]	@ (8007368 <_dtoa_r+0x2e0>)
 8007190:	f7f8 ffea 	bl	8000168 <__aeabi_dsub>
 8007194:	a368      	add	r3, pc, #416	@ (adr r3, 8007338 <_dtoa_r+0x2b0>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f99d 	bl	80004d8 <__aeabi_dmul>
 800719e:	a368      	add	r3, pc, #416	@ (adr r3, 8007340 <_dtoa_r+0x2b8>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f8 ffe2 	bl	800016c <__adddf3>
 80071a8:	4604      	mov	r4, r0
 80071aa:	4630      	mov	r0, r6
 80071ac:	460d      	mov	r5, r1
 80071ae:	f7f9 f929 	bl	8000404 <__aeabi_i2d>
 80071b2:	a365      	add	r3, pc, #404	@ (adr r3, 8007348 <_dtoa_r+0x2c0>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f7f9 f98e 	bl	80004d8 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4620      	mov	r0, r4
 80071c2:	4629      	mov	r1, r5
 80071c4:	f7f8 ffd2 	bl	800016c <__adddf3>
 80071c8:	4604      	mov	r4, r0
 80071ca:	460d      	mov	r5, r1
 80071cc:	f7f9 fc34 	bl	8000a38 <__aeabi_d2iz>
 80071d0:	2200      	movs	r2, #0
 80071d2:	4607      	mov	r7, r0
 80071d4:	2300      	movs	r3, #0
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 fbef 	bl	80009bc <__aeabi_dcmplt>
 80071de:	b140      	cbz	r0, 80071f2 <_dtoa_r+0x16a>
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7f9 f90f 	bl	8000404 <__aeabi_i2d>
 80071e6:	4622      	mov	r2, r4
 80071e8:	462b      	mov	r3, r5
 80071ea:	f7f9 fbdd 	bl	80009a8 <__aeabi_dcmpeq>
 80071ee:	b900      	cbnz	r0, 80071f2 <_dtoa_r+0x16a>
 80071f0:	3f01      	subs	r7, #1
 80071f2:	2f16      	cmp	r7, #22
 80071f4:	d853      	bhi.n	800729e <_dtoa_r+0x216>
 80071f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071fa:	4b5c      	ldr	r3, [pc, #368]	@ (800736c <_dtoa_r+0x2e4>)
 80071fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 fbda 	bl	80009bc <__aeabi_dcmplt>
 8007208:	2800      	cmp	r0, #0
 800720a:	d04a      	beq.n	80072a2 <_dtoa_r+0x21a>
 800720c:	2300      	movs	r3, #0
 800720e:	3f01      	subs	r7, #1
 8007210:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007212:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007214:	1b9b      	subs	r3, r3, r6
 8007216:	1e5a      	subs	r2, r3, #1
 8007218:	bf46      	itte	mi
 800721a:	f1c3 0801 	rsbmi	r8, r3, #1
 800721e:	2300      	movmi	r3, #0
 8007220:	f04f 0800 	movpl.w	r8, #0
 8007224:	9209      	str	r2, [sp, #36]	@ 0x24
 8007226:	bf48      	it	mi
 8007228:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800722a:	2f00      	cmp	r7, #0
 800722c:	db3b      	blt.n	80072a6 <_dtoa_r+0x21e>
 800722e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007230:	970e      	str	r7, [sp, #56]	@ 0x38
 8007232:	443b      	add	r3, r7
 8007234:	9309      	str	r3, [sp, #36]	@ 0x24
 8007236:	2300      	movs	r3, #0
 8007238:	930a      	str	r3, [sp, #40]	@ 0x28
 800723a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800723c:	2b09      	cmp	r3, #9
 800723e:	d866      	bhi.n	800730e <_dtoa_r+0x286>
 8007240:	2b05      	cmp	r3, #5
 8007242:	bfc4      	itt	gt
 8007244:	3b04      	subgt	r3, #4
 8007246:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007248:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800724a:	bfc8      	it	gt
 800724c:	2400      	movgt	r4, #0
 800724e:	f1a3 0302 	sub.w	r3, r3, #2
 8007252:	bfd8      	it	le
 8007254:	2401      	movle	r4, #1
 8007256:	2b03      	cmp	r3, #3
 8007258:	d864      	bhi.n	8007324 <_dtoa_r+0x29c>
 800725a:	e8df f003 	tbb	[pc, r3]
 800725e:	382b      	.short	0x382b
 8007260:	5636      	.short	0x5636
 8007262:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007266:	441e      	add	r6, r3
 8007268:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800726c:	2b20      	cmp	r3, #32
 800726e:	bfc1      	itttt	gt
 8007270:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007274:	fa08 f803 	lslgt.w	r8, r8, r3
 8007278:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800727c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007280:	bfd6      	itet	le
 8007282:	f1c3 0320 	rsble	r3, r3, #32
 8007286:	ea48 0003 	orrgt.w	r0, r8, r3
 800728a:	fa04 f003 	lslle.w	r0, r4, r3
 800728e:	f7f9 f8a9 	bl	80003e4 <__aeabi_ui2d>
 8007292:	2201      	movs	r2, #1
 8007294:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007298:	3e01      	subs	r6, #1
 800729a:	9212      	str	r2, [sp, #72]	@ 0x48
 800729c:	e775      	b.n	800718a <_dtoa_r+0x102>
 800729e:	2301      	movs	r3, #1
 80072a0:	e7b6      	b.n	8007210 <_dtoa_r+0x188>
 80072a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80072a4:	e7b5      	b.n	8007212 <_dtoa_r+0x18a>
 80072a6:	427b      	negs	r3, r7
 80072a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072aa:	2300      	movs	r3, #0
 80072ac:	eba8 0807 	sub.w	r8, r8, r7
 80072b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80072b2:	e7c2      	b.n	800723a <_dtoa_r+0x1b2>
 80072b4:	2300      	movs	r3, #0
 80072b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dc35      	bgt.n	800732a <_dtoa_r+0x2a2>
 80072be:	2301      	movs	r3, #1
 80072c0:	461a      	mov	r2, r3
 80072c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80072c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80072c8:	e00b      	b.n	80072e2 <_dtoa_r+0x25a>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e7f3      	b.n	80072b6 <_dtoa_r+0x22e>
 80072ce:	2300      	movs	r3, #0
 80072d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072d4:	18fb      	adds	r3, r7, r3
 80072d6:	9308      	str	r3, [sp, #32]
 80072d8:	3301      	adds	r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	9307      	str	r3, [sp, #28]
 80072de:	bfb8      	it	lt
 80072e0:	2301      	movlt	r3, #1
 80072e2:	2100      	movs	r1, #0
 80072e4:	2204      	movs	r2, #4
 80072e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072ea:	f102 0514 	add.w	r5, r2, #20
 80072ee:	429d      	cmp	r5, r3
 80072f0:	d91f      	bls.n	8007332 <_dtoa_r+0x2aa>
 80072f2:	6041      	str	r1, [r0, #4]
 80072f4:	4658      	mov	r0, fp
 80072f6:	f001 f8d9 	bl	80084ac <_Balloc>
 80072fa:	4682      	mov	sl, r0
 80072fc:	2800      	cmp	r0, #0
 80072fe:	d139      	bne.n	8007374 <_dtoa_r+0x2ec>
 8007300:	4602      	mov	r2, r0
 8007302:	f240 11af 	movw	r1, #431	@ 0x1af
 8007306:	4b1a      	ldr	r3, [pc, #104]	@ (8007370 <_dtoa_r+0x2e8>)
 8007308:	e6d2      	b.n	80070b0 <_dtoa_r+0x28>
 800730a:	2301      	movs	r3, #1
 800730c:	e7e0      	b.n	80072d0 <_dtoa_r+0x248>
 800730e:	2401      	movs	r4, #1
 8007310:	2300      	movs	r3, #0
 8007312:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007314:	9320      	str	r3, [sp, #128]	@ 0x80
 8007316:	f04f 33ff 	mov.w	r3, #4294967295
 800731a:	2200      	movs	r2, #0
 800731c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007320:	2312      	movs	r3, #18
 8007322:	e7d0      	b.n	80072c6 <_dtoa_r+0x23e>
 8007324:	2301      	movs	r3, #1
 8007326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007328:	e7f5      	b.n	8007316 <_dtoa_r+0x28e>
 800732a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800732c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007330:	e7d7      	b.n	80072e2 <_dtoa_r+0x25a>
 8007332:	3101      	adds	r1, #1
 8007334:	0052      	lsls	r2, r2, #1
 8007336:	e7d8      	b.n	80072ea <_dtoa_r+0x262>
 8007338:	636f4361 	.word	0x636f4361
 800733c:	3fd287a7 	.word	0x3fd287a7
 8007340:	8b60c8b3 	.word	0x8b60c8b3
 8007344:	3fc68a28 	.word	0x3fc68a28
 8007348:	509f79fb 	.word	0x509f79fb
 800734c:	3fd34413 	.word	0x3fd34413
 8007350:	08009b11 	.word	0x08009b11
 8007354:	08009b28 	.word	0x08009b28
 8007358:	7ff00000 	.word	0x7ff00000
 800735c:	08009b0d 	.word	0x08009b0d
 8007360:	08009ad9 	.word	0x08009ad9
 8007364:	08009ad8 	.word	0x08009ad8
 8007368:	3ff80000 	.word	0x3ff80000
 800736c:	08009c80 	.word	0x08009c80
 8007370:	08009b80 	.word	0x08009b80
 8007374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007378:	6018      	str	r0, [r3, #0]
 800737a:	9b07      	ldr	r3, [sp, #28]
 800737c:	2b0e      	cmp	r3, #14
 800737e:	f200 80a4 	bhi.w	80074ca <_dtoa_r+0x442>
 8007382:	2c00      	cmp	r4, #0
 8007384:	f000 80a1 	beq.w	80074ca <_dtoa_r+0x442>
 8007388:	2f00      	cmp	r7, #0
 800738a:	dd33      	ble.n	80073f4 <_dtoa_r+0x36c>
 800738c:	4b86      	ldr	r3, [pc, #536]	@ (80075a8 <_dtoa_r+0x520>)
 800738e:	f007 020f 	and.w	r2, r7, #15
 8007392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007396:	05f8      	lsls	r0, r7, #23
 8007398:	e9d3 3400 	ldrd	r3, r4, [r3]
 800739c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073a4:	d516      	bpl.n	80073d4 <_dtoa_r+0x34c>
 80073a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073aa:	4b80      	ldr	r3, [pc, #512]	@ (80075ac <_dtoa_r+0x524>)
 80073ac:	2603      	movs	r6, #3
 80073ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073b2:	f7f9 f9bb 	bl	800072c <__aeabi_ddiv>
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ba:	f004 040f 	and.w	r4, r4, #15
 80073be:	4d7b      	ldr	r5, [pc, #492]	@ (80075ac <_dtoa_r+0x524>)
 80073c0:	b954      	cbnz	r4, 80073d8 <_dtoa_r+0x350>
 80073c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ca:	f7f9 f9af 	bl	800072c <__aeabi_ddiv>
 80073ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d2:	e028      	b.n	8007426 <_dtoa_r+0x39e>
 80073d4:	2602      	movs	r6, #2
 80073d6:	e7f2      	b.n	80073be <_dtoa_r+0x336>
 80073d8:	07e1      	lsls	r1, r4, #31
 80073da:	d508      	bpl.n	80073ee <_dtoa_r+0x366>
 80073dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073e4:	f7f9 f878 	bl	80004d8 <__aeabi_dmul>
 80073e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073ec:	3601      	adds	r6, #1
 80073ee:	1064      	asrs	r4, r4, #1
 80073f0:	3508      	adds	r5, #8
 80073f2:	e7e5      	b.n	80073c0 <_dtoa_r+0x338>
 80073f4:	f000 80d2 	beq.w	800759c <_dtoa_r+0x514>
 80073f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fc:	427c      	negs	r4, r7
 80073fe:	4b6a      	ldr	r3, [pc, #424]	@ (80075a8 <_dtoa_r+0x520>)
 8007400:	f004 020f 	and.w	r2, r4, #15
 8007404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740c:	f7f9 f864 	bl	80004d8 <__aeabi_dmul>
 8007410:	2602      	movs	r6, #2
 8007412:	2300      	movs	r3, #0
 8007414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007418:	4d64      	ldr	r5, [pc, #400]	@ (80075ac <_dtoa_r+0x524>)
 800741a:	1124      	asrs	r4, r4, #4
 800741c:	2c00      	cmp	r4, #0
 800741e:	f040 80b2 	bne.w	8007586 <_dtoa_r+0x4fe>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1d3      	bne.n	80073ce <_dtoa_r+0x346>
 8007426:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800742a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80b7 	beq.w	80075a0 <_dtoa_r+0x518>
 8007432:	2200      	movs	r2, #0
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	4b5d      	ldr	r3, [pc, #372]	@ (80075b0 <_dtoa_r+0x528>)
 800743a:	f7f9 fabf 	bl	80009bc <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	f000 80ae 	beq.w	80075a0 <_dtoa_r+0x518>
 8007444:	9b07      	ldr	r3, [sp, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	f000 80aa 	beq.w	80075a0 <_dtoa_r+0x518>
 800744c:	9b08      	ldr	r3, [sp, #32]
 800744e:	2b00      	cmp	r3, #0
 8007450:	dd37      	ble.n	80074c2 <_dtoa_r+0x43a>
 8007452:	1e7b      	subs	r3, r7, #1
 8007454:	4620      	mov	r0, r4
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	2200      	movs	r2, #0
 800745a:	4629      	mov	r1, r5
 800745c:	4b55      	ldr	r3, [pc, #340]	@ (80075b4 <_dtoa_r+0x52c>)
 800745e:	f7f9 f83b 	bl	80004d8 <__aeabi_dmul>
 8007462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007466:	9c08      	ldr	r4, [sp, #32]
 8007468:	3601      	adds	r6, #1
 800746a:	4630      	mov	r0, r6
 800746c:	f7f8 ffca 	bl	8000404 <__aeabi_i2d>
 8007470:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	2200      	movs	r2, #0
 800747a:	4b4f      	ldr	r3, [pc, #316]	@ (80075b8 <_dtoa_r+0x530>)
 800747c:	f7f8 fe76 	bl	800016c <__adddf3>
 8007480:	4605      	mov	r5, r0
 8007482:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007486:	2c00      	cmp	r4, #0
 8007488:	f040 809a 	bne.w	80075c0 <_dtoa_r+0x538>
 800748c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007490:	2200      	movs	r2, #0
 8007492:	4b4a      	ldr	r3, [pc, #296]	@ (80075bc <_dtoa_r+0x534>)
 8007494:	f7f8 fe68 	bl	8000168 <__aeabi_dsub>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074a0:	462a      	mov	r2, r5
 80074a2:	4633      	mov	r3, r6
 80074a4:	f7f9 faa8 	bl	80009f8 <__aeabi_dcmpgt>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	f040 828e 	bne.w	80079ca <_dtoa_r+0x942>
 80074ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b2:	462a      	mov	r2, r5
 80074b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074b8:	f7f9 fa80 	bl	80009bc <__aeabi_dcmplt>
 80074bc:	2800      	cmp	r0, #0
 80074be:	f040 8127 	bne.w	8007710 <_dtoa_r+0x688>
 80074c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80074ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f2c0 8163 	blt.w	8007798 <_dtoa_r+0x710>
 80074d2:	2f0e      	cmp	r7, #14
 80074d4:	f300 8160 	bgt.w	8007798 <_dtoa_r+0x710>
 80074d8:	4b33      	ldr	r3, [pc, #204]	@ (80075a8 <_dtoa_r+0x520>)
 80074da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da03      	bge.n	80074f4 <_dtoa_r+0x46c>
 80074ec:	9b07      	ldr	r3, [sp, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f340 8100 	ble.w	80076f4 <_dtoa_r+0x66c>
 80074f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074f8:	4656      	mov	r6, sl
 80074fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074fe:	4620      	mov	r0, r4
 8007500:	4629      	mov	r1, r5
 8007502:	f7f9 f913 	bl	800072c <__aeabi_ddiv>
 8007506:	f7f9 fa97 	bl	8000a38 <__aeabi_d2iz>
 800750a:	4680      	mov	r8, r0
 800750c:	f7f8 ff7a 	bl	8000404 <__aeabi_i2d>
 8007510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007514:	f7f8 ffe0 	bl	80004d8 <__aeabi_dmul>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	4620      	mov	r0, r4
 800751e:	4629      	mov	r1, r5
 8007520:	f7f8 fe22 	bl	8000168 <__aeabi_dsub>
 8007524:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007528:	9d07      	ldr	r5, [sp, #28]
 800752a:	f806 4b01 	strb.w	r4, [r6], #1
 800752e:	eba6 040a 	sub.w	r4, r6, sl
 8007532:	42a5      	cmp	r5, r4
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	f040 8116 	bne.w	8007768 <_dtoa_r+0x6e0>
 800753c:	f7f8 fe16 	bl	800016c <__adddf3>
 8007540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	f7f9 fa56 	bl	80009f8 <__aeabi_dcmpgt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f040 80f8 	bne.w	8007742 <_dtoa_r+0x6ba>
 8007552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f9 fa25 	bl	80009a8 <__aeabi_dcmpeq>
 800755e:	b118      	cbz	r0, 8007568 <_dtoa_r+0x4e0>
 8007560:	f018 0f01 	tst.w	r8, #1
 8007564:	f040 80ed 	bne.w	8007742 <_dtoa_r+0x6ba>
 8007568:	4649      	mov	r1, r9
 800756a:	4658      	mov	r0, fp
 800756c:	f000 ffde 	bl	800852c <_Bfree>
 8007570:	2300      	movs	r3, #0
 8007572:	7033      	strb	r3, [r6, #0]
 8007574:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007576:	3701      	adds	r7, #1
 8007578:	601f      	str	r7, [r3, #0]
 800757a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 8320 	beq.w	8007bc2 <_dtoa_r+0xb3a>
 8007582:	601e      	str	r6, [r3, #0]
 8007584:	e31d      	b.n	8007bc2 <_dtoa_r+0xb3a>
 8007586:	07e2      	lsls	r2, r4, #31
 8007588:	d505      	bpl.n	8007596 <_dtoa_r+0x50e>
 800758a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800758e:	f7f8 ffa3 	bl	80004d8 <__aeabi_dmul>
 8007592:	2301      	movs	r3, #1
 8007594:	3601      	adds	r6, #1
 8007596:	1064      	asrs	r4, r4, #1
 8007598:	3508      	adds	r5, #8
 800759a:	e73f      	b.n	800741c <_dtoa_r+0x394>
 800759c:	2602      	movs	r6, #2
 800759e:	e742      	b.n	8007426 <_dtoa_r+0x39e>
 80075a0:	9c07      	ldr	r4, [sp, #28]
 80075a2:	9704      	str	r7, [sp, #16]
 80075a4:	e761      	b.n	800746a <_dtoa_r+0x3e2>
 80075a6:	bf00      	nop
 80075a8:	08009c80 	.word	0x08009c80
 80075ac:	08009c58 	.word	0x08009c58
 80075b0:	3ff00000 	.word	0x3ff00000
 80075b4:	40240000 	.word	0x40240000
 80075b8:	401c0000 	.word	0x401c0000
 80075bc:	40140000 	.word	0x40140000
 80075c0:	4b70      	ldr	r3, [pc, #448]	@ (8007784 <_dtoa_r+0x6fc>)
 80075c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075cc:	4454      	add	r4, sl
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d045      	beq.n	800765e <_dtoa_r+0x5d6>
 80075d2:	2000      	movs	r0, #0
 80075d4:	496c      	ldr	r1, [pc, #432]	@ (8007788 <_dtoa_r+0x700>)
 80075d6:	f7f9 f8a9 	bl	800072c <__aeabi_ddiv>
 80075da:	4633      	mov	r3, r6
 80075dc:	462a      	mov	r2, r5
 80075de:	f7f8 fdc3 	bl	8000168 <__aeabi_dsub>
 80075e2:	4656      	mov	r6, sl
 80075e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ec:	f7f9 fa24 	bl	8000a38 <__aeabi_d2iz>
 80075f0:	4605      	mov	r5, r0
 80075f2:	f7f8 ff07 	bl	8000404 <__aeabi_i2d>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075fe:	f7f8 fdb3 	bl	8000168 <__aeabi_dsub>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	3530      	adds	r5, #48	@ 0x30
 8007608:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800760c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007610:	f806 5b01 	strb.w	r5, [r6], #1
 8007614:	f7f9 f9d2 	bl	80009bc <__aeabi_dcmplt>
 8007618:	2800      	cmp	r0, #0
 800761a:	d163      	bne.n	80076e4 <_dtoa_r+0x65c>
 800761c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007620:	2000      	movs	r0, #0
 8007622:	495a      	ldr	r1, [pc, #360]	@ (800778c <_dtoa_r+0x704>)
 8007624:	f7f8 fda0 	bl	8000168 <__aeabi_dsub>
 8007628:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800762c:	f7f9 f9c6 	bl	80009bc <__aeabi_dcmplt>
 8007630:	2800      	cmp	r0, #0
 8007632:	f040 8087 	bne.w	8007744 <_dtoa_r+0x6bc>
 8007636:	42a6      	cmp	r6, r4
 8007638:	f43f af43 	beq.w	80074c2 <_dtoa_r+0x43a>
 800763c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007640:	2200      	movs	r2, #0
 8007642:	4b53      	ldr	r3, [pc, #332]	@ (8007790 <_dtoa_r+0x708>)
 8007644:	f7f8 ff48 	bl	80004d8 <__aeabi_dmul>
 8007648:	2200      	movs	r2, #0
 800764a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800764e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007652:	4b4f      	ldr	r3, [pc, #316]	@ (8007790 <_dtoa_r+0x708>)
 8007654:	f7f8 ff40 	bl	80004d8 <__aeabi_dmul>
 8007658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765c:	e7c4      	b.n	80075e8 <_dtoa_r+0x560>
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	f7f8 ff39 	bl	80004d8 <__aeabi_dmul>
 8007666:	4656      	mov	r6, sl
 8007668:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800766c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800766e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007672:	f7f9 f9e1 	bl	8000a38 <__aeabi_d2iz>
 8007676:	4605      	mov	r5, r0
 8007678:	f7f8 fec4 	bl	8000404 <__aeabi_i2d>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007684:	f7f8 fd70 	bl	8000168 <__aeabi_dsub>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	3530      	adds	r5, #48	@ 0x30
 800768e:	f806 5b01 	strb.w	r5, [r6], #1
 8007692:	42a6      	cmp	r6, r4
 8007694:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	d124      	bne.n	80076e8 <_dtoa_r+0x660>
 800769e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076a2:	4b39      	ldr	r3, [pc, #228]	@ (8007788 <_dtoa_r+0x700>)
 80076a4:	f7f8 fd62 	bl	800016c <__adddf3>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b0:	f7f9 f9a2 	bl	80009f8 <__aeabi_dcmpgt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d145      	bne.n	8007744 <_dtoa_r+0x6bc>
 80076b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076bc:	2000      	movs	r0, #0
 80076be:	4932      	ldr	r1, [pc, #200]	@ (8007788 <_dtoa_r+0x700>)
 80076c0:	f7f8 fd52 	bl	8000168 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f9 f976 	bl	80009bc <__aeabi_dcmplt>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f43f aef6 	beq.w	80074c2 <_dtoa_r+0x43a>
 80076d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80076d8:	1e73      	subs	r3, r6, #1
 80076da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076e0:	2b30      	cmp	r3, #48	@ 0x30
 80076e2:	d0f8      	beq.n	80076d6 <_dtoa_r+0x64e>
 80076e4:	9f04      	ldr	r7, [sp, #16]
 80076e6:	e73f      	b.n	8007568 <_dtoa_r+0x4e0>
 80076e8:	4b29      	ldr	r3, [pc, #164]	@ (8007790 <_dtoa_r+0x708>)
 80076ea:	f7f8 fef5 	bl	80004d8 <__aeabi_dmul>
 80076ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f2:	e7bc      	b.n	800766e <_dtoa_r+0x5e6>
 80076f4:	d10c      	bne.n	8007710 <_dtoa_r+0x688>
 80076f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fa:	2200      	movs	r2, #0
 80076fc:	4b25      	ldr	r3, [pc, #148]	@ (8007794 <_dtoa_r+0x70c>)
 80076fe:	f7f8 feeb 	bl	80004d8 <__aeabi_dmul>
 8007702:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007706:	f7f9 f96d 	bl	80009e4 <__aeabi_dcmpge>
 800770a:	2800      	cmp	r0, #0
 800770c:	f000 815b 	beq.w	80079c6 <_dtoa_r+0x93e>
 8007710:	2400      	movs	r4, #0
 8007712:	4625      	mov	r5, r4
 8007714:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007716:	4656      	mov	r6, sl
 8007718:	43db      	mvns	r3, r3
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	2700      	movs	r7, #0
 800771e:	4621      	mov	r1, r4
 8007720:	4658      	mov	r0, fp
 8007722:	f000 ff03 	bl	800852c <_Bfree>
 8007726:	2d00      	cmp	r5, #0
 8007728:	d0dc      	beq.n	80076e4 <_dtoa_r+0x65c>
 800772a:	b12f      	cbz	r7, 8007738 <_dtoa_r+0x6b0>
 800772c:	42af      	cmp	r7, r5
 800772e:	d003      	beq.n	8007738 <_dtoa_r+0x6b0>
 8007730:	4639      	mov	r1, r7
 8007732:	4658      	mov	r0, fp
 8007734:	f000 fefa 	bl	800852c <_Bfree>
 8007738:	4629      	mov	r1, r5
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fef6 	bl	800852c <_Bfree>
 8007740:	e7d0      	b.n	80076e4 <_dtoa_r+0x65c>
 8007742:	9704      	str	r7, [sp, #16]
 8007744:	4633      	mov	r3, r6
 8007746:	461e      	mov	r6, r3
 8007748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774c:	2a39      	cmp	r2, #57	@ 0x39
 800774e:	d107      	bne.n	8007760 <_dtoa_r+0x6d8>
 8007750:	459a      	cmp	sl, r3
 8007752:	d1f8      	bne.n	8007746 <_dtoa_r+0x6be>
 8007754:	9a04      	ldr	r2, [sp, #16]
 8007756:	3201      	adds	r2, #1
 8007758:	9204      	str	r2, [sp, #16]
 800775a:	2230      	movs	r2, #48	@ 0x30
 800775c:	f88a 2000 	strb.w	r2, [sl]
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	3201      	adds	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e7bd      	b.n	80076e4 <_dtoa_r+0x65c>
 8007768:	2200      	movs	r2, #0
 800776a:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <_dtoa_r+0x708>)
 800776c:	f7f8 feb4 	bl	80004d8 <__aeabi_dmul>
 8007770:	2200      	movs	r2, #0
 8007772:	2300      	movs	r3, #0
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	f7f9 f916 	bl	80009a8 <__aeabi_dcmpeq>
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f aebc 	beq.w	80074fa <_dtoa_r+0x472>
 8007782:	e6f1      	b.n	8007568 <_dtoa_r+0x4e0>
 8007784:	08009c80 	.word	0x08009c80
 8007788:	3fe00000 	.word	0x3fe00000
 800778c:	3ff00000 	.word	0x3ff00000
 8007790:	40240000 	.word	0x40240000
 8007794:	40140000 	.word	0x40140000
 8007798:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800779a:	2a00      	cmp	r2, #0
 800779c:	f000 80db 	beq.w	8007956 <_dtoa_r+0x8ce>
 80077a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077a2:	2a01      	cmp	r2, #1
 80077a4:	f300 80bf 	bgt.w	8007926 <_dtoa_r+0x89e>
 80077a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	f000 80b7 	beq.w	800791e <_dtoa_r+0x896>
 80077b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077b4:	4646      	mov	r6, r8
 80077b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80077b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077ba:	2101      	movs	r1, #1
 80077bc:	441a      	add	r2, r3
 80077be:	4658      	mov	r0, fp
 80077c0:	4498      	add	r8, r3
 80077c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80077c4:	f000 ffb0 	bl	8008728 <__i2b>
 80077c8:	4605      	mov	r5, r0
 80077ca:	b15e      	cbz	r6, 80077e4 <_dtoa_r+0x75c>
 80077cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	dd08      	ble.n	80077e4 <_dtoa_r+0x75c>
 80077d2:	42b3      	cmp	r3, r6
 80077d4:	bfa8      	it	ge
 80077d6:	4633      	movge	r3, r6
 80077d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077da:	eba8 0803 	sub.w	r8, r8, r3
 80077de:	1af6      	subs	r6, r6, r3
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e6:	b1f3      	cbz	r3, 8007826 <_dtoa_r+0x79e>
 80077e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f000 80b7 	beq.w	800795e <_dtoa_r+0x8d6>
 80077f0:	b18c      	cbz	r4, 8007816 <_dtoa_r+0x78e>
 80077f2:	4629      	mov	r1, r5
 80077f4:	4622      	mov	r2, r4
 80077f6:	4658      	mov	r0, fp
 80077f8:	f001 f854 	bl	80088a4 <__pow5mult>
 80077fc:	464a      	mov	r2, r9
 80077fe:	4601      	mov	r1, r0
 8007800:	4605      	mov	r5, r0
 8007802:	4658      	mov	r0, fp
 8007804:	f000 ffa6 	bl	8008754 <__multiply>
 8007808:	4649      	mov	r1, r9
 800780a:	9004      	str	r0, [sp, #16]
 800780c:	4658      	mov	r0, fp
 800780e:	f000 fe8d 	bl	800852c <_Bfree>
 8007812:	9b04      	ldr	r3, [sp, #16]
 8007814:	4699      	mov	r9, r3
 8007816:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007818:	1b1a      	subs	r2, r3, r4
 800781a:	d004      	beq.n	8007826 <_dtoa_r+0x79e>
 800781c:	4649      	mov	r1, r9
 800781e:	4658      	mov	r0, fp
 8007820:	f001 f840 	bl	80088a4 <__pow5mult>
 8007824:	4681      	mov	r9, r0
 8007826:	2101      	movs	r1, #1
 8007828:	4658      	mov	r0, fp
 800782a:	f000 ff7d 	bl	8008728 <__i2b>
 800782e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007830:	4604      	mov	r4, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 81c9 	beq.w	8007bca <_dtoa_r+0xb42>
 8007838:	461a      	mov	r2, r3
 800783a:	4601      	mov	r1, r0
 800783c:	4658      	mov	r0, fp
 800783e:	f001 f831 	bl	80088a4 <__pow5mult>
 8007842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007844:	4604      	mov	r4, r0
 8007846:	2b01      	cmp	r3, #1
 8007848:	f300 808f 	bgt.w	800796a <_dtoa_r+0x8e2>
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 8087 	bne.w	8007962 <_dtoa_r+0x8da>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800785a:	2b00      	cmp	r3, #0
 800785c:	f040 8083 	bne.w	8007966 <_dtoa_r+0x8de>
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007866:	0d1b      	lsrs	r3, r3, #20
 8007868:	051b      	lsls	r3, r3, #20
 800786a:	b12b      	cbz	r3, 8007878 <_dtoa_r+0x7f0>
 800786c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	3301      	adds	r3, #1
 8007874:	9309      	str	r3, [sp, #36]	@ 0x24
 8007876:	2301      	movs	r3, #1
 8007878:	930a      	str	r3, [sp, #40]	@ 0x28
 800787a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	f000 81aa 	beq.w	8007bd6 <_dtoa_r+0xb4e>
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007888:	6918      	ldr	r0, [r3, #16]
 800788a:	f000 ff01 	bl	8008690 <__hi0bits>
 800788e:	f1c0 0020 	rsb	r0, r0, #32
 8007892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007894:	4418      	add	r0, r3
 8007896:	f010 001f 	ands.w	r0, r0, #31
 800789a:	d071      	beq.n	8007980 <_dtoa_r+0x8f8>
 800789c:	f1c0 0320 	rsb	r3, r0, #32
 80078a0:	2b04      	cmp	r3, #4
 80078a2:	dd65      	ble.n	8007970 <_dtoa_r+0x8e8>
 80078a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a6:	f1c0 001c 	rsb	r0, r0, #28
 80078aa:	4403      	add	r3, r0
 80078ac:	4480      	add	r8, r0
 80078ae:	4406      	add	r6, r0
 80078b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b2:	f1b8 0f00 	cmp.w	r8, #0
 80078b6:	dd05      	ble.n	80078c4 <_dtoa_r+0x83c>
 80078b8:	4649      	mov	r1, r9
 80078ba:	4642      	mov	r2, r8
 80078bc:	4658      	mov	r0, fp
 80078be:	f001 f84b 	bl	8008958 <__lshift>
 80078c2:	4681      	mov	r9, r0
 80078c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	dd05      	ble.n	80078d6 <_dtoa_r+0x84e>
 80078ca:	4621      	mov	r1, r4
 80078cc:	461a      	mov	r2, r3
 80078ce:	4658      	mov	r0, fp
 80078d0:	f001 f842 	bl	8008958 <__lshift>
 80078d4:	4604      	mov	r4, r0
 80078d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d053      	beq.n	8007984 <_dtoa_r+0x8fc>
 80078dc:	4621      	mov	r1, r4
 80078de:	4648      	mov	r0, r9
 80078e0:	f001 f8a6 	bl	8008a30 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	da4d      	bge.n	8007984 <_dtoa_r+0x8fc>
 80078e8:	1e7b      	subs	r3, r7, #1
 80078ea:	4649      	mov	r1, r9
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	220a      	movs	r2, #10
 80078f0:	2300      	movs	r3, #0
 80078f2:	4658      	mov	r0, fp
 80078f4:	f000 fe3c 	bl	8008570 <__multadd>
 80078f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078fa:	4681      	mov	r9, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 816c 	beq.w	8007bda <_dtoa_r+0xb52>
 8007902:	2300      	movs	r3, #0
 8007904:	4629      	mov	r1, r5
 8007906:	220a      	movs	r2, #10
 8007908:	4658      	mov	r0, fp
 800790a:	f000 fe31 	bl	8008570 <__multadd>
 800790e:	9b08      	ldr	r3, [sp, #32]
 8007910:	4605      	mov	r5, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	dc61      	bgt.n	80079da <_dtoa_r+0x952>
 8007916:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007918:	2b02      	cmp	r3, #2
 800791a:	dc3b      	bgt.n	8007994 <_dtoa_r+0x90c>
 800791c:	e05d      	b.n	80079da <_dtoa_r+0x952>
 800791e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007920:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007924:	e746      	b.n	80077b4 <_dtoa_r+0x72c>
 8007926:	9b07      	ldr	r3, [sp, #28]
 8007928:	1e5c      	subs	r4, r3, #1
 800792a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800792c:	42a3      	cmp	r3, r4
 800792e:	bfbf      	itttt	lt
 8007930:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007932:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007934:	1ae3      	sublt	r3, r4, r3
 8007936:	18d2      	addlt	r2, r2, r3
 8007938:	bfa8      	it	ge
 800793a:	1b1c      	subge	r4, r3, r4
 800793c:	9b07      	ldr	r3, [sp, #28]
 800793e:	bfbe      	ittt	lt
 8007940:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007942:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007944:	2400      	movlt	r4, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfb5      	itete	lt
 800794a:	eba8 0603 	sublt.w	r6, r8, r3
 800794e:	4646      	movge	r6, r8
 8007950:	2300      	movlt	r3, #0
 8007952:	9b07      	ldrge	r3, [sp, #28]
 8007954:	e730      	b.n	80077b8 <_dtoa_r+0x730>
 8007956:	4646      	mov	r6, r8
 8007958:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800795a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800795c:	e735      	b.n	80077ca <_dtoa_r+0x742>
 800795e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007960:	e75c      	b.n	800781c <_dtoa_r+0x794>
 8007962:	2300      	movs	r3, #0
 8007964:	e788      	b.n	8007878 <_dtoa_r+0x7f0>
 8007966:	9b02      	ldr	r3, [sp, #8]
 8007968:	e786      	b.n	8007878 <_dtoa_r+0x7f0>
 800796a:	2300      	movs	r3, #0
 800796c:	930a      	str	r3, [sp, #40]	@ 0x28
 800796e:	e788      	b.n	8007882 <_dtoa_r+0x7fa>
 8007970:	d09f      	beq.n	80078b2 <_dtoa_r+0x82a>
 8007972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007974:	331c      	adds	r3, #28
 8007976:	441a      	add	r2, r3
 8007978:	4498      	add	r8, r3
 800797a:	441e      	add	r6, r3
 800797c:	9209      	str	r2, [sp, #36]	@ 0x24
 800797e:	e798      	b.n	80078b2 <_dtoa_r+0x82a>
 8007980:	4603      	mov	r3, r0
 8007982:	e7f6      	b.n	8007972 <_dtoa_r+0x8ea>
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	9704      	str	r7, [sp, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	dc20      	bgt.n	80079ce <_dtoa_r+0x946>
 800798c:	9308      	str	r3, [sp, #32]
 800798e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007990:	2b02      	cmp	r3, #2
 8007992:	dd1e      	ble.n	80079d2 <_dtoa_r+0x94a>
 8007994:	9b08      	ldr	r3, [sp, #32]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f47f aebc 	bne.w	8007714 <_dtoa_r+0x68c>
 800799c:	4621      	mov	r1, r4
 800799e:	2205      	movs	r2, #5
 80079a0:	4658      	mov	r0, fp
 80079a2:	f000 fde5 	bl	8008570 <__multadd>
 80079a6:	4601      	mov	r1, r0
 80079a8:	4604      	mov	r4, r0
 80079aa:	4648      	mov	r0, r9
 80079ac:	f001 f840 	bl	8008a30 <__mcmp>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f77f aeaf 	ble.w	8007714 <_dtoa_r+0x68c>
 80079b6:	2331      	movs	r3, #49	@ 0x31
 80079b8:	4656      	mov	r6, sl
 80079ba:	f806 3b01 	strb.w	r3, [r6], #1
 80079be:	9b04      	ldr	r3, [sp, #16]
 80079c0:	3301      	adds	r3, #1
 80079c2:	9304      	str	r3, [sp, #16]
 80079c4:	e6aa      	b.n	800771c <_dtoa_r+0x694>
 80079c6:	9c07      	ldr	r4, [sp, #28]
 80079c8:	9704      	str	r7, [sp, #16]
 80079ca:	4625      	mov	r5, r4
 80079cc:	e7f3      	b.n	80079b6 <_dtoa_r+0x92e>
 80079ce:	9b07      	ldr	r3, [sp, #28]
 80079d0:	9308      	str	r3, [sp, #32]
 80079d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8104 	beq.w	8007be2 <_dtoa_r+0xb5a>
 80079da:	2e00      	cmp	r6, #0
 80079dc:	dd05      	ble.n	80079ea <_dtoa_r+0x962>
 80079de:	4629      	mov	r1, r5
 80079e0:	4632      	mov	r2, r6
 80079e2:	4658      	mov	r0, fp
 80079e4:	f000 ffb8 	bl	8008958 <__lshift>
 80079e8:	4605      	mov	r5, r0
 80079ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d05a      	beq.n	8007aa6 <_dtoa_r+0xa1e>
 80079f0:	4658      	mov	r0, fp
 80079f2:	6869      	ldr	r1, [r5, #4]
 80079f4:	f000 fd5a 	bl	80084ac <_Balloc>
 80079f8:	4606      	mov	r6, r0
 80079fa:	b928      	cbnz	r0, 8007a08 <_dtoa_r+0x980>
 80079fc:	4602      	mov	r2, r0
 80079fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a02:	4b83      	ldr	r3, [pc, #524]	@ (8007c10 <_dtoa_r+0xb88>)
 8007a04:	f7ff bb54 	b.w	80070b0 <_dtoa_r+0x28>
 8007a08:	692a      	ldr	r2, [r5, #16]
 8007a0a:	f105 010c 	add.w	r1, r5, #12
 8007a0e:	3202      	adds	r2, #2
 8007a10:	0092      	lsls	r2, r2, #2
 8007a12:	300c      	adds	r0, #12
 8007a14:	f7ff fa99 	bl	8006f4a <memcpy>
 8007a18:	2201      	movs	r2, #1
 8007a1a:	4631      	mov	r1, r6
 8007a1c:	4658      	mov	r0, fp
 8007a1e:	f000 ff9b 	bl	8008958 <__lshift>
 8007a22:	462f      	mov	r7, r5
 8007a24:	4605      	mov	r5, r0
 8007a26:	f10a 0301 	add.w	r3, sl, #1
 8007a2a:	9307      	str	r3, [sp, #28]
 8007a2c:	9b08      	ldr	r3, [sp, #32]
 8007a2e:	4453      	add	r3, sl
 8007a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a32:	9b02      	ldr	r3, [sp, #8]
 8007a34:	f003 0301 	and.w	r3, r3, #1
 8007a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	4648      	mov	r0, r9
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	f7ff fa96 	bl	8006f74 <quorem>
 8007a48:	4639      	mov	r1, r7
 8007a4a:	9008      	str	r0, [sp, #32]
 8007a4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a50:	4648      	mov	r0, r9
 8007a52:	f000 ffed 	bl	8008a30 <__mcmp>
 8007a56:	462a      	mov	r2, r5
 8007a58:	9009      	str	r0, [sp, #36]	@ 0x24
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4658      	mov	r0, fp
 8007a5e:	f001 f803 	bl	8008a68 <__mdiff>
 8007a62:	68c2      	ldr	r2, [r0, #12]
 8007a64:	4606      	mov	r6, r0
 8007a66:	bb02      	cbnz	r2, 8007aaa <_dtoa_r+0xa22>
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4648      	mov	r0, r9
 8007a6c:	f000 ffe0 	bl	8008a30 <__mcmp>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4631      	mov	r1, r6
 8007a74:	4658      	mov	r0, fp
 8007a76:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a78:	f000 fd58 	bl	800852c <_Bfree>
 8007a7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a80:	9e07      	ldr	r6, [sp, #28]
 8007a82:	ea43 0102 	orr.w	r1, r3, r2
 8007a86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a88:	4319      	orrs	r1, r3
 8007a8a:	d110      	bne.n	8007aae <_dtoa_r+0xa26>
 8007a8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a90:	d029      	beq.n	8007ae6 <_dtoa_r+0xa5e>
 8007a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd02      	ble.n	8007a9e <_dtoa_r+0xa16>
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	f883 8000 	strb.w	r8, [r3]
 8007aa4:	e63b      	b.n	800771e <_dtoa_r+0x696>
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	e7bb      	b.n	8007a22 <_dtoa_r+0x99a>
 8007aaa:	2201      	movs	r2, #1
 8007aac:	e7e1      	b.n	8007a72 <_dtoa_r+0x9ea>
 8007aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	db04      	blt.n	8007abe <_dtoa_r+0xa36>
 8007ab4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aba:	430b      	orrs	r3, r1
 8007abc:	d120      	bne.n	8007b00 <_dtoa_r+0xa78>
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	dded      	ble.n	8007a9e <_dtoa_r+0xa16>
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	f000 ff46 	bl	8008958 <__lshift>
 8007acc:	4621      	mov	r1, r4
 8007ace:	4681      	mov	r9, r0
 8007ad0:	f000 ffae 	bl	8008a30 <__mcmp>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	dc03      	bgt.n	8007ae0 <_dtoa_r+0xa58>
 8007ad8:	d1e1      	bne.n	8007a9e <_dtoa_r+0xa16>
 8007ada:	f018 0f01 	tst.w	r8, #1
 8007ade:	d0de      	beq.n	8007a9e <_dtoa_r+0xa16>
 8007ae0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ae4:	d1d8      	bne.n	8007a98 <_dtoa_r+0xa10>
 8007ae6:	2339      	movs	r3, #57	@ 0x39
 8007ae8:	9a02      	ldr	r2, [sp, #8]
 8007aea:	7013      	strb	r3, [r2, #0]
 8007aec:	4633      	mov	r3, r6
 8007aee:	461e      	mov	r6, r3
 8007af0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	2a39      	cmp	r2, #57	@ 0x39
 8007af8:	d052      	beq.n	8007ba0 <_dtoa_r+0xb18>
 8007afa:	3201      	adds	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	e60e      	b.n	800771e <_dtoa_r+0x696>
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	dd07      	ble.n	8007b14 <_dtoa_r+0xa8c>
 8007b04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b08:	d0ed      	beq.n	8007ae6 <_dtoa_r+0xa5e>
 8007b0a:	9a02      	ldr	r2, [sp, #8]
 8007b0c:	f108 0301 	add.w	r3, r8, #1
 8007b10:	7013      	strb	r3, [r2, #0]
 8007b12:	e604      	b.n	800771e <_dtoa_r+0x696>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	9a07      	ldr	r2, [sp, #28]
 8007b18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d028      	beq.n	8007b74 <_dtoa_r+0xaec>
 8007b22:	4649      	mov	r1, r9
 8007b24:	2300      	movs	r3, #0
 8007b26:	220a      	movs	r2, #10
 8007b28:	4658      	mov	r0, fp
 8007b2a:	f000 fd21 	bl	8008570 <__multadd>
 8007b2e:	42af      	cmp	r7, r5
 8007b30:	4681      	mov	r9, r0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	f04f 020a 	mov.w	r2, #10
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	d107      	bne.n	8007b50 <_dtoa_r+0xac8>
 8007b40:	f000 fd16 	bl	8008570 <__multadd>
 8007b44:	4607      	mov	r7, r0
 8007b46:	4605      	mov	r5, r0
 8007b48:	9b07      	ldr	r3, [sp, #28]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	e774      	b.n	8007a3a <_dtoa_r+0x9b2>
 8007b50:	f000 fd0e 	bl	8008570 <__multadd>
 8007b54:	4629      	mov	r1, r5
 8007b56:	4607      	mov	r7, r0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	220a      	movs	r2, #10
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fd07 	bl	8008570 <__multadd>
 8007b62:	4605      	mov	r5, r0
 8007b64:	e7f0      	b.n	8007b48 <_dtoa_r+0xac0>
 8007b66:	9b08      	ldr	r3, [sp, #32]
 8007b68:	2700      	movs	r7, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bfcc      	ite	gt
 8007b6e:	461e      	movgt	r6, r3
 8007b70:	2601      	movle	r6, #1
 8007b72:	4456      	add	r6, sl
 8007b74:	4649      	mov	r1, r9
 8007b76:	2201      	movs	r2, #1
 8007b78:	4658      	mov	r0, fp
 8007b7a:	f000 feed 	bl	8008958 <__lshift>
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4681      	mov	r9, r0
 8007b82:	f000 ff55 	bl	8008a30 <__mcmp>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	dcb0      	bgt.n	8007aec <_dtoa_r+0xa64>
 8007b8a:	d102      	bne.n	8007b92 <_dtoa_r+0xb0a>
 8007b8c:	f018 0f01 	tst.w	r8, #1
 8007b90:	d1ac      	bne.n	8007aec <_dtoa_r+0xa64>
 8007b92:	4633      	mov	r3, r6
 8007b94:	461e      	mov	r6, r3
 8007b96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b9a:	2a30      	cmp	r2, #48	@ 0x30
 8007b9c:	d0fa      	beq.n	8007b94 <_dtoa_r+0xb0c>
 8007b9e:	e5be      	b.n	800771e <_dtoa_r+0x696>
 8007ba0:	459a      	cmp	sl, r3
 8007ba2:	d1a4      	bne.n	8007aee <_dtoa_r+0xa66>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	9304      	str	r3, [sp, #16]
 8007baa:	2331      	movs	r3, #49	@ 0x31
 8007bac:	f88a 3000 	strb.w	r3, [sl]
 8007bb0:	e5b5      	b.n	800771e <_dtoa_r+0x696>
 8007bb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c14 <_dtoa_r+0xb8c>
 8007bb8:	b11b      	cbz	r3, 8007bc2 <_dtoa_r+0xb3a>
 8007bba:	f10a 0308 	add.w	r3, sl, #8
 8007bbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bc0:	6013      	str	r3, [r2, #0]
 8007bc2:	4650      	mov	r0, sl
 8007bc4:	b017      	add	sp, #92	@ 0x5c
 8007bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	f77f ae3d 	ble.w	800784c <_dtoa_r+0x7c4>
 8007bd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	e65b      	b.n	8007892 <_dtoa_r+0x80a>
 8007bda:	9b08      	ldr	r3, [sp, #32]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f77f aed6 	ble.w	800798e <_dtoa_r+0x906>
 8007be2:	4656      	mov	r6, sl
 8007be4:	4621      	mov	r1, r4
 8007be6:	4648      	mov	r0, r9
 8007be8:	f7ff f9c4 	bl	8006f74 <quorem>
 8007bec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007bf0:	9b08      	ldr	r3, [sp, #32]
 8007bf2:	f806 8b01 	strb.w	r8, [r6], #1
 8007bf6:	eba6 020a 	sub.w	r2, r6, sl
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	ddb3      	ble.n	8007b66 <_dtoa_r+0xade>
 8007bfe:	4649      	mov	r1, r9
 8007c00:	2300      	movs	r3, #0
 8007c02:	220a      	movs	r2, #10
 8007c04:	4658      	mov	r0, fp
 8007c06:	f000 fcb3 	bl	8008570 <__multadd>
 8007c0a:	4681      	mov	r9, r0
 8007c0c:	e7ea      	b.n	8007be4 <_dtoa_r+0xb5c>
 8007c0e:	bf00      	nop
 8007c10:	08009b80 	.word	0x08009b80
 8007c14:	08009b04 	.word	0x08009b04

08007c18 <_free_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	2900      	cmp	r1, #0
 8007c1e:	d040      	beq.n	8007ca2 <_free_r+0x8a>
 8007c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c24:	1f0c      	subs	r4, r1, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	bfb8      	it	lt
 8007c2a:	18e4      	addlt	r4, r4, r3
 8007c2c:	f000 fc32 	bl	8008494 <__malloc_lock>
 8007c30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca4 <_free_r+0x8c>)
 8007c32:	6813      	ldr	r3, [r2, #0]
 8007c34:	b933      	cbnz	r3, 8007c44 <_free_r+0x2c>
 8007c36:	6063      	str	r3, [r4, #4]
 8007c38:	6014      	str	r4, [r2, #0]
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c40:	f000 bc2e 	b.w	80084a0 <__malloc_unlock>
 8007c44:	42a3      	cmp	r3, r4
 8007c46:	d908      	bls.n	8007c5a <_free_r+0x42>
 8007c48:	6820      	ldr	r0, [r4, #0]
 8007c4a:	1821      	adds	r1, r4, r0
 8007c4c:	428b      	cmp	r3, r1
 8007c4e:	bf01      	itttt	eq
 8007c50:	6819      	ldreq	r1, [r3, #0]
 8007c52:	685b      	ldreq	r3, [r3, #4]
 8007c54:	1809      	addeq	r1, r1, r0
 8007c56:	6021      	streq	r1, [r4, #0]
 8007c58:	e7ed      	b.n	8007c36 <_free_r+0x1e>
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	b10b      	cbz	r3, 8007c64 <_free_r+0x4c>
 8007c60:	42a3      	cmp	r3, r4
 8007c62:	d9fa      	bls.n	8007c5a <_free_r+0x42>
 8007c64:	6811      	ldr	r1, [r2, #0]
 8007c66:	1850      	adds	r0, r2, r1
 8007c68:	42a0      	cmp	r0, r4
 8007c6a:	d10b      	bne.n	8007c84 <_free_r+0x6c>
 8007c6c:	6820      	ldr	r0, [r4, #0]
 8007c6e:	4401      	add	r1, r0
 8007c70:	1850      	adds	r0, r2, r1
 8007c72:	4283      	cmp	r3, r0
 8007c74:	6011      	str	r1, [r2, #0]
 8007c76:	d1e0      	bne.n	8007c3a <_free_r+0x22>
 8007c78:	6818      	ldr	r0, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4408      	add	r0, r1
 8007c7e:	6010      	str	r0, [r2, #0]
 8007c80:	6053      	str	r3, [r2, #4]
 8007c82:	e7da      	b.n	8007c3a <_free_r+0x22>
 8007c84:	d902      	bls.n	8007c8c <_free_r+0x74>
 8007c86:	230c      	movs	r3, #12
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	e7d6      	b.n	8007c3a <_free_r+0x22>
 8007c8c:	6820      	ldr	r0, [r4, #0]
 8007c8e:	1821      	adds	r1, r4, r0
 8007c90:	428b      	cmp	r3, r1
 8007c92:	bf01      	itttt	eq
 8007c94:	6819      	ldreq	r1, [r3, #0]
 8007c96:	685b      	ldreq	r3, [r3, #4]
 8007c98:	1809      	addeq	r1, r1, r0
 8007c9a:	6021      	streq	r1, [r4, #0]
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	6054      	str	r4, [r2, #4]
 8007ca0:	e7cb      	b.n	8007c3a <_free_r+0x22>
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	2000049c 	.word	0x2000049c

08007ca8 <rshift>:
 8007ca8:	6903      	ldr	r3, [r0, #16]
 8007caa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cb2:	f100 0414 	add.w	r4, r0, #20
 8007cb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007cba:	dd46      	ble.n	8007d4a <rshift+0xa2>
 8007cbc:	f011 011f 	ands.w	r1, r1, #31
 8007cc0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cc4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cc8:	d10c      	bne.n	8007ce4 <rshift+0x3c>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f100 0710 	add.w	r7, r0, #16
 8007cd0:	42b1      	cmp	r1, r6
 8007cd2:	d335      	bcc.n	8007d40 <rshift+0x98>
 8007cd4:	1a9b      	subs	r3, r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	1eea      	subs	r2, r5, #3
 8007cda:	4296      	cmp	r6, r2
 8007cdc:	bf38      	it	cc
 8007cde:	2300      	movcc	r3, #0
 8007ce0:	4423      	add	r3, r4
 8007ce2:	e015      	b.n	8007d10 <rshift+0x68>
 8007ce4:	46a1      	mov	r9, r4
 8007ce6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007cea:	f1c1 0820 	rsb	r8, r1, #32
 8007cee:	40cf      	lsrs	r7, r1
 8007cf0:	f105 0e04 	add.w	lr, r5, #4
 8007cf4:	4576      	cmp	r6, lr
 8007cf6:	46f4      	mov	ip, lr
 8007cf8:	d816      	bhi.n	8007d28 <rshift+0x80>
 8007cfa:	1a9a      	subs	r2, r3, r2
 8007cfc:	0092      	lsls	r2, r2, #2
 8007cfe:	3a04      	subs	r2, #4
 8007d00:	3501      	adds	r5, #1
 8007d02:	42ae      	cmp	r6, r5
 8007d04:	bf38      	it	cc
 8007d06:	2200      	movcc	r2, #0
 8007d08:	18a3      	adds	r3, r4, r2
 8007d0a:	50a7      	str	r7, [r4, r2]
 8007d0c:	b107      	cbz	r7, 8007d10 <rshift+0x68>
 8007d0e:	3304      	adds	r3, #4
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	eba3 0204 	sub.w	r2, r3, r4
 8007d16:	bf08      	it	eq
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d1e:	6102      	str	r2, [r0, #16]
 8007d20:	bf08      	it	eq
 8007d22:	6143      	streq	r3, [r0, #20]
 8007d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d28:	f8dc c000 	ldr.w	ip, [ip]
 8007d2c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d30:	ea4c 0707 	orr.w	r7, ip, r7
 8007d34:	f849 7b04 	str.w	r7, [r9], #4
 8007d38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d3c:	40cf      	lsrs	r7, r1
 8007d3e:	e7d9      	b.n	8007cf4 <rshift+0x4c>
 8007d40:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d44:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d48:	e7c2      	b.n	8007cd0 <rshift+0x28>
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	e7e0      	b.n	8007d10 <rshift+0x68>

08007d4e <__hexdig_fun>:
 8007d4e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d802      	bhi.n	8007d5c <__hexdig_fun+0xe>
 8007d56:	3820      	subs	r0, #32
 8007d58:	b2c0      	uxtb	r0, r0
 8007d5a:	4770      	bx	lr
 8007d5c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007d60:	2b05      	cmp	r3, #5
 8007d62:	d801      	bhi.n	8007d68 <__hexdig_fun+0x1a>
 8007d64:	3847      	subs	r0, #71	@ 0x47
 8007d66:	e7f7      	b.n	8007d58 <__hexdig_fun+0xa>
 8007d68:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007d6c:	2b05      	cmp	r3, #5
 8007d6e:	d801      	bhi.n	8007d74 <__hexdig_fun+0x26>
 8007d70:	3827      	subs	r0, #39	@ 0x27
 8007d72:	e7f1      	b.n	8007d58 <__hexdig_fun+0xa>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4770      	bx	lr

08007d78 <__gethex>:
 8007d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	468a      	mov	sl, r1
 8007d7e:	4690      	mov	r8, r2
 8007d80:	b085      	sub	sp, #20
 8007d82:	9302      	str	r3, [sp, #8]
 8007d84:	680b      	ldr	r3, [r1, #0]
 8007d86:	9001      	str	r0, [sp, #4]
 8007d88:	1c9c      	adds	r4, r3, #2
 8007d8a:	46a1      	mov	r9, r4
 8007d8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007d90:	2830      	cmp	r0, #48	@ 0x30
 8007d92:	d0fa      	beq.n	8007d8a <__gethex+0x12>
 8007d94:	eba9 0303 	sub.w	r3, r9, r3
 8007d98:	f1a3 0b02 	sub.w	fp, r3, #2
 8007d9c:	f7ff ffd7 	bl	8007d4e <__hexdig_fun>
 8007da0:	4605      	mov	r5, r0
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d168      	bne.n	8007e78 <__gethex+0x100>
 8007da6:	2201      	movs	r2, #1
 8007da8:	4648      	mov	r0, r9
 8007daa:	499f      	ldr	r1, [pc, #636]	@ (8008028 <__gethex+0x2b0>)
 8007dac:	f7ff f835 	bl	8006e1a <strncmp>
 8007db0:	4607      	mov	r7, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d167      	bne.n	8007e86 <__gethex+0x10e>
 8007db6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007dba:	4626      	mov	r6, r4
 8007dbc:	f7ff ffc7 	bl	8007d4e <__hexdig_fun>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d062      	beq.n	8007e8a <__gethex+0x112>
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	7818      	ldrb	r0, [r3, #0]
 8007dc8:	4699      	mov	r9, r3
 8007dca:	2830      	cmp	r0, #48	@ 0x30
 8007dcc:	f103 0301 	add.w	r3, r3, #1
 8007dd0:	d0f9      	beq.n	8007dc6 <__gethex+0x4e>
 8007dd2:	f7ff ffbc 	bl	8007d4e <__hexdig_fun>
 8007dd6:	fab0 f580 	clz	r5, r0
 8007dda:	f04f 0b01 	mov.w	fp, #1
 8007dde:	096d      	lsrs	r5, r5, #5
 8007de0:	464a      	mov	r2, r9
 8007de2:	4616      	mov	r6, r2
 8007de4:	7830      	ldrb	r0, [r6, #0]
 8007de6:	3201      	adds	r2, #1
 8007de8:	f7ff ffb1 	bl	8007d4e <__hexdig_fun>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d1f8      	bne.n	8007de2 <__gethex+0x6a>
 8007df0:	2201      	movs	r2, #1
 8007df2:	4630      	mov	r0, r6
 8007df4:	498c      	ldr	r1, [pc, #560]	@ (8008028 <__gethex+0x2b0>)
 8007df6:	f7ff f810 	bl	8006e1a <strncmp>
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d13f      	bne.n	8007e7e <__gethex+0x106>
 8007dfe:	b944      	cbnz	r4, 8007e12 <__gethex+0x9a>
 8007e00:	1c74      	adds	r4, r6, #1
 8007e02:	4622      	mov	r2, r4
 8007e04:	4616      	mov	r6, r2
 8007e06:	7830      	ldrb	r0, [r6, #0]
 8007e08:	3201      	adds	r2, #1
 8007e0a:	f7ff ffa0 	bl	8007d4e <__hexdig_fun>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d1f8      	bne.n	8007e04 <__gethex+0x8c>
 8007e12:	1ba4      	subs	r4, r4, r6
 8007e14:	00a7      	lsls	r7, r4, #2
 8007e16:	7833      	ldrb	r3, [r6, #0]
 8007e18:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007e1c:	2b50      	cmp	r3, #80	@ 0x50
 8007e1e:	d13e      	bne.n	8007e9e <__gethex+0x126>
 8007e20:	7873      	ldrb	r3, [r6, #1]
 8007e22:	2b2b      	cmp	r3, #43	@ 0x2b
 8007e24:	d033      	beq.n	8007e8e <__gethex+0x116>
 8007e26:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e28:	d034      	beq.n	8007e94 <__gethex+0x11c>
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	1c71      	adds	r1, r6, #1
 8007e2e:	7808      	ldrb	r0, [r1, #0]
 8007e30:	f7ff ff8d 	bl	8007d4e <__hexdig_fun>
 8007e34:	1e43      	subs	r3, r0, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b18      	cmp	r3, #24
 8007e3a:	d830      	bhi.n	8007e9e <__gethex+0x126>
 8007e3c:	f1a0 0210 	sub.w	r2, r0, #16
 8007e40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e44:	f7ff ff83 	bl	8007d4e <__hexdig_fun>
 8007e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8007e4c:	fa5f fc8c 	uxtb.w	ip, ip
 8007e50:	f1bc 0f18 	cmp.w	ip, #24
 8007e54:	f04f 030a 	mov.w	r3, #10
 8007e58:	d91e      	bls.n	8007e98 <__gethex+0x120>
 8007e5a:	b104      	cbz	r4, 8007e5e <__gethex+0xe6>
 8007e5c:	4252      	negs	r2, r2
 8007e5e:	4417      	add	r7, r2
 8007e60:	f8ca 1000 	str.w	r1, [sl]
 8007e64:	b1ed      	cbz	r5, 8007ea2 <__gethex+0x12a>
 8007e66:	f1bb 0f00 	cmp.w	fp, #0
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2506      	moveq	r5, #6
 8007e6e:	2500      	movne	r5, #0
 8007e70:	4628      	mov	r0, r5
 8007e72:	b005      	add	sp, #20
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e78:	2500      	movs	r5, #0
 8007e7a:	462c      	mov	r4, r5
 8007e7c:	e7b0      	b.n	8007de0 <__gethex+0x68>
 8007e7e:	2c00      	cmp	r4, #0
 8007e80:	d1c7      	bne.n	8007e12 <__gethex+0x9a>
 8007e82:	4627      	mov	r7, r4
 8007e84:	e7c7      	b.n	8007e16 <__gethex+0x9e>
 8007e86:	464e      	mov	r6, r9
 8007e88:	462f      	mov	r7, r5
 8007e8a:	2501      	movs	r5, #1
 8007e8c:	e7c3      	b.n	8007e16 <__gethex+0x9e>
 8007e8e:	2400      	movs	r4, #0
 8007e90:	1cb1      	adds	r1, r6, #2
 8007e92:	e7cc      	b.n	8007e2e <__gethex+0xb6>
 8007e94:	2401      	movs	r4, #1
 8007e96:	e7fb      	b.n	8007e90 <__gethex+0x118>
 8007e98:	fb03 0002 	mla	r0, r3, r2, r0
 8007e9c:	e7ce      	b.n	8007e3c <__gethex+0xc4>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	e7de      	b.n	8007e60 <__gethex+0xe8>
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	eba6 0309 	sub.w	r3, r6, r9
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	2b07      	cmp	r3, #7
 8007eac:	dc0a      	bgt.n	8007ec4 <__gethex+0x14c>
 8007eae:	9801      	ldr	r0, [sp, #4]
 8007eb0:	f000 fafc 	bl	80084ac <_Balloc>
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	b940      	cbnz	r0, 8007eca <__gethex+0x152>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	21e4      	movs	r1, #228	@ 0xe4
 8007ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800802c <__gethex+0x2b4>)
 8007ebe:	485c      	ldr	r0, [pc, #368]	@ (8008030 <__gethex+0x2b8>)
 8007ec0:	f001 f9d0 	bl	8009264 <__assert_func>
 8007ec4:	3101      	adds	r1, #1
 8007ec6:	105b      	asrs	r3, r3, #1
 8007ec8:	e7ef      	b.n	8007eaa <__gethex+0x132>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f100 0a14 	add.w	sl, r0, #20
 8007ed0:	4655      	mov	r5, sl
 8007ed2:	469b      	mov	fp, r3
 8007ed4:	45b1      	cmp	r9, r6
 8007ed6:	d337      	bcc.n	8007f48 <__gethex+0x1d0>
 8007ed8:	f845 bb04 	str.w	fp, [r5], #4
 8007edc:	eba5 050a 	sub.w	r5, r5, sl
 8007ee0:	10ad      	asrs	r5, r5, #2
 8007ee2:	6125      	str	r5, [r4, #16]
 8007ee4:	4658      	mov	r0, fp
 8007ee6:	f000 fbd3 	bl	8008690 <__hi0bits>
 8007eea:	016d      	lsls	r5, r5, #5
 8007eec:	f8d8 6000 	ldr.w	r6, [r8]
 8007ef0:	1a2d      	subs	r5, r5, r0
 8007ef2:	42b5      	cmp	r5, r6
 8007ef4:	dd54      	ble.n	8007fa0 <__gethex+0x228>
 8007ef6:	1bad      	subs	r5, r5, r6
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4620      	mov	r0, r4
 8007efc:	f000 ff5b 	bl	8008db6 <__any_on>
 8007f00:	4681      	mov	r9, r0
 8007f02:	b178      	cbz	r0, 8007f24 <__gethex+0x1ac>
 8007f04:	f04f 0901 	mov.w	r9, #1
 8007f08:	1e6b      	subs	r3, r5, #1
 8007f0a:	1159      	asrs	r1, r3, #5
 8007f0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f10:	f003 021f 	and.w	r2, r3, #31
 8007f14:	fa09 f202 	lsl.w	r2, r9, r2
 8007f18:	420a      	tst	r2, r1
 8007f1a:	d003      	beq.n	8007f24 <__gethex+0x1ac>
 8007f1c:	454b      	cmp	r3, r9
 8007f1e:	dc36      	bgt.n	8007f8e <__gethex+0x216>
 8007f20:	f04f 0902 	mov.w	r9, #2
 8007f24:	4629      	mov	r1, r5
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff febe 	bl	8007ca8 <rshift>
 8007f2c:	442f      	add	r7, r5
 8007f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f32:	42bb      	cmp	r3, r7
 8007f34:	da42      	bge.n	8007fbc <__gethex+0x244>
 8007f36:	4621      	mov	r1, r4
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	f000 faf7 	bl	800852c <_Bfree>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f42:	25a3      	movs	r5, #163	@ 0xa3
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	e793      	b.n	8007e70 <__gethex+0xf8>
 8007f48:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007f4c:	2a2e      	cmp	r2, #46	@ 0x2e
 8007f4e:	d012      	beq.n	8007f76 <__gethex+0x1fe>
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d104      	bne.n	8007f5e <__gethex+0x1e6>
 8007f54:	f845 bb04 	str.w	fp, [r5], #4
 8007f58:	f04f 0b00 	mov.w	fp, #0
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	7830      	ldrb	r0, [r6, #0]
 8007f60:	9303      	str	r3, [sp, #12]
 8007f62:	f7ff fef4 	bl	8007d4e <__hexdig_fun>
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	f000 000f 	and.w	r0, r0, #15
 8007f6c:	4098      	lsls	r0, r3
 8007f6e:	ea4b 0b00 	orr.w	fp, fp, r0
 8007f72:	3304      	adds	r3, #4
 8007f74:	e7ae      	b.n	8007ed4 <__gethex+0x15c>
 8007f76:	45b1      	cmp	r9, r6
 8007f78:	d8ea      	bhi.n	8007f50 <__gethex+0x1d8>
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	492a      	ldr	r1, [pc, #168]	@ (8008028 <__gethex+0x2b0>)
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	f7fe ff4a 	bl	8006e1a <strncmp>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d1e1      	bne.n	8007f50 <__gethex+0x1d8>
 8007f8c:	e7a2      	b.n	8007ed4 <__gethex+0x15c>
 8007f8e:	4620      	mov	r0, r4
 8007f90:	1ea9      	subs	r1, r5, #2
 8007f92:	f000 ff10 	bl	8008db6 <__any_on>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d0c2      	beq.n	8007f20 <__gethex+0x1a8>
 8007f9a:	f04f 0903 	mov.w	r9, #3
 8007f9e:	e7c1      	b.n	8007f24 <__gethex+0x1ac>
 8007fa0:	da09      	bge.n	8007fb6 <__gethex+0x23e>
 8007fa2:	1b75      	subs	r5, r6, r5
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	9801      	ldr	r0, [sp, #4]
 8007faa:	f000 fcd5 	bl	8008958 <__lshift>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	1b7f      	subs	r7, r7, r5
 8007fb2:	f100 0a14 	add.w	sl, r0, #20
 8007fb6:	f04f 0900 	mov.w	r9, #0
 8007fba:	e7b8      	b.n	8007f2e <__gethex+0x1b6>
 8007fbc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007fc0:	42bd      	cmp	r5, r7
 8007fc2:	dd6f      	ble.n	80080a4 <__gethex+0x32c>
 8007fc4:	1bed      	subs	r5, r5, r7
 8007fc6:	42ae      	cmp	r6, r5
 8007fc8:	dc34      	bgt.n	8008034 <__gethex+0x2bc>
 8007fca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d022      	beq.n	8008018 <__gethex+0x2a0>
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d024      	beq.n	8008020 <__gethex+0x2a8>
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d115      	bne.n	8008006 <__gethex+0x28e>
 8007fda:	42ae      	cmp	r6, r5
 8007fdc:	d113      	bne.n	8008006 <__gethex+0x28e>
 8007fde:	2e01      	cmp	r6, #1
 8007fe0:	d10b      	bne.n	8007ffa <__gethex+0x282>
 8007fe2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007fe6:	9a02      	ldr	r2, [sp, #8]
 8007fe8:	2562      	movs	r5, #98	@ 0x62
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	2301      	movs	r3, #1
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	f8ca 3000 	str.w	r3, [sl]
 8007ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ff6:	601c      	str	r4, [r3, #0]
 8007ff8:	e73a      	b.n	8007e70 <__gethex+0xf8>
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	1e71      	subs	r1, r6, #1
 8007ffe:	f000 feda 	bl	8008db6 <__any_on>
 8008002:	2800      	cmp	r0, #0
 8008004:	d1ed      	bne.n	8007fe2 <__gethex+0x26a>
 8008006:	4621      	mov	r1, r4
 8008008:	9801      	ldr	r0, [sp, #4]
 800800a:	f000 fa8f 	bl	800852c <_Bfree>
 800800e:	2300      	movs	r3, #0
 8008010:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008012:	2550      	movs	r5, #80	@ 0x50
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e72b      	b.n	8007e70 <__gethex+0xf8>
 8008018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1f3      	bne.n	8008006 <__gethex+0x28e>
 800801e:	e7e0      	b.n	8007fe2 <__gethex+0x26a>
 8008020:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1dd      	bne.n	8007fe2 <__gethex+0x26a>
 8008026:	e7ee      	b.n	8008006 <__gethex+0x28e>
 8008028:	08009a76 	.word	0x08009a76
 800802c:	08009b80 	.word	0x08009b80
 8008030:	08009b91 	.word	0x08009b91
 8008034:	1e6f      	subs	r7, r5, #1
 8008036:	f1b9 0f00 	cmp.w	r9, #0
 800803a:	d130      	bne.n	800809e <__gethex+0x326>
 800803c:	b127      	cbz	r7, 8008048 <__gethex+0x2d0>
 800803e:	4639      	mov	r1, r7
 8008040:	4620      	mov	r0, r4
 8008042:	f000 feb8 	bl	8008db6 <__any_on>
 8008046:	4681      	mov	r9, r0
 8008048:	2301      	movs	r3, #1
 800804a:	4629      	mov	r1, r5
 800804c:	1b76      	subs	r6, r6, r5
 800804e:	2502      	movs	r5, #2
 8008050:	117a      	asrs	r2, r7, #5
 8008052:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008056:	f007 071f 	and.w	r7, r7, #31
 800805a:	40bb      	lsls	r3, r7
 800805c:	4213      	tst	r3, r2
 800805e:	4620      	mov	r0, r4
 8008060:	bf18      	it	ne
 8008062:	f049 0902 	orrne.w	r9, r9, #2
 8008066:	f7ff fe1f 	bl	8007ca8 <rshift>
 800806a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800806e:	f1b9 0f00 	cmp.w	r9, #0
 8008072:	d047      	beq.n	8008104 <__gethex+0x38c>
 8008074:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d015      	beq.n	80080a8 <__gethex+0x330>
 800807c:	2b03      	cmp	r3, #3
 800807e:	d017      	beq.n	80080b0 <__gethex+0x338>
 8008080:	2b01      	cmp	r3, #1
 8008082:	d109      	bne.n	8008098 <__gethex+0x320>
 8008084:	f019 0f02 	tst.w	r9, #2
 8008088:	d006      	beq.n	8008098 <__gethex+0x320>
 800808a:	f8da 3000 	ldr.w	r3, [sl]
 800808e:	ea49 0903 	orr.w	r9, r9, r3
 8008092:	f019 0f01 	tst.w	r9, #1
 8008096:	d10e      	bne.n	80080b6 <__gethex+0x33e>
 8008098:	f045 0510 	orr.w	r5, r5, #16
 800809c:	e032      	b.n	8008104 <__gethex+0x38c>
 800809e:	f04f 0901 	mov.w	r9, #1
 80080a2:	e7d1      	b.n	8008048 <__gethex+0x2d0>
 80080a4:	2501      	movs	r5, #1
 80080a6:	e7e2      	b.n	800806e <__gethex+0x2f6>
 80080a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080aa:	f1c3 0301 	rsb	r3, r3, #1
 80080ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d0f0      	beq.n	8008098 <__gethex+0x320>
 80080b6:	f04f 0c00 	mov.w	ip, #0
 80080ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080be:	f104 0314 	add.w	r3, r4, #20
 80080c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80080d4:	d01b      	beq.n	800810e <__gethex+0x396>
 80080d6:	3201      	adds	r2, #1
 80080d8:	6002      	str	r2, [r0, #0]
 80080da:	2d02      	cmp	r5, #2
 80080dc:	f104 0314 	add.w	r3, r4, #20
 80080e0:	d13c      	bne.n	800815c <__gethex+0x3e4>
 80080e2:	f8d8 2000 	ldr.w	r2, [r8]
 80080e6:	3a01      	subs	r2, #1
 80080e8:	42b2      	cmp	r2, r6
 80080ea:	d109      	bne.n	8008100 <__gethex+0x388>
 80080ec:	2201      	movs	r2, #1
 80080ee:	1171      	asrs	r1, r6, #5
 80080f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080f4:	f006 061f 	and.w	r6, r6, #31
 80080f8:	fa02 f606 	lsl.w	r6, r2, r6
 80080fc:	421e      	tst	r6, r3
 80080fe:	d13a      	bne.n	8008176 <__gethex+0x3fe>
 8008100:	f045 0520 	orr.w	r5, r5, #32
 8008104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008106:	601c      	str	r4, [r3, #0]
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	601f      	str	r7, [r3, #0]
 800810c:	e6b0      	b.n	8007e70 <__gethex+0xf8>
 800810e:	4299      	cmp	r1, r3
 8008110:	f843 cc04 	str.w	ip, [r3, #-4]
 8008114:	d8d9      	bhi.n	80080ca <__gethex+0x352>
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	459b      	cmp	fp, r3
 800811a:	db17      	blt.n	800814c <__gethex+0x3d4>
 800811c:	6861      	ldr	r1, [r4, #4]
 800811e:	9801      	ldr	r0, [sp, #4]
 8008120:	3101      	adds	r1, #1
 8008122:	f000 f9c3 	bl	80084ac <_Balloc>
 8008126:	4681      	mov	r9, r0
 8008128:	b918      	cbnz	r0, 8008132 <__gethex+0x3ba>
 800812a:	4602      	mov	r2, r0
 800812c:	2184      	movs	r1, #132	@ 0x84
 800812e:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <__gethex+0x41c>)
 8008130:	e6c5      	b.n	8007ebe <__gethex+0x146>
 8008132:	6922      	ldr	r2, [r4, #16]
 8008134:	f104 010c 	add.w	r1, r4, #12
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	300c      	adds	r0, #12
 800813e:	f7fe ff04 	bl	8006f4a <memcpy>
 8008142:	4621      	mov	r1, r4
 8008144:	9801      	ldr	r0, [sp, #4]
 8008146:	f000 f9f1 	bl	800852c <_Bfree>
 800814a:	464c      	mov	r4, r9
 800814c:	6923      	ldr	r3, [r4, #16]
 800814e:	1c5a      	adds	r2, r3, #1
 8008150:	6122      	str	r2, [r4, #16]
 8008152:	2201      	movs	r2, #1
 8008154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008158:	615a      	str	r2, [r3, #20]
 800815a:	e7be      	b.n	80080da <__gethex+0x362>
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	455a      	cmp	r2, fp
 8008160:	dd0b      	ble.n	800817a <__gethex+0x402>
 8008162:	2101      	movs	r1, #1
 8008164:	4620      	mov	r0, r4
 8008166:	f7ff fd9f 	bl	8007ca8 <rshift>
 800816a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800816e:	3701      	adds	r7, #1
 8008170:	42bb      	cmp	r3, r7
 8008172:	f6ff aee0 	blt.w	8007f36 <__gethex+0x1be>
 8008176:	2501      	movs	r5, #1
 8008178:	e7c2      	b.n	8008100 <__gethex+0x388>
 800817a:	f016 061f 	ands.w	r6, r6, #31
 800817e:	d0fa      	beq.n	8008176 <__gethex+0x3fe>
 8008180:	4453      	add	r3, sl
 8008182:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008186:	f000 fa83 	bl	8008690 <__hi0bits>
 800818a:	f1c6 0620 	rsb	r6, r6, #32
 800818e:	42b0      	cmp	r0, r6
 8008190:	dbe7      	blt.n	8008162 <__gethex+0x3ea>
 8008192:	e7f0      	b.n	8008176 <__gethex+0x3fe>
 8008194:	08009b80 	.word	0x08009b80

08008198 <L_shift>:
 8008198:	f1c2 0208 	rsb	r2, r2, #8
 800819c:	0092      	lsls	r2, r2, #2
 800819e:	b570      	push	{r4, r5, r6, lr}
 80081a0:	f1c2 0620 	rsb	r6, r2, #32
 80081a4:	6843      	ldr	r3, [r0, #4]
 80081a6:	6804      	ldr	r4, [r0, #0]
 80081a8:	fa03 f506 	lsl.w	r5, r3, r6
 80081ac:	432c      	orrs	r4, r5
 80081ae:	40d3      	lsrs	r3, r2
 80081b0:	6004      	str	r4, [r0, #0]
 80081b2:	f840 3f04 	str.w	r3, [r0, #4]!
 80081b6:	4288      	cmp	r0, r1
 80081b8:	d3f4      	bcc.n	80081a4 <L_shift+0xc>
 80081ba:	bd70      	pop	{r4, r5, r6, pc}

080081bc <__match>:
 80081bc:	b530      	push	{r4, r5, lr}
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	3301      	adds	r3, #1
 80081c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081c6:	b914      	cbnz	r4, 80081ce <__match+0x12>
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	2001      	movs	r0, #1
 80081cc:	bd30      	pop	{r4, r5, pc}
 80081ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081d2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80081d6:	2d19      	cmp	r5, #25
 80081d8:	bf98      	it	ls
 80081da:	3220      	addls	r2, #32
 80081dc:	42a2      	cmp	r2, r4
 80081de:	d0f0      	beq.n	80081c2 <__match+0x6>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e7f3      	b.n	80081cc <__match+0x10>

080081e4 <__hexnan>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	2500      	movs	r5, #0
 80081ea:	680b      	ldr	r3, [r1, #0]
 80081ec:	4682      	mov	sl, r0
 80081ee:	115e      	asrs	r6, r3, #5
 80081f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80081f4:	f013 031f 	ands.w	r3, r3, #31
 80081f8:	bf18      	it	ne
 80081fa:	3604      	addne	r6, #4
 80081fc:	1f37      	subs	r7, r6, #4
 80081fe:	4690      	mov	r8, r2
 8008200:	46b9      	mov	r9, r7
 8008202:	463c      	mov	r4, r7
 8008204:	46ab      	mov	fp, r5
 8008206:	b087      	sub	sp, #28
 8008208:	6801      	ldr	r1, [r0, #0]
 800820a:	9301      	str	r3, [sp, #4]
 800820c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008210:	9502      	str	r5, [sp, #8]
 8008212:	784a      	ldrb	r2, [r1, #1]
 8008214:	1c4b      	adds	r3, r1, #1
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	b342      	cbz	r2, 800826c <__hexnan+0x88>
 800821a:	4610      	mov	r0, r2
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	9204      	str	r2, [sp, #16]
 8008220:	f7ff fd95 	bl	8007d4e <__hexdig_fun>
 8008224:	2800      	cmp	r0, #0
 8008226:	d151      	bne.n	80082cc <__hexnan+0xe8>
 8008228:	9a04      	ldr	r2, [sp, #16]
 800822a:	9905      	ldr	r1, [sp, #20]
 800822c:	2a20      	cmp	r2, #32
 800822e:	d818      	bhi.n	8008262 <__hexnan+0x7e>
 8008230:	9b02      	ldr	r3, [sp, #8]
 8008232:	459b      	cmp	fp, r3
 8008234:	dd13      	ble.n	800825e <__hexnan+0x7a>
 8008236:	454c      	cmp	r4, r9
 8008238:	d206      	bcs.n	8008248 <__hexnan+0x64>
 800823a:	2d07      	cmp	r5, #7
 800823c:	dc04      	bgt.n	8008248 <__hexnan+0x64>
 800823e:	462a      	mov	r2, r5
 8008240:	4649      	mov	r1, r9
 8008242:	4620      	mov	r0, r4
 8008244:	f7ff ffa8 	bl	8008198 <L_shift>
 8008248:	4544      	cmp	r4, r8
 800824a:	d952      	bls.n	80082f2 <__hexnan+0x10e>
 800824c:	2300      	movs	r3, #0
 800824e:	f1a4 0904 	sub.w	r9, r4, #4
 8008252:	f844 3c04 	str.w	r3, [r4, #-4]
 8008256:	461d      	mov	r5, r3
 8008258:	464c      	mov	r4, r9
 800825a:	f8cd b008 	str.w	fp, [sp, #8]
 800825e:	9903      	ldr	r1, [sp, #12]
 8008260:	e7d7      	b.n	8008212 <__hexnan+0x2e>
 8008262:	2a29      	cmp	r2, #41	@ 0x29
 8008264:	d157      	bne.n	8008316 <__hexnan+0x132>
 8008266:	3102      	adds	r1, #2
 8008268:	f8ca 1000 	str.w	r1, [sl]
 800826c:	f1bb 0f00 	cmp.w	fp, #0
 8008270:	d051      	beq.n	8008316 <__hexnan+0x132>
 8008272:	454c      	cmp	r4, r9
 8008274:	d206      	bcs.n	8008284 <__hexnan+0xa0>
 8008276:	2d07      	cmp	r5, #7
 8008278:	dc04      	bgt.n	8008284 <__hexnan+0xa0>
 800827a:	462a      	mov	r2, r5
 800827c:	4649      	mov	r1, r9
 800827e:	4620      	mov	r0, r4
 8008280:	f7ff ff8a 	bl	8008198 <L_shift>
 8008284:	4544      	cmp	r4, r8
 8008286:	d936      	bls.n	80082f6 <__hexnan+0x112>
 8008288:	4623      	mov	r3, r4
 800828a:	f1a8 0204 	sub.w	r2, r8, #4
 800828e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008292:	429f      	cmp	r7, r3
 8008294:	f842 1f04 	str.w	r1, [r2, #4]!
 8008298:	d2f9      	bcs.n	800828e <__hexnan+0xaa>
 800829a:	1b3b      	subs	r3, r7, r4
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	3304      	adds	r3, #4
 80082a2:	3401      	adds	r4, #1
 80082a4:	3e03      	subs	r6, #3
 80082a6:	42b4      	cmp	r4, r6
 80082a8:	bf88      	it	hi
 80082aa:	2304      	movhi	r3, #4
 80082ac:	2200      	movs	r2, #0
 80082ae:	4443      	add	r3, r8
 80082b0:	f843 2b04 	str.w	r2, [r3], #4
 80082b4:	429f      	cmp	r7, r3
 80082b6:	d2fb      	bcs.n	80082b0 <__hexnan+0xcc>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	b91b      	cbnz	r3, 80082c4 <__hexnan+0xe0>
 80082bc:	4547      	cmp	r7, r8
 80082be:	d128      	bne.n	8008312 <__hexnan+0x12e>
 80082c0:	2301      	movs	r3, #1
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	2005      	movs	r0, #5
 80082c6:	b007      	add	sp, #28
 80082c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082cc:	3501      	adds	r5, #1
 80082ce:	2d08      	cmp	r5, #8
 80082d0:	f10b 0b01 	add.w	fp, fp, #1
 80082d4:	dd06      	ble.n	80082e4 <__hexnan+0x100>
 80082d6:	4544      	cmp	r4, r8
 80082d8:	d9c1      	bls.n	800825e <__hexnan+0x7a>
 80082da:	2300      	movs	r3, #0
 80082dc:	2501      	movs	r5, #1
 80082de:	f844 3c04 	str.w	r3, [r4, #-4]
 80082e2:	3c04      	subs	r4, #4
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	f000 000f 	and.w	r0, r0, #15
 80082ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80082ee:	6020      	str	r0, [r4, #0]
 80082f0:	e7b5      	b.n	800825e <__hexnan+0x7a>
 80082f2:	2508      	movs	r5, #8
 80082f4:	e7b3      	b.n	800825e <__hexnan+0x7a>
 80082f6:	9b01      	ldr	r3, [sp, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d0dd      	beq.n	80082b8 <__hexnan+0xd4>
 80082fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008300:	f1c3 0320 	rsb	r3, r3, #32
 8008304:	40da      	lsrs	r2, r3
 8008306:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800830a:	4013      	ands	r3, r2
 800830c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008310:	e7d2      	b.n	80082b8 <__hexnan+0xd4>
 8008312:	3f04      	subs	r7, #4
 8008314:	e7d0      	b.n	80082b8 <__hexnan+0xd4>
 8008316:	2004      	movs	r0, #4
 8008318:	e7d5      	b.n	80082c6 <__hexnan+0xe2>
	...

0800831c <malloc>:
 800831c:	4b02      	ldr	r3, [pc, #8]	@ (8008328 <malloc+0xc>)
 800831e:	4601      	mov	r1, r0
 8008320:	6818      	ldr	r0, [r3, #0]
 8008322:	f000 b825 	b.w	8008370 <_malloc_r>
 8008326:	bf00      	nop
 8008328:	2000018c 	.word	0x2000018c

0800832c <sbrk_aligned>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4e0f      	ldr	r6, [pc, #60]	@ (800836c <sbrk_aligned+0x40>)
 8008330:	460c      	mov	r4, r1
 8008332:	6831      	ldr	r1, [r6, #0]
 8008334:	4605      	mov	r5, r0
 8008336:	b911      	cbnz	r1, 800833e <sbrk_aligned+0x12>
 8008338:	f000 ff84 	bl	8009244 <_sbrk_r>
 800833c:	6030      	str	r0, [r6, #0]
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f000 ff7f 	bl	8009244 <_sbrk_r>
 8008346:	1c43      	adds	r3, r0, #1
 8008348:	d103      	bne.n	8008352 <sbrk_aligned+0x26>
 800834a:	f04f 34ff 	mov.w	r4, #4294967295
 800834e:	4620      	mov	r0, r4
 8008350:	bd70      	pop	{r4, r5, r6, pc}
 8008352:	1cc4      	adds	r4, r0, #3
 8008354:	f024 0403 	bic.w	r4, r4, #3
 8008358:	42a0      	cmp	r0, r4
 800835a:	d0f8      	beq.n	800834e <sbrk_aligned+0x22>
 800835c:	1a21      	subs	r1, r4, r0
 800835e:	4628      	mov	r0, r5
 8008360:	f000 ff70 	bl	8009244 <_sbrk_r>
 8008364:	3001      	adds	r0, #1
 8008366:	d1f2      	bne.n	800834e <sbrk_aligned+0x22>
 8008368:	e7ef      	b.n	800834a <sbrk_aligned+0x1e>
 800836a:	bf00      	nop
 800836c:	20000498 	.word	0x20000498

08008370 <_malloc_r>:
 8008370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008374:	1ccd      	adds	r5, r1, #3
 8008376:	f025 0503 	bic.w	r5, r5, #3
 800837a:	3508      	adds	r5, #8
 800837c:	2d0c      	cmp	r5, #12
 800837e:	bf38      	it	cc
 8008380:	250c      	movcc	r5, #12
 8008382:	2d00      	cmp	r5, #0
 8008384:	4606      	mov	r6, r0
 8008386:	db01      	blt.n	800838c <_malloc_r+0x1c>
 8008388:	42a9      	cmp	r1, r5
 800838a:	d904      	bls.n	8008396 <_malloc_r+0x26>
 800838c:	230c      	movs	r3, #12
 800838e:	6033      	str	r3, [r6, #0]
 8008390:	2000      	movs	r0, #0
 8008392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800846c <_malloc_r+0xfc>
 800839a:	f000 f87b 	bl	8008494 <__malloc_lock>
 800839e:	f8d8 3000 	ldr.w	r3, [r8]
 80083a2:	461c      	mov	r4, r3
 80083a4:	bb44      	cbnz	r4, 80083f8 <_malloc_r+0x88>
 80083a6:	4629      	mov	r1, r5
 80083a8:	4630      	mov	r0, r6
 80083aa:	f7ff ffbf 	bl	800832c <sbrk_aligned>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	4604      	mov	r4, r0
 80083b2:	d158      	bne.n	8008466 <_malloc_r+0xf6>
 80083b4:	f8d8 4000 	ldr.w	r4, [r8]
 80083b8:	4627      	mov	r7, r4
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d143      	bne.n	8008446 <_malloc_r+0xd6>
 80083be:	2c00      	cmp	r4, #0
 80083c0:	d04b      	beq.n	800845a <_malloc_r+0xea>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	4639      	mov	r1, r7
 80083c6:	4630      	mov	r0, r6
 80083c8:	eb04 0903 	add.w	r9, r4, r3
 80083cc:	f000 ff3a 	bl	8009244 <_sbrk_r>
 80083d0:	4581      	cmp	r9, r0
 80083d2:	d142      	bne.n	800845a <_malloc_r+0xea>
 80083d4:	6821      	ldr	r1, [r4, #0]
 80083d6:	4630      	mov	r0, r6
 80083d8:	1a6d      	subs	r5, r5, r1
 80083da:	4629      	mov	r1, r5
 80083dc:	f7ff ffa6 	bl	800832c <sbrk_aligned>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d03a      	beq.n	800845a <_malloc_r+0xea>
 80083e4:	6823      	ldr	r3, [r4, #0]
 80083e6:	442b      	add	r3, r5
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	f8d8 3000 	ldr.w	r3, [r8]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	bb62      	cbnz	r2, 800844c <_malloc_r+0xdc>
 80083f2:	f8c8 7000 	str.w	r7, [r8]
 80083f6:	e00f      	b.n	8008418 <_malloc_r+0xa8>
 80083f8:	6822      	ldr	r2, [r4, #0]
 80083fa:	1b52      	subs	r2, r2, r5
 80083fc:	d420      	bmi.n	8008440 <_malloc_r+0xd0>
 80083fe:	2a0b      	cmp	r2, #11
 8008400:	d917      	bls.n	8008432 <_malloc_r+0xc2>
 8008402:	1961      	adds	r1, r4, r5
 8008404:	42a3      	cmp	r3, r4
 8008406:	6025      	str	r5, [r4, #0]
 8008408:	bf18      	it	ne
 800840a:	6059      	strne	r1, [r3, #4]
 800840c:	6863      	ldr	r3, [r4, #4]
 800840e:	bf08      	it	eq
 8008410:	f8c8 1000 	streq.w	r1, [r8]
 8008414:	5162      	str	r2, [r4, r5]
 8008416:	604b      	str	r3, [r1, #4]
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f841 	bl	80084a0 <__malloc_unlock>
 800841e:	f104 000b 	add.w	r0, r4, #11
 8008422:	1d23      	adds	r3, r4, #4
 8008424:	f020 0007 	bic.w	r0, r0, #7
 8008428:	1ac2      	subs	r2, r0, r3
 800842a:	bf1c      	itt	ne
 800842c:	1a1b      	subne	r3, r3, r0
 800842e:	50a3      	strne	r3, [r4, r2]
 8008430:	e7af      	b.n	8008392 <_malloc_r+0x22>
 8008432:	6862      	ldr	r2, [r4, #4]
 8008434:	42a3      	cmp	r3, r4
 8008436:	bf0c      	ite	eq
 8008438:	f8c8 2000 	streq.w	r2, [r8]
 800843c:	605a      	strne	r2, [r3, #4]
 800843e:	e7eb      	b.n	8008418 <_malloc_r+0xa8>
 8008440:	4623      	mov	r3, r4
 8008442:	6864      	ldr	r4, [r4, #4]
 8008444:	e7ae      	b.n	80083a4 <_malloc_r+0x34>
 8008446:	463c      	mov	r4, r7
 8008448:	687f      	ldr	r7, [r7, #4]
 800844a:	e7b6      	b.n	80083ba <_malloc_r+0x4a>
 800844c:	461a      	mov	r2, r3
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	42a3      	cmp	r3, r4
 8008452:	d1fb      	bne.n	800844c <_malloc_r+0xdc>
 8008454:	2300      	movs	r3, #0
 8008456:	6053      	str	r3, [r2, #4]
 8008458:	e7de      	b.n	8008418 <_malloc_r+0xa8>
 800845a:	230c      	movs	r3, #12
 800845c:	4630      	mov	r0, r6
 800845e:	6033      	str	r3, [r6, #0]
 8008460:	f000 f81e 	bl	80084a0 <__malloc_unlock>
 8008464:	e794      	b.n	8008390 <_malloc_r+0x20>
 8008466:	6005      	str	r5, [r0, #0]
 8008468:	e7d6      	b.n	8008418 <_malloc_r+0xa8>
 800846a:	bf00      	nop
 800846c:	2000049c 	.word	0x2000049c

08008470 <__ascii_mbtowc>:
 8008470:	b082      	sub	sp, #8
 8008472:	b901      	cbnz	r1, 8008476 <__ascii_mbtowc+0x6>
 8008474:	a901      	add	r1, sp, #4
 8008476:	b142      	cbz	r2, 800848a <__ascii_mbtowc+0x1a>
 8008478:	b14b      	cbz	r3, 800848e <__ascii_mbtowc+0x1e>
 800847a:	7813      	ldrb	r3, [r2, #0]
 800847c:	600b      	str	r3, [r1, #0]
 800847e:	7812      	ldrb	r2, [r2, #0]
 8008480:	1e10      	subs	r0, r2, #0
 8008482:	bf18      	it	ne
 8008484:	2001      	movne	r0, #1
 8008486:	b002      	add	sp, #8
 8008488:	4770      	bx	lr
 800848a:	4610      	mov	r0, r2
 800848c:	e7fb      	b.n	8008486 <__ascii_mbtowc+0x16>
 800848e:	f06f 0001 	mvn.w	r0, #1
 8008492:	e7f8      	b.n	8008486 <__ascii_mbtowc+0x16>

08008494 <__malloc_lock>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__malloc_lock+0x8>)
 8008496:	f7fe bd48 	b.w	8006f2a <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20000494 	.word	0x20000494

080084a0 <__malloc_unlock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	@ (80084a8 <__malloc_unlock+0x8>)
 80084a2:	f7fe bd43 	b.w	8006f2c <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20000494 	.word	0x20000494

080084ac <_Balloc>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	69c6      	ldr	r6, [r0, #28]
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	b976      	cbnz	r6, 80084d4 <_Balloc+0x28>
 80084b6:	2010      	movs	r0, #16
 80084b8:	f7ff ff30 	bl	800831c <malloc>
 80084bc:	4602      	mov	r2, r0
 80084be:	61e0      	str	r0, [r4, #28]
 80084c0:	b920      	cbnz	r0, 80084cc <_Balloc+0x20>
 80084c2:	216b      	movs	r1, #107	@ 0x6b
 80084c4:	4b17      	ldr	r3, [pc, #92]	@ (8008524 <_Balloc+0x78>)
 80084c6:	4818      	ldr	r0, [pc, #96]	@ (8008528 <_Balloc+0x7c>)
 80084c8:	f000 fecc 	bl	8009264 <__assert_func>
 80084cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d0:	6006      	str	r6, [r0, #0]
 80084d2:	60c6      	str	r6, [r0, #12]
 80084d4:	69e6      	ldr	r6, [r4, #28]
 80084d6:	68f3      	ldr	r3, [r6, #12]
 80084d8:	b183      	cbz	r3, 80084fc <_Balloc+0x50>
 80084da:	69e3      	ldr	r3, [r4, #28]
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084e2:	b9b8      	cbnz	r0, 8008514 <_Balloc+0x68>
 80084e4:	2101      	movs	r1, #1
 80084e6:	fa01 f605 	lsl.w	r6, r1, r5
 80084ea:	1d72      	adds	r2, r6, #5
 80084ec:	4620      	mov	r0, r4
 80084ee:	0092      	lsls	r2, r2, #2
 80084f0:	f000 fed6 	bl	80092a0 <_calloc_r>
 80084f4:	b160      	cbz	r0, 8008510 <_Balloc+0x64>
 80084f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084fa:	e00e      	b.n	800851a <_Balloc+0x6e>
 80084fc:	2221      	movs	r2, #33	@ 0x21
 80084fe:	2104      	movs	r1, #4
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fecd 	bl	80092a0 <_calloc_r>
 8008506:	69e3      	ldr	r3, [r4, #28]
 8008508:	60f0      	str	r0, [r6, #12]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e4      	bne.n	80084da <_Balloc+0x2e>
 8008510:	2000      	movs	r0, #0
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	6802      	ldr	r2, [r0, #0]
 8008516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800851a:	2300      	movs	r3, #0
 800851c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008520:	e7f7      	b.n	8008512 <_Balloc+0x66>
 8008522:	bf00      	nop
 8008524:	08009b11 	.word	0x08009b11
 8008528:	08009bf1 	.word	0x08009bf1

0800852c <_Bfree>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	69c6      	ldr	r6, [r0, #28]
 8008530:	4605      	mov	r5, r0
 8008532:	460c      	mov	r4, r1
 8008534:	b976      	cbnz	r6, 8008554 <_Bfree+0x28>
 8008536:	2010      	movs	r0, #16
 8008538:	f7ff fef0 	bl	800831c <malloc>
 800853c:	4602      	mov	r2, r0
 800853e:	61e8      	str	r0, [r5, #28]
 8008540:	b920      	cbnz	r0, 800854c <_Bfree+0x20>
 8008542:	218f      	movs	r1, #143	@ 0x8f
 8008544:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <_Bfree+0x3c>)
 8008546:	4809      	ldr	r0, [pc, #36]	@ (800856c <_Bfree+0x40>)
 8008548:	f000 fe8c 	bl	8009264 <__assert_func>
 800854c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008550:	6006      	str	r6, [r0, #0]
 8008552:	60c6      	str	r6, [r0, #12]
 8008554:	b13c      	cbz	r4, 8008566 <_Bfree+0x3a>
 8008556:	69eb      	ldr	r3, [r5, #28]
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008560:	6021      	str	r1, [r4, #0]
 8008562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	08009b11 	.word	0x08009b11
 800856c:	08009bf1 	.word	0x08009bf1

08008570 <__multadd>:
 8008570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	4607      	mov	r7, r0
 8008576:	460c      	mov	r4, r1
 8008578:	461e      	mov	r6, r3
 800857a:	2000      	movs	r0, #0
 800857c:	690d      	ldr	r5, [r1, #16]
 800857e:	f101 0c14 	add.w	ip, r1, #20
 8008582:	f8dc 3000 	ldr.w	r3, [ip]
 8008586:	3001      	adds	r0, #1
 8008588:	b299      	uxth	r1, r3
 800858a:	fb02 6101 	mla	r1, r2, r1, r6
 800858e:	0c1e      	lsrs	r6, r3, #16
 8008590:	0c0b      	lsrs	r3, r1, #16
 8008592:	fb02 3306 	mla	r3, r2, r6, r3
 8008596:	b289      	uxth	r1, r1
 8008598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800859c:	4285      	cmp	r5, r0
 800859e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085a2:	f84c 1b04 	str.w	r1, [ip], #4
 80085a6:	dcec      	bgt.n	8008582 <__multadd+0x12>
 80085a8:	b30e      	cbz	r6, 80085ee <__multadd+0x7e>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc19      	bgt.n	80085e4 <__multadd+0x74>
 80085b0:	6861      	ldr	r1, [r4, #4]
 80085b2:	4638      	mov	r0, r7
 80085b4:	3101      	adds	r1, #1
 80085b6:	f7ff ff79 	bl	80084ac <_Balloc>
 80085ba:	4680      	mov	r8, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__multadd+0x5a>
 80085be:	4602      	mov	r2, r0
 80085c0:	21ba      	movs	r1, #186	@ 0xba
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <__multadd+0x84>)
 80085c4:	480c      	ldr	r0, [pc, #48]	@ (80085f8 <__multadd+0x88>)
 80085c6:	f000 fe4d 	bl	8009264 <__assert_func>
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	f104 010c 	add.w	r1, r4, #12
 80085d0:	3202      	adds	r2, #2
 80085d2:	0092      	lsls	r2, r2, #2
 80085d4:	300c      	adds	r0, #12
 80085d6:	f7fe fcb8 	bl	8006f4a <memcpy>
 80085da:	4621      	mov	r1, r4
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ffa5 	bl	800852c <_Bfree>
 80085e2:	4644      	mov	r4, r8
 80085e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e8:	3501      	adds	r5, #1
 80085ea:	615e      	str	r6, [r3, #20]
 80085ec:	6125      	str	r5, [r4, #16]
 80085ee:	4620      	mov	r0, r4
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	08009b80 	.word	0x08009b80
 80085f8:	08009bf1 	.word	0x08009bf1

080085fc <__s2b>:
 80085fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008600:	4615      	mov	r5, r2
 8008602:	2209      	movs	r2, #9
 8008604:	461f      	mov	r7, r3
 8008606:	3308      	adds	r3, #8
 8008608:	460c      	mov	r4, r1
 800860a:	fb93 f3f2 	sdiv	r3, r3, r2
 800860e:	4606      	mov	r6, r0
 8008610:	2201      	movs	r2, #1
 8008612:	2100      	movs	r1, #0
 8008614:	429a      	cmp	r2, r3
 8008616:	db09      	blt.n	800862c <__s2b+0x30>
 8008618:	4630      	mov	r0, r6
 800861a:	f7ff ff47 	bl	80084ac <_Balloc>
 800861e:	b940      	cbnz	r0, 8008632 <__s2b+0x36>
 8008620:	4602      	mov	r2, r0
 8008622:	21d3      	movs	r1, #211	@ 0xd3
 8008624:	4b18      	ldr	r3, [pc, #96]	@ (8008688 <__s2b+0x8c>)
 8008626:	4819      	ldr	r0, [pc, #100]	@ (800868c <__s2b+0x90>)
 8008628:	f000 fe1c 	bl	8009264 <__assert_func>
 800862c:	0052      	lsls	r2, r2, #1
 800862e:	3101      	adds	r1, #1
 8008630:	e7f0      	b.n	8008614 <__s2b+0x18>
 8008632:	9b08      	ldr	r3, [sp, #32]
 8008634:	2d09      	cmp	r5, #9
 8008636:	6143      	str	r3, [r0, #20]
 8008638:	f04f 0301 	mov.w	r3, #1
 800863c:	6103      	str	r3, [r0, #16]
 800863e:	dd16      	ble.n	800866e <__s2b+0x72>
 8008640:	f104 0909 	add.w	r9, r4, #9
 8008644:	46c8      	mov	r8, r9
 8008646:	442c      	add	r4, r5
 8008648:	f818 3b01 	ldrb.w	r3, [r8], #1
 800864c:	4601      	mov	r1, r0
 800864e:	220a      	movs	r2, #10
 8008650:	4630      	mov	r0, r6
 8008652:	3b30      	subs	r3, #48	@ 0x30
 8008654:	f7ff ff8c 	bl	8008570 <__multadd>
 8008658:	45a0      	cmp	r8, r4
 800865a:	d1f5      	bne.n	8008648 <__s2b+0x4c>
 800865c:	f1a5 0408 	sub.w	r4, r5, #8
 8008660:	444c      	add	r4, r9
 8008662:	1b2d      	subs	r5, r5, r4
 8008664:	1963      	adds	r3, r4, r5
 8008666:	42bb      	cmp	r3, r7
 8008668:	db04      	blt.n	8008674 <__s2b+0x78>
 800866a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800866e:	2509      	movs	r5, #9
 8008670:	340a      	adds	r4, #10
 8008672:	e7f6      	b.n	8008662 <__s2b+0x66>
 8008674:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008678:	4601      	mov	r1, r0
 800867a:	220a      	movs	r2, #10
 800867c:	4630      	mov	r0, r6
 800867e:	3b30      	subs	r3, #48	@ 0x30
 8008680:	f7ff ff76 	bl	8008570 <__multadd>
 8008684:	e7ee      	b.n	8008664 <__s2b+0x68>
 8008686:	bf00      	nop
 8008688:	08009b80 	.word	0x08009b80
 800868c:	08009bf1 	.word	0x08009bf1

08008690 <__hi0bits>:
 8008690:	4603      	mov	r3, r0
 8008692:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008696:	bf3a      	itte	cc
 8008698:	0403      	lslcc	r3, r0, #16
 800869a:	2010      	movcc	r0, #16
 800869c:	2000      	movcs	r0, #0
 800869e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086a2:	bf3c      	itt	cc
 80086a4:	021b      	lslcc	r3, r3, #8
 80086a6:	3008      	addcc	r0, #8
 80086a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086ac:	bf3c      	itt	cc
 80086ae:	011b      	lslcc	r3, r3, #4
 80086b0:	3004      	addcc	r0, #4
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b6:	bf3c      	itt	cc
 80086b8:	009b      	lslcc	r3, r3, #2
 80086ba:	3002      	addcc	r0, #2
 80086bc:	2b00      	cmp	r3, #0
 80086be:	db05      	blt.n	80086cc <__hi0bits+0x3c>
 80086c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086c4:	f100 0001 	add.w	r0, r0, #1
 80086c8:	bf08      	it	eq
 80086ca:	2020      	moveq	r0, #32
 80086cc:	4770      	bx	lr

080086ce <__lo0bits>:
 80086ce:	6803      	ldr	r3, [r0, #0]
 80086d0:	4602      	mov	r2, r0
 80086d2:	f013 0007 	ands.w	r0, r3, #7
 80086d6:	d00b      	beq.n	80086f0 <__lo0bits+0x22>
 80086d8:	07d9      	lsls	r1, r3, #31
 80086da:	d421      	bmi.n	8008720 <__lo0bits+0x52>
 80086dc:	0798      	lsls	r0, r3, #30
 80086de:	bf49      	itett	mi
 80086e0:	085b      	lsrmi	r3, r3, #1
 80086e2:	089b      	lsrpl	r3, r3, #2
 80086e4:	2001      	movmi	r0, #1
 80086e6:	6013      	strmi	r3, [r2, #0]
 80086e8:	bf5c      	itt	pl
 80086ea:	2002      	movpl	r0, #2
 80086ec:	6013      	strpl	r3, [r2, #0]
 80086ee:	4770      	bx	lr
 80086f0:	b299      	uxth	r1, r3
 80086f2:	b909      	cbnz	r1, 80086f8 <__lo0bits+0x2a>
 80086f4:	2010      	movs	r0, #16
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	b2d9      	uxtb	r1, r3
 80086fa:	b909      	cbnz	r1, 8008700 <__lo0bits+0x32>
 80086fc:	3008      	adds	r0, #8
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	0719      	lsls	r1, r3, #28
 8008702:	bf04      	itt	eq
 8008704:	091b      	lsreq	r3, r3, #4
 8008706:	3004      	addeq	r0, #4
 8008708:	0799      	lsls	r1, r3, #30
 800870a:	bf04      	itt	eq
 800870c:	089b      	lsreq	r3, r3, #2
 800870e:	3002      	addeq	r0, #2
 8008710:	07d9      	lsls	r1, r3, #31
 8008712:	d403      	bmi.n	800871c <__lo0bits+0x4e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	f100 0001 	add.w	r0, r0, #1
 800871a:	d003      	beq.n	8008724 <__lo0bits+0x56>
 800871c:	6013      	str	r3, [r2, #0]
 800871e:	4770      	bx	lr
 8008720:	2000      	movs	r0, #0
 8008722:	4770      	bx	lr
 8008724:	2020      	movs	r0, #32
 8008726:	4770      	bx	lr

08008728 <__i2b>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	2101      	movs	r1, #1
 800872e:	f7ff febd 	bl	80084ac <_Balloc>
 8008732:	4602      	mov	r2, r0
 8008734:	b928      	cbnz	r0, 8008742 <__i2b+0x1a>
 8008736:	f240 1145 	movw	r1, #325	@ 0x145
 800873a:	4b04      	ldr	r3, [pc, #16]	@ (800874c <__i2b+0x24>)
 800873c:	4804      	ldr	r0, [pc, #16]	@ (8008750 <__i2b+0x28>)
 800873e:	f000 fd91 	bl	8009264 <__assert_func>
 8008742:	2301      	movs	r3, #1
 8008744:	6144      	str	r4, [r0, #20]
 8008746:	6103      	str	r3, [r0, #16]
 8008748:	bd10      	pop	{r4, pc}
 800874a:	bf00      	nop
 800874c:	08009b80 	.word	0x08009b80
 8008750:	08009bf1 	.word	0x08009bf1

08008754 <__multiply>:
 8008754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	4614      	mov	r4, r2
 800875a:	690a      	ldr	r2, [r1, #16]
 800875c:	6923      	ldr	r3, [r4, #16]
 800875e:	460f      	mov	r7, r1
 8008760:	429a      	cmp	r2, r3
 8008762:	bfa2      	ittt	ge
 8008764:	4623      	movge	r3, r4
 8008766:	460c      	movge	r4, r1
 8008768:	461f      	movge	r7, r3
 800876a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800876e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008772:	68a3      	ldr	r3, [r4, #8]
 8008774:	6861      	ldr	r1, [r4, #4]
 8008776:	eb0a 0609 	add.w	r6, sl, r9
 800877a:	42b3      	cmp	r3, r6
 800877c:	b085      	sub	sp, #20
 800877e:	bfb8      	it	lt
 8008780:	3101      	addlt	r1, #1
 8008782:	f7ff fe93 	bl	80084ac <_Balloc>
 8008786:	b930      	cbnz	r0, 8008796 <__multiply+0x42>
 8008788:	4602      	mov	r2, r0
 800878a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800878e:	4b43      	ldr	r3, [pc, #268]	@ (800889c <__multiply+0x148>)
 8008790:	4843      	ldr	r0, [pc, #268]	@ (80088a0 <__multiply+0x14c>)
 8008792:	f000 fd67 	bl	8009264 <__assert_func>
 8008796:	f100 0514 	add.w	r5, r0, #20
 800879a:	462b      	mov	r3, r5
 800879c:	2200      	movs	r2, #0
 800879e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087a2:	4543      	cmp	r3, r8
 80087a4:	d321      	bcc.n	80087ea <__multiply+0x96>
 80087a6:	f107 0114 	add.w	r1, r7, #20
 80087aa:	f104 0214 	add.w	r2, r4, #20
 80087ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087b6:	9302      	str	r3, [sp, #8]
 80087b8:	1b13      	subs	r3, r2, r4
 80087ba:	3b15      	subs	r3, #21
 80087bc:	f023 0303 	bic.w	r3, r3, #3
 80087c0:	3304      	adds	r3, #4
 80087c2:	f104 0715 	add.w	r7, r4, #21
 80087c6:	42ba      	cmp	r2, r7
 80087c8:	bf38      	it	cc
 80087ca:	2304      	movcc	r3, #4
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	9b02      	ldr	r3, [sp, #8]
 80087d0:	9103      	str	r1, [sp, #12]
 80087d2:	428b      	cmp	r3, r1
 80087d4:	d80c      	bhi.n	80087f0 <__multiply+0x9c>
 80087d6:	2e00      	cmp	r6, #0
 80087d8:	dd03      	ble.n	80087e2 <__multiply+0x8e>
 80087da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d05a      	beq.n	8008898 <__multiply+0x144>
 80087e2:	6106      	str	r6, [r0, #16]
 80087e4:	b005      	add	sp, #20
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	f843 2b04 	str.w	r2, [r3], #4
 80087ee:	e7d8      	b.n	80087a2 <__multiply+0x4e>
 80087f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80087f4:	f1ba 0f00 	cmp.w	sl, #0
 80087f8:	d023      	beq.n	8008842 <__multiply+0xee>
 80087fa:	46a9      	mov	r9, r5
 80087fc:	f04f 0c00 	mov.w	ip, #0
 8008800:	f104 0e14 	add.w	lr, r4, #20
 8008804:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008808:	f8d9 3000 	ldr.w	r3, [r9]
 800880c:	fa1f fb87 	uxth.w	fp, r7
 8008810:	b29b      	uxth	r3, r3
 8008812:	fb0a 330b 	mla	r3, sl, fp, r3
 8008816:	4463      	add	r3, ip
 8008818:	f8d9 c000 	ldr.w	ip, [r9]
 800881c:	0c3f      	lsrs	r7, r7, #16
 800881e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008822:	fb0a c707 	mla	r7, sl, r7, ip
 8008826:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800882a:	b29b      	uxth	r3, r3
 800882c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008830:	4572      	cmp	r2, lr
 8008832:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008836:	f849 3b04 	str.w	r3, [r9], #4
 800883a:	d8e3      	bhi.n	8008804 <__multiply+0xb0>
 800883c:	9b01      	ldr	r3, [sp, #4]
 800883e:	f845 c003 	str.w	ip, [r5, r3]
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	3104      	adds	r1, #4
 8008846:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800884a:	f1b9 0f00 	cmp.w	r9, #0
 800884e:	d021      	beq.n	8008894 <__multiply+0x140>
 8008850:	46ae      	mov	lr, r5
 8008852:	f04f 0a00 	mov.w	sl, #0
 8008856:	682b      	ldr	r3, [r5, #0]
 8008858:	f104 0c14 	add.w	ip, r4, #20
 800885c:	f8bc b000 	ldrh.w	fp, [ip]
 8008860:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008864:	b29b      	uxth	r3, r3
 8008866:	fb09 770b 	mla	r7, r9, fp, r7
 800886a:	4457      	add	r7, sl
 800886c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008870:	f84e 3b04 	str.w	r3, [lr], #4
 8008874:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800887c:	f8be 3000 	ldrh.w	r3, [lr]
 8008880:	4562      	cmp	r2, ip
 8008882:	fb09 330a 	mla	r3, r9, sl, r3
 8008886:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800888a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800888e:	d8e5      	bhi.n	800885c <__multiply+0x108>
 8008890:	9f01      	ldr	r7, [sp, #4]
 8008892:	51eb      	str	r3, [r5, r7]
 8008894:	3504      	adds	r5, #4
 8008896:	e79a      	b.n	80087ce <__multiply+0x7a>
 8008898:	3e01      	subs	r6, #1
 800889a:	e79c      	b.n	80087d6 <__multiply+0x82>
 800889c:	08009b80 	.word	0x08009b80
 80088a0:	08009bf1 	.word	0x08009bf1

080088a4 <__pow5mult>:
 80088a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088a8:	4615      	mov	r5, r2
 80088aa:	f012 0203 	ands.w	r2, r2, #3
 80088ae:	4607      	mov	r7, r0
 80088b0:	460e      	mov	r6, r1
 80088b2:	d007      	beq.n	80088c4 <__pow5mult+0x20>
 80088b4:	4c25      	ldr	r4, [pc, #148]	@ (800894c <__pow5mult+0xa8>)
 80088b6:	3a01      	subs	r2, #1
 80088b8:	2300      	movs	r3, #0
 80088ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088be:	f7ff fe57 	bl	8008570 <__multadd>
 80088c2:	4606      	mov	r6, r0
 80088c4:	10ad      	asrs	r5, r5, #2
 80088c6:	d03d      	beq.n	8008944 <__pow5mult+0xa0>
 80088c8:	69fc      	ldr	r4, [r7, #28]
 80088ca:	b97c      	cbnz	r4, 80088ec <__pow5mult+0x48>
 80088cc:	2010      	movs	r0, #16
 80088ce:	f7ff fd25 	bl	800831c <malloc>
 80088d2:	4602      	mov	r2, r0
 80088d4:	61f8      	str	r0, [r7, #28]
 80088d6:	b928      	cbnz	r0, 80088e4 <__pow5mult+0x40>
 80088d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80088dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008950 <__pow5mult+0xac>)
 80088de:	481d      	ldr	r0, [pc, #116]	@ (8008954 <__pow5mult+0xb0>)
 80088e0:	f000 fcc0 	bl	8009264 <__assert_func>
 80088e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088e8:	6004      	str	r4, [r0, #0]
 80088ea:	60c4      	str	r4, [r0, #12]
 80088ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80088f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80088f4:	b94c      	cbnz	r4, 800890a <__pow5mult+0x66>
 80088f6:	f240 2171 	movw	r1, #625	@ 0x271
 80088fa:	4638      	mov	r0, r7
 80088fc:	f7ff ff14 	bl	8008728 <__i2b>
 8008900:	2300      	movs	r3, #0
 8008902:	4604      	mov	r4, r0
 8008904:	f8c8 0008 	str.w	r0, [r8, #8]
 8008908:	6003      	str	r3, [r0, #0]
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	07eb      	lsls	r3, r5, #31
 8008910:	d50a      	bpl.n	8008928 <__pow5mult+0x84>
 8008912:	4631      	mov	r1, r6
 8008914:	4622      	mov	r2, r4
 8008916:	4638      	mov	r0, r7
 8008918:	f7ff ff1c 	bl	8008754 <__multiply>
 800891c:	4680      	mov	r8, r0
 800891e:	4631      	mov	r1, r6
 8008920:	4638      	mov	r0, r7
 8008922:	f7ff fe03 	bl	800852c <_Bfree>
 8008926:	4646      	mov	r6, r8
 8008928:	106d      	asrs	r5, r5, #1
 800892a:	d00b      	beq.n	8008944 <__pow5mult+0xa0>
 800892c:	6820      	ldr	r0, [r4, #0]
 800892e:	b938      	cbnz	r0, 8008940 <__pow5mult+0x9c>
 8008930:	4622      	mov	r2, r4
 8008932:	4621      	mov	r1, r4
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff ff0d 	bl	8008754 <__multiply>
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	f8c0 9000 	str.w	r9, [r0]
 8008940:	4604      	mov	r4, r0
 8008942:	e7e4      	b.n	800890e <__pow5mult+0x6a>
 8008944:	4630      	mov	r0, r6
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	bf00      	nop
 800894c:	08009c4c 	.word	0x08009c4c
 8008950:	08009b11 	.word	0x08009b11
 8008954:	08009bf1 	.word	0x08009bf1

08008958 <__lshift>:
 8008958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800895c:	460c      	mov	r4, r1
 800895e:	4607      	mov	r7, r0
 8008960:	4691      	mov	r9, r2
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	6849      	ldr	r1, [r1, #4]
 8008966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800896a:	68a3      	ldr	r3, [r4, #8]
 800896c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008970:	f108 0601 	add.w	r6, r8, #1
 8008974:	42b3      	cmp	r3, r6
 8008976:	db0b      	blt.n	8008990 <__lshift+0x38>
 8008978:	4638      	mov	r0, r7
 800897a:	f7ff fd97 	bl	80084ac <_Balloc>
 800897e:	4605      	mov	r5, r0
 8008980:	b948      	cbnz	r0, 8008996 <__lshift+0x3e>
 8008982:	4602      	mov	r2, r0
 8008984:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008988:	4b27      	ldr	r3, [pc, #156]	@ (8008a28 <__lshift+0xd0>)
 800898a:	4828      	ldr	r0, [pc, #160]	@ (8008a2c <__lshift+0xd4>)
 800898c:	f000 fc6a 	bl	8009264 <__assert_func>
 8008990:	3101      	adds	r1, #1
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	e7ee      	b.n	8008974 <__lshift+0x1c>
 8008996:	2300      	movs	r3, #0
 8008998:	f100 0114 	add.w	r1, r0, #20
 800899c:	f100 0210 	add.w	r2, r0, #16
 80089a0:	4618      	mov	r0, r3
 80089a2:	4553      	cmp	r3, sl
 80089a4:	db33      	blt.n	8008a0e <__lshift+0xb6>
 80089a6:	6920      	ldr	r0, [r4, #16]
 80089a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089ac:	f104 0314 	add.w	r3, r4, #20
 80089b0:	f019 091f 	ands.w	r9, r9, #31
 80089b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089bc:	d02b      	beq.n	8008a16 <__lshift+0xbe>
 80089be:	468a      	mov	sl, r1
 80089c0:	2200      	movs	r2, #0
 80089c2:	f1c9 0e20 	rsb	lr, r9, #32
 80089c6:	6818      	ldr	r0, [r3, #0]
 80089c8:	fa00 f009 	lsl.w	r0, r0, r9
 80089cc:	4310      	orrs	r0, r2
 80089ce:	f84a 0b04 	str.w	r0, [sl], #4
 80089d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089d6:	459c      	cmp	ip, r3
 80089d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80089dc:	d8f3      	bhi.n	80089c6 <__lshift+0x6e>
 80089de:	ebac 0304 	sub.w	r3, ip, r4
 80089e2:	3b15      	subs	r3, #21
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	3304      	adds	r3, #4
 80089ea:	f104 0015 	add.w	r0, r4, #21
 80089ee:	4584      	cmp	ip, r0
 80089f0:	bf38      	it	cc
 80089f2:	2304      	movcc	r3, #4
 80089f4:	50ca      	str	r2, [r1, r3]
 80089f6:	b10a      	cbz	r2, 80089fc <__lshift+0xa4>
 80089f8:	f108 0602 	add.w	r6, r8, #2
 80089fc:	3e01      	subs	r6, #1
 80089fe:	4638      	mov	r0, r7
 8008a00:	4621      	mov	r1, r4
 8008a02:	612e      	str	r6, [r5, #16]
 8008a04:	f7ff fd92 	bl	800852c <_Bfree>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a12:	3301      	adds	r3, #1
 8008a14:	e7c5      	b.n	80089a2 <__lshift+0x4a>
 8008a16:	3904      	subs	r1, #4
 8008a18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1c:	459c      	cmp	ip, r3
 8008a1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a22:	d8f9      	bhi.n	8008a18 <__lshift+0xc0>
 8008a24:	e7ea      	b.n	80089fc <__lshift+0xa4>
 8008a26:	bf00      	nop
 8008a28:	08009b80 	.word	0x08009b80
 8008a2c:	08009bf1 	.word	0x08009bf1

08008a30 <__mcmp>:
 8008a30:	4603      	mov	r3, r0
 8008a32:	690a      	ldr	r2, [r1, #16]
 8008a34:	6900      	ldr	r0, [r0, #16]
 8008a36:	b530      	push	{r4, r5, lr}
 8008a38:	1a80      	subs	r0, r0, r2
 8008a3a:	d10e      	bne.n	8008a5a <__mcmp+0x2a>
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	3114      	adds	r1, #20
 8008a40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a50:	4295      	cmp	r5, r2
 8008a52:	d003      	beq.n	8008a5c <__mcmp+0x2c>
 8008a54:	d205      	bcs.n	8008a62 <__mcmp+0x32>
 8008a56:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5a:	bd30      	pop	{r4, r5, pc}
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d3f3      	bcc.n	8008a48 <__mcmp+0x18>
 8008a60:	e7fb      	b.n	8008a5a <__mcmp+0x2a>
 8008a62:	2001      	movs	r0, #1
 8008a64:	e7f9      	b.n	8008a5a <__mcmp+0x2a>
	...

08008a68 <__mdiff>:
 8008a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4689      	mov	r9, r1
 8008a6e:	4606      	mov	r6, r0
 8008a70:	4611      	mov	r1, r2
 8008a72:	4648      	mov	r0, r9
 8008a74:	4614      	mov	r4, r2
 8008a76:	f7ff ffdb 	bl	8008a30 <__mcmp>
 8008a7a:	1e05      	subs	r5, r0, #0
 8008a7c:	d112      	bne.n	8008aa4 <__mdiff+0x3c>
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4630      	mov	r0, r6
 8008a82:	f7ff fd13 	bl	80084ac <_Balloc>
 8008a86:	4602      	mov	r2, r0
 8008a88:	b928      	cbnz	r0, 8008a96 <__mdiff+0x2e>
 8008a8a:	f240 2137 	movw	r1, #567	@ 0x237
 8008a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b88 <__mdiff+0x120>)
 8008a90:	483e      	ldr	r0, [pc, #248]	@ (8008b8c <__mdiff+0x124>)
 8008a92:	f000 fbe7 	bl	8009264 <__assert_func>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	b003      	add	sp, #12
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa4:	bfbc      	itt	lt
 8008aa6:	464b      	movlt	r3, r9
 8008aa8:	46a1      	movlt	r9, r4
 8008aaa:	4630      	mov	r0, r6
 8008aac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ab0:	bfba      	itte	lt
 8008ab2:	461c      	movlt	r4, r3
 8008ab4:	2501      	movlt	r5, #1
 8008ab6:	2500      	movge	r5, #0
 8008ab8:	f7ff fcf8 	bl	80084ac <_Balloc>
 8008abc:	4602      	mov	r2, r0
 8008abe:	b918      	cbnz	r0, 8008ac8 <__mdiff+0x60>
 8008ac0:	f240 2145 	movw	r1, #581	@ 0x245
 8008ac4:	4b30      	ldr	r3, [pc, #192]	@ (8008b88 <__mdiff+0x120>)
 8008ac6:	e7e3      	b.n	8008a90 <__mdiff+0x28>
 8008ac8:	f100 0b14 	add.w	fp, r0, #20
 8008acc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008ad0:	f109 0310 	add.w	r3, r9, #16
 8008ad4:	60c5      	str	r5, [r0, #12]
 8008ad6:	f04f 0c00 	mov.w	ip, #0
 8008ada:	f109 0514 	add.w	r5, r9, #20
 8008ade:	46d9      	mov	r9, fp
 8008ae0:	6926      	ldr	r6, [r4, #16]
 8008ae2:	f104 0e14 	add.w	lr, r4, #20
 8008ae6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008aea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008af6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008afa:	b281      	uxth	r1, r0
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	fa1f f38a 	uxth.w	r3, sl
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	0c00      	lsrs	r0, r0, #16
 8008b06:	4463      	add	r3, ip
 8008b08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b16:	4576      	cmp	r6, lr
 8008b18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b1c:	f849 3b04 	str.w	r3, [r9], #4
 8008b20:	d8e6      	bhi.n	8008af0 <__mdiff+0x88>
 8008b22:	1b33      	subs	r3, r6, r4
 8008b24:	3b15      	subs	r3, #21
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	3415      	adds	r4, #21
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	42a6      	cmp	r6, r4
 8008b30:	bf38      	it	cc
 8008b32:	2304      	movcc	r3, #4
 8008b34:	441d      	add	r5, r3
 8008b36:	445b      	add	r3, fp
 8008b38:	461e      	mov	r6, r3
 8008b3a:	462c      	mov	r4, r5
 8008b3c:	4544      	cmp	r4, r8
 8008b3e:	d30e      	bcc.n	8008b5e <__mdiff+0xf6>
 8008b40:	f108 0103 	add.w	r1, r8, #3
 8008b44:	1b49      	subs	r1, r1, r5
 8008b46:	f021 0103 	bic.w	r1, r1, #3
 8008b4a:	3d03      	subs	r5, #3
 8008b4c:	45a8      	cmp	r8, r5
 8008b4e:	bf38      	it	cc
 8008b50:	2100      	movcc	r1, #0
 8008b52:	440b      	add	r3, r1
 8008b54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b58:	b199      	cbz	r1, 8008b82 <__mdiff+0x11a>
 8008b5a:	6117      	str	r7, [r2, #16]
 8008b5c:	e79e      	b.n	8008a9c <__mdiff+0x34>
 8008b5e:	46e6      	mov	lr, ip
 8008b60:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b64:	fa1f fc81 	uxth.w	ip, r1
 8008b68:	44f4      	add	ip, lr
 8008b6a:	0c08      	lsrs	r0, r1, #16
 8008b6c:	4471      	add	r1, lr
 8008b6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b72:	b289      	uxth	r1, r1
 8008b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b7c:	f846 1b04 	str.w	r1, [r6], #4
 8008b80:	e7dc      	b.n	8008b3c <__mdiff+0xd4>
 8008b82:	3f01      	subs	r7, #1
 8008b84:	e7e6      	b.n	8008b54 <__mdiff+0xec>
 8008b86:	bf00      	nop
 8008b88:	08009b80 	.word	0x08009b80
 8008b8c:	08009bf1 	.word	0x08009bf1

08008b90 <__ulp>:
 8008b90:	4b0e      	ldr	r3, [pc, #56]	@ (8008bcc <__ulp+0x3c>)
 8008b92:	400b      	ands	r3, r1
 8008b94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dc08      	bgt.n	8008bae <__ulp+0x1e>
 8008b9c:	425b      	negs	r3, r3
 8008b9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ba6:	da04      	bge.n	8008bb2 <__ulp+0x22>
 8008ba8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bac:	4113      	asrs	r3, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	e008      	b.n	8008bc4 <__ulp+0x34>
 8008bb2:	f1a2 0314 	sub.w	r3, r2, #20
 8008bb6:	2b1e      	cmp	r3, #30
 8008bb8:	bfd6      	itet	le
 8008bba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008bbe:	2201      	movgt	r2, #1
 8008bc0:	40da      	lsrle	r2, r3
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	7ff00000 	.word	0x7ff00000

08008bd0 <__b2d>:
 8008bd0:	6902      	ldr	r2, [r0, #16]
 8008bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd4:	f100 0614 	add.w	r6, r0, #20
 8008bd8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008bdc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008be0:	4f1e      	ldr	r7, [pc, #120]	@ (8008c5c <__b2d+0x8c>)
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7ff fd54 	bl	8008690 <__hi0bits>
 8008be8:	4603      	mov	r3, r0
 8008bea:	f1c0 0020 	rsb	r0, r0, #32
 8008bee:	2b0a      	cmp	r3, #10
 8008bf0:	f1a2 0504 	sub.w	r5, r2, #4
 8008bf4:	6008      	str	r0, [r1, #0]
 8008bf6:	dc12      	bgt.n	8008c1e <__b2d+0x4e>
 8008bf8:	42ae      	cmp	r6, r5
 8008bfa:	bf2c      	ite	cs
 8008bfc:	2200      	movcs	r2, #0
 8008bfe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c02:	f1c3 0c0b 	rsb	ip, r3, #11
 8008c06:	3315      	adds	r3, #21
 8008c08:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008c0c:	fa04 f303 	lsl.w	r3, r4, r3
 8008c10:	fa22 f20c 	lsr.w	r2, r2, ip
 8008c14:	ea4e 0107 	orr.w	r1, lr, r7
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1e:	42ae      	cmp	r6, r5
 8008c20:	bf36      	itet	cc
 8008c22:	f1a2 0508 	subcc.w	r5, r2, #8
 8008c26:	2200      	movcs	r2, #0
 8008c28:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c2c:	3b0b      	subs	r3, #11
 8008c2e:	d012      	beq.n	8008c56 <__b2d+0x86>
 8008c30:	f1c3 0720 	rsb	r7, r3, #32
 8008c34:	fa22 f107 	lsr.w	r1, r2, r7
 8008c38:	409c      	lsls	r4, r3
 8008c3a:	430c      	orrs	r4, r1
 8008c3c:	42b5      	cmp	r5, r6
 8008c3e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008c42:	bf94      	ite	ls
 8008c44:	2400      	movls	r4, #0
 8008c46:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008c4a:	409a      	lsls	r2, r3
 8008c4c:	40fc      	lsrs	r4, r7
 8008c4e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008c52:	4322      	orrs	r2, r4
 8008c54:	e7e1      	b.n	8008c1a <__b2d+0x4a>
 8008c56:	ea44 0107 	orr.w	r1, r4, r7
 8008c5a:	e7de      	b.n	8008c1a <__b2d+0x4a>
 8008c5c:	3ff00000 	.word	0x3ff00000

08008c60 <__d2b>:
 8008c60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008c64:	2101      	movs	r1, #1
 8008c66:	4690      	mov	r8, r2
 8008c68:	4699      	mov	r9, r3
 8008c6a:	9e08      	ldr	r6, [sp, #32]
 8008c6c:	f7ff fc1e 	bl	80084ac <_Balloc>
 8008c70:	4604      	mov	r4, r0
 8008c72:	b930      	cbnz	r0, 8008c82 <__d2b+0x22>
 8008c74:	4602      	mov	r2, r0
 8008c76:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c7a:	4b23      	ldr	r3, [pc, #140]	@ (8008d08 <__d2b+0xa8>)
 8008c7c:	4823      	ldr	r0, [pc, #140]	@ (8008d0c <__d2b+0xac>)
 8008c7e:	f000 faf1 	bl	8009264 <__assert_func>
 8008c82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c8a:	b10d      	cbz	r5, 8008c90 <__d2b+0x30>
 8008c8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	f1b8 0300 	subs.w	r3, r8, #0
 8008c96:	d024      	beq.n	8008ce2 <__d2b+0x82>
 8008c98:	4668      	mov	r0, sp
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	f7ff fd17 	bl	80086ce <__lo0bits>
 8008ca0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ca4:	b1d8      	cbz	r0, 8008cde <__d2b+0x7e>
 8008ca6:	f1c0 0320 	rsb	r3, r0, #32
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	40c2      	lsrs	r2, r0
 8008cb2:	6163      	str	r3, [r4, #20]
 8008cb4:	9201      	str	r2, [sp, #4]
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bf0c      	ite	eq
 8008cbc:	2201      	moveq	r2, #1
 8008cbe:	2202      	movne	r2, #2
 8008cc0:	61a3      	str	r3, [r4, #24]
 8008cc2:	6122      	str	r2, [r4, #16]
 8008cc4:	b1ad      	cbz	r5, 8008cf2 <__d2b+0x92>
 8008cc6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008cca:	4405      	add	r5, r0
 8008ccc:	6035      	str	r5, [r6, #0]
 8008cce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd4:	6018      	str	r0, [r3, #0]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	b002      	add	sp, #8
 8008cda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008cde:	6161      	str	r1, [r4, #20]
 8008ce0:	e7e9      	b.n	8008cb6 <__d2b+0x56>
 8008ce2:	a801      	add	r0, sp, #4
 8008ce4:	f7ff fcf3 	bl	80086ce <__lo0bits>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	6163      	str	r3, [r4, #20]
 8008cee:	3020      	adds	r0, #32
 8008cf0:	e7e7      	b.n	8008cc2 <__d2b+0x62>
 8008cf2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008cf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008cfa:	6030      	str	r0, [r6, #0]
 8008cfc:	6918      	ldr	r0, [r3, #16]
 8008cfe:	f7ff fcc7 	bl	8008690 <__hi0bits>
 8008d02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d06:	e7e4      	b.n	8008cd2 <__d2b+0x72>
 8008d08:	08009b80 	.word	0x08009b80
 8008d0c:	08009bf1 	.word	0x08009bf1

08008d10 <__ratio>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	b085      	sub	sp, #20
 8008d16:	e9cd 1000 	strd	r1, r0, [sp]
 8008d1a:	a902      	add	r1, sp, #8
 8008d1c:	f7ff ff58 	bl	8008bd0 <__b2d>
 8008d20:	468b      	mov	fp, r1
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	9800      	ldr	r0, [sp, #0]
 8008d28:	a903      	add	r1, sp, #12
 8008d2a:	f7ff ff51 	bl	8008bd0 <__b2d>
 8008d2e:	460d      	mov	r5, r1
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	4689      	mov	r9, r1
 8008d34:	6919      	ldr	r1, [r3, #16]
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	4604      	mov	r4, r0
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	1ac9      	subs	r1, r1, r3
 8008d40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bfcd      	iteet	gt
 8008d4e:	463a      	movgt	r2, r7
 8008d50:	462a      	movle	r2, r5
 8008d52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008d5a:	bfd8      	it	le
 8008d5c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008d60:	464b      	mov	r3, r9
 8008d62:	4622      	mov	r2, r4
 8008d64:	4659      	mov	r1, fp
 8008d66:	f7f7 fce1 	bl	800072c <__aeabi_ddiv>
 8008d6a:	b005      	add	sp, #20
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d70 <__copybits>:
 8008d70:	3901      	subs	r1, #1
 8008d72:	b570      	push	{r4, r5, r6, lr}
 8008d74:	1149      	asrs	r1, r1, #5
 8008d76:	6914      	ldr	r4, [r2, #16]
 8008d78:	3101      	adds	r1, #1
 8008d7a:	f102 0314 	add.w	r3, r2, #20
 8008d7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d86:	1f05      	subs	r5, r0, #4
 8008d88:	42a3      	cmp	r3, r4
 8008d8a:	d30c      	bcc.n	8008da6 <__copybits+0x36>
 8008d8c:	1aa3      	subs	r3, r4, r2
 8008d8e:	3b11      	subs	r3, #17
 8008d90:	f023 0303 	bic.w	r3, r3, #3
 8008d94:	3211      	adds	r2, #17
 8008d96:	42a2      	cmp	r2, r4
 8008d98:	bf88      	it	hi
 8008d9a:	2300      	movhi	r3, #0
 8008d9c:	4418      	add	r0, r3
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4288      	cmp	r0, r1
 8008da2:	d305      	bcc.n	8008db0 <__copybits+0x40>
 8008da4:	bd70      	pop	{r4, r5, r6, pc}
 8008da6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008daa:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dae:	e7eb      	b.n	8008d88 <__copybits+0x18>
 8008db0:	f840 3b04 	str.w	r3, [r0], #4
 8008db4:	e7f4      	b.n	8008da0 <__copybits+0x30>

08008db6 <__any_on>:
 8008db6:	f100 0214 	add.w	r2, r0, #20
 8008dba:	6900      	ldr	r0, [r0, #16]
 8008dbc:	114b      	asrs	r3, r1, #5
 8008dbe:	4298      	cmp	r0, r3
 8008dc0:	b510      	push	{r4, lr}
 8008dc2:	db11      	blt.n	8008de8 <__any_on+0x32>
 8008dc4:	dd0a      	ble.n	8008ddc <__any_on+0x26>
 8008dc6:	f011 011f 	ands.w	r1, r1, #31
 8008dca:	d007      	beq.n	8008ddc <__any_on+0x26>
 8008dcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008dd0:	fa24 f001 	lsr.w	r0, r4, r1
 8008dd4:	fa00 f101 	lsl.w	r1, r0, r1
 8008dd8:	428c      	cmp	r4, r1
 8008dda:	d10b      	bne.n	8008df4 <__any_on+0x3e>
 8008ddc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d803      	bhi.n	8008dec <__any_on+0x36>
 8008de4:	2000      	movs	r0, #0
 8008de6:	bd10      	pop	{r4, pc}
 8008de8:	4603      	mov	r3, r0
 8008dea:	e7f7      	b.n	8008ddc <__any_on+0x26>
 8008dec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008df0:	2900      	cmp	r1, #0
 8008df2:	d0f5      	beq.n	8008de0 <__any_on+0x2a>
 8008df4:	2001      	movs	r0, #1
 8008df6:	e7f6      	b.n	8008de6 <__any_on+0x30>

08008df8 <__ascii_wctomb>:
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	b141      	cbz	r1, 8008e10 <__ascii_wctomb+0x18>
 8008dfe:	2aff      	cmp	r2, #255	@ 0xff
 8008e00:	d904      	bls.n	8008e0c <__ascii_wctomb+0x14>
 8008e02:	228a      	movs	r2, #138	@ 0x8a
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	4770      	bx	lr
 8008e0c:	2001      	movs	r0, #1
 8008e0e:	700a      	strb	r2, [r1, #0]
 8008e10:	4770      	bx	lr

08008e12 <__ssputs_r>:
 8008e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e16:	461f      	mov	r7, r3
 8008e18:	688e      	ldr	r6, [r1, #8]
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	42be      	cmp	r6, r7
 8008e1e:	460c      	mov	r4, r1
 8008e20:	4690      	mov	r8, r2
 8008e22:	680b      	ldr	r3, [r1, #0]
 8008e24:	d82d      	bhi.n	8008e82 <__ssputs_r+0x70>
 8008e26:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e2a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e2e:	d026      	beq.n	8008e7e <__ssputs_r+0x6c>
 8008e30:	6965      	ldr	r5, [r4, #20]
 8008e32:	6909      	ldr	r1, [r1, #16]
 8008e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e38:	eba3 0901 	sub.w	r9, r3, r1
 8008e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e40:	1c7b      	adds	r3, r7, #1
 8008e42:	444b      	add	r3, r9
 8008e44:	106d      	asrs	r5, r5, #1
 8008e46:	429d      	cmp	r5, r3
 8008e48:	bf38      	it	cc
 8008e4a:	461d      	movcc	r5, r3
 8008e4c:	0553      	lsls	r3, r2, #21
 8008e4e:	d527      	bpl.n	8008ea0 <__ssputs_r+0x8e>
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7ff fa8d 	bl	8008370 <_malloc_r>
 8008e56:	4606      	mov	r6, r0
 8008e58:	b360      	cbz	r0, 8008eb4 <__ssputs_r+0xa2>
 8008e5a:	464a      	mov	r2, r9
 8008e5c:	6921      	ldr	r1, [r4, #16]
 8008e5e:	f7fe f874 	bl	8006f4a <memcpy>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	6126      	str	r6, [r4, #16]
 8008e70:	444e      	add	r6, r9
 8008e72:	6026      	str	r6, [r4, #0]
 8008e74:	463e      	mov	r6, r7
 8008e76:	6165      	str	r5, [r4, #20]
 8008e78:	eba5 0509 	sub.w	r5, r5, r9
 8008e7c:	60a5      	str	r5, [r4, #8]
 8008e7e:	42be      	cmp	r6, r7
 8008e80:	d900      	bls.n	8008e84 <__ssputs_r+0x72>
 8008e82:	463e      	mov	r6, r7
 8008e84:	4632      	mov	r2, r6
 8008e86:	4641      	mov	r1, r8
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	f000 f9c1 	bl	8009210 <memmove>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	1b9b      	subs	r3, r3, r6
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	4433      	add	r3, r6
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	f000 fa11 	bl	80092c8 <_realloc_r>
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d1e0      	bne.n	8008e6e <__ssputs_r+0x5c>
 8008eac:	4650      	mov	r0, sl
 8008eae:	6921      	ldr	r1, [r4, #16]
 8008eb0:	f7fe feb2 	bl	8007c18 <_free_r>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	f8ca 3000 	str.w	r3, [sl]
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ec4:	81a3      	strh	r3, [r4, #12]
 8008ec6:	e7e9      	b.n	8008e9c <__ssputs_r+0x8a>

08008ec8 <_svfiprintf_r>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	4698      	mov	r8, r3
 8008ece:	898b      	ldrh	r3, [r1, #12]
 8008ed0:	4607      	mov	r7, r0
 8008ed2:	061b      	lsls	r3, r3, #24
 8008ed4:	460d      	mov	r5, r1
 8008ed6:	4614      	mov	r4, r2
 8008ed8:	b09d      	sub	sp, #116	@ 0x74
 8008eda:	d510      	bpl.n	8008efe <_svfiprintf_r+0x36>
 8008edc:	690b      	ldr	r3, [r1, #16]
 8008ede:	b973      	cbnz	r3, 8008efe <_svfiprintf_r+0x36>
 8008ee0:	2140      	movs	r1, #64	@ 0x40
 8008ee2:	f7ff fa45 	bl	8008370 <_malloc_r>
 8008ee6:	6028      	str	r0, [r5, #0]
 8008ee8:	6128      	str	r0, [r5, #16]
 8008eea:	b930      	cbnz	r0, 8008efa <_svfiprintf_r+0x32>
 8008eec:	230c      	movs	r3, #12
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	b01d      	add	sp, #116	@ 0x74
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	2340      	movs	r3, #64	@ 0x40
 8008efc:	616b      	str	r3, [r5, #20]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f02:	2320      	movs	r3, #32
 8008f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f08:	2330      	movs	r3, #48	@ 0x30
 8008f0a:	f04f 0901 	mov.w	r9, #1
 8008f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80090ac <_svfiprintf_r+0x1e4>
 8008f16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f1a:	4623      	mov	r3, r4
 8008f1c:	469a      	mov	sl, r3
 8008f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f22:	b10a      	cbz	r2, 8008f28 <_svfiprintf_r+0x60>
 8008f24:	2a25      	cmp	r2, #37	@ 0x25
 8008f26:	d1f9      	bne.n	8008f1c <_svfiprintf_r+0x54>
 8008f28:	ebba 0b04 	subs.w	fp, sl, r4
 8008f2c:	d00b      	beq.n	8008f46 <_svfiprintf_r+0x7e>
 8008f2e:	465b      	mov	r3, fp
 8008f30:	4622      	mov	r2, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	4638      	mov	r0, r7
 8008f36:	f7ff ff6c 	bl	8008e12 <__ssputs_r>
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f000 80a7 	beq.w	800908e <_svfiprintf_r+0x1c6>
 8008f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f42:	445a      	add	r2, fp
 8008f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f46:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 809f 	beq.w	800908e <_svfiprintf_r+0x1c6>
 8008f50:	2300      	movs	r3, #0
 8008f52:	f04f 32ff 	mov.w	r2, #4294967295
 8008f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f5a:	f10a 0a01 	add.w	sl, sl, #1
 8008f5e:	9304      	str	r3, [sp, #16]
 8008f60:	9307      	str	r3, [sp, #28]
 8008f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f68:	4654      	mov	r4, sl
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f70:	484e      	ldr	r0, [pc, #312]	@ (80090ac <_svfiprintf_r+0x1e4>)
 8008f72:	f7fd ffdc 	bl	8006f2e <memchr>
 8008f76:	9a04      	ldr	r2, [sp, #16]
 8008f78:	b9d8      	cbnz	r0, 8008fb2 <_svfiprintf_r+0xea>
 8008f7a:	06d0      	lsls	r0, r2, #27
 8008f7c:	bf44      	itt	mi
 8008f7e:	2320      	movmi	r3, #32
 8008f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f84:	0711      	lsls	r1, r2, #28
 8008f86:	bf44      	itt	mi
 8008f88:	232b      	movmi	r3, #43	@ 0x2b
 8008f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f94:	d015      	beq.n	8008fc2 <_svfiprintf_r+0xfa>
 8008f96:	4654      	mov	r4, sl
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f04f 0c0a 	mov.w	ip, #10
 8008f9e:	9a07      	ldr	r2, [sp, #28]
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fa6:	3b30      	subs	r3, #48	@ 0x30
 8008fa8:	2b09      	cmp	r3, #9
 8008faa:	d94b      	bls.n	8009044 <_svfiprintf_r+0x17c>
 8008fac:	b1b0      	cbz	r0, 8008fdc <_svfiprintf_r+0x114>
 8008fae:	9207      	str	r2, [sp, #28]
 8008fb0:	e014      	b.n	8008fdc <_svfiprintf_r+0x114>
 8008fb2:	eba0 0308 	sub.w	r3, r0, r8
 8008fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	46a2      	mov	sl, r4
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	e7d2      	b.n	8008f68 <_svfiprintf_r+0xa0>
 8008fc2:	9b03      	ldr	r3, [sp, #12]
 8008fc4:	1d19      	adds	r1, r3, #4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	9103      	str	r1, [sp, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bfbb      	ittet	lt
 8008fce:	425b      	neglt	r3, r3
 8008fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8008fd4:	9307      	strge	r3, [sp, #28]
 8008fd6:	9307      	strlt	r3, [sp, #28]
 8008fd8:	bfb8      	it	lt
 8008fda:	9204      	strlt	r2, [sp, #16]
 8008fdc:	7823      	ldrb	r3, [r4, #0]
 8008fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fe0:	d10a      	bne.n	8008ff8 <_svfiprintf_r+0x130>
 8008fe2:	7863      	ldrb	r3, [r4, #1]
 8008fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe6:	d132      	bne.n	800904e <_svfiprintf_r+0x186>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	3402      	adds	r4, #2
 8008fec:	1d1a      	adds	r2, r3, #4
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	9203      	str	r2, [sp, #12]
 8008ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80090b0 <_svfiprintf_r+0x1e8>
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	4650      	mov	r0, sl
 8009000:	7821      	ldrb	r1, [r4, #0]
 8009002:	f7fd ff94 	bl	8006f2e <memchr>
 8009006:	b138      	cbz	r0, 8009018 <_svfiprintf_r+0x150>
 8009008:	2240      	movs	r2, #64	@ 0x40
 800900a:	9b04      	ldr	r3, [sp, #16]
 800900c:	eba0 000a 	sub.w	r0, r0, sl
 8009010:	4082      	lsls	r2, r0
 8009012:	4313      	orrs	r3, r2
 8009014:	3401      	adds	r4, #1
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800901c:	2206      	movs	r2, #6
 800901e:	4825      	ldr	r0, [pc, #148]	@ (80090b4 <_svfiprintf_r+0x1ec>)
 8009020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009024:	f7fd ff83 	bl	8006f2e <memchr>
 8009028:	2800      	cmp	r0, #0
 800902a:	d036      	beq.n	800909a <_svfiprintf_r+0x1d2>
 800902c:	4b22      	ldr	r3, [pc, #136]	@ (80090b8 <_svfiprintf_r+0x1f0>)
 800902e:	bb1b      	cbnz	r3, 8009078 <_svfiprintf_r+0x1b0>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	3307      	adds	r3, #7
 8009034:	f023 0307 	bic.w	r3, r3, #7
 8009038:	3308      	adds	r3, #8
 800903a:	9303      	str	r3, [sp, #12]
 800903c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800903e:	4433      	add	r3, r6
 8009040:	9309      	str	r3, [sp, #36]	@ 0x24
 8009042:	e76a      	b.n	8008f1a <_svfiprintf_r+0x52>
 8009044:	460c      	mov	r4, r1
 8009046:	2001      	movs	r0, #1
 8009048:	fb0c 3202 	mla	r2, ip, r2, r3
 800904c:	e7a8      	b.n	8008fa0 <_svfiprintf_r+0xd8>
 800904e:	2300      	movs	r3, #0
 8009050:	f04f 0c0a 	mov.w	ip, #10
 8009054:	4619      	mov	r1, r3
 8009056:	3401      	adds	r4, #1
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	4620      	mov	r0, r4
 800905c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009060:	3a30      	subs	r2, #48	@ 0x30
 8009062:	2a09      	cmp	r2, #9
 8009064:	d903      	bls.n	800906e <_svfiprintf_r+0x1a6>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0c6      	beq.n	8008ff8 <_svfiprintf_r+0x130>
 800906a:	9105      	str	r1, [sp, #20]
 800906c:	e7c4      	b.n	8008ff8 <_svfiprintf_r+0x130>
 800906e:	4604      	mov	r4, r0
 8009070:	2301      	movs	r3, #1
 8009072:	fb0c 2101 	mla	r1, ip, r1, r2
 8009076:	e7f0      	b.n	800905a <_svfiprintf_r+0x192>
 8009078:	ab03      	add	r3, sp, #12
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	462a      	mov	r2, r5
 800907e:	4638      	mov	r0, r7
 8009080:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <_svfiprintf_r+0x1f4>)
 8009082:	a904      	add	r1, sp, #16
 8009084:	f7fd f9de 	bl	8006444 <_printf_float>
 8009088:	1c42      	adds	r2, r0, #1
 800908a:	4606      	mov	r6, r0
 800908c:	d1d6      	bne.n	800903c <_svfiprintf_r+0x174>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	065b      	lsls	r3, r3, #25
 8009092:	f53f af2d 	bmi.w	8008ef0 <_svfiprintf_r+0x28>
 8009096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009098:	e72c      	b.n	8008ef4 <_svfiprintf_r+0x2c>
 800909a:	ab03      	add	r3, sp, #12
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	462a      	mov	r2, r5
 80090a0:	4638      	mov	r0, r7
 80090a2:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <_svfiprintf_r+0x1f4>)
 80090a4:	a904      	add	r1, sp, #16
 80090a6:	f7fd fc6b 	bl	8006980 <_printf_i>
 80090aa:	e7ed      	b.n	8009088 <_svfiprintf_r+0x1c0>
 80090ac:	08009e49 	.word	0x08009e49
 80090b0:	08009e4f 	.word	0x08009e4f
 80090b4:	08009e53 	.word	0x08009e53
 80090b8:	08006445 	.word	0x08006445
 80090bc:	08008e13 	.word	0x08008e13

080090c0 <__sflush_r>:
 80090c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	0716      	lsls	r6, r2, #28
 80090c8:	4605      	mov	r5, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	d454      	bmi.n	8009178 <__sflush_r+0xb8>
 80090ce:	684b      	ldr	r3, [r1, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	dc02      	bgt.n	80090da <__sflush_r+0x1a>
 80090d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	dd48      	ble.n	800916c <__sflush_r+0xac>
 80090da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090dc:	2e00      	cmp	r6, #0
 80090de:	d045      	beq.n	800916c <__sflush_r+0xac>
 80090e0:	2300      	movs	r3, #0
 80090e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090e6:	682f      	ldr	r7, [r5, #0]
 80090e8:	6a21      	ldr	r1, [r4, #32]
 80090ea:	602b      	str	r3, [r5, #0]
 80090ec:	d030      	beq.n	8009150 <__sflush_r+0x90>
 80090ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	0759      	lsls	r1, r3, #29
 80090f4:	d505      	bpl.n	8009102 <__sflush_r+0x42>
 80090f6:	6863      	ldr	r3, [r4, #4]
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090fc:	b10b      	cbz	r3, 8009102 <__sflush_r+0x42>
 80090fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009100:	1ad2      	subs	r2, r2, r3
 8009102:	2300      	movs	r3, #0
 8009104:	4628      	mov	r0, r5
 8009106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009108:	6a21      	ldr	r1, [r4, #32]
 800910a:	47b0      	blx	r6
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	d106      	bne.n	8009120 <__sflush_r+0x60>
 8009112:	6829      	ldr	r1, [r5, #0]
 8009114:	291d      	cmp	r1, #29
 8009116:	d82b      	bhi.n	8009170 <__sflush_r+0xb0>
 8009118:	4a28      	ldr	r2, [pc, #160]	@ (80091bc <__sflush_r+0xfc>)
 800911a:	410a      	asrs	r2, r1
 800911c:	07d6      	lsls	r6, r2, #31
 800911e:	d427      	bmi.n	8009170 <__sflush_r+0xb0>
 8009120:	2200      	movs	r2, #0
 8009122:	6062      	str	r2, [r4, #4]
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	04d9      	lsls	r1, r3, #19
 8009128:	6022      	str	r2, [r4, #0]
 800912a:	d504      	bpl.n	8009136 <__sflush_r+0x76>
 800912c:	1c42      	adds	r2, r0, #1
 800912e:	d101      	bne.n	8009134 <__sflush_r+0x74>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	b903      	cbnz	r3, 8009136 <__sflush_r+0x76>
 8009134:	6560      	str	r0, [r4, #84]	@ 0x54
 8009136:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009138:	602f      	str	r7, [r5, #0]
 800913a:	b1b9      	cbz	r1, 800916c <__sflush_r+0xac>
 800913c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009140:	4299      	cmp	r1, r3
 8009142:	d002      	beq.n	800914a <__sflush_r+0x8a>
 8009144:	4628      	mov	r0, r5
 8009146:	f7fe fd67 	bl	8007c18 <_free_r>
 800914a:	2300      	movs	r3, #0
 800914c:	6363      	str	r3, [r4, #52]	@ 0x34
 800914e:	e00d      	b.n	800916c <__sflush_r+0xac>
 8009150:	2301      	movs	r3, #1
 8009152:	4628      	mov	r0, r5
 8009154:	47b0      	blx	r6
 8009156:	4602      	mov	r2, r0
 8009158:	1c50      	adds	r0, r2, #1
 800915a:	d1c9      	bne.n	80090f0 <__sflush_r+0x30>
 800915c:	682b      	ldr	r3, [r5, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d0c6      	beq.n	80090f0 <__sflush_r+0x30>
 8009162:	2b1d      	cmp	r3, #29
 8009164:	d001      	beq.n	800916a <__sflush_r+0xaa>
 8009166:	2b16      	cmp	r3, #22
 8009168:	d11d      	bne.n	80091a6 <__sflush_r+0xe6>
 800916a:	602f      	str	r7, [r5, #0]
 800916c:	2000      	movs	r0, #0
 800916e:	e021      	b.n	80091b4 <__sflush_r+0xf4>
 8009170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009174:	b21b      	sxth	r3, r3
 8009176:	e01a      	b.n	80091ae <__sflush_r+0xee>
 8009178:	690f      	ldr	r7, [r1, #16]
 800917a:	2f00      	cmp	r7, #0
 800917c:	d0f6      	beq.n	800916c <__sflush_r+0xac>
 800917e:	0793      	lsls	r3, r2, #30
 8009180:	bf18      	it	ne
 8009182:	2300      	movne	r3, #0
 8009184:	680e      	ldr	r6, [r1, #0]
 8009186:	bf08      	it	eq
 8009188:	694b      	ldreq	r3, [r1, #20]
 800918a:	1bf6      	subs	r6, r6, r7
 800918c:	600f      	str	r7, [r1, #0]
 800918e:	608b      	str	r3, [r1, #8]
 8009190:	2e00      	cmp	r6, #0
 8009192:	ddeb      	ble.n	800916c <__sflush_r+0xac>
 8009194:	4633      	mov	r3, r6
 8009196:	463a      	mov	r2, r7
 8009198:	4628      	mov	r0, r5
 800919a:	6a21      	ldr	r1, [r4, #32]
 800919c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80091a0:	47e0      	blx	ip
 80091a2:	2800      	cmp	r0, #0
 80091a4:	dc07      	bgt.n	80091b6 <__sflush_r+0xf6>
 80091a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ae:	f04f 30ff 	mov.w	r0, #4294967295
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b6:	4407      	add	r7, r0
 80091b8:	1a36      	subs	r6, r6, r0
 80091ba:	e7e9      	b.n	8009190 <__sflush_r+0xd0>
 80091bc:	dfbffffe 	.word	0xdfbffffe

080091c0 <_fflush_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	690b      	ldr	r3, [r1, #16]
 80091c4:	4605      	mov	r5, r0
 80091c6:	460c      	mov	r4, r1
 80091c8:	b913      	cbnz	r3, 80091d0 <_fflush_r+0x10>
 80091ca:	2500      	movs	r5, #0
 80091cc:	4628      	mov	r0, r5
 80091ce:	bd38      	pop	{r3, r4, r5, pc}
 80091d0:	b118      	cbz	r0, 80091da <_fflush_r+0x1a>
 80091d2:	6a03      	ldr	r3, [r0, #32]
 80091d4:	b90b      	cbnz	r3, 80091da <_fflush_r+0x1a>
 80091d6:	f7fd fd7f 	bl	8006cd8 <__sinit>
 80091da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f3      	beq.n	80091ca <_fflush_r+0xa>
 80091e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091e4:	07d0      	lsls	r0, r2, #31
 80091e6:	d404      	bmi.n	80091f2 <_fflush_r+0x32>
 80091e8:	0599      	lsls	r1, r3, #22
 80091ea:	d402      	bmi.n	80091f2 <_fflush_r+0x32>
 80091ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ee:	f7fd fe9c 	bl	8006f2a <__retarget_lock_acquire_recursive>
 80091f2:	4628      	mov	r0, r5
 80091f4:	4621      	mov	r1, r4
 80091f6:	f7ff ff63 	bl	80090c0 <__sflush_r>
 80091fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091fc:	4605      	mov	r5, r0
 80091fe:	07da      	lsls	r2, r3, #31
 8009200:	d4e4      	bmi.n	80091cc <_fflush_r+0xc>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	059b      	lsls	r3, r3, #22
 8009206:	d4e1      	bmi.n	80091cc <_fflush_r+0xc>
 8009208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800920a:	f7fd fe8f 	bl	8006f2c <__retarget_lock_release_recursive>
 800920e:	e7dd      	b.n	80091cc <_fflush_r+0xc>

08009210 <memmove>:
 8009210:	4288      	cmp	r0, r1
 8009212:	b510      	push	{r4, lr}
 8009214:	eb01 0402 	add.w	r4, r1, r2
 8009218:	d902      	bls.n	8009220 <memmove+0x10>
 800921a:	4284      	cmp	r4, r0
 800921c:	4623      	mov	r3, r4
 800921e:	d807      	bhi.n	8009230 <memmove+0x20>
 8009220:	1e43      	subs	r3, r0, #1
 8009222:	42a1      	cmp	r1, r4
 8009224:	d008      	beq.n	8009238 <memmove+0x28>
 8009226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800922a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800922e:	e7f8      	b.n	8009222 <memmove+0x12>
 8009230:	4601      	mov	r1, r0
 8009232:	4402      	add	r2, r0
 8009234:	428a      	cmp	r2, r1
 8009236:	d100      	bne.n	800923a <memmove+0x2a>
 8009238:	bd10      	pop	{r4, pc}
 800923a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800923e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009242:	e7f7      	b.n	8009234 <memmove+0x24>

08009244 <_sbrk_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	2300      	movs	r3, #0
 8009248:	4d05      	ldr	r5, [pc, #20]	@ (8009260 <_sbrk_r+0x1c>)
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	602b      	str	r3, [r5, #0]
 8009250:	f7f9 fc08 	bl	8002a64 <_sbrk>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_sbrk_r+0x1a>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_sbrk_r+0x1a>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20000490 	.word	0x20000490

08009264 <__assert_func>:
 8009264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009266:	4614      	mov	r4, r2
 8009268:	461a      	mov	r2, r3
 800926a:	4b09      	ldr	r3, [pc, #36]	@ (8009290 <__assert_func+0x2c>)
 800926c:	4605      	mov	r5, r0
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68d8      	ldr	r0, [r3, #12]
 8009272:	b954      	cbnz	r4, 800928a <__assert_func+0x26>
 8009274:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <__assert_func+0x30>)
 8009276:	461c      	mov	r4, r3
 8009278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800927c:	9100      	str	r1, [sp, #0]
 800927e:	462b      	mov	r3, r5
 8009280:	4905      	ldr	r1, [pc, #20]	@ (8009298 <__assert_func+0x34>)
 8009282:	f000 f84f 	bl	8009324 <fiprintf>
 8009286:	f000 f85f 	bl	8009348 <abort>
 800928a:	4b04      	ldr	r3, [pc, #16]	@ (800929c <__assert_func+0x38>)
 800928c:	e7f4      	b.n	8009278 <__assert_func+0x14>
 800928e:	bf00      	nop
 8009290:	2000018c 	.word	0x2000018c
 8009294:	08009e95 	.word	0x08009e95
 8009298:	08009e67 	.word	0x08009e67
 800929c:	08009e5a 	.word	0x08009e5a

080092a0 <_calloc_r>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	fba1 5402 	umull	r5, r4, r1, r2
 80092a6:	b93c      	cbnz	r4, 80092b8 <_calloc_r+0x18>
 80092a8:	4629      	mov	r1, r5
 80092aa:	f7ff f861 	bl	8008370 <_malloc_r>
 80092ae:	4606      	mov	r6, r0
 80092b0:	b928      	cbnz	r0, 80092be <_calloc_r+0x1e>
 80092b2:	2600      	movs	r6, #0
 80092b4:	4630      	mov	r0, r6
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	220c      	movs	r2, #12
 80092ba:	6002      	str	r2, [r0, #0]
 80092bc:	e7f9      	b.n	80092b2 <_calloc_r+0x12>
 80092be:	462a      	mov	r2, r5
 80092c0:	4621      	mov	r1, r4
 80092c2:	f7fd fda2 	bl	8006e0a <memset>
 80092c6:	e7f5      	b.n	80092b4 <_calloc_r+0x14>

080092c8 <_realloc_r>:
 80092c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092cc:	4680      	mov	r8, r0
 80092ce:	4615      	mov	r5, r2
 80092d0:	460c      	mov	r4, r1
 80092d2:	b921      	cbnz	r1, 80092de <_realloc_r+0x16>
 80092d4:	4611      	mov	r1, r2
 80092d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092da:	f7ff b849 	b.w	8008370 <_malloc_r>
 80092de:	b92a      	cbnz	r2, 80092ec <_realloc_r+0x24>
 80092e0:	f7fe fc9a 	bl	8007c18 <_free_r>
 80092e4:	2400      	movs	r4, #0
 80092e6:	4620      	mov	r0, r4
 80092e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ec:	f000 f833 	bl	8009356 <_malloc_usable_size_r>
 80092f0:	4285      	cmp	r5, r0
 80092f2:	4606      	mov	r6, r0
 80092f4:	d802      	bhi.n	80092fc <_realloc_r+0x34>
 80092f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80092fa:	d8f4      	bhi.n	80092e6 <_realloc_r+0x1e>
 80092fc:	4629      	mov	r1, r5
 80092fe:	4640      	mov	r0, r8
 8009300:	f7ff f836 	bl	8008370 <_malloc_r>
 8009304:	4607      	mov	r7, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0ec      	beq.n	80092e4 <_realloc_r+0x1c>
 800930a:	42b5      	cmp	r5, r6
 800930c:	462a      	mov	r2, r5
 800930e:	4621      	mov	r1, r4
 8009310:	bf28      	it	cs
 8009312:	4632      	movcs	r2, r6
 8009314:	f7fd fe19 	bl	8006f4a <memcpy>
 8009318:	4621      	mov	r1, r4
 800931a:	4640      	mov	r0, r8
 800931c:	f7fe fc7c 	bl	8007c18 <_free_r>
 8009320:	463c      	mov	r4, r7
 8009322:	e7e0      	b.n	80092e6 <_realloc_r+0x1e>

08009324 <fiprintf>:
 8009324:	b40e      	push	{r1, r2, r3}
 8009326:	b503      	push	{r0, r1, lr}
 8009328:	4601      	mov	r1, r0
 800932a:	ab03      	add	r3, sp, #12
 800932c:	4805      	ldr	r0, [pc, #20]	@ (8009344 <fiprintf+0x20>)
 800932e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009332:	6800      	ldr	r0, [r0, #0]
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	f000 f83d 	bl	80093b4 <_vfiprintf_r>
 800933a:	b002      	add	sp, #8
 800933c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009340:	b003      	add	sp, #12
 8009342:	4770      	bx	lr
 8009344:	2000018c 	.word	0x2000018c

08009348 <abort>:
 8009348:	2006      	movs	r0, #6
 800934a:	b508      	push	{r3, lr}
 800934c:	f000 fa06 	bl	800975c <raise>
 8009350:	2001      	movs	r0, #1
 8009352:	f7f9 fb12 	bl	800297a <_exit>

08009356 <_malloc_usable_size_r>:
 8009356:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935a:	1f18      	subs	r0, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	bfbc      	itt	lt
 8009360:	580b      	ldrlt	r3, [r1, r0]
 8009362:	18c0      	addlt	r0, r0, r3
 8009364:	4770      	bx	lr

08009366 <__sfputc_r>:
 8009366:	6893      	ldr	r3, [r2, #8]
 8009368:	b410      	push	{r4}
 800936a:	3b01      	subs	r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	6093      	str	r3, [r2, #8]
 8009370:	da07      	bge.n	8009382 <__sfputc_r+0x1c>
 8009372:	6994      	ldr	r4, [r2, #24]
 8009374:	42a3      	cmp	r3, r4
 8009376:	db01      	blt.n	800937c <__sfputc_r+0x16>
 8009378:	290a      	cmp	r1, #10
 800937a:	d102      	bne.n	8009382 <__sfputc_r+0x1c>
 800937c:	bc10      	pop	{r4}
 800937e:	f000 b931 	b.w	80095e4 <__swbuf_r>
 8009382:	6813      	ldr	r3, [r2, #0]
 8009384:	1c58      	adds	r0, r3, #1
 8009386:	6010      	str	r0, [r2, #0]
 8009388:	7019      	strb	r1, [r3, #0]
 800938a:	4608      	mov	r0, r1
 800938c:	bc10      	pop	{r4}
 800938e:	4770      	bx	lr

08009390 <__sfputs_r>:
 8009390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009392:	4606      	mov	r6, r0
 8009394:	460f      	mov	r7, r1
 8009396:	4614      	mov	r4, r2
 8009398:	18d5      	adds	r5, r2, r3
 800939a:	42ac      	cmp	r4, r5
 800939c:	d101      	bne.n	80093a2 <__sfputs_r+0x12>
 800939e:	2000      	movs	r0, #0
 80093a0:	e007      	b.n	80093b2 <__sfputs_r+0x22>
 80093a2:	463a      	mov	r2, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093aa:	f7ff ffdc 	bl	8009366 <__sfputc_r>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d1f3      	bne.n	800939a <__sfputs_r+0xa>
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093b4 <_vfiprintf_r>:
 80093b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b8:	460d      	mov	r5, r1
 80093ba:	4614      	mov	r4, r2
 80093bc:	4698      	mov	r8, r3
 80093be:	4606      	mov	r6, r0
 80093c0:	b09d      	sub	sp, #116	@ 0x74
 80093c2:	b118      	cbz	r0, 80093cc <_vfiprintf_r+0x18>
 80093c4:	6a03      	ldr	r3, [r0, #32]
 80093c6:	b90b      	cbnz	r3, 80093cc <_vfiprintf_r+0x18>
 80093c8:	f7fd fc86 	bl	8006cd8 <__sinit>
 80093cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d405      	bmi.n	80093de <_vfiprintf_r+0x2a>
 80093d2:	89ab      	ldrh	r3, [r5, #12]
 80093d4:	059a      	lsls	r2, r3, #22
 80093d6:	d402      	bmi.n	80093de <_vfiprintf_r+0x2a>
 80093d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093da:	f7fd fda6 	bl	8006f2a <__retarget_lock_acquire_recursive>
 80093de:	89ab      	ldrh	r3, [r5, #12]
 80093e0:	071b      	lsls	r3, r3, #28
 80093e2:	d501      	bpl.n	80093e8 <_vfiprintf_r+0x34>
 80093e4:	692b      	ldr	r3, [r5, #16]
 80093e6:	b99b      	cbnz	r3, 8009410 <_vfiprintf_r+0x5c>
 80093e8:	4629      	mov	r1, r5
 80093ea:	4630      	mov	r0, r6
 80093ec:	f000 f938 	bl	8009660 <__swsetup_r>
 80093f0:	b170      	cbz	r0, 8009410 <_vfiprintf_r+0x5c>
 80093f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093f4:	07dc      	lsls	r4, r3, #31
 80093f6:	d504      	bpl.n	8009402 <_vfiprintf_r+0x4e>
 80093f8:	f04f 30ff 	mov.w	r0, #4294967295
 80093fc:	b01d      	add	sp, #116	@ 0x74
 80093fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009402:	89ab      	ldrh	r3, [r5, #12]
 8009404:	0598      	lsls	r0, r3, #22
 8009406:	d4f7      	bmi.n	80093f8 <_vfiprintf_r+0x44>
 8009408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800940a:	f7fd fd8f 	bl	8006f2c <__retarget_lock_release_recursive>
 800940e:	e7f3      	b.n	80093f8 <_vfiprintf_r+0x44>
 8009410:	2300      	movs	r3, #0
 8009412:	9309      	str	r3, [sp, #36]	@ 0x24
 8009414:	2320      	movs	r3, #32
 8009416:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800941a:	2330      	movs	r3, #48	@ 0x30
 800941c:	f04f 0901 	mov.w	r9, #1
 8009420:	f8cd 800c 	str.w	r8, [sp, #12]
 8009424:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80095d0 <_vfiprintf_r+0x21c>
 8009428:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800942c:	4623      	mov	r3, r4
 800942e:	469a      	mov	sl, r3
 8009430:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009434:	b10a      	cbz	r2, 800943a <_vfiprintf_r+0x86>
 8009436:	2a25      	cmp	r2, #37	@ 0x25
 8009438:	d1f9      	bne.n	800942e <_vfiprintf_r+0x7a>
 800943a:	ebba 0b04 	subs.w	fp, sl, r4
 800943e:	d00b      	beq.n	8009458 <_vfiprintf_r+0xa4>
 8009440:	465b      	mov	r3, fp
 8009442:	4622      	mov	r2, r4
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f7ff ffa2 	bl	8009390 <__sfputs_r>
 800944c:	3001      	adds	r0, #1
 800944e:	f000 80a7 	beq.w	80095a0 <_vfiprintf_r+0x1ec>
 8009452:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009454:	445a      	add	r2, fp
 8009456:	9209      	str	r2, [sp, #36]	@ 0x24
 8009458:	f89a 3000 	ldrb.w	r3, [sl]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 809f 	beq.w	80095a0 <_vfiprintf_r+0x1ec>
 8009462:	2300      	movs	r3, #0
 8009464:	f04f 32ff 	mov.w	r2, #4294967295
 8009468:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800946c:	f10a 0a01 	add.w	sl, sl, #1
 8009470:	9304      	str	r3, [sp, #16]
 8009472:	9307      	str	r3, [sp, #28]
 8009474:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009478:	931a      	str	r3, [sp, #104]	@ 0x68
 800947a:	4654      	mov	r4, sl
 800947c:	2205      	movs	r2, #5
 800947e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009482:	4853      	ldr	r0, [pc, #332]	@ (80095d0 <_vfiprintf_r+0x21c>)
 8009484:	f7fd fd53 	bl	8006f2e <memchr>
 8009488:	9a04      	ldr	r2, [sp, #16]
 800948a:	b9d8      	cbnz	r0, 80094c4 <_vfiprintf_r+0x110>
 800948c:	06d1      	lsls	r1, r2, #27
 800948e:	bf44      	itt	mi
 8009490:	2320      	movmi	r3, #32
 8009492:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009496:	0713      	lsls	r3, r2, #28
 8009498:	bf44      	itt	mi
 800949a:	232b      	movmi	r3, #43	@ 0x2b
 800949c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094a0:	f89a 3000 	ldrb.w	r3, [sl]
 80094a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a6:	d015      	beq.n	80094d4 <_vfiprintf_r+0x120>
 80094a8:	4654      	mov	r4, sl
 80094aa:	2000      	movs	r0, #0
 80094ac:	f04f 0c0a 	mov.w	ip, #10
 80094b0:	9a07      	ldr	r2, [sp, #28]
 80094b2:	4621      	mov	r1, r4
 80094b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094b8:	3b30      	subs	r3, #48	@ 0x30
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d94b      	bls.n	8009556 <_vfiprintf_r+0x1a2>
 80094be:	b1b0      	cbz	r0, 80094ee <_vfiprintf_r+0x13a>
 80094c0:	9207      	str	r2, [sp, #28]
 80094c2:	e014      	b.n	80094ee <_vfiprintf_r+0x13a>
 80094c4:	eba0 0308 	sub.w	r3, r0, r8
 80094c8:	fa09 f303 	lsl.w	r3, r9, r3
 80094cc:	4313      	orrs	r3, r2
 80094ce:	46a2      	mov	sl, r4
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	e7d2      	b.n	800947a <_vfiprintf_r+0xc6>
 80094d4:	9b03      	ldr	r3, [sp, #12]
 80094d6:	1d19      	adds	r1, r3, #4
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	9103      	str	r1, [sp, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bfbb      	ittet	lt
 80094e0:	425b      	neglt	r3, r3
 80094e2:	f042 0202 	orrlt.w	r2, r2, #2
 80094e6:	9307      	strge	r3, [sp, #28]
 80094e8:	9307      	strlt	r3, [sp, #28]
 80094ea:	bfb8      	it	lt
 80094ec:	9204      	strlt	r2, [sp, #16]
 80094ee:	7823      	ldrb	r3, [r4, #0]
 80094f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094f2:	d10a      	bne.n	800950a <_vfiprintf_r+0x156>
 80094f4:	7863      	ldrb	r3, [r4, #1]
 80094f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094f8:	d132      	bne.n	8009560 <_vfiprintf_r+0x1ac>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	3402      	adds	r4, #2
 80094fe:	1d1a      	adds	r2, r3, #4
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	9203      	str	r2, [sp, #12]
 8009504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009508:	9305      	str	r3, [sp, #20]
 800950a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80095d4 <_vfiprintf_r+0x220>
 800950e:	2203      	movs	r2, #3
 8009510:	4650      	mov	r0, sl
 8009512:	7821      	ldrb	r1, [r4, #0]
 8009514:	f7fd fd0b 	bl	8006f2e <memchr>
 8009518:	b138      	cbz	r0, 800952a <_vfiprintf_r+0x176>
 800951a:	2240      	movs	r2, #64	@ 0x40
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	eba0 000a 	sub.w	r0, r0, sl
 8009522:	4082      	lsls	r2, r0
 8009524:	4313      	orrs	r3, r2
 8009526:	3401      	adds	r4, #1
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800952e:	2206      	movs	r2, #6
 8009530:	4829      	ldr	r0, [pc, #164]	@ (80095d8 <_vfiprintf_r+0x224>)
 8009532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009536:	f7fd fcfa 	bl	8006f2e <memchr>
 800953a:	2800      	cmp	r0, #0
 800953c:	d03f      	beq.n	80095be <_vfiprintf_r+0x20a>
 800953e:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <_vfiprintf_r+0x228>)
 8009540:	bb1b      	cbnz	r3, 800958a <_vfiprintf_r+0x1d6>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	3307      	adds	r3, #7
 8009546:	f023 0307 	bic.w	r3, r3, #7
 800954a:	3308      	adds	r3, #8
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009550:	443b      	add	r3, r7
 8009552:	9309      	str	r3, [sp, #36]	@ 0x24
 8009554:	e76a      	b.n	800942c <_vfiprintf_r+0x78>
 8009556:	460c      	mov	r4, r1
 8009558:	2001      	movs	r0, #1
 800955a:	fb0c 3202 	mla	r2, ip, r2, r3
 800955e:	e7a8      	b.n	80094b2 <_vfiprintf_r+0xfe>
 8009560:	2300      	movs	r3, #0
 8009562:	f04f 0c0a 	mov.w	ip, #10
 8009566:	4619      	mov	r1, r3
 8009568:	3401      	adds	r4, #1
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	4620      	mov	r0, r4
 800956e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009572:	3a30      	subs	r2, #48	@ 0x30
 8009574:	2a09      	cmp	r2, #9
 8009576:	d903      	bls.n	8009580 <_vfiprintf_r+0x1cc>
 8009578:	2b00      	cmp	r3, #0
 800957a:	d0c6      	beq.n	800950a <_vfiprintf_r+0x156>
 800957c:	9105      	str	r1, [sp, #20]
 800957e:	e7c4      	b.n	800950a <_vfiprintf_r+0x156>
 8009580:	4604      	mov	r4, r0
 8009582:	2301      	movs	r3, #1
 8009584:	fb0c 2101 	mla	r1, ip, r1, r2
 8009588:	e7f0      	b.n	800956c <_vfiprintf_r+0x1b8>
 800958a:	ab03      	add	r3, sp, #12
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	462a      	mov	r2, r5
 8009590:	4630      	mov	r0, r6
 8009592:	4b13      	ldr	r3, [pc, #76]	@ (80095e0 <_vfiprintf_r+0x22c>)
 8009594:	a904      	add	r1, sp, #16
 8009596:	f7fc ff55 	bl	8006444 <_printf_float>
 800959a:	4607      	mov	r7, r0
 800959c:	1c78      	adds	r0, r7, #1
 800959e:	d1d6      	bne.n	800954e <_vfiprintf_r+0x19a>
 80095a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095a2:	07d9      	lsls	r1, r3, #31
 80095a4:	d405      	bmi.n	80095b2 <_vfiprintf_r+0x1fe>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	059a      	lsls	r2, r3, #22
 80095aa:	d402      	bmi.n	80095b2 <_vfiprintf_r+0x1fe>
 80095ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ae:	f7fd fcbd 	bl	8006f2c <__retarget_lock_release_recursive>
 80095b2:	89ab      	ldrh	r3, [r5, #12]
 80095b4:	065b      	lsls	r3, r3, #25
 80095b6:	f53f af1f 	bmi.w	80093f8 <_vfiprintf_r+0x44>
 80095ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095bc:	e71e      	b.n	80093fc <_vfiprintf_r+0x48>
 80095be:	ab03      	add	r3, sp, #12
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	462a      	mov	r2, r5
 80095c4:	4630      	mov	r0, r6
 80095c6:	4b06      	ldr	r3, [pc, #24]	@ (80095e0 <_vfiprintf_r+0x22c>)
 80095c8:	a904      	add	r1, sp, #16
 80095ca:	f7fd f9d9 	bl	8006980 <_printf_i>
 80095ce:	e7e4      	b.n	800959a <_vfiprintf_r+0x1e6>
 80095d0:	08009e49 	.word	0x08009e49
 80095d4:	08009e4f 	.word	0x08009e4f
 80095d8:	08009e53 	.word	0x08009e53
 80095dc:	08006445 	.word	0x08006445
 80095e0:	08009391 	.word	0x08009391

080095e4 <__swbuf_r>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	460e      	mov	r6, r1
 80095e8:	4614      	mov	r4, r2
 80095ea:	4605      	mov	r5, r0
 80095ec:	b118      	cbz	r0, 80095f6 <__swbuf_r+0x12>
 80095ee:	6a03      	ldr	r3, [r0, #32]
 80095f0:	b90b      	cbnz	r3, 80095f6 <__swbuf_r+0x12>
 80095f2:	f7fd fb71 	bl	8006cd8 <__sinit>
 80095f6:	69a3      	ldr	r3, [r4, #24]
 80095f8:	60a3      	str	r3, [r4, #8]
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	071a      	lsls	r2, r3, #28
 80095fe:	d501      	bpl.n	8009604 <__swbuf_r+0x20>
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	b943      	cbnz	r3, 8009616 <__swbuf_r+0x32>
 8009604:	4621      	mov	r1, r4
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f82a 	bl	8009660 <__swsetup_r>
 800960c:	b118      	cbz	r0, 8009616 <__swbuf_r+0x32>
 800960e:	f04f 37ff 	mov.w	r7, #4294967295
 8009612:	4638      	mov	r0, r7
 8009614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	6922      	ldr	r2, [r4, #16]
 800961a:	b2f6      	uxtb	r6, r6
 800961c:	1a98      	subs	r0, r3, r2
 800961e:	6963      	ldr	r3, [r4, #20]
 8009620:	4637      	mov	r7, r6
 8009622:	4283      	cmp	r3, r0
 8009624:	dc05      	bgt.n	8009632 <__swbuf_r+0x4e>
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	f7ff fdc9 	bl	80091c0 <_fflush_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	d1ed      	bne.n	800960e <__swbuf_r+0x2a>
 8009632:	68a3      	ldr	r3, [r4, #8]
 8009634:	3b01      	subs	r3, #1
 8009636:	60a3      	str	r3, [r4, #8]
 8009638:	6823      	ldr	r3, [r4, #0]
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	6022      	str	r2, [r4, #0]
 800963e:	701e      	strb	r6, [r3, #0]
 8009640:	6962      	ldr	r2, [r4, #20]
 8009642:	1c43      	adds	r3, r0, #1
 8009644:	429a      	cmp	r2, r3
 8009646:	d004      	beq.n	8009652 <__swbuf_r+0x6e>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	07db      	lsls	r3, r3, #31
 800964c:	d5e1      	bpl.n	8009612 <__swbuf_r+0x2e>
 800964e:	2e0a      	cmp	r6, #10
 8009650:	d1df      	bne.n	8009612 <__swbuf_r+0x2e>
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f7ff fdb3 	bl	80091c0 <_fflush_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	d0d9      	beq.n	8009612 <__swbuf_r+0x2e>
 800965e:	e7d6      	b.n	800960e <__swbuf_r+0x2a>

08009660 <__swsetup_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4b29      	ldr	r3, [pc, #164]	@ (8009708 <__swsetup_r+0xa8>)
 8009664:	4605      	mov	r5, r0
 8009666:	6818      	ldr	r0, [r3, #0]
 8009668:	460c      	mov	r4, r1
 800966a:	b118      	cbz	r0, 8009674 <__swsetup_r+0x14>
 800966c:	6a03      	ldr	r3, [r0, #32]
 800966e:	b90b      	cbnz	r3, 8009674 <__swsetup_r+0x14>
 8009670:	f7fd fb32 	bl	8006cd8 <__sinit>
 8009674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009678:	0719      	lsls	r1, r3, #28
 800967a:	d422      	bmi.n	80096c2 <__swsetup_r+0x62>
 800967c:	06da      	lsls	r2, r3, #27
 800967e:	d407      	bmi.n	8009690 <__swsetup_r+0x30>
 8009680:	2209      	movs	r2, #9
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e033      	b.n	80096f8 <__swsetup_r+0x98>
 8009690:	0758      	lsls	r0, r3, #29
 8009692:	d512      	bpl.n	80096ba <__swsetup_r+0x5a>
 8009694:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009696:	b141      	cbz	r1, 80096aa <__swsetup_r+0x4a>
 8009698:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800969c:	4299      	cmp	r1, r3
 800969e:	d002      	beq.n	80096a6 <__swsetup_r+0x46>
 80096a0:	4628      	mov	r0, r5
 80096a2:	f7fe fab9 	bl	8007c18 <_free_r>
 80096a6:	2300      	movs	r3, #0
 80096a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	2300      	movs	r3, #0
 80096b4:	6063      	str	r3, [r4, #4]
 80096b6:	6923      	ldr	r3, [r4, #16]
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	89a3      	ldrh	r3, [r4, #12]
 80096bc:	f043 0308 	orr.w	r3, r3, #8
 80096c0:	81a3      	strh	r3, [r4, #12]
 80096c2:	6923      	ldr	r3, [r4, #16]
 80096c4:	b94b      	cbnz	r3, 80096da <__swsetup_r+0x7a>
 80096c6:	89a3      	ldrh	r3, [r4, #12]
 80096c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096d0:	d003      	beq.n	80096da <__swsetup_r+0x7a>
 80096d2:	4621      	mov	r1, r4
 80096d4:	4628      	mov	r0, r5
 80096d6:	f000 f882 	bl	80097de <__smakebuf_r>
 80096da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096de:	f013 0201 	ands.w	r2, r3, #1
 80096e2:	d00a      	beq.n	80096fa <__swsetup_r+0x9a>
 80096e4:	2200      	movs	r2, #0
 80096e6:	60a2      	str	r2, [r4, #8]
 80096e8:	6962      	ldr	r2, [r4, #20]
 80096ea:	4252      	negs	r2, r2
 80096ec:	61a2      	str	r2, [r4, #24]
 80096ee:	6922      	ldr	r2, [r4, #16]
 80096f0:	b942      	cbnz	r2, 8009704 <__swsetup_r+0xa4>
 80096f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096f6:	d1c5      	bne.n	8009684 <__swsetup_r+0x24>
 80096f8:	bd38      	pop	{r3, r4, r5, pc}
 80096fa:	0799      	lsls	r1, r3, #30
 80096fc:	bf58      	it	pl
 80096fe:	6962      	ldrpl	r2, [r4, #20]
 8009700:	60a2      	str	r2, [r4, #8]
 8009702:	e7f4      	b.n	80096ee <__swsetup_r+0x8e>
 8009704:	2000      	movs	r0, #0
 8009706:	e7f7      	b.n	80096f8 <__swsetup_r+0x98>
 8009708:	2000018c 	.word	0x2000018c

0800970c <_raise_r>:
 800970c:	291f      	cmp	r1, #31
 800970e:	b538      	push	{r3, r4, r5, lr}
 8009710:	4605      	mov	r5, r0
 8009712:	460c      	mov	r4, r1
 8009714:	d904      	bls.n	8009720 <_raise_r+0x14>
 8009716:	2316      	movs	r3, #22
 8009718:	6003      	str	r3, [r0, #0]
 800971a:	f04f 30ff 	mov.w	r0, #4294967295
 800971e:	bd38      	pop	{r3, r4, r5, pc}
 8009720:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009722:	b112      	cbz	r2, 800972a <_raise_r+0x1e>
 8009724:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009728:	b94b      	cbnz	r3, 800973e <_raise_r+0x32>
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f830 	bl	8009790 <_getpid_r>
 8009730:	4622      	mov	r2, r4
 8009732:	4601      	mov	r1, r0
 8009734:	4628      	mov	r0, r5
 8009736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800973a:	f000 b817 	b.w	800976c <_kill_r>
 800973e:	2b01      	cmp	r3, #1
 8009740:	d00a      	beq.n	8009758 <_raise_r+0x4c>
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	d103      	bne.n	800974e <_raise_r+0x42>
 8009746:	2316      	movs	r3, #22
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	2001      	movs	r0, #1
 800974c:	e7e7      	b.n	800971e <_raise_r+0x12>
 800974e:	2100      	movs	r1, #0
 8009750:	4620      	mov	r0, r4
 8009752:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009756:	4798      	blx	r3
 8009758:	2000      	movs	r0, #0
 800975a:	e7e0      	b.n	800971e <_raise_r+0x12>

0800975c <raise>:
 800975c:	4b02      	ldr	r3, [pc, #8]	@ (8009768 <raise+0xc>)
 800975e:	4601      	mov	r1, r0
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	f7ff bfd3 	b.w	800970c <_raise_r>
 8009766:	bf00      	nop
 8009768:	2000018c 	.word	0x2000018c

0800976c <_kill_r>:
 800976c:	b538      	push	{r3, r4, r5, lr}
 800976e:	2300      	movs	r3, #0
 8009770:	4d06      	ldr	r5, [pc, #24]	@ (800978c <_kill_r+0x20>)
 8009772:	4604      	mov	r4, r0
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	602b      	str	r3, [r5, #0]
 800977a:	f7f9 f8ee 	bl	800295a <_kill>
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	d102      	bne.n	8009788 <_kill_r+0x1c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	b103      	cbz	r3, 8009788 <_kill_r+0x1c>
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	20000490 	.word	0x20000490

08009790 <_getpid_r>:
 8009790:	f7f9 b8dc 	b.w	800294c <_getpid>

08009794 <__swhatbuf_r>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	460c      	mov	r4, r1
 8009798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979c:	4615      	mov	r5, r2
 800979e:	2900      	cmp	r1, #0
 80097a0:	461e      	mov	r6, r3
 80097a2:	b096      	sub	sp, #88	@ 0x58
 80097a4:	da0c      	bge.n	80097c0 <__swhatbuf_r+0x2c>
 80097a6:	89a3      	ldrh	r3, [r4, #12]
 80097a8:	2100      	movs	r1, #0
 80097aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097ae:	bf14      	ite	ne
 80097b0:	2340      	movne	r3, #64	@ 0x40
 80097b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097b6:	2000      	movs	r0, #0
 80097b8:	6031      	str	r1, [r6, #0]
 80097ba:	602b      	str	r3, [r5, #0]
 80097bc:	b016      	add	sp, #88	@ 0x58
 80097be:	bd70      	pop	{r4, r5, r6, pc}
 80097c0:	466a      	mov	r2, sp
 80097c2:	f000 f849 	bl	8009858 <_fstat_r>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	dbed      	blt.n	80097a6 <__swhatbuf_r+0x12>
 80097ca:	9901      	ldr	r1, [sp, #4]
 80097cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097d4:	4259      	negs	r1, r3
 80097d6:	4159      	adcs	r1, r3
 80097d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097dc:	e7eb      	b.n	80097b6 <__swhatbuf_r+0x22>

080097de <__smakebuf_r>:
 80097de:	898b      	ldrh	r3, [r1, #12]
 80097e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e2:	079d      	lsls	r5, r3, #30
 80097e4:	4606      	mov	r6, r0
 80097e6:	460c      	mov	r4, r1
 80097e8:	d507      	bpl.n	80097fa <__smakebuf_r+0x1c>
 80097ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097ee:	6023      	str	r3, [r4, #0]
 80097f0:	6123      	str	r3, [r4, #16]
 80097f2:	2301      	movs	r3, #1
 80097f4:	6163      	str	r3, [r4, #20]
 80097f6:	b003      	add	sp, #12
 80097f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fa:	466a      	mov	r2, sp
 80097fc:	ab01      	add	r3, sp, #4
 80097fe:	f7ff ffc9 	bl	8009794 <__swhatbuf_r>
 8009802:	9f00      	ldr	r7, [sp, #0]
 8009804:	4605      	mov	r5, r0
 8009806:	4639      	mov	r1, r7
 8009808:	4630      	mov	r0, r6
 800980a:	f7fe fdb1 	bl	8008370 <_malloc_r>
 800980e:	b948      	cbnz	r0, 8009824 <__smakebuf_r+0x46>
 8009810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009814:	059a      	lsls	r2, r3, #22
 8009816:	d4ee      	bmi.n	80097f6 <__smakebuf_r+0x18>
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	f043 0302 	orr.w	r3, r3, #2
 8009820:	81a3      	strh	r3, [r4, #12]
 8009822:	e7e2      	b.n	80097ea <__smakebuf_r+0xc>
 8009824:	89a3      	ldrh	r3, [r4, #12]
 8009826:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800982a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800982e:	81a3      	strh	r3, [r4, #12]
 8009830:	9b01      	ldr	r3, [sp, #4]
 8009832:	6020      	str	r0, [r4, #0]
 8009834:	b15b      	cbz	r3, 800984e <__smakebuf_r+0x70>
 8009836:	4630      	mov	r0, r6
 8009838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800983c:	f000 f81e 	bl	800987c <_isatty_r>
 8009840:	b128      	cbz	r0, 800984e <__smakebuf_r+0x70>
 8009842:	89a3      	ldrh	r3, [r4, #12]
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	f043 0301 	orr.w	r3, r3, #1
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	431d      	orrs	r5, r3
 8009852:	81a5      	strh	r5, [r4, #12]
 8009854:	e7cf      	b.n	80097f6 <__smakebuf_r+0x18>
	...

08009858 <_fstat_r>:
 8009858:	b538      	push	{r3, r4, r5, lr}
 800985a:	2300      	movs	r3, #0
 800985c:	4d06      	ldr	r5, [pc, #24]	@ (8009878 <_fstat_r+0x20>)
 800985e:	4604      	mov	r4, r0
 8009860:	4608      	mov	r0, r1
 8009862:	4611      	mov	r1, r2
 8009864:	602b      	str	r3, [r5, #0]
 8009866:	f7f9 f8d7 	bl	8002a18 <_fstat>
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	d102      	bne.n	8009874 <_fstat_r+0x1c>
 800986e:	682b      	ldr	r3, [r5, #0]
 8009870:	b103      	cbz	r3, 8009874 <_fstat_r+0x1c>
 8009872:	6023      	str	r3, [r4, #0]
 8009874:	bd38      	pop	{r3, r4, r5, pc}
 8009876:	bf00      	nop
 8009878:	20000490 	.word	0x20000490

0800987c <_isatty_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	2300      	movs	r3, #0
 8009880:	4d05      	ldr	r5, [pc, #20]	@ (8009898 <_isatty_r+0x1c>)
 8009882:	4604      	mov	r4, r0
 8009884:	4608      	mov	r0, r1
 8009886:	602b      	str	r3, [r5, #0]
 8009888:	f7f9 f8d5 	bl	8002a36 <_isatty>
 800988c:	1c43      	adds	r3, r0, #1
 800988e:	d102      	bne.n	8009896 <_isatty_r+0x1a>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	b103      	cbz	r3, 8009896 <_isatty_r+0x1a>
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	bd38      	pop	{r3, r4, r5, pc}
 8009898:	20000490 	.word	0x20000490

0800989c <_init>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr

080098a8 <_fini>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr
