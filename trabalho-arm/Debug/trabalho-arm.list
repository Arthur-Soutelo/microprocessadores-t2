
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000286c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002978  08002978  00003978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  080029cc  080029cc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029cc  080029cc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000039cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029d0  080029d0  000039d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080029d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  080029e0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080029e0  000040e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c92  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f22  00000000  00000000  0000dcc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0000fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c7  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017688  00000000  00000000  0001101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d479  00000000  00000000  000286a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089830  00000000  00000000  00035b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf350  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e4c  00000000  00000000  000bf394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c21e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002960 	.word	0x08002960

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002960 	.word	0x08002960

0800014c <debounce>:
#include "main.h"
#include "keypad.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 800015c:	2300      	movs	r3, #0
 800015e:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 8000160:	2301      	movs	r3, #1
 8000162:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 8000164:	2301      	movs	r3, #1
 8000166:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 8000168:	79fb      	ldrb	r3, [r7, #7]
 800016a:	2b03      	cmp	r3, #3
 800016c:	d822      	bhi.n	80001b4 <debounce+0x68>
 800016e:	a201      	add	r2, pc, #4	@ (adr r2, 8000174 <debounce+0x28>)
 8000170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000174:	08000185 	.word	0x08000185
 8000178:	08000191 	.word	0x08000191
 800017c:	0800019d 	.word	0x0800019d
 8000180:	080001a9 	.word	0x080001a9
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 8000184:	4b1c      	ldr	r3, [pc, #112]	@ (80001f8 <debounce+0xac>)
 8000186:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 8000188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800018c:	81fb      	strh	r3, [r7, #14]
            break;
 800018e:	e013      	b.n	80001b8 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 8000190:	4b19      	ldr	r3, [pc, #100]	@ (80001f8 <debounce+0xac>)
 8000192:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 8000194:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000198:	81fb      	strh	r3, [r7, #14]
            break;
 800019a:	e00d      	b.n	80001b8 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 800019c:	4b16      	ldr	r3, [pc, #88]	@ (80001f8 <debounce+0xac>)
 800019e:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 80001a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80001a4:	81fb      	strh	r3, [r7, #14]
            break;
 80001a6:	e007      	b.n	80001b8 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 80001a8:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <debounce+0xac>)
 80001aa:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 80001ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80001b0:	81fb      	strh	r3, [r7, #14]
            break;
 80001b2:	e001      	b.n	80001b8 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 80001b4:	2301      	movs	r3, #1
 80001b6:	e01a      	b.n	80001ee <debounce+0xa2>
    }

    while (count < 7) {
 80001b8:	e015      	b.n	80001e6 <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 80001ba:	2001      	movs	r0, #1
 80001bc:	f000 fd78 	bl	8000cb0 <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 80001c0:	89fb      	ldrh	r3, [r7, #14]
 80001c2:	4619      	mov	r1, r3
 80001c4:	6938      	ldr	r0, [r7, #16]
 80001c6:	f001 fb9b 	bl	8001900 <HAL_GPIO_ReadPin>
 80001ca:	4603      	mov	r3, r0
 80001cc:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 80001ce:	7d7a      	ldrb	r2, [r7, #21]
 80001d0:	7dbb      	ldrb	r3, [r7, #22]
 80001d2:	429a      	cmp	r2, r3
 80001d4:	d103      	bne.n	80001de <debounce+0x92>
            count++;
 80001d6:	7dfb      	ldrb	r3, [r7, #23]
 80001d8:	3301      	adds	r3, #1
 80001da:	75fb      	strb	r3, [r7, #23]
 80001dc:	e001      	b.n	80001e2 <debounce+0x96>
        } else {
            count = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 80001e2:	7d7b      	ldrb	r3, [r7, #21]
 80001e4:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 80001e6:	7dfb      	ldrb	r3, [r7, #23]
 80001e8:	2b06      	cmp	r3, #6
 80001ea:	d9e6      	bls.n	80001ba <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 80001ec:	7d7b      	ldrb	r3, [r7, #21]
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	3718      	adds	r7, #24
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010c00 	.word	0x40010c00

080001fc <keypad_getkey>:
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
}

char keypad_getkey(void) {
 80001fc:	b590      	push	{r4, r7, lr}
 80001fe:	b089      	sub	sp, #36	@ 0x24
 8000200:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 8000202:	4b35      	ldr	r3, [pc, #212]	@ (80002d8 <keypad_getkey+0xdc>)
 8000204:	1d3c      	adds	r4, r7, #4
 8000206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 800020c:	2300      	movs	r3, #0
 800020e:	77bb      	strb	r3, [r7, #30]
 8000210:	e059      	b.n	80002c6 <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 8000212:	7fbb      	ldrb	r3, [r7, #30]
 8000214:	2b03      	cmp	r3, #3
 8000216:	d821      	bhi.n	800025c <keypad_getkey+0x60>
 8000218:	a201      	add	r2, pc, #4	@ (adr r2, 8000220 <keypad_getkey+0x24>)
 800021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800021e:	bf00      	nop
 8000220:	08000231 	.word	0x08000231
 8000224:	0800023b 	.word	0x0800023b
 8000228:	08000245 	.word	0x08000245
 800022c:	08000251 	.word	0x08000251
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 8000230:	4b2a      	ldr	r3, [pc, #168]	@ (80002dc <keypad_getkey+0xe0>)
 8000232:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 8000234:	2301      	movs	r3, #1
 8000236:	82fb      	strh	r3, [r7, #22]
                break;
 8000238:	e015      	b.n	8000266 <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 800023a:	4b28      	ldr	r3, [pc, #160]	@ (80002dc <keypad_getkey+0xe0>)
 800023c:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 800023e:	2302      	movs	r3, #2
 8000240:	82fb      	strh	r3, [r7, #22]
                break;
 8000242:	e010      	b.n	8000266 <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 8000244:	4b25      	ldr	r3, [pc, #148]	@ (80002dc <keypad_getkey+0xe0>)
 8000246:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 8000248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800024c:	82fb      	strh	r3, [r7, #22]
                break;
 800024e:	e00a      	b.n	8000266 <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 8000250:	4b22      	ldr	r3, [pc, #136]	@ (80002dc <keypad_getkey+0xe0>)
 8000252:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 8000254:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000258:	82fb      	strh	r3, [r7, #22]
                break;
 800025a:	e004      	b.n	8000266 <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	82fb      	strh	r3, [r7, #22]
                break;
 8000264:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 8000266:	8afb      	ldrh	r3, [r7, #22]
 8000268:	2200      	movs	r2, #0
 800026a:	4619      	mov	r1, r3
 800026c:	69b8      	ldr	r0, [r7, #24]
 800026e:	f001 fb5e 	bl	800192e <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 8000272:	2300      	movs	r3, #0
 8000274:	77fb      	strb	r3, [r7, #31]
 8000276:	e01a      	b.n	80002ae <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 8000278:	7fba      	ldrb	r2, [r7, #30]
 800027a:	7ffb      	ldrb	r3, [r7, #31]
 800027c:	4611      	mov	r1, r2
 800027e:	4618      	mov	r0, r3
 8000280:	f7ff ff64 	bl	800014c <debounce>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d10e      	bne.n	80002a8 <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 800028a:	8afb      	ldrh	r3, [r7, #22]
 800028c:	2201      	movs	r2, #1
 800028e:	4619      	mov	r1, r3
 8000290:	69b8      	ldr	r0, [r7, #24]
 8000292:	f001 fb4c 	bl	800192e <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 8000296:	7ffa      	ldrb	r2, [r7, #31]
 8000298:	7fbb      	ldrb	r3, [r7, #30]
 800029a:	0092      	lsls	r2, r2, #2
 800029c:	3220      	adds	r2, #32
 800029e:	443a      	add	r2, r7
 80002a0:	4413      	add	r3, r2
 80002a2:	3b1c      	subs	r3, #28
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	e012      	b.n	80002ce <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 80002a8:	7ffb      	ldrb	r3, [r7, #31]
 80002aa:	3301      	adds	r3, #1
 80002ac:	77fb      	strb	r3, [r7, #31]
 80002ae:	7ffb      	ldrb	r3, [r7, #31]
 80002b0:	2b03      	cmp	r3, #3
 80002b2:	d9e1      	bls.n	8000278 <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 80002b4:	8afb      	ldrh	r3, [r7, #22]
 80002b6:	2201      	movs	r2, #1
 80002b8:	4619      	mov	r1, r3
 80002ba:	69b8      	ldr	r0, [r7, #24]
 80002bc:	f001 fb37 	bl	800192e <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 80002c0:	7fbb      	ldrb	r3, [r7, #30]
 80002c2:	3301      	adds	r3, #1
 80002c4:	77bb      	strb	r3, [r7, #30]
 80002c6:	7fbb      	ldrb	r3, [r7, #30]
 80002c8:	2b03      	cmp	r3, #3
 80002ca:	d9a2      	bls.n	8000212 <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	@ 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd90      	pop	{r4, r7, pc}
 80002d6:	bf00      	nop
 80002d8:	08002978 	.word	0x08002978
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2108      	movs	r1, #8
 80002ee:	4841      	ldr	r0, [pc, #260]	@ (80003f4 <write_command_LCD+0x114>)
 80002f0:	f001 fb1d 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2110      	movs	r1, #16
 80002f8:	483e      	ldr	r0, [pc, #248]	@ (80003f4 <write_command_LCD+0x114>)
 80002fa:	f001 fb18 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	111b      	asrs	r3, r3, #4
 8000302:	b2db      	uxtb	r3, r3
 8000304:	f003 0301 	and.w	r3, r3, #1
 8000308:	b2db      	uxtb	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000310:	4839      	ldr	r0, [pc, #228]	@ (80003f8 <write_command_LCD+0x118>)
 8000312:	f001 fb0c 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	115b      	asrs	r3, r3, #5
 800031a:	b2db      	uxtb	r3, r3
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000328:	4833      	ldr	r0, [pc, #204]	@ (80003f8 <write_command_LCD+0x118>)
 800032a:	f001 fb00 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	119b      	asrs	r3, r3, #6
 8000332:	b2db      	uxtb	r3, r3
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000340:	482d      	ldr	r0, [pc, #180]	@ (80003f8 <write_command_LCD+0x118>)
 8000342:	f001 faf4 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	09db      	lsrs	r3, r3, #7
 800034a:	b2db      	uxtb	r3, r3
 800034c:	461a      	mov	r2, r3
 800034e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000352:	4829      	ldr	r0, [pc, #164]	@ (80003f8 <write_command_LCD+0x118>)
 8000354:	f001 faeb 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000358:	200a      	movs	r0, #10
 800035a:	f000 fca9 	bl	8000cb0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	4824      	ldr	r0, [pc, #144]	@ (80003f4 <write_command_LCD+0x114>)
 8000364:	f001 fae3 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000368:	2014      	movs	r0, #20
 800036a:	f000 fca1 	bl	8000cb0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2110      	movs	r1, #16
 8000372:	4820      	ldr	r0, [pc, #128]	@ (80003f4 <write_command_LCD+0x114>)
 8000374:	f001 fadb 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000386:	481c      	ldr	r0, [pc, #112]	@ (80003f8 <write_command_LCD+0x118>)
 8000388:	f001 fad1 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	105b      	asrs	r3, r3, #1
 8000390:	b2db      	uxtb	r3, r3
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	b2db      	uxtb	r3, r3
 8000398:	461a      	mov	r2, r3
 800039a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039e:	4816      	ldr	r0, [pc, #88]	@ (80003f8 <write_command_LCD+0x118>)
 80003a0:	f001 fac5 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	109b      	asrs	r3, r3, #2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003b6:	4810      	ldr	r0, [pc, #64]	@ (80003f8 <write_command_LCD+0x118>)
 80003b8:	f001 fab9 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	10db      	asrs	r3, r3, #3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	461a      	mov	r2, r3
 80003ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ce:	480a      	ldr	r0, [pc, #40]	@ (80003f8 <write_command_LCD+0x118>)
 80003d0:	f001 faad 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80003d4:	200a      	movs	r0, #10
 80003d6:	f000 fc6b 	bl	8000cb0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2110      	movs	r1, #16
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <write_command_LCD+0x114>)
 80003e0:	f001 faa5 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 80003e4:	2014      	movs	r0, #20
 80003e6:	f000 fc63 	bl	8000cb0 <HAL_Delay>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010c00 	.word	0x40010c00
 80003f8:	40010800 	.word	0x40010800

080003fc <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2108      	movs	r1, #8
 800040a:	4841      	ldr	r0, [pc, #260]	@ (8000510 <write_data_LCD+0x114>)
 800040c:	f001 fa8f 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2110      	movs	r1, #16
 8000414:	483e      	ldr	r0, [pc, #248]	@ (8000510 <write_data_LCD+0x114>)
 8000416:	f001 fa8a 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	111b      	asrs	r3, r3, #4
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800042c:	4839      	ldr	r0, [pc, #228]	@ (8000514 <write_data_LCD+0x118>)
 800042e:	f001 fa7e 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	115b      	asrs	r3, r3, #5
 8000436:	b2db      	uxtb	r3, r3
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000444:	4833      	ldr	r0, [pc, #204]	@ (8000514 <write_data_LCD+0x118>)
 8000446:	f001 fa72 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	119b      	asrs	r3, r3, #6
 800044e:	b2db      	uxtb	r3, r3
 8000450:	f003 0301 	and.w	r3, r3, #1
 8000454:	b2db      	uxtb	r3, r3
 8000456:	461a      	mov	r2, r3
 8000458:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800045c:	482d      	ldr	r0, [pc, #180]	@ (8000514 <write_data_LCD+0x118>)
 800045e:	f001 fa66 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	09db      	lsrs	r3, r3, #7
 8000466:	b2db      	uxtb	r3, r3
 8000468:	461a      	mov	r2, r3
 800046a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800046e:	4829      	ldr	r0, [pc, #164]	@ (8000514 <write_data_LCD+0x118>)
 8000470:	f001 fa5d 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000474:	200a      	movs	r0, #10
 8000476:	f000 fc1b 	bl	8000cb0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2110      	movs	r1, #16
 800047e:	4824      	ldr	r0, [pc, #144]	@ (8000510 <write_data_LCD+0x114>)
 8000480:	f001 fa55 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000484:	2014      	movs	r0, #20
 8000486:	f000 fc13 	bl	8000cb0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	4820      	ldr	r0, [pc, #128]	@ (8000510 <write_data_LCD+0x114>)
 8000490:	f001 fa4d 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004a2:	481c      	ldr	r0, [pc, #112]	@ (8000514 <write_data_LCD+0x118>)
 80004a4:	f001 fa43 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	105b      	asrs	r3, r3, #1
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ba:	4816      	ldr	r0, [pc, #88]	@ (8000514 <write_data_LCD+0x118>)
 80004bc:	f001 fa37 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	109b      	asrs	r3, r3, #2
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	461a      	mov	r2, r3
 80004ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004d2:	4810      	ldr	r0, [pc, #64]	@ (8000514 <write_data_LCD+0x118>)
 80004d4:	f001 fa2b 	bl	800192e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	10db      	asrs	r3, r3, #3
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004ea:	480a      	ldr	r0, [pc, #40]	@ (8000514 <write_data_LCD+0x118>)
 80004ec:	f001 fa1f 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80004f0:	200a      	movs	r0, #10
 80004f2:	f000 fbdd 	bl	8000cb0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2110      	movs	r1, #16
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <write_data_LCD+0x114>)
 80004fc:	f001 fa17 	bl	800192e <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8000500:	2014      	movs	r0, #20
 8000502:	f000 fbd5 	bl	8000cb0 <HAL_Delay>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010c00 	.word	0x40010c00
 8000514:	40010800 	.word	0x40010800

08000518 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 800051c:	2032      	movs	r0, #50	@ 0x32
 800051e:	f000 fbc7 	bl	8000cb0 <HAL_Delay>
    write_command_LCD(0x33);
 8000522:	2033      	movs	r0, #51	@ 0x33
 8000524:	f7ff fedc 	bl	80002e0 <write_command_LCD>
    write_command_LCD(0x32);
 8000528:	2032      	movs	r0, #50	@ 0x32
 800052a:	f7ff fed9 	bl	80002e0 <write_command_LCD>
    write_command_LCD(0x28);
 800052e:	2028      	movs	r0, #40	@ 0x28
 8000530:	f7ff fed6 	bl	80002e0 <write_command_LCD>
    write_command_LCD(0x0C);
 8000534:	200c      	movs	r0, #12
 8000536:	f7ff fed3 	bl	80002e0 <write_command_LCD>
    write_command_LCD(0x06);
 800053a:	2006      	movs	r0, #6
 800053c:	f7ff fed0 	bl	80002e0 <write_command_LCD>
    write_command_LCD(0x01);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff fecd 	bl	80002e0 <write_command_LCD>
    HAL_Delay(2);
 8000546:	2002      	movs	r0, #2
 8000548:	f000 fbb2 	bl	8000cb0 <HAL_Delay>
}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}

08000550 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    while (*text) {
 8000558:	e006      	b.n	8000568 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	1c5a      	adds	r2, r3, #1
 800055e:	607a      	str	r2, [r7, #4]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff4a 	bl	80003fc <write_data_LCD>
    while (*text) {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f4      	bne.n	800055a <write_string_LCD+0xa>
    }
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <write_string_line>:

void write_string_line(char line, const char *text) {
 800057a:	b580      	push	{r7, lr}
 800057c:	b082      	sub	sp, #8
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	6039      	str	r1, [r7, #0]
 8000584:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d103      	bne.n	8000594 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 800058c:	2080      	movs	r0, #128	@ 0x80
 800058e:	f7ff fea7 	bl	80002e0 <write_command_LCD>
 8000592:	e005      	b.n	80005a0 <write_string_line+0x26>
    } else if (line == 2) {
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b02      	cmp	r3, #2
 8000598:	d102      	bne.n	80005a0 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 800059a:	20c0      	movs	r0, #192	@ 0xc0
 800059c:	f7ff fea0 	bl	80002e0 <write_command_LCD>
    }
    write_string_LCD(text);
 80005a0:	6838      	ldr	r0, [r7, #0]
 80005a2:	f7ff ffd5 	bl	8000550 <write_string_LCD>
}
 80005a6:	bf00      	nop
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <clear_display>:

void clear_display(void) {
 80005ae:	b580      	push	{r7, lr}
 80005b0:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff fe94 	bl	80002e0 <write_command_LCD>
    HAL_Delay(2);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f000 fb79 	bl	8000cb0 <HAL_Delay>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb0f 	bl	8000bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f83b 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f959 	bl	8000888 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d6:	f000 f939 	bl	800084c <MX_DMA_Init>
  MX_ADC1_Init();
 80005da:	f000 f891 	bl	8000700 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005de:	f000 f8cd 	bl	800077c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  init_LCD();
 80005e2:	f7ff ff99 	bl	8000518 <init_LCD>
  //keypad_init();

  clear_display();
 80005e6:	f7ff ffe2 	bl	80005ae <clear_display>
  write_string_line(1,"   Smart-fARM");
 80005ea:	4914      	ldr	r1, [pc, #80]	@ (800063c <main+0x78>)
 80005ec:	2001      	movs	r0, #1
 80005ee:	f7ff ffc4 	bl	800057a <write_string_line>
  write_string_line(2,"");
 80005f2:	4913      	ldr	r1, [pc, #76]	@ (8000640 <main+0x7c>)
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ffc0 	bl	800057a <write_string_line>

//	clear_display();
//	write_string_line(1,"   Smart-fARM");
//	HAL_Delay(2000);

	 char key = keypad_getkey();
 80005fa:	f7ff fdff 	bl	80001fc <keypad_getkey>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	 if(key != 0){
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d0f8      	beq.n	80005fa <main+0x36>
		 clear_display();
 8000608:	f7ff ffd1 	bl	80005ae <clear_display>
		 write_string_line(1,"GOT KEY: ");
 800060c:	490d      	ldr	r1, [pc, #52]	@ (8000644 <main+0x80>)
 800060e:	2001      	movs	r0, #1
 8000610:	f7ff ffb3 	bl	800057a <write_string_line>
		 write_data_LCD(key);
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fef0 	bl	80003fc <write_data_LCD>
		 HAL_Delay(2000);
 800061c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000620:	f000 fb46 	bl	8000cb0 <HAL_Delay>
		 clear_display();
 8000624:	f7ff ffc3 	bl	80005ae <clear_display>
		 write_string_line(1,"   Smart-fARM");
 8000628:	4904      	ldr	r1, [pc, #16]	@ (800063c <main+0x78>)
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff ffa5 	bl	800057a <write_string_line>
		 write_string_line(2,"");
 8000630:	4903      	ldr	r1, [pc, #12]	@ (8000640 <main+0x7c>)
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ffa1 	bl	800057a <write_string_line>
  {
 8000638:	e7df      	b.n	80005fa <main+0x36>
 800063a:	bf00      	nop
 800063c:	08002988 	.word	0x08002988
 8000640:	08002998 	.word	0x08002998
 8000644:	0800299c 	.word	0x0800299c

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000652:	2228      	movs	r2, #40	@ 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 f956 	bl	8002908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000692:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000694:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 f95e 	bl	8001960 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006aa:	f000 f97f 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006be:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fbca 	bl	8001e64 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006d6:	f000 f969 	bl	80009ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006da:	2302      	movs	r3, #2
 80006dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80006de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006e2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd18 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006f2:	f000 f95b 	bl	80009ac <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000710:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_ADC1_Init+0x74>)
 8000712:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <MX_ADC1_Init+0x78>)
 8000714:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_ADC1_Init+0x74>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_ADC1_Init+0x74>)
 800071e:	2201      	movs	r2, #1
 8000720:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_ADC1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_ADC1_Init+0x74>)
 800072a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_ADC1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000736:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_ADC1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073c:	480d      	ldr	r0, [pc, #52]	@ (8000774 <MX_ADC1_Init+0x74>)
 800073e:	f000 fadb 	bl	8000cf8 <HAL_ADC_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000748:	f000 f930 	bl	80009ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000750:	2301      	movs	r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_ADC1_Init+0x74>)
 800075e:	f000 fba3 	bl	8000ea8 <HAL_ADC_ConfigChannel>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000768:	f000 f920 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000028 	.word	0x20000028
 8000778:	40012400 	.word	0x40012400

0800077c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	@ 0x30
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a8:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007aa:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <MX_TIM1_Init+0xcc>)
 80007ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ae:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d4:	481b      	ldr	r0, [pc, #108]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007d6:	f001 fd57 	bl	8002288 <HAL_TIM_Base_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80007e0:	f000 f8e4 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4619      	mov	r1, r3
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <MX_TIM1_Init+0xc8>)
 80007f2:	f001 fd98 	bl	8002326 <HAL_TIM_ConfigClockSource>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007fc:	f000 f8d6 	bl	80009ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	@ (8000844 <MX_TIM1_Init+0xc8>)
 8000810:	f001 fe50 	bl	80024b4 <HAL_TIM_SlaveConfigSynchro>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800081a:	f000 f8c7 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	4619      	mov	r1, r3
 800082a:	4806      	ldr	r0, [pc, #24]	@ (8000844 <MX_TIM1_Init+0xc8>)
 800082c:	f002 f80e 	bl	800284c <HAL_TIMEx_MasterConfigSynchronization>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000836:	f000 f8b9 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	@ 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000009c 	.word	0x2000009c
 8000848:	40012c00 	.word	0x40012c00

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <MX_DMA_Init+0x38>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a0b      	ldr	r2, [pc, #44]	@ (8000884 <MX_DMA_Init+0x38>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <MX_DMA_Init+0x38>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	200b      	movs	r0, #11
 8000870:	f000 fd2b 	bl	80012ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000874:	200b      	movs	r0, #11
 8000876:	f000 fd44 	bl	8001302 <HAL_NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40021000 	.word	0x40021000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b3f      	ldr	r3, [pc, #252]	@ (800099c <MX_GPIO_Init+0x114>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a3e      	ldr	r2, [pc, #248]	@ (800099c <MX_GPIO_Init+0x114>)
 80008a2:	f043 0310 	orr.w	r3, r3, #16
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <MX_GPIO_Init+0x114>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0310 	and.w	r3, r3, #16
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b4:	4b39      	ldr	r3, [pc, #228]	@ (800099c <MX_GPIO_Init+0x114>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a38      	ldr	r2, [pc, #224]	@ (800099c <MX_GPIO_Init+0x114>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b36      	ldr	r3, [pc, #216]	@ (800099c <MX_GPIO_Init+0x114>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b33      	ldr	r3, [pc, #204]	@ (800099c <MX_GPIO_Init+0x114>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a32      	ldr	r2, [pc, #200]	@ (800099c <MX_GPIO_Init+0x114>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_GPIO_Init+0x114>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_GPIO_Init+0x114>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	4a2c      	ldr	r2, [pc, #176]	@ (800099c <MX_GPIO_Init+0x114>)
 80008ea:	f043 0308 	orr.w	r3, r3, #8
 80008ee:	6193      	str	r3, [r2, #24]
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_GPIO_Init+0x114>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	f003 0308 	and.w	r3, r3, #8
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000902:	4827      	ldr	r0, [pc, #156]	@ (80009a0 <MX_GPIO_Init+0x118>)
 8000904:	f001 f813 	bl	800192e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8000908:	2200      	movs	r2, #0
 800090a:	f640 411b 	movw	r1, #3099	@ 0xc1b
 800090e:	4825      	ldr	r0, [pc, #148]	@ (80009a4 <MX_GPIO_Init+0x11c>)
 8000910:	f001 f80d 	bl	800192e <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800091a:	4823      	ldr	r0, [pc, #140]	@ (80009a8 <MX_GPIO_Init+0x120>)
 800091c:	f001 f807 	bl	800192e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000920:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 0310 	add.w	r3, r7, #16
 8000936:	4619      	mov	r1, r3
 8000938:	4819      	ldr	r0, [pc, #100]	@ (80009a0 <MX_GPIO_Init+0x118>)
 800093a:	f000 fe5d 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 800093e:	f640 431b 	movw	r3, #3099	@ 0xc1b
 8000942:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	@ (80009a4 <MX_GPIO_Init+0x11c>)
 8000958:	f000 fe4e 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 800095c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <MX_GPIO_Init+0x11c>)
 8000972:	f000 fe41 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8000976:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 800097a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_GPIO_Init+0x120>)
 8000990:	f000 fe32 	bl	80015f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000994:	bf00      	nop
 8000996:	3720      	adds	r7, #32
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40021000 	.word	0x40021000
 80009a0:	40011000 	.word	0x40011000
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	40010800 	.word	0x40010800

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	4a14      	ldr	r2, [pc, #80]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6193      	str	r3, [r2, #24]
 80009ca:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	4a0e      	ldr	r2, [pc, #56]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	61d3      	str	r3, [r2, #28]
 80009e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <HAL_MspInit+0x5c>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000a18 <HAL_MspInit+0x60>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_MspInit+0x60>)
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010000 	.word	0x40010000

08000a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a28      	ldr	r2, [pc, #160]	@ (8000ad8 <HAL_ADC_MspInit+0xbc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d149      	bne.n	8000ad0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3c:	4b27      	ldr	r3, [pc, #156]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a26      	ldr	r2, [pc, #152]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b24      	ldr	r3, [pc, #144]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a20      	ldr	r2, [pc, #128]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1e      	ldr	r3, [pc, #120]	@ (8000adc <HAL_ADC_MspInit+0xc0>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a70:	2303      	movs	r3, #3
 8000a72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4819      	ldr	r0, [pc, #100]	@ (8000ae0 <HAL_ADC_MspInit+0xc4>)
 8000a7c:	f000 fdbc 	bl	80015f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a80:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	@ (8000ae8 <HAL_ADC_MspInit+0xcc>)
 8000a84:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a94:	2280      	movs	r2, #128	@ 0x80
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a98:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ab6:	f000 fc3f 	bl	8001338 <HAL_DMA_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ac0:	f7ff ff74 	bl	80009ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000ac8:	621a      	str	r2, [r3, #32]
 8000aca:	4a06      	ldr	r2, [pc, #24]	@ (8000ae4 <HAL_ADC_MspInit+0xc8>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	20000058 	.word	0x20000058
 8000ae8:	40020008 	.word	0x40020008

08000aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_TIM_Base_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	4a08      	ldr	r2, [pc, #32]	@ (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b08:	6193      	str	r3, [r2, #24]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_TIM_Base_MspInit+0x38>)
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40012c00 	.word	0x40012c00
 8000b24:	40021000 	.word	0x40021000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f87e 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <DMA1_Channel1_IRQHandler+0x10>)
 8000b86:	f000 fc31 	bl	80013ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000058 	.word	0x20000058

08000b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba0:	f7ff fff8 	bl	8000b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ba6:	490c      	ldr	r1, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bbc:	4c09      	ldr	r4, [pc, #36]	@ (8000be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f001 fea5 	bl	8002918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bce:	f7ff fcf9 	bl	80005c4 <main>
  bx lr
 8000bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bdc:	080029d4 	.word	0x080029d4
  ldr r2, =_sbss
 8000be0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000be4:	200000e8 	.word	0x200000e8

08000be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be8:	e7fe      	b.n	8000be8 <ADC1_2_IRQHandler>
	...

08000bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_Init+0x28>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	@ (8000c14 <HAL_Init+0x28>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 fb59 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f808 	bl	8000c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fed6 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40022000 	.word	0x40022000

08000c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c20:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_InitTick+0x54>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b12      	ldr	r3, [pc, #72]	@ (8000c70 <HAL_InitTick+0x58>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 fb71 	bl	800131e <HAL_SYSTICK_Config>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00e      	b.n	8000c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d80a      	bhi.n	8000c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 fb39 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_InitTick+0x5c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a03      	ldr	r2, [pc, #12]	@ (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000e4 	.word	0x200000e4

08000c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	@ (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	200000e4 	.word	0x200000e4

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0be      	b.n	8000e98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d109      	bne.n	8000d3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fe70 	bl	8000a1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f9ab 	bl	8001098 <ADC_ConversionStop_Disable>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8099 	bne.w	8000e86 <HAL_ADC_Init+0x18e>
 8000d54:	7dfb      	ldrb	r3, [r7, #23]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f040 8095 	bne.w	8000e86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d64:	f023 0302 	bic.w	r3, r3, #2
 8000d68:	f043 0202 	orr.w	r2, r3, #2
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b1b      	ldrb	r3, [r3, #12]
 8000d7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d82:	68ba      	ldr	r2, [r7, #8]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d90:	d003      	beq.n	8000d9a <HAL_ADC_Init+0xa2>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <HAL_ADC_Init+0xa8>
 8000d9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d9e:	e000      	b.n	8000da2 <HAL_ADC_Init+0xaa>
 8000da0:	2300      	movs	r3, #0
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7d1b      	ldrb	r3, [r3, #20]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d119      	bne.n	8000de4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7b1b      	ldrb	r3, [r3, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d109      	bne.n	8000dcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	035a      	lsls	r2, r3, #13
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	e00b      	b.n	8000de4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd0:	f043 0220 	orr.w	r2, r3, #32
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	430a      	orrs	r2, r1
 8000df6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	4b28      	ldr	r3, [pc, #160]	@ (8000ea0 <HAL_ADC_Init+0x1a8>)
 8000e00:	4013      	ands	r3, r2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	68b9      	ldr	r1, [r7, #8]
 8000e08:	430b      	orrs	r3, r1
 8000e0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e14:	d003      	beq.n	8000e1e <HAL_ADC_Init+0x126>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d104      	bne.n	8000e28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	051b      	lsls	r3, r3, #20
 8000e26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <HAL_ADC_Init+0x1ac>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d10b      	bne.n	8000e64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e62:	e018      	b.n	8000e96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e68:	f023 0312 	bic.w	r3, r3, #18
 8000e6c:	f043 0210 	orr.w	r2, r3, #16
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e78:	f043 0201 	orr.w	r2, r3, #1
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e84:	e007      	b.n	8000e96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e8a:	f043 0210 	orr.w	r2, r3, #16
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	ffe1f7fd 	.word	0xffe1f7fd
 8000ea4:	ff1f0efe 	.word	0xff1f0efe

08000ea8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d101      	bne.n	8000ec8 <HAL_ADC_ConfigChannel+0x20>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e0dc      	b.n	8001082 <HAL_ADC_ConfigChannel+0x1da>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	d81c      	bhi.n	8000f12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b05      	subs	r3, #5
 8000eea:	221f      	movs	r2, #31
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	3b05      	subs	r3, #5
 8000f04:	fa00 f203 	lsl.w	r2, r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f10:	e03c      	b.n	8000f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b0c      	cmp	r3, #12
 8000f18:	d81c      	bhi.n	8000f54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b23      	subs	r3, #35	@ 0x23
 8000f2c:	221f      	movs	r2, #31
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	4019      	ands	r1, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	3b23      	subs	r3, #35	@ 0x23
 8000f46:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f52:	e01b      	b.n	8000f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	4413      	add	r3, r2
 8000f64:	3b41      	subs	r3, #65	@ 0x41
 8000f66:	221f      	movs	r2, #31
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4019      	ands	r1, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b41      	subs	r3, #65	@ 0x41
 8000f80:	fa00 f203 	lsl.w	r2, r0, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d91c      	bls.n	8000fce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68d9      	ldr	r1, [r3, #12]
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3b1e      	subs	r3, #30
 8000fa6:	2207      	movs	r2, #7
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	4019      	ands	r1, r3
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	6898      	ldr	r0, [r3, #8]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	3b1e      	subs	r3, #30
 8000fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	e019      	b.n	8001002 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6919      	ldr	r1, [r3, #16]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	2207      	movs	r2, #7
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	4019      	ands	r1, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	6898      	ldr	r0, [r3, #8]
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b10      	cmp	r3, #16
 8001008:	d003      	beq.n	8001012 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800100e:	2b11      	cmp	r3, #17
 8001010:	d132      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a1d      	ldr	r2, [pc, #116]	@ (800108c <HAL_ADC_ConfigChannel+0x1e4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d125      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d126      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001038:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b10      	cmp	r3, #16
 8001040:	d11a      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_ADC_ConfigChannel+0x1e8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <HAL_ADC_ConfigChannel+0x1ec>)
 8001048:	fba2 2303 	umull	r2, r3, r2, r3
 800104c:	0c9a      	lsrs	r2, r3, #18
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001058:	e002      	b.n	8001060 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	3b01      	subs	r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f9      	bne.n	800105a <HAL_ADC_ConfigChannel+0x1b2>
 8001066:	e007      	b.n	8001078 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106c:	f043 0220 	orr.w	r2, r3, #32
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	40012400 	.word	0x40012400
 8001090:	20000000 	.word	0x20000000
 8001094:	431bde83 	.word	0x431bde83

08001098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d12e      	bne.n	8001110 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 0201 	bic.w	r2, r2, #1
 80010c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010c2:	f7ff fdeb 	bl	8000c9c <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c8:	e01b      	b.n	8001102 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010ca:	f7ff fde7 	bl	8000c9c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d914      	bls.n	8001102 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	f043 0210 	orr.w	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e007      	b.n	8001112 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d0dc      	beq.n	80010ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	@ (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4906      	ldr	r1, [pc, #24]	@ (80011b4 <__NVIC_EnableIRQ+0x34>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	@ (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	@ (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	@ 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f7ff ff90 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff2d 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff42 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff90 	bl	800120c <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5f 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e043      	b.n	80013d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <HAL_DMA_Init+0xa8>)
 8001356:	4413      	add	r3, r2
 8001358:	4a22      	ldr	r2, [pc, #136]	@ (80013e4 <HAL_DMA_Init+0xac>)
 800135a:	fba2 2303 	umull	r2, r3, r2, r3
 800135e:	091b      	lsrs	r3, r3, #4
 8001360:	009a      	lsls	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_DMA_Init+0xb0>)
 800136a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2202      	movs	r2, #2
 8001370:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001382:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	bffdfff8 	.word	0xbffdfff8
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	40020000 	.word	0x40020000

080013ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	2204      	movs	r2, #4
 800140a:	409a      	lsls	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d04f      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xc8>
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04a      	beq.n	80014b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	2b00      	cmp	r3, #0
 800142a:	d107      	bne.n	800143c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a66      	ldr	r2, [pc, #408]	@ (80015dc <HAL_DMA_IRQHandler+0x1f0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d029      	beq.n	800149a <HAL_DMA_IRQHandler+0xae>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a65      	ldr	r2, [pc, #404]	@ (80015e0 <HAL_DMA_IRQHandler+0x1f4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d022      	beq.n	8001496 <HAL_DMA_IRQHandler+0xaa>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a63      	ldr	r2, [pc, #396]	@ (80015e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01a      	beq.n	8001490 <HAL_DMA_IRQHandler+0xa4>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a62      	ldr	r2, [pc, #392]	@ (80015e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d012      	beq.n	800148a <HAL_DMA_IRQHandler+0x9e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a60      	ldr	r2, [pc, #384]	@ (80015ec <HAL_DMA_IRQHandler+0x200>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00a      	beq.n	8001484 <HAL_DMA_IRQHandler+0x98>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a5f      	ldr	r2, [pc, #380]	@ (80015f0 <HAL_DMA_IRQHandler+0x204>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d102      	bne.n	800147e <HAL_DMA_IRQHandler+0x92>
 8001478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800147c:	e00e      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800147e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001482:	e00b      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001484:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001488:	e008      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800148a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800148e:	e005      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001494:	e002      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 8001496:	2340      	movs	r3, #64	@ 0x40
 8001498:	e000      	b.n	800149c <HAL_DMA_IRQHandler+0xb0>
 800149a:	2304      	movs	r3, #4
 800149c:	4a55      	ldr	r2, [pc, #340]	@ (80015f4 <HAL_DMA_IRQHandler+0x208>)
 800149e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8094 	beq.w	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	e08e      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b8:	2202      	movs	r2, #2
 80014ba:	409a      	lsls	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4013      	ands	r3, r2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d056      	beq.n	8001572 <HAL_DMA_IRQHandler+0x186>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d051      	beq.n	8001572 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0320 	and.w	r3, r3, #32
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10b      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 020a 	bic.w	r2, r2, #10
 80014ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a38      	ldr	r2, [pc, #224]	@ (80015dc <HAL_DMA_IRQHandler+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d029      	beq.n	8001552 <HAL_DMA_IRQHandler+0x166>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a37      	ldr	r2, [pc, #220]	@ (80015e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <HAL_DMA_IRQHandler+0x162>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <HAL_DMA_IRQHandler+0x1f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01a      	beq.n	8001548 <HAL_DMA_IRQHandler+0x15c>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a34      	ldr	r2, [pc, #208]	@ (80015e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d012      	beq.n	8001542 <HAL_DMA_IRQHandler+0x156>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a32      	ldr	r2, [pc, #200]	@ (80015ec <HAL_DMA_IRQHandler+0x200>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00a      	beq.n	800153c <HAL_DMA_IRQHandler+0x150>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a31      	ldr	r2, [pc, #196]	@ (80015f0 <HAL_DMA_IRQHandler+0x204>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d102      	bne.n	8001536 <HAL_DMA_IRQHandler+0x14a>
 8001530:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001534:	e00e      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800153a:	e00b      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 800153c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001540:	e008      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	e005      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800154c:	e002      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 800154e:	2320      	movs	r3, #32
 8001550:	e000      	b.n	8001554 <HAL_DMA_IRQHandler+0x168>
 8001552:	2302      	movs	r3, #2
 8001554:	4a27      	ldr	r2, [pc, #156]	@ (80015f4 <HAL_DMA_IRQHandler+0x208>)
 8001556:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	2b00      	cmp	r3, #0
 8001566:	d034      	beq.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001570:	e02f      	b.n	80015d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	2208      	movs	r2, #8
 8001578:	409a      	lsls	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d028      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 020e 	bic.w	r2, r2, #14
 800159a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d004      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
    }
  }
  return;
 80015d2:	bf00      	nop
 80015d4:	bf00      	nop
}
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020008 	.word	0x40020008
 80015e0:	4002001c 	.word	0x4002001c
 80015e4:	40020030 	.word	0x40020030
 80015e8:	40020044 	.word	0x40020044
 80015ec:	40020058 	.word	0x40020058
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e169      	b.n	80018e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8158 	bne.w	80018da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a9a      	ldr	r2, [pc, #616]	@ (8001898 <HAL_GPIO_Init+0x2a0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4a98      	ldr	r2, [pc, #608]	@ (8001898 <HAL_GPIO_Init+0x2a0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4a98      	ldr	r2, [pc, #608]	@ (800189c <HAL_GPIO_Init+0x2a4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a96      	ldr	r2, [pc, #600]	@ (800189c <HAL_GPIO_Init+0x2a4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a96      	ldr	r2, [pc, #600]	@ (80018a0 <HAL_GPIO_Init+0x2a8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a94      	ldr	r2, [pc, #592]	@ (80018a0 <HAL_GPIO_Init+0x2a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a94      	ldr	r2, [pc, #592]	@ (80018a4 <HAL_GPIO_Init+0x2ac>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a92      	ldr	r2, [pc, #584]	@ (80018a4 <HAL_GPIO_Init+0x2ac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a92      	ldr	r2, [pc, #584]	@ (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a90      	ldr	r2, [pc, #576]	@ (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	@ (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a79      	ldr	r2, [pc, #484]	@ (80018ac <HAL_GPIO_Init+0x2b4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
          break;
 8001726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	@ 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b1 	beq.w	80018da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001790:	4a48      	ldr	r2, [pc, #288]	@ (80018b4 <HAL_GPIO_Init+0x2bc>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a40      	ldr	r2, [pc, #256]	@ (80018b8 <HAL_GPIO_Init+0x2c0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d013      	beq.n	80017e4 <HAL_GPIO_Init+0x1ec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3f      	ldr	r2, [pc, #252]	@ (80018bc <HAL_GPIO_Init+0x2c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3e      	ldr	r2, [pc, #248]	@ (80018c0 <HAL_GPIO_Init+0x2c8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0x1e4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3d      	ldr	r2, [pc, #244]	@ (80018c4 <HAL_GPIO_Init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017d8:	2304      	movs	r3, #4
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017dc:	2302      	movs	r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e4:	2300      	movs	r3, #0
 80017e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f6:	492f      	ldr	r1, [pc, #188]	@ (80018b4 <HAL_GPIO_Init+0x2bc>)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001810:	4b2d      	ldr	r3, [pc, #180]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	492c      	ldr	r1, [pc, #176]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4928      	ldr	r1, [pc, #160]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001838:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	4922      	ldr	r1, [pc, #136]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	60cb      	str	r3, [r1, #12]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001846:	4b20      	ldr	r3, [pc, #128]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	491e      	ldr	r1, [pc, #120]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001860:	4b19      	ldr	r3, [pc, #100]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4918      	ldr	r1, [pc, #96]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800186e:	4b16      	ldr	r3, [pc, #88]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	4914      	ldr	r1, [pc, #80]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d021      	beq.n	80018cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001888:	4b0f      	ldr	r3, [pc, #60]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	490e      	ldr	r1, [pc, #56]	@ (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e021      	b.n	80018da <HAL_GPIO_Init+0x2e2>
 8001896:	bf00      	nop
 8001898:	10320000 	.word	0x10320000
 800189c:	10310000 	.word	0x10310000
 80018a0:	10220000 	.word	0x10220000
 80018a4:	10210000 	.word	0x10210000
 80018a8:	10120000 	.word	0x10120000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40011400 	.word	0x40011400
 80018c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_GPIO_Init+0x304>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4909      	ldr	r1, [pc, #36]	@ (80018fc <HAL_GPIO_Init+0x304>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f ae8e 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	372c      	adds	r7, #44	@ 0x2c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	807b      	strh	r3, [r7, #2]
 800193a:	4613      	mov	r3, r2
 800193c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193e:	787b      	ldrb	r3, [r7, #1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194a:	e003      	b.n	8001954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e272      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	4b92      	ldr	r3, [pc, #584]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198c:	4b8f      	ldr	r3, [pc, #572]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d112      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
 8001998:	4b8c      	ldr	r3, [pc, #560]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019a4:	d10b      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4b89      	ldr	r3, [pc, #548]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d06c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x12c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d168      	bne.n	8001a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e24c      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x76>
 80019c8:	4b80      	ldr	r3, [pc, #512]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a7f      	ldr	r2, [pc, #508]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e02e      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b7b      	ldr	r3, [pc, #492]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7a      	ldr	r2, [pc, #488]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b78      	ldr	r3, [pc, #480]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a77      	ldr	r2, [pc, #476]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xbc>
 8001a02:	4b72      	ldr	r3, [pc, #456]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a71      	ldr	r2, [pc, #452]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6e      	ldr	r2, [pc, #440]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6a      	ldr	r2, [pc, #424]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b68      	ldr	r3, [pc, #416]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a67      	ldr	r2, [pc, #412]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f92e 	bl	8000c9c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f92a 	bl	8000c9c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	@ 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e200      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b5d      	ldr	r3, [pc, #372]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe4>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f91a 	bl	8000c9c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f916 	bl	8000c9c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	@ 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1ec      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x10c>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa6:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d11c      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
 8001ab2:	4b46      	ldr	r3, [pc, #280]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	4b43      	ldr	r3, [pc, #268]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1c0      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4939      	ldr	r1, [pc, #228]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	e03a      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af4:	4b36      	ldr	r3, [pc, #216]	@ (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff f8cf 	bl	8000c9c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f8cb 	bl	8000c9c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1a1      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4927      	ldr	r1, [pc, #156]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f8ae 	bl	8000c9c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff f8aa 	bl	8000c9c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e180      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d019      	beq.n	8001baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff f88e 	bl	8000c9c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff f88a 	bl	8000c9c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e160      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 fa9c 	bl	80020e0 <RCC_Delay>
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f874 	bl	8000c9c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff f870 	bl	8000c9c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e146      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42420000 	.word	0x42420000
 8001bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b92      	ldr	r3, [pc, #584]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a6 	beq.w	8001d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b88      	ldr	r3, [pc, #544]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a87      	ldr	r2, [pc, #540]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b85      	ldr	r3, [pc, #532]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b82      	ldr	r3, [pc, #520]	@ (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f831 	bl	8000c9c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f82d 	bl	8000c9c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	@ 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e103      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b75      	ldr	r3, [pc, #468]	@ (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x312>
 8001c64:	4b6f      	ldr	r3, [pc, #444]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e02d      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a69      	ldr	r2, [pc, #420]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	4b67      	ldr	r3, [pc, #412]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a66      	ldr	r2, [pc, #408]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x356>
 8001c9c:	4b61      	ldr	r3, [pc, #388]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a60      	ldr	r2, [pc, #384]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a5a      	ldr	r2, [pc, #360]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b58      	ldr	r3, [pc, #352]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a57      	ldr	r2, [pc, #348]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7fe ffe1 	bl	8000c9c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7fe ffdd 	bl	8000c9c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0b1      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x37e>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7fe ffcb 	bl	8000c9c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ffc7 	bl	8000c9c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e09b      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b3c      	ldr	r3, [pc, #240]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a3b      	ldr	r2, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8087 	beq.w	8001e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d061      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d146      	bne.n	8001dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7fe ff9b 	bl	8000c9c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7fe ff97 	bl	8000c9c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e06d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d92:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4921      	ldr	r1, [pc, #132]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a19      	ldr	r1, [r3, #32]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db4:	430b      	orrs	r3, r1
 8001db6:	491b      	ldr	r1, [pc, #108]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7fe ff6b 	bl	8000c9c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ff67 	bl	8000c9c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e03d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x46a>
 8001de8:	e035      	b.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7fe ff54 	bl	8000c9c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe ff50 	bl	8000c9c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e026      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x498>
 8001e16:	e01e      	b.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e019      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <HAL_RCC_OscConfig+0x500>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b6a      	ldr	r3, [pc, #424]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b67      	ldr	r3, [pc, #412]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4965      	ldr	r1, [pc, #404]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b41      	ldr	r3, [pc, #260]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e073      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b39      	ldr	r3, [pc, #228]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4936      	ldr	r1, [pc, #216]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fea2 	bl	8000c9c <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe fe9e 	bl	8000c9c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e053      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d210      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4922      	ldr	r1, [pc, #136]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	@ (800202c <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_ClockConfig+0x1d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fe00 	bl	8000c18 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	080029a8 	.word	0x080029a8
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	2300      	movs	r3, #0
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002052:	4b1e      	ldr	r3, [pc, #120]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d002      	beq.n	8002068 <HAL_RCC_GetSysClockFreq+0x30>
 8002062:	2b08      	cmp	r3, #8
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0x36>
 8002066:	e027      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002068:	4b19      	ldr	r3, [pc, #100]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800206a:	613b      	str	r3, [r7, #16]
      break;
 800206c:	e027      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002078:	5cd3      	ldrb	r3, [r2, r3]
 800207a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d010      	beq.n	80020a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002086:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x94>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0c5b      	lsrs	r3, r3, #17
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800209a:	fb03 f202 	mul.w	r2, r3, r2
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e004      	b.n	80020b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a0c      	ldr	r2, [pc, #48]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	613b      	str	r3, [r7, #16]
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	613b      	str	r3, [r7, #16]
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	693b      	ldr	r3, [r7, #16]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	080029b8 	.word	0x080029b8
 80020d8:	080029c8 	.word	0x080029c8
 80020dc:	003d0900 	.word	0x003d0900

080020e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <RCC_Delay+0x34>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <RCC_Delay+0x38>)
 80020ee:	fba2 2303 	umull	r2, r3, r2, r3
 80020f2:	0a5b      	lsrs	r3, r3, #9
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020fc:	bf00      	nop
  }
  while (Delay --);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1e5a      	subs	r2, r3, #1
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f9      	bne.n	80020fc <RCC_Delay+0x1c>
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	20000000 	.word	0x20000000
 8002118:	10624dd3 	.word	0x10624dd3

0800211c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d07d      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213c:	4b4f      	ldr	r3, [pc, #316]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10d      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	4b4c      	ldr	r3, [pc, #304]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	4a4b      	ldr	r2, [pc, #300]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	4b49      	ldr	r3, [pc, #292]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002160:	2301      	movs	r3, #1
 8002162:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b46      	ldr	r3, [pc, #280]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d118      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002170:	4b43      	ldr	r3, [pc, #268]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002176:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217c:	f7fe fd8e 	bl	8000c9c <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	e008      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7fe fd8a 	bl	8000c9c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e06d      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b3a      	ldr	r3, [pc, #232]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02e      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d027      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c0:	4b2e      	ldr	r3, [pc, #184]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021d6:	4a29      	ldr	r2, [pc, #164]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d014      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fd59 	bl	8000c9c <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7fe fd55 	bl	8000c9c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e036      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002210:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	4917      	ldr	r1, [pc, #92]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	4313      	orrs	r3, r2
 8002220:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002222:	7dfb      	ldrb	r3, [r7, #23]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	4a13      	ldr	r2, [pc, #76]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002232:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d008      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	490b      	ldr	r1, [pc, #44]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224e:	4313      	orrs	r3, r2
 8002250:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800225e:	4b07      	ldr	r3, [pc, #28]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4904      	ldr	r1, [pc, #16]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	42420440 	.word	0x42420440

08002288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e041      	b.n	800231e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fc1c 	bl	8000aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f000 f936 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_TIM_ConfigClockSource+0x1c>
 800233e:	2302      	movs	r3, #2
 8002340:	e0b4      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x186>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002360:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002368:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800237a:	d03e      	beq.n	80023fa <HAL_TIM_ConfigClockSource+0xd4>
 800237c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002380:	f200 8087 	bhi.w	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 8002384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002388:	f000 8086 	beq.w	8002498 <HAL_TIM_ConfigClockSource+0x172>
 800238c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002390:	d87f      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 8002392:	2b70      	cmp	r3, #112	@ 0x70
 8002394:	d01a      	beq.n	80023cc <HAL_TIM_ConfigClockSource+0xa6>
 8002396:	2b70      	cmp	r3, #112	@ 0x70
 8002398:	d87b      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 800239a:	2b60      	cmp	r3, #96	@ 0x60
 800239c:	d050      	beq.n	8002440 <HAL_TIM_ConfigClockSource+0x11a>
 800239e:	2b60      	cmp	r3, #96	@ 0x60
 80023a0:	d877      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 80023a2:	2b50      	cmp	r3, #80	@ 0x50
 80023a4:	d03c      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0xfa>
 80023a6:	2b50      	cmp	r3, #80	@ 0x50
 80023a8:	d873      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 80023aa:	2b40      	cmp	r3, #64	@ 0x40
 80023ac:	d058      	beq.n	8002460 <HAL_TIM_ConfigClockSource+0x13a>
 80023ae:	2b40      	cmp	r3, #64	@ 0x40
 80023b0:	d86f      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 80023b2:	2b30      	cmp	r3, #48	@ 0x30
 80023b4:	d064      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0x15a>
 80023b6:	2b30      	cmp	r3, #48	@ 0x30
 80023b8:	d86b      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d060      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0x15a>
 80023be:	2b20      	cmp	r3, #32
 80023c0:	d867      	bhi.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d05c      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0x15a>
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d05a      	beq.n	8002480 <HAL_TIM_ConfigClockSource+0x15a>
 80023ca:	e062      	b.n	8002492 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023dc:	f000 fa16 	bl	800280c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80023ee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	609a      	str	r2, [r3, #8]
      break;
 80023f8:	e04f      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800240a:	f000 f9ff 	bl	800280c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800241c:	609a      	str	r2, [r3, #8]
      break;
 800241e:	e03c      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242c:	461a      	mov	r2, r3
 800242e:	f000 f976 	bl	800271e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2150      	movs	r1, #80	@ 0x50
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f9cd 	bl	80027d8 <TIM_ITRx_SetConfig>
      break;
 800243e:	e02c      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800244c:	461a      	mov	r2, r3
 800244e:	f000 f994 	bl	800277a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2160      	movs	r1, #96	@ 0x60
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f9bd 	bl	80027d8 <TIM_ITRx_SetConfig>
      break;
 800245e:	e01c      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246c:	461a      	mov	r2, r3
 800246e:	f000 f956 	bl	800271e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2140      	movs	r1, #64	@ 0x40
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f9ad 	bl	80027d8 <TIM_ITRx_SetConfig>
      break;
 800247e:	e00c      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f000 f9a4 	bl	80027d8 <TIM_ITRx_SetConfig>
      break;
 8002490:	e003      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
      break;
 8002496:	e000      	b.n	800249a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002498:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e031      	b.n	8002530 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f88c 	bl	80025fc <TIM_SlaveTimer_SetConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e018      	b.n	8002530 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800250c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800251c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a29      	ldr	r2, [pc, #164]	@ (80025f0 <TIM_Base_SetConfig+0xb8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00b      	beq.n	8002568 <TIM_Base_SetConfig+0x30>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002556:	d007      	beq.n	8002568 <TIM_Base_SetConfig+0x30>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <TIM_Base_SetConfig+0xbc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d003      	beq.n	8002568 <TIM_Base_SetConfig+0x30>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a25      	ldr	r2, [pc, #148]	@ (80025f8 <TIM_Base_SetConfig+0xc0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d108      	bne.n	800257a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800256e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <TIM_Base_SetConfig+0xb8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00b      	beq.n	800259a <TIM_Base_SetConfig+0x62>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002588:	d007      	beq.n	800259a <TIM_Base_SetConfig+0x62>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a19      	ldr	r2, [pc, #100]	@ (80025f4 <TIM_Base_SetConfig+0xbc>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d003      	beq.n	800259a <TIM_Base_SetConfig+0x62>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <TIM_Base_SetConfig+0xc0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d108      	bne.n	80025ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <TIM_Base_SetConfig+0xb8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d103      	bne.n	80025e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	615a      	str	r2, [r3, #20]
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40000400 	.word	0x40000400
 80025f8:	40000800 	.word	0x40000800

080025fc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002618:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f023 0307 	bic.w	r3, r3, #7
 800262a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b70      	cmp	r3, #112	@ 0x70
 8002644:	d01a      	beq.n	800267c <TIM_SlaveTimer_SetConfig+0x80>
 8002646:	2b70      	cmp	r3, #112	@ 0x70
 8002648:	d860      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 800264a:	2b60      	cmp	r3, #96	@ 0x60
 800264c:	d054      	beq.n	80026f8 <TIM_SlaveTimer_SetConfig+0xfc>
 800264e:	2b60      	cmp	r3, #96	@ 0x60
 8002650:	d85c      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 8002652:	2b50      	cmp	r3, #80	@ 0x50
 8002654:	d046      	beq.n	80026e4 <TIM_SlaveTimer_SetConfig+0xe8>
 8002656:	2b50      	cmp	r3, #80	@ 0x50
 8002658:	d858      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 800265a:	2b40      	cmp	r3, #64	@ 0x40
 800265c:	d019      	beq.n	8002692 <TIM_SlaveTimer_SetConfig+0x96>
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d854      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 8002662:	2b30      	cmp	r3, #48	@ 0x30
 8002664:	d055      	beq.n	8002712 <TIM_SlaveTimer_SetConfig+0x116>
 8002666:	2b30      	cmp	r3, #48	@ 0x30
 8002668:	d850      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 800266a:	2b20      	cmp	r3, #32
 800266c:	d051      	beq.n	8002712 <TIM_SlaveTimer_SetConfig+0x116>
 800266e:	2b20      	cmp	r3, #32
 8002670:	d84c      	bhi.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d04d      	beq.n	8002712 <TIM_SlaveTimer_SetConfig+0x116>
 8002676:	2b10      	cmp	r3, #16
 8002678:	d04b      	beq.n	8002712 <TIM_SlaveTimer_SetConfig+0x116>
 800267a:	e047      	b.n	800270c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800268c:	f000 f8be 	bl	800280c <TIM_ETR_SetConfig>
      break;
 8002690:	e040      	b.n	8002714 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b05      	cmp	r3, #5
 8002698:	d101      	bne.n	800269e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e03b      	b.n	8002716 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026c4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	621a      	str	r2, [r3, #32]
      break;
 80026e2:	e017      	b.n	8002714 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f0:	461a      	mov	r2, r3
 80026f2:	f000 f814 	bl	800271e <TIM_TI1_ConfigInputStage>
      break;
 80026f6:	e00d      	b.n	8002714 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002704:	461a      	mov	r2, r3
 8002706:	f000 f838 	bl	800277a <TIM_TI2_ConfigInputStage>
      break;
 800270a:	e003      	b.n	8002714 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	75fb      	strb	r3, [r7, #23]
      break;
 8002710:	e000      	b.n	8002714 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002712:	bf00      	nop
  }

  return status;
 8002714:	7dfb      	ldrb	r3, [r7, #23]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f023 0201 	bic.w	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f023 030a 	bic.w	r3, r3, #10
 800275a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4313      	orrs	r3, r2
 8002762:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	621a      	str	r2, [r3, #32]
}
 8002770:	bf00      	nop
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277a:	b480      	push	{r7}
 800277c:	b087      	sub	sp, #28
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f023 0210 	bic.w	r2, r3, #16
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f043 0307 	orr.w	r3, r3, #7
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002826:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	021a      	lsls	r2, r3, #8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	431a      	orrs	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	bf00      	nop
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
	...

0800284c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002860:	2302      	movs	r3, #2
 8002862:	e046      	b.n	80028f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2202      	movs	r2, #2
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800288a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4313      	orrs	r3, r2
 8002894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00e      	beq.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028b0:	d009      	beq.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a12      	ldr	r2, [pc, #72]	@ (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d004      	beq.n	80028c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a10      	ldr	r2, [pc, #64]	@ (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10c      	bne.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40000800 	.word	0x40000800

08002908 <memset>:
 8002908:	4603      	mov	r3, r0
 800290a:	4402      	add	r2, r0
 800290c:	4293      	cmp	r3, r2
 800290e:	d100      	bne.n	8002912 <memset+0xa>
 8002910:	4770      	bx	lr
 8002912:	f803 1b01 	strb.w	r1, [r3], #1
 8002916:	e7f9      	b.n	800290c <memset+0x4>

08002918 <__libc_init_array>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	2600      	movs	r6, #0
 800291c:	4d0c      	ldr	r5, [pc, #48]	@ (8002950 <__libc_init_array+0x38>)
 800291e:	4c0d      	ldr	r4, [pc, #52]	@ (8002954 <__libc_init_array+0x3c>)
 8002920:	1b64      	subs	r4, r4, r5
 8002922:	10a4      	asrs	r4, r4, #2
 8002924:	42a6      	cmp	r6, r4
 8002926:	d109      	bne.n	800293c <__libc_init_array+0x24>
 8002928:	f000 f81a 	bl	8002960 <_init>
 800292c:	2600      	movs	r6, #0
 800292e:	4d0a      	ldr	r5, [pc, #40]	@ (8002958 <__libc_init_array+0x40>)
 8002930:	4c0a      	ldr	r4, [pc, #40]	@ (800295c <__libc_init_array+0x44>)
 8002932:	1b64      	subs	r4, r4, r5
 8002934:	10a4      	asrs	r4, r4, #2
 8002936:	42a6      	cmp	r6, r4
 8002938:	d105      	bne.n	8002946 <__libc_init_array+0x2e>
 800293a:	bd70      	pop	{r4, r5, r6, pc}
 800293c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002940:	4798      	blx	r3
 8002942:	3601      	adds	r6, #1
 8002944:	e7ee      	b.n	8002924 <__libc_init_array+0xc>
 8002946:	f855 3b04 	ldr.w	r3, [r5], #4
 800294a:	4798      	blx	r3
 800294c:	3601      	adds	r6, #1
 800294e:	e7f2      	b.n	8002936 <__libc_init_array+0x1e>
 8002950:	080029cc 	.word	0x080029cc
 8002954:	080029cc 	.word	0x080029cc
 8002958:	080029cc 	.word	0x080029cc
 800295c:	080029d0 	.word	0x080029d0

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	bf00      	nop
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	bf00      	nop
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
