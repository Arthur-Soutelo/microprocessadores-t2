
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08009900  08009900  0000a900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ef8  08009ef8  0000b1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ef8  08009ef8  0000aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f00  08009f00  0000b1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f00  08009f00  0000af00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f04  08009f04  0000af04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08009f08  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001dc  0800a0e4  0000b1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  0800a0e4  0000b4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b94c  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244e  00000000  00000000  00016b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00018fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e9  00000000  00000000  00019c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001994c  00000000  00000000  0001a679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9e0  00000000  00000000  00033fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f463  00000000  00000000  000439a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2e08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049ec  00000000  00000000  000d2e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d7838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080098e4 	.word	0x080098e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080098e4 	.word	0x080098e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000
 800117c:	00000000 	.word	0x00000000

08001180 <Read_Temperature>:
#include "ambient.h"

// Temperature read function using floating-point calculation
float Read_Temperature(void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]

    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 800118a:	2010      	movs	r0, #16
 800118c:	f000 f83e 	bl	800120c <read_adc_value>
 8001190:	60f8      	str	r0, [r7, #12]

    // Convert ADC value to voltage
	float adcVoltage = (adcValue / 4095.0) * 3.3; // Assuming 12-bit resolution and 3.3V reference
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	a315      	add	r3, pc, #84	@ (adr r3, 80011f0 <Read_Temperature+0x70>)
 800119a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119e:	f7ff fac5 	bl	800072c <__aeabi_ddiv>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	a313      	add	r3, pc, #76	@ (adr r3, 80011f8 <Read_Temperature+0x78>)
 80011ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc84 	bl	8000ac8 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	60bb      	str	r3, [r7, #8]

	// Temperature calculation
	// Temperature = (Vadc - V25) / Slope + T25
	// T25 = 25°C (reference temperature)

	float temperature = ((adcVoltage - VOLTAGE_AT_25C) / AVG_SLOPE) + 25;
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <Read_Temperature+0x80>)
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f7ff fcd2 	bl	8000b70 <__aeabi_fsub>
 80011cc:	4603      	mov	r3, r0
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <Read_Temperature+0x84>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe8b 	bl	8000eec <__aeabi_fdiv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	490b      	ldr	r1, [pc, #44]	@ (8001208 <Read_Temperature+0x88>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fcca 	bl	8000b74 <__addsf3>
 80011e0:	4603      	mov	r3, r0
 80011e2:	607b      	str	r3, [r7, #4]

    return temperature;
 80011e4:	687b      	ldr	r3, [r7, #4]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40affe00 	.word	0x40affe00
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	3fb70a3d 	.word	0x3fb70a3d
 8001204:	4089999a 	.word	0x4089999a
 8001208:	41c80000 	.word	0x41c80000

0800120c <read_adc_value>:


uint32_t read_adc_value(uint32_t channel) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;  // Adjust as needed
 800122c:	2305      	movs	r3, #5
 800122e:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	4810      	ldr	r0, [pc, #64]	@ (8001278 <read_adc_value+0x6c>)
 8001238:	f001 ffe6 	bl	8003208 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <read_adc_value+0x3c>
        // Handle error
        return -1;
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	e012      	b.n	800126e <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <read_adc_value+0x6c>)
 800124a:	f001 fdf1 	bl	8002e30 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800124e:	f04f 31ff 	mov.w	r1, #4294967295
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <read_adc_value+0x6c>)
 8001254:	f001 fec6 	bl	8002fe4 <HAL_ADC_PollForConversion>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <read_adc_value+0x6c>)
 8001260:	f001 ffc6 	bl	80031f0 <HAL_ADC_GetValue>
 8001264:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 8001266:	4804      	ldr	r0, [pc, #16]	@ (8001278 <read_adc_value+0x6c>)
 8001268:	f001 fe90 	bl	8002f8c <HAL_ADC_Stop>

    return adcValue;
 800126c:	697b      	ldr	r3, [r7, #20]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001f8 	.word	0x200001f8

0800127c <read_light_outside>:

float read_light_outside(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]

    // Read LDR1 value from PA0 (ADC1_IN0)
    adcValue = read_adc_value(ADC_CHANNEL_0);
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff ffc0 	bl	800120c <read_adc_value>
 800128c:	6078      	str	r0, [r7, #4]

   // Convert ADC value to a percentage of light intensity
   float lightIntensity = (float)adcValue / ADC_FULL_SCALE;
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fd20 	bl	8000cd4 <__aeabi_ui2f>
 8001294:	4603      	mov	r3, r0
 8001296:	4908      	ldr	r1, [pc, #32]	@ (80012b8 <read_light_outside+0x3c>)
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe27 	bl	8000eec <__aeabi_fdiv>
 800129e:	4603      	mov	r3, r0
 80012a0:	603b      	str	r3, [r7, #0]

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012a8:	f7ff fc62 	bl	8000b70 <__aeabi_fsub>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	457ff000 	.word	0x457ff000

080012bc <read_light_inside>:

float read_light_inside(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]

    // Read LDR1 value from PA0 (ADC1_IN0)
    adcValue = read_adc_value(ADC_CHANNEL_1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f7ff ffa0 	bl	800120c <read_adc_value>
 80012cc:	6078      	str	r0, [r7, #4]

   // Convert ADC value to a percentage of light intensity
   float lightIntensity = (float)adcValue / ADC_FULL_SCALE;
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd00 	bl	8000cd4 <__aeabi_ui2f>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <read_light_inside+0x3c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe07 	bl	8000eec <__aeabi_fdiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	603b      	str	r3, [r7, #0]

   // Invert the value to reflect higher ADC values as lower light intensity
   return 1.0f - lightIntensity;
 80012e2:	6839      	ldr	r1, [r7, #0]
 80012e4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80012e8:	f7ff fc42 	bl	8000b70 <__aeabi_fsub>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	457ff000 	.word	0x457ff000
 80012fc:	00000000 	.word	0x00000000

08001300 <Regulate_Light_Intensity>:


void Regulate_Light_Intensity(void) {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
    // Passo 1: Calcular a porcentagem do LDR
    float ldr_percentage = read_light_inside();
 8001306:	f7ff ffd9 	bl	80012bc <read_light_inside>
 800130a:	6178      	str	r0, [r7, #20]

    // Obter o ciclo de trabalho atual do PWM
    uint32_t current_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 800130c:	4b46      	ldr	r3, [pc, #280]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	613b      	str	r3, [r7, #16]

    if (ldr_percentage < LDR_MIN_THRESHOLD - LDR_DEAD_ZONE) {
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff f887 	bl	8000428 <__aeabi_f2d>
 800131a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001418 <Regulate_Light_Intensity+0x118>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff fb4c 	bl	80009bc <__aeabi_dcmplt>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00b      	beq.n	8001342 <Regulate_Light_Intensity+0x42>
        // Aumentar a intensidade da luz (aumentar o ciclo de trabalho do PWM) se estiver abaixo do limite
        if (current_compare < (htim4.Init.Period - PWM_STEP_SIZE)) {
 800132a:	4b3f      	ldr	r3, [pc, #252]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3b02      	subs	r3, #2
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	429a      	cmp	r2, r3
 8001334:	d25b      	bcs.n	80013ee <Regulate_Light_Intensity+0xee>
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare + PWM_STEP_SIZE);
 8001336:	4b3c      	ldr	r3, [pc, #240]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	3202      	adds	r2, #2
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001340:	e055      	b.n	80013ee <Regulate_Light_Intensity+0xee>
        }
    } else if (ldr_percentage > LDR_MAX_THRESHOLD + LDR_DEAD_ZONE) {
 8001342:	f04f 517d 	mov.w	r1, #1061158912	@ 0x3f400000
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff fed8 	bl	80010fc <__aeabi_fcmpgt>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00d      	beq.n	800136e <Regulate_Light_Intensity+0x6e>
        // Diminuir a intensidade da luz (diminuir o ciclo de trabalho do PWM) se estiver acima do limite
    	if (current_compare > PWM_STEP_SIZE) {
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	2b02      	cmp	r3, #2
 8001356:	d905      	bls.n	8001364 <Regulate_Light_Intensity+0x64>
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare - PWM_STEP_SIZE);
 8001358:	4b33      	ldr	r3, [pc, #204]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	3a02      	subs	r2, #2
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
 8001362:	e044      	b.n	80013ee <Regulate_Light_Intensity+0xee>
    	} else {
    	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001364:	4b30      	ldr	r3, [pc, #192]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	@ 0x40
 800136c:	e03f      	b.n	80013ee <Regulate_Light_Intensity+0xee>
    	}
    } else {
        // Se a leitura do LDR estiver dentro da faixa desejada, verifique a resposta do ajuste
        // Faça um ajuste pequeno para verificar a resposta
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
									current_compare - PWM_ADJUSTMENT_STEP : 0;
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	2b02      	cmp	r3, #2
 8001372:	bf38      	it	cc
 8001374:	2302      	movcc	r3, #2
		uint32_t adjusted_compare = (current_compare > PWM_ADJUSTMENT_STEP) ?
 8001376:	3b02      	subs	r3, #2
 8001378:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, adjusted_compare);
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_Delay(ADJUSTMENT_DELAY);  // Aguarde um curto período para estabilizar a leitura
 8001382:	2032      	movs	r0, #50	@ 0x32
 8001384:	f001 fc58 	bl	8002c38 <HAL_Delay>

        // Leia o LDR após o ajuste
        float new_ldr_percentage = read_light_inside();
 8001388:	f7ff ff98 	bl	80012bc <read_light_inside>
 800138c:	60b8      	str	r0, [r7, #8]

        // Se o LDR ainda estiver dentro da faixa, considere o ajuste como adequado
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff f84a 	bl	8000428 <__aeabi_f2d>
 8001394:	4604      	mov	r4, r0
 8001396:	460d      	mov	r5, r1
 8001398:	6978      	ldr	r0, [r7, #20]
 800139a:	f7ff f845 	bl	8000428 <__aeabi_f2d>
 800139e:	a320      	add	r3, pc, #128	@ (adr r3, 8001420 <Regulate_Light_Intensity+0x120>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	f7fe fee0 	bl	8000168 <__aeabi_dsub>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff fb18 	bl	80009e4 <__aeabi_dcmpge>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d015      	beq.n	80013e6 <Regulate_Light_Intensity+0xe6>
            new_ldr_percentage <= ldr_percentage + LDR_DEAD_ZONE) {
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f834 	bl	8000428 <__aeabi_f2d>
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 80013c4:	6978      	ldr	r0, [r7, #20]
 80013c6:	f7ff f82f 	bl	8000428 <__aeabi_f2d>
 80013ca:	a315      	add	r3, pc, #84	@ (adr r3, 8001420 <Regulate_Light_Intensity+0x120>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7fe fecc 	bl	800016c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
        if (new_ldr_percentage >= ldr_percentage - LDR_DEAD_ZONE &&
 80013d8:	4620      	mov	r0, r4
 80013da:	4629      	mov	r1, r5
 80013dc:	f7ff faf8 	bl	80009d0 <__aeabi_dcmple>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <Regulate_Light_Intensity+0xee>
            // Se o LDR não mudou significativamente, o ajuste foi adequado
        } else {
            // Se o LDR mudou significativamente, ajuste o PWM de volta ao valor anterior
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, current_compare);
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
    }

    // Garantir que o ciclo de trabalho do PWM permaneça dentro da faixa válida (0 a ARR)
	uint32_t final_compare = __HAL_TIM_GET_COMPARE(&htim4, TIM_CHANNEL_4);
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	607b      	str	r3, [r7, #4]
	if (final_compare > htim4.Init.Period) {
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d904      	bls.n	800140a <Regulate_Light_Intensity+0x10a>
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, htim4.Init.Period);
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <Regulate_Light_Intensity+0x128>)
 8001406:	68d2      	ldr	r2, [r2, #12]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
	} else if (final_compare < 0) {
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
	}

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bdb0      	pop	{r4, r5, r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	99999999 	.word	0x99999999
 800141c:	3fe19999 	.word	0x3fe19999
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3fa99999 	.word	0x3fa99999
 8001428:	200002fc 	.word	0x200002fc
 800142c:	00000000 	.word	0x00000000

08001430 <Classify_Day_or_Night>:

void Classify_Day_or_Night(volatile char *flag_turno_dia) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    // Passo 1: Calcular a porcentagem do LDR
    float ldr_percentage = read_light_outside();
 8001438:	f7ff ff20 	bl	800127c <read_light_outside>
 800143c:	60f8      	str	r0, [r7, #12]

    // Verifica se é NOITE
    if (ldr_percentage < LDR_NIGHT_THRESHOLD - LDR_DEAD_ZONE) {
 800143e:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f7ff fe3c 	bl	80010c0 <__aeabi_fcmplt>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <Classify_Day_or_Night+0x26>
    	*flag_turno_dia = 0;		// 1 = Dia, 0 = Noite
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    } else if (ldr_percentage > LDR_DAY_THRESHOLD + LDR_DEAD_ZONE) {
    	*flag_turno_dia = 1;		// 1 = Dia, 0 = Noite
    } else {

    }
}
 8001454:	e00e      	b.n	8001474 <Classify_Day_or_Night+0x44>
    } else if (ldr_percentage > LDR_DAY_THRESHOLD + LDR_DEAD_ZONE) {
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f7fe ffe6 	bl	8000428 <__aeabi_f2d>
 800145c:	a308      	add	r3, pc, #32	@ (adr r3, 8001480 <Classify_Day_or_Night+0x50>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff fac9 	bl	80009f8 <__aeabi_dcmpgt>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d100      	bne.n	800146e <Classify_Day_or_Night+0x3e>
}
 800146c:	e002      	b.n	8001474 <Classify_Day_or_Night+0x44>
    	*flag_turno_dia = 1;		// 1 = Dia, 0 = Noite
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	cccccccd 	.word	0xcccccccd
 8001484:	3fe4cccc 	.word	0x3fe4cccc

08001488 <debounce>:
#include "main.h"
#include "keypad.h"
#include "lcd.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 800149c:	2301      	movs	r3, #1
 800149e:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 80014a0:	2301      	movs	r3, #1
 80014a2:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d822      	bhi.n	80014f0 <debounce+0x68>
 80014aa:	a201      	add	r2, pc, #4	@ (adr r2, 80014b0 <debounce+0x28>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c1 	.word	0x080014c1
 80014b4:	080014cd 	.word	0x080014cd
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	080014e5 	.word	0x080014e5
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001534 <debounce+0xac>)
 80014c2:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 80014c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c8:	81fb      	strh	r3, [r7, #14]
            break;
 80014ca:	e013      	b.n	80014f4 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <debounce+0xac>)
 80014ce:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 80014d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014d4:	81fb      	strh	r3, [r7, #14]
            break;
 80014d6:	e00d      	b.n	80014f4 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 80014d8:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <debounce+0xac>)
 80014da:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 80014dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014e0:	81fb      	strh	r3, [r7, #14]
            break;
 80014e2:	e007      	b.n	80014f4 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <debounce+0xac>)
 80014e6:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 80014e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ec:	81fb      	strh	r3, [r7, #14]
            break;
 80014ee:	e001      	b.n	80014f4 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 80014f0:	2301      	movs	r3, #1
 80014f2:	e01a      	b.n	800152a <debounce+0xa2>
    }

    while (count < 7) {
 80014f4:	e015      	b.n	8001522 <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 fb9e 	bl	8002c38 <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 80014fc:	89fb      	ldrh	r3, [r7, #14]
 80014fe:	4619      	mov	r1, r3
 8001500:	6938      	ldr	r0, [r7, #16]
 8001502:	f002 fc07 	bl	8003d14 <HAL_GPIO_ReadPin>
 8001506:	4603      	mov	r3, r0
 8001508:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 800150a:	7d7a      	ldrb	r2, [r7, #21]
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	429a      	cmp	r2, r3
 8001510:	d103      	bne.n	800151a <debounce+0x92>
            count++;
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	3301      	adds	r3, #1
 8001516:	75fb      	strb	r3, [r7, #23]
 8001518:	e001      	b.n	800151e <debounce+0x96>
        } else {
            count = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 800151e:	7d7b      	ldrb	r3, [r7, #21]
 8001520:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	2b06      	cmp	r3, #6
 8001526:	d9e6      	bls.n	80014f6 <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 8001528:	7d7b      	ldrb	r3, [r7, #21]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40010c00 	.word	0x40010c00

08001538 <keypad_init>:

void keypad_init(void) {
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
    // Initialize all columns to high
    HAL_GPIO_WritePin(KEYPAD_COL1_GPIO_Port, KEYPAD_COL1_Pin, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	2101      	movs	r1, #1
 8001540:	480a      	ldr	r0, [pc, #40]	@ (800156c <keypad_init+0x34>)
 8001542:	f002 fbfe 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2102      	movs	r1, #2
 800154a:	4808      	ldr	r0, [pc, #32]	@ (800156c <keypad_init+0x34>)
 800154c:	f002 fbf9 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <keypad_init+0x34>)
 8001558:	f002 fbf3 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001562:	4802      	ldr	r0, [pc, #8]	@ (800156c <keypad_init+0x34>)
 8001564:	f002 fbed 	bl	8003d42 <HAL_GPIO_WritePin>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40010c00 	.word	0x40010c00

08001570 <keypad_getkey>:

char keypad_getkey(void) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b089      	sub	sp, #36	@ 0x24
 8001574:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 8001576:	4b35      	ldr	r3, [pc, #212]	@ (800164c <keypad_getkey+0xdc>)
 8001578:	1d3c      	adds	r4, r7, #4
 800157a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800157c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 8001580:	2300      	movs	r3, #0
 8001582:	77bb      	strb	r3, [r7, #30]
 8001584:	e059      	b.n	800163a <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 8001586:	7fbb      	ldrb	r3, [r7, #30]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d821      	bhi.n	80015d0 <keypad_getkey+0x60>
 800158c:	a201      	add	r2, pc, #4	@ (adr r2, 8001594 <keypad_getkey+0x24>)
 800158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001592:	bf00      	nop
 8001594:	080015a5 	.word	0x080015a5
 8001598:	080015af 	.word	0x080015af
 800159c:	080015b9 	.word	0x080015b9
 80015a0:	080015c5 	.word	0x080015c5
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 80015a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <keypad_getkey+0xe0>)
 80015a6:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	82fb      	strh	r3, [r7, #22]
                break;
 80015ac:	e015      	b.n	80015da <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 80015ae:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <keypad_getkey+0xe0>)
 80015b0:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 80015b2:	2302      	movs	r3, #2
 80015b4:	82fb      	strh	r3, [r7, #22]
                break;
 80015b6:	e010      	b.n	80015da <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <keypad_getkey+0xe0>)
 80015ba:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 80015bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015c0:	82fb      	strh	r3, [r7, #22]
                break;
 80015c2:	e00a      	b.n	80015da <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <keypad_getkey+0xe0>)
 80015c6:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 80015c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015cc:	82fb      	strh	r3, [r7, #22]
                break;
 80015ce:	e004      	b.n	80015da <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	82fb      	strh	r3, [r7, #22]
                break;
 80015d8:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 80015da:	8afb      	ldrh	r3, [r7, #22]
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	69b8      	ldr	r0, [r7, #24]
 80015e2:	f002 fbae 	bl	8003d42 <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 80015e6:	2300      	movs	r3, #0
 80015e8:	77fb      	strb	r3, [r7, #31]
 80015ea:	e01a      	b.n	8001622 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 80015ec:	7fba      	ldrb	r2, [r7, #30]
 80015ee:	7ffb      	ldrb	r3, [r7, #31]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff ff48 	bl	8001488 <debounce>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10e      	bne.n	800161c <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	69b8      	ldr	r0, [r7, #24]
 8001606:	f002 fb9c 	bl	8003d42 <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 800160a:	7ffa      	ldrb	r2, [r7, #31]
 800160c:	7fbb      	ldrb	r3, [r7, #30]
 800160e:	0092      	lsls	r2, r2, #2
 8001610:	3220      	adds	r2, #32
 8001612:	443a      	add	r2, r7
 8001614:	4413      	add	r3, r2
 8001616:	3b1c      	subs	r3, #28
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	e012      	b.n	8001642 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 800161c:	7ffb      	ldrb	r3, [r7, #31]
 800161e:	3301      	adds	r3, #1
 8001620:	77fb      	strb	r3, [r7, #31]
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d9e1      	bls.n	80015ec <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8001628:	8afb      	ldrh	r3, [r7, #22]
 800162a:	2201      	movs	r2, #1
 800162c:	4619      	mov	r1, r3
 800162e:	69b8      	ldr	r0, [r7, #24]
 8001630:	f002 fb87 	bl	8003d42 <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8001634:	7fbb      	ldrb	r3, [r7, #30]
 8001636:	3301      	adds	r3, #1
 8001638:	77bb      	strb	r3, [r7, #30]
 800163a:	7fbb      	ldrb	r3, [r7, #30]
 800163c:	2b03      	cmp	r3, #3
 800163e:	d9a2      	bls.n	8001586 <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	@ 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd90      	pop	{r4, r7, pc}
 800164a:	bf00      	nop
 800164c:	08009900 	.word	0x08009900
 8001650:	40010c00 	.word	0x40010c00

08001654 <read_temperature_keypad>:

float read_temperature_keypad(char *buffer) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	char key;
	short index = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	81fb      	strh	r3, [r7, #14]
	float temperature_value;

	// Initialize buffer
	memset(buffer, 0, 2 + 1);
 8001660:	2203      	movs	r2, #3
 8001662:	2100      	movs	r1, #0
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f005 fbf4 	bl	8006e52 <memset>

	while (index < 2) {
 800166a:	e03b      	b.n	80016e4 <read_temperature_keypad+0x90>
		key = keypad_getkey();
 800166c:	f7ff ff80 	bl	8001570 <keypad_getkey>
 8001670:	4603      	mov	r3, r0
 8001672:	737b      	strb	r3, [r7, #13]
		if (key != 0) { // Check if a key is pressed
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d034      	beq.n	80016e4 <read_temperature_keypad+0x90>
			if (key >= '0' && key <= '9') { // Check if the key is a digit
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	2b2f      	cmp	r3, #47	@ 0x2f
 800167e:	d917      	bls.n	80016b0 <read_temperature_keypad+0x5c>
 8001680:	7b7b      	ldrb	r3, [r7, #13]
 8001682:	2b39      	cmp	r3, #57	@ 0x39
 8001684:	d814      	bhi.n	80016b0 <read_temperature_keypad+0x5c>
				buffer[index++] = key; // Store the digit in the buffer
 8001686:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800168a:	b293      	uxth	r3, r2
 800168c:	3301      	adds	r3, #1
 800168e:	b29b      	uxth	r3, r3
 8001690:	81fb      	strh	r3, [r7, #14]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	7b7a      	ldrb	r2, [r7, #13]
 8001698:	701a      	strb	r2, [r3, #0]
				//write_data_LCD(key);
				clear_display();
 800169a:	f000 f9d0 	bl	8001a3e <clear_display>
				write_string_line(1,"Digite o Valor:");
 800169e:	492f      	ldr	r1, [pc, #188]	@ (800175c <read_temperature_keypad+0x108>)
 80016a0:	2001      	movs	r0, #1
 80016a2:	f000 f9b2 	bl	8001a0a <write_string_line>
				write_string_line(2,buffer);
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	2002      	movs	r0, #2
 80016aa:	f000 f9ae 	bl	8001a0a <write_string_line>
 80016ae:	e016      	b.n	80016de <read_temperature_keypad+0x8a>
				} else if (key == '#') { // Use '#' as an enter key
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	2b23      	cmp	r3, #35	@ 0x23
 80016b4:	d01b      	beq.n	80016ee <read_temperature_keypad+0x9a>
				break; // Exit loop when '#' is pressed
				} else if (key == '*') { // Use '*' to cancel input
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80016ba:	d110      	bne.n	80016de <read_temperature_keypad+0x8a>
				// Optionally, clear the buffer
				memset(buffer, 0, 2 + 1);
 80016bc:	2203      	movs	r2, #3
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f005 fbc6 	bl	8006e52 <memset>
				index = 0; // Reset index
 80016c6:	2300      	movs	r3, #0
 80016c8:	81fb      	strh	r3, [r7, #14]
				clear_display();
 80016ca:	f000 f9b8 	bl	8001a3e <clear_display>
				write_string_line(1,"Digite o Valor:");
 80016ce:	4923      	ldr	r1, [pc, #140]	@ (800175c <read_temperature_keypad+0x108>)
 80016d0:	2001      	movs	r0, #1
 80016d2:	f000 f99a 	bl	8001a0a <write_string_line>
				write_string_line(2,buffer);
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	2002      	movs	r0, #2
 80016da:	f000 f996 	bl	8001a0a <write_string_line>
			}
			// Add a small delay to debounce
			HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	@ 0x64
 80016e0:	f001 faaa 	bl	8002c38 <HAL_Delay>
	while (index < 2) {
 80016e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	ddbf      	ble.n	800166c <read_temperature_keypad+0x18>
 80016ec:	e000      	b.n	80016f0 <read_temperature_keypad+0x9c>
				break; // Exit loop when '#' is pressed
 80016ee:	bf00      	nop
		}
	}
	buffer[index] = '\0'; // Null-terminate the card number
 80016f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]

	temperature_value = atof(buffer);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f004 f81f 	bl	8005740 <atof>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f9dd 	bl	8000ac8 <__aeabi_d2f>
 800170e:	4603      	mov	r3, r0
 8001710:	60bb      	str	r3, [r7, #8]
	if (temperature_value >= 19.0 && temperature_value <= 32.0) {
 8001712:	4913      	ldr	r1, [pc, #76]	@ (8001760 <read_temperature_keypad+0x10c>)
 8001714:	68b8      	ldr	r0, [r7, #8]
 8001716:	f7ff fce7 	bl	80010e8 <__aeabi_fcmpge>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d009      	beq.n	8001734 <read_temperature_keypad+0xe0>
 8001720:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001724:	68b8      	ldr	r0, [r7, #8]
 8001726:	f7ff fcd5 	bl	80010d4 <__aeabi_fcmple>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <read_temperature_keypad+0xe0>
		return temperature_value;
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	e00e      	b.n	8001752 <read_temperature_keypad+0xfe>
		} else {
		clear_display();
 8001734:	f000 f983 	bl	8001a3e <clear_display>
		write_string_line(1,"Valor Invalido!");
 8001738:	490a      	ldr	r1, [pc, #40]	@ (8001764 <read_temperature_keypad+0x110>)
 800173a:	2001      	movs	r0, #1
 800173c:	f000 f965 	bl	8001a0a <write_string_line>
		write_string_line(2," 19 < Temp < 32");
 8001740:	4909      	ldr	r1, [pc, #36]	@ (8001768 <read_temperature_keypad+0x114>)
 8001742:	2002      	movs	r0, #2
 8001744:	f000 f961 	bl	8001a0a <write_string_line>
		HAL_Delay(2000); // Exibe a mensagem de erro por 2 segundos
 8001748:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800174c:	f001 fa74 	bl	8002c38 <HAL_Delay>
		return -1.0; // Envia erro
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <read_temperature_keypad+0x118>)
	}

}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	08009910 	.word	0x08009910
 8001760:	41980000 	.word	0x41980000
 8001764:	08009920 	.word	0x08009920
 8001768:	08009930 	.word	0x08009930
 800176c:	bf800000 	.word	0xbf800000

08001770 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2108      	movs	r1, #8
 800177e:	4841      	ldr	r0, [pc, #260]	@ (8001884 <write_command_LCD+0x114>)
 8001780:	f002 fadf 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2110      	movs	r1, #16
 8001788:	483e      	ldr	r0, [pc, #248]	@ (8001884 <write_command_LCD+0x114>)
 800178a:	f002 fada 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	111b      	asrs	r3, r3, #4
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	461a      	mov	r2, r3
 800179c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017a0:	4839      	ldr	r0, [pc, #228]	@ (8001888 <write_command_LCD+0x118>)
 80017a2:	f002 face 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	115b      	asrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017b8:	4833      	ldr	r0, [pc, #204]	@ (8001888 <write_command_LCD+0x118>)
 80017ba:	f002 fac2 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	119b      	asrs	r3, r3, #6
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d0:	482d      	ldr	r0, [pc, #180]	@ (8001888 <write_command_LCD+0x118>)
 80017d2:	f002 fab6 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	09db      	lsrs	r3, r3, #7
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	461a      	mov	r2, r3
 80017de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017e2:	4829      	ldr	r0, [pc, #164]	@ (8001888 <write_command_LCD+0x118>)
 80017e4:	f002 faad 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f001 fa25 	bl	8002c38 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2110      	movs	r1, #16
 80017f2:	4824      	ldr	r0, [pc, #144]	@ (8001884 <write_command_LCD+0x114>)
 80017f4:	f002 faa5 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f001 fa1d 	bl	8002c38 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2110      	movs	r1, #16
 8001802:	4820      	ldr	r0, [pc, #128]	@ (8001884 <write_command_LCD+0x114>)
 8001804:	f002 fa9d 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001816:	481c      	ldr	r0, [pc, #112]	@ (8001888 <write_command_LCD+0x118>)
 8001818:	f002 fa93 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	461a      	mov	r2, r3
 800182a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800182e:	4816      	ldr	r0, [pc, #88]	@ (8001888 <write_command_LCD+0x118>)
 8001830:	f002 fa87 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	109b      	asrs	r3, r3, #2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001846:	4810      	ldr	r0, [pc, #64]	@ (8001888 <write_command_LCD+0x118>)
 8001848:	f002 fa7b 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	10db      	asrs	r3, r3, #3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800185e:	480a      	ldr	r0, [pc, #40]	@ (8001888 <write_command_LCD+0x118>)
 8001860:	f002 fa6f 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f001 f9e7 	bl	8002c38 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2110      	movs	r1, #16
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <write_command_LCD+0x114>)
 8001870:	f002 fa67 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f001 f9df 	bl	8002c38 <HAL_Delay>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40010c00 	.word	0x40010c00
 8001888:	40010800 	.word	0x40010800

0800188c <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001896:	2201      	movs	r2, #1
 8001898:	2108      	movs	r1, #8
 800189a:	4841      	ldr	r0, [pc, #260]	@ (80019a0 <write_data_LCD+0x114>)
 800189c:	f002 fa51 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80018a0:	2201      	movs	r2, #1
 80018a2:	2110      	movs	r1, #16
 80018a4:	483e      	ldr	r0, [pc, #248]	@ (80019a0 <write_data_LCD+0x114>)
 80018a6:	f002 fa4c 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	111b      	asrs	r3, r3, #4
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018bc:	4839      	ldr	r0, [pc, #228]	@ (80019a4 <write_data_LCD+0x118>)
 80018be:	f002 fa40 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	115b      	asrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018d4:	4833      	ldr	r0, [pc, #204]	@ (80019a4 <write_data_LCD+0x118>)
 80018d6:	f002 fa34 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	119b      	asrs	r3, r3, #6
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018ec:	482d      	ldr	r0, [pc, #180]	@ (80019a4 <write_data_LCD+0x118>)
 80018ee:	f002 fa28 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	09db      	lsrs	r3, r3, #7
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fe:	4829      	ldr	r0, [pc, #164]	@ (80019a4 <write_data_LCD+0x118>)
 8001900:	f002 fa1f 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001904:	2001      	movs	r0, #1
 8001906:	f001 f997 	bl	8002c38 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	4824      	ldr	r0, [pc, #144]	@ (80019a0 <write_data_LCD+0x114>)
 8001910:	f002 fa17 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001914:	2001      	movs	r0, #1
 8001916:	f001 f98f 	bl	8002c38 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800191a:	2201      	movs	r2, #1
 800191c:	2110      	movs	r1, #16
 800191e:	4820      	ldr	r0, [pc, #128]	@ (80019a0 <write_data_LCD+0x114>)
 8001920:	f002 fa0f 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001932:	481c      	ldr	r0, [pc, #112]	@ (80019a4 <write_data_LCD+0x118>)
 8001934:	f002 fa05 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	105b      	asrs	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800194a:	4816      	ldr	r0, [pc, #88]	@ (80019a4 <write_data_LCD+0x118>)
 800194c:	f002 f9f9 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	109b      	asrs	r3, r3, #2
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001962:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <write_data_LCD+0x118>)
 8001964:	f002 f9ed 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	10db      	asrs	r3, r3, #3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197a:	480a      	ldr	r0, [pc, #40]	@ (80019a4 <write_data_LCD+0x118>)
 800197c:	f002 f9e1 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f001 f959 	bl	8002c38 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	2110      	movs	r1, #16
 800198a:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <write_data_LCD+0x114>)
 800198c:	f002 f9d9 	bl	8003d42 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f001 f951 	bl	8002c38 <HAL_Delay>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40010c00 	.word	0x40010c00
 80019a4:	40010800 	.word	0x40010800

080019a8 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 80019ac:	2032      	movs	r0, #50	@ 0x32
 80019ae:	f001 f943 	bl	8002c38 <HAL_Delay>
    write_command_LCD(0x33);
 80019b2:	2033      	movs	r0, #51	@ 0x33
 80019b4:	f7ff fedc 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x32);
 80019b8:	2032      	movs	r0, #50	@ 0x32
 80019ba:	f7ff fed9 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x28);
 80019be:	2028      	movs	r0, #40	@ 0x28
 80019c0:	f7ff fed6 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x0C);
 80019c4:	200c      	movs	r0, #12
 80019c6:	f7ff fed3 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x06);
 80019ca:	2006      	movs	r0, #6
 80019cc:	f7ff fed0 	bl	8001770 <write_command_LCD>
    write_command_LCD(0x01);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fecd 	bl	8001770 <write_command_LCD>
    HAL_Delay(2);
 80019d6:	2002      	movs	r0, #2
 80019d8:	f001 f92e 	bl	8002c38 <HAL_Delay>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
    while (*text) {
 80019e8:	e006      	b.n	80019f8 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff4a 	bl	800188c <write_data_LCD>
    while (*text) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f4      	bne.n	80019ea <write_string_LCD+0xa>
    }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <write_string_line>:

void write_string_line(char line, const char *text) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	6039      	str	r1, [r7, #0]
 8001a14:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d103      	bne.n	8001a24 <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8001a1c:	2080      	movs	r0, #128	@ 0x80
 8001a1e:	f7ff fea7 	bl	8001770 <write_command_LCD>
 8001a22:	e005      	b.n	8001a30 <write_string_line+0x26>
    } else if (line == 2) {
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d102      	bne.n	8001a30 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 8001a2a:	20c0      	movs	r0, #192	@ 0xc0
 8001a2c:	f7ff fea0 	bl	8001770 <write_command_LCD>
    }
    write_string_LCD(text);
 8001a30:	6838      	ldr	r0, [r7, #0]
 8001a32:	f7ff ffd5 	bl	80019e0 <write_string_LCD>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <clear_display>:

void clear_display(void) {
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff fe94 	bl	8001770 <write_command_LCD>
    HAL_Delay(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f001 f8f5 	bl	8002c38 <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <navigate_options>:

// Function to display options and navigate between them
char navigate_options(const char *options[], char num_options) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
    short current_option = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	81fb      	strh	r3, [r7, #14]
    clear_display();
 8001a64:	f7ff ffeb 	bl	8001a3e <clear_display>
    write_string_line(1, options[current_option]);
 8001a68:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ffc7 	bl	8001a0a <write_string_line>
    write_string_line(2, "<-B  A->   [#OK]");
 8001a7c:	492a      	ldr	r1, [pc, #168]	@ (8001b28 <navigate_options+0xd4>)
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7ff ffc3 	bl	8001a0a <write_string_line>
    char key;
    while (1) {
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 8001a84:	f7ff fd74 	bl	8001570 <keypad_getkey>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	737b      	strb	r3, [r7, #13]
        if (key != 0) {
 8001a8c:	7b7b      	ldrb	r3, [r7, #13]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d0f8      	beq.n	8001a84 <navigate_options+0x30>
            switch (key) {
 8001a92:	7b7b      	ldrb	r3, [r7, #13]
 8001a94:	2b42      	cmp	r3, #66	@ 0x42
 8001a96:	d006      	beq.n	8001aa6 <navigate_options+0x52>
 8001a98:	2b42      	cmp	r3, #66	@ 0x42
 8001a9a:	dc3f      	bgt.n	8001b1c <navigate_options+0xc8>
 8001a9c:	2b23      	cmp	r3, #35	@ 0x23
 8001a9e:	d03a      	beq.n	8001b16 <navigate_options+0xc2>
 8001aa0:	2b41      	cmp	r3, #65	@ 0x41
 8001aa2:	d01d      	beq.n	8001ae0 <navigate_options+0x8c>
                    write_string_line(2, "<-B  A->   [#OK]");
                    break;
                case '#':
                    return current_option;
                default:
                    break;
 8001aa4:	e03a      	b.n	8001b1c <navigate_options+0xc8>
                    current_option = (current_option - 1 + num_options) % num_options;
 8001aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aaa:	1e5a      	subs	r2, r3, #1
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	4413      	add	r3, r2
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ab6:	fb01 f202 	mul.w	r2, r1, r2
 8001aba:	1a9b      	subs	r3, r3, r2
 8001abc:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001abe:	f7ff ffbe 	bl	8001a3e <clear_display>
                    write_string_line(1, options[current_option]);
 8001ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff9a 	bl	8001a0a <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001ad6:	4914      	ldr	r1, [pc, #80]	@ (8001b28 <navigate_options+0xd4>)
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7ff ff96 	bl	8001a0a <write_string_line>
                    break;
 8001ade:	e01e      	b.n	8001b1e <navigate_options+0xca>
                    current_option = (current_option + 1) % num_options;
 8001ae0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	78fa      	ldrb	r2, [r7, #3]
 8001ae8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001aec:	fb01 f202 	mul.w	r2, r1, r2
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	81fb      	strh	r3, [r7, #14]
                    clear_display();
 8001af4:	f7ff ffa3 	bl	8001a3e <clear_display>
                    write_string_line(1, options[current_option]);
 8001af8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff ff7f 	bl	8001a0a <write_string_line>
                    write_string_line(2, "<-B  A->   [#OK]");
 8001b0c:	4906      	ldr	r1, [pc, #24]	@ (8001b28 <navigate_options+0xd4>)
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff ff7b 	bl	8001a0a <write_string_line>
                    break;
 8001b14:	e003      	b.n	8001b1e <navigate_options+0xca>
                    return current_option;
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	e001      	b.n	8001b20 <navigate_options+0xcc>
                    break;
 8001b1c:	bf00      	nop
        key = keypad_getkey(); // Implement keypad_getkey for ARM
 8001b1e:	e7b1      	b.n	8001a84 <navigate_options+0x30>
            }
        }
    }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	08009940 	.word	0x08009940

08001b2c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrupt handler for TIM2 Channel 1 and Channel 2

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	// TIMER 3 -> IRRIGACAO (Periodo 1s)
    if (htim->Instance == TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a35      	ldr	r2, [pc, #212]	@ (8001c10 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d163      	bne.n	8001c06 <HAL_TIM_PeriodElapsedCallback+0xda>
    {
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001b3e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b42:	4834      	ldr	r0, [pc, #208]	@ (8001c14 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b44:	f002 f915 	bl	8003d72 <HAL_GPIO_TogglePin>

    	/* ============================== IRRIGACAO ============================== */
    	elapsed_time++;
 8001b48:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	b2da      	uxtb	r2, r3
 8001b52:	4b31      	ldr	r3, [pc, #196]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b54:	701a      	strb	r2, [r3, #0]
    	if(elapsed_time >= tempo_irrigacao && flag_irrigacao_em_andamento == 1){
 8001b56:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d30d      	bcc.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001b66:	4b2e      	ldr	r3, [pc, #184]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x56>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2108      	movs	r1, #8
 8001b74:	482b      	ldr	r0, [pc, #172]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b76:	f002 f8e4 	bl	8003d42 <HAL_GPIO_WritePin>
    		flag_irrigacao_em_andamento=0;
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
 8001b80:	e025      	b.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
    	}
    	else if(elapsed_time < tempo_irrigacao && flag_irrigacao_em_andamento == 0){
 8001b82:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d210      	bcs.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001b92:	4b23      	ldr	r3, [pc, #140]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10b      	bne.n	8001bb4 <HAL_TIM_PeriodElapsedCallback+0x88>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2108      	movs	r1, #8
 8001ba0:	4820      	ldr	r0, [pc, #128]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001ba2:	f002 f8ce 	bl	8003d42 <HAL_GPIO_WritePin>
    		elapsed_time=0;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]
    		flag_irrigacao_em_andamento=1;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e00c      	b.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
    	}
    	else if(elapsed_time >= 60 && flag_irrigacao_em_andamento == 0){
 8001bb4:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b3b      	cmp	r3, #59	@ 0x3b
 8001bbc:	d907      	bls.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001bbe:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_TIM_PeriodElapsedCallback+0xa2>
			elapsed_time=0;
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
		}

    	/* ==================== DEFINE VARIAVEIS DO SISTEMA ==================== */
    	temperatura_atual = Read_Temperature();
 8001bce:	f7ff fad7 	bl	8001180 <Read_Temperature>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bd6:	6013      	str	r3, [r2, #0]
		if(temperatura_atual > temperatura_limite){
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a13      	ldr	r2, [pc, #76]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fa8a 	bl	80010fc <__aeabi_fcmpgt>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_PeriodElapsedCallback+0xca>
			flag_temperatura_acima_limite = 1;	// 1 = Acima do Limite, 0 = Abaixo do Limite
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	e002      	b.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0xd0>
		}else{
			flag_temperatura_acima_limite = 0;	// 1 = Acima do Limite, 0 = Abaixo do Limite
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
		}
		Classify_Day_or_Night(&flag_turno_dia);
 8001bfc:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bfe:	f7ff fc17 	bl	8001430 <Classify_Day_or_Night>
		select_params();
 8001c02:	f000 fac7 	bl	8002194 <select_params>
//			default:
//				// Nao faz nada
//				break;
//		}
//	}
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40000400 	.word	0x40000400
 8001c14:	40011000 	.word	0x40011000
 8001c18:	20000344 	.word	0x20000344
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000345 	.word	0x20000345
 8001c24:	40010800 	.word	0x40010800
 8001c28:	20000348 	.word	0x20000348
 8001c2c:	20000004 	.word	0x20000004
 8001c30:	20000346 	.word	0x20000346
 8001c34:	20000001 	.word	0x20000001

08001c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3e:	f000 ff99 	bl	8002b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c42:	f000 f843 	bl	8001ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f000 fa13 	bl	8002070 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c4a:	f000 f9f3 	bl	8002034 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c4e:	f000 f899 	bl	8001d84 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001c52:	f000 f923 	bl	8001e9c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c56:	f000 f96f 	bl	8001f38 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001c5a:	f000 f8d1 	bl	8001e00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);

  /* Enable interrupt by timer 3*/
  HAL_TIM_Base_Start_IT(&htim3);
 8001c5e:	4816      	ldr	r0, [pc, #88]	@ (8001cb8 <main+0x80>)
 8001c60:	f002 fe58 	bl	8004914 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001c64:	210c      	movs	r1, #12
 8001c66:	4815      	ldr	r0, [pc, #84]	@ (8001cbc <main+0x84>)
 8001c68:	f002 fefe 	bl	8004a68 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c6c:	4814      	ldr	r0, [pc, #80]	@ (8001cc0 <main+0x88>)
 8001c6e:	f002 fe51 	bl	8004914 <HAL_TIM_Base_Start_IT>

  init_LCD();
 8001c72:	f7ff fe99 	bl	80019a8 <init_LCD>
  keypad_init();
 8001c76:	f7ff fc5f 	bl	8001538 <keypad_init>

  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 8001c7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c7e:	4811      	ldr	r0, [pc, #68]	@ (8001cc4 <main+0x8c>)
 8001c80:	f002 f877 	bl	8003d72 <HAL_GPIO_TogglePin>
//  temperatura_atual = Read_Temperature();
//  menu_main();
  while (1)
  {

	 char key = keypad_getkey();
 8001c84:	f7ff fc74 	bl	8001570 <keypad_getkey>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
	 if(key != 0){
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <main+0x5e>
		 menu_selection();
 8001c92:	f000 fb49 	bl	8002328 <menu_selection>
	 }

	 Regulate_Light_Intensity();
 8001c96:	f7ff fb33 	bl	8001300 <Regulate_Light_Intensity>

	// 0-Principal, 1-Informacoes Sistema, 2-Selecao
	switch(selected_menu) {
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <main+0x90>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <main+0x72>
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d003      	beq.n	8001cb0 <main+0x78>
 8001ca8:	e005      	b.n	8001cb6 <main+0x7e>
		case 0:
			menu_main();
 8001caa:	f000 fc75 	bl	8002598 <menu_main>
			break;
 8001cae:	e002      	b.n	8001cb6 <main+0x7e>
		case 1:
			menu_actual_state();
 8001cb0:	f000 fca0 	bl	80025f4 <menu_actual_state>
			break;
 8001cb4:	bf00      	nop
  {
 8001cb6:	e7e5      	b.n	8001c84 <main+0x4c>
 8001cb8:	200002b4 	.word	0x200002b4
 8001cbc:	200002fc 	.word	0x200002fc
 8001cc0:	2000026c 	.word	0x2000026c
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	2000034c 	.word	0x2000034c

08001ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b094      	sub	sp, #80	@ 0x50
 8001cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cd6:	2228      	movs	r2, #40	@ 0x28
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f005 f8b9 	bl	8006e52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001d06:	2300      	movs	r3, #0
 8001d08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d18:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d22:	4618      	mov	r0, r3
 8001d24:	f002 f83e 	bl	8003da4 <HAL_RCC_OscConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d2e:	f000 fcc1 	bl	80026b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d32:	230f      	movs	r3, #15
 8001d34:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d42:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d48:	f107 0314 	add.w	r3, r7, #20
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 faaa 	bl	80042a8 <HAL_RCC_ClockConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d5a:	f000 fcab 	bl	80026b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d66:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fc16 	bl	800459c <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d76:	f000 fc9d 	bl	80026b4 <Error_Handler>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3750      	adds	r7, #80	@ 0x50
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001d96:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <MX_ADC1_Init+0x78>)
 8001d98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da6:	4b14      	ldr	r3, [pc, #80]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001dae:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001db2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001db4:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001dba:	4b0f      	ldr	r3, [pc, #60]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dc0:	480d      	ldr	r0, [pc, #52]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001dc2:	f000 ff5d 	bl	8002c80 <HAL_ADC_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001dcc:	f000 fc72 	bl	80026b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	4619      	mov	r1, r3
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_ADC1_Init+0x74>)
 8001de2:	f001 fa11 	bl	8003208 <HAL_ADC_ConfigChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001dec:	f000 fc62 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001f8 	.word	0x200001f8
 8001dfc:	40012400 	.word	0x40012400

08001e00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e06:	f107 0308 	add.w	r3, r7, #8
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e14:	463b      	mov	r3, r7
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001e24:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e26:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e2e:	2210      	movs	r2, #16
 8001e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e34:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e46:	4814      	ldr	r0, [pc, #80]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e48:	f002 fd14 	bl	8004874 <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e52:	f000 fc2f 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e5c:	f107 0308 	add.w	r3, r7, #8
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e64:	f003 f86c 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e6e:	f000 fc21 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e7a:	463b      	mov	r3, r7
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <MX_TIM2_Init+0x98>)
 8001e80:	f003 fbee 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e8a:	f000 fc13 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000026c 	.word	0x2000026c

08001e9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	463b      	mov	r3, r7
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001eba:	4a1e      	ldr	r2, [pc, #120]	@ (8001f34 <MX_TIM3_Init+0x98>)
 8001ebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001ec0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001ec4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001ec8:	2210      	movs	r2, #16
 8001eca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001ece:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ed2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001edc:	2280      	movs	r2, #128	@ 0x80
 8001ede:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ee0:	4813      	ldr	r0, [pc, #76]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001ee2:	f002 fcc7 	bl	8004874 <HAL_TIM_Base_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001eec:	f000 fbe2 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001efe:	f003 f81f 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f08:	f000 fbd4 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f14:	463b      	mov	r3, r7
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	@ (8001f30 <MX_TIM3_Init+0x94>)
 8001f1a:	f003 fba1 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f24:	f000 fbc6 	bl	80026b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200002b4 	.word	0x200002b4
 8001f34:	40000400 	.word	0x40000400

08001f38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08e      	sub	sp, #56	@ 0x38
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	f107 0320 	add.w	r3, r7, #32
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f68:	4b30      	ldr	r3, [pc, #192]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f6a:	4a31      	ldr	r2, [pc, #196]	@ (8002030 <MX_TIM4_Init+0xf8>)
 8001f6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f70:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001f74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 119;
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f7e:	2277      	movs	r2, #119	@ 0x77
 8001f80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b28      	ldr	r3, [pc, #160]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f8e:	4827      	ldr	r0, [pc, #156]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001f90:	f002 fc70 	bl	8004874 <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f9a:	f000 fb8b 	bl	80026b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4820      	ldr	r0, [pc, #128]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001fac:	f002 ffc8 	bl	8004f40 <HAL_TIM_ConfigClockSource>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001fb6:	f000 fb7d 	bl	80026b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fba:	481c      	ldr	r0, [pc, #112]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001fbc:	f002 fcfc 	bl	80049b8 <HAL_TIM_PWM_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001fc6:	f000 fb75 	bl	80026b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fd2:	f107 0320 	add.w	r3, r7, #32
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4814      	ldr	r0, [pc, #80]	@ (800202c <MX_TIM4_Init+0xf4>)
 8001fda:	f003 fb41 	bl	8005660 <HAL_TIMEx_MasterConfigSynchronization>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001fe4:	f000 fb66 	bl	80026b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fe8:	2360      	movs	r3, #96	@ 0x60
 8001fea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 8001fec:	233c      	movs	r3, #60	@ 0x3c
 8001fee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	220c      	movs	r2, #12
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	480b      	ldr	r0, [pc, #44]	@ (800202c <MX_TIM4_Init+0xf4>)
 8002000:	f002 fedc 	bl	8004dbc <HAL_TIM_PWM_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800200a:	f000 fb53 	bl	80026b4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 800200e:	4b07      	ldr	r3, [pc, #28]	@ (800202c <MX_TIM4_Init+0xf4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	69da      	ldr	r2, [r3, #28]
 8002014:	4b05      	ldr	r3, [pc, #20]	@ (800202c <MX_TIM4_Init+0xf4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800201c:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800201e:	4803      	ldr	r0, [pc, #12]	@ (800202c <MX_TIM4_Init+0xf4>)
 8002020:	f000 fc3c 	bl	800289c <HAL_TIM_MspPostInit>

}
 8002024:	bf00      	nop
 8002026:	3738      	adds	r7, #56	@ 0x38
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200002fc 	.word	0x200002fc
 8002030:	40000800 	.word	0x40000800

08002034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <MX_DMA_Init+0x38>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	4a0b      	ldr	r2, [pc, #44]	@ (800206c <MX_DMA_Init+0x38>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6153      	str	r3, [r2, #20]
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <MX_DMA_Init+0x38>)
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	200b      	movs	r0, #11
 8002058:	f001 fb41 	bl	80036de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800205c:	200b      	movs	r0, #11
 800205e:	f001 fb5a 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	f107 0310 	add.w	r3, r7, #16
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	605a      	str	r2, [r3, #4]
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002084:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <MX_GPIO_Init+0x114>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a3e      	ldr	r2, [pc, #248]	@ (8002184 <MX_GPIO_Init+0x114>)
 800208a:	f043 0310 	orr.w	r3, r3, #16
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <MX_GPIO_Init+0x114>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0310 	and.w	r3, r3, #16
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209c:	4b39      	ldr	r3, [pc, #228]	@ (8002184 <MX_GPIO_Init+0x114>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a38      	ldr	r2, [pc, #224]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020a2:	f043 0320 	orr.w	r3, r3, #32
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a32      	ldr	r2, [pc, #200]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b30      	ldr	r3, [pc, #192]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <MX_GPIO_Init+0x114>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ea:	4827      	ldr	r0, [pc, #156]	@ (8002188 <MX_GPIO_Init+0x118>)
 80020ec:	f001 fe29 	bl	8003d42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80020f0:	2200      	movs	r2, #0
 80020f2:	f641 6108 	movw	r1, #7688	@ 0x1e08
 80020f6:	4825      	ldr	r0, [pc, #148]	@ (800218c <MX_GPIO_Init+0x11c>)
 80020f8:	f001 fe23 	bl	8003d42 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 80020fc:	2200      	movs	r2, #0
 80020fe:	f640 411b 	movw	r1, #3099	@ 0xc1b
 8002102:	4823      	ldr	r0, [pc, #140]	@ (8002190 <MX_GPIO_Init+0x120>)
 8002104:	f001 fe1d 	bl	8003d42 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002108:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800210c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211a:	f107 0310 	add.w	r3, r7, #16
 800211e:	4619      	mov	r1, r3
 8002120:	4819      	ldr	r0, [pc, #100]	@ (8002188 <MX_GPIO_Init+0x118>)
 8002122:	f001 fc73 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : IRRIGACAO_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8002126:	f641 6308 	movw	r3, #7688	@ 0x1e08
 800212a:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002134:	2303      	movs	r3, #3
 8002136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002138:	f107 0310 	add.w	r3, r7, #16
 800213c:	4619      	mov	r1, r3
 800213e:	4813      	ldr	r0, [pc, #76]	@ (800218c <MX_GPIO_Init+0x11c>)
 8002140:	f001 fc64 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8002144:	f640 431b 	movw	r3, #3099	@ 0xc1b
 8002148:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	4619      	mov	r1, r3
 800215c:	480c      	ldr	r0, [pc, #48]	@ (8002190 <MX_GPIO_Init+0x120>)
 800215e:	f001 fc55 	bl	8003a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 8002162:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002170:	f107 0310 	add.w	r3, r7, #16
 8002174:	4619      	mov	r1, r3
 8002176:	4806      	ldr	r0, [pc, #24]	@ (8002190 <MX_GPIO_Init+0x120>)
 8002178:	f001 fc48 	bl	8003a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40011000 	.word	0x40011000
 800218c:	40010800 	.word	0x40010800
 8002190:	40010c00 	.word	0x40010c00

08002194 <select_params>:

/* USER CODE BEGIN 4 */

void select_params(void){
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

	switch(variedade){
 8002198:	4b5f      	ldr	r3, [pc, #380]	@ (8002318 <select_params+0x184>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d079      	beq.n	8002294 <select_params+0x100>
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	f300 80b5 	bgt.w	8002310 <select_params+0x17c>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <select_params+0x1c>
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d039      	beq.n	8002222 <select_params+0x8e>
				tempo_irrigacao = 10;
			}
			break;
	}

}
 80021ae:	e0af      	b.n	8002310 <select_params+0x17c>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 80021b0:	4b5a      	ldr	r3, [pc, #360]	@ (800231c <select_params+0x188>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <select_params+0x38>
 80021ba:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <select_params+0x18c>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d103      	bne.n	80021cc <select_params+0x38>
				tempo_irrigacao = 17;
 80021c4:	4b57      	ldr	r3, [pc, #348]	@ (8002324 <select_params+0x190>)
 80021c6:	2211      	movs	r2, #17
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e029      	b.n	8002220 <select_params+0x8c>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 80021cc:	4b53      	ldr	r3, [pc, #332]	@ (800231c <select_params+0x188>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <select_params+0x54>
 80021d6:	4b52      	ldr	r3, [pc, #328]	@ (8002320 <select_params+0x18c>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <select_params+0x54>
				tempo_irrigacao = 15;
 80021e0:	4b50      	ldr	r3, [pc, #320]	@ (8002324 <select_params+0x190>)
 80021e2:	220f      	movs	r2, #15
 80021e4:	701a      	strb	r2, [r3, #0]
 80021e6:	e01b      	b.n	8002220 <select_params+0x8c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 80021e8:	4b4c      	ldr	r3, [pc, #304]	@ (800231c <select_params+0x188>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d108      	bne.n	8002204 <select_params+0x70>
 80021f2:	4b4b      	ldr	r3, [pc, #300]	@ (8002320 <select_params+0x18c>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d103      	bne.n	8002204 <select_params+0x70>
				tempo_irrigacao = 10;
 80021fc:	4b49      	ldr	r3, [pc, #292]	@ (8002324 <select_params+0x190>)
 80021fe:	220a      	movs	r2, #10
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e00d      	b.n	8002220 <select_params+0x8c>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 8002204:	4b45      	ldr	r3, [pc, #276]	@ (800231c <select_params+0x188>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d17b      	bne.n	8002306 <select_params+0x172>
 800220e:	4b44      	ldr	r3, [pc, #272]	@ (8002320 <select_params+0x18c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d176      	bne.n	8002306 <select_params+0x172>
				tempo_irrigacao = 7;
 8002218:	4b42      	ldr	r3, [pc, #264]	@ (8002324 <select_params+0x190>)
 800221a:	2207      	movs	r2, #7
 800221c:	701a      	strb	r2, [r3, #0]
			break;
 800221e:	e072      	b.n	8002306 <select_params+0x172>
 8002220:	e071      	b.n	8002306 <select_params+0x172>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 8002222:	4b3e      	ldr	r3, [pc, #248]	@ (800231c <select_params+0x188>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d108      	bne.n	800223e <select_params+0xaa>
 800222c:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <select_params+0x18c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d103      	bne.n	800223e <select_params+0xaa>
				tempo_irrigacao = 13;
 8002236:	4b3b      	ldr	r3, [pc, #236]	@ (8002324 <select_params+0x190>)
 8002238:	220d      	movs	r2, #13
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e029      	b.n	8002292 <select_params+0xfe>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 800223e:	4b37      	ldr	r3, [pc, #220]	@ (800231c <select_params+0x188>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d108      	bne.n	800225a <select_params+0xc6>
 8002248:	4b35      	ldr	r3, [pc, #212]	@ (8002320 <select_params+0x18c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <select_params+0xc6>
				tempo_irrigacao = 10;
 8002252:	4b34      	ldr	r3, [pc, #208]	@ (8002324 <select_params+0x190>)
 8002254:	220a      	movs	r2, #10
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e01b      	b.n	8002292 <select_params+0xfe>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 800225a:	4b30      	ldr	r3, [pc, #192]	@ (800231c <select_params+0x188>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <select_params+0xe2>
 8002264:	4b2e      	ldr	r3, [pc, #184]	@ (8002320 <select_params+0x18c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d103      	bne.n	8002276 <select_params+0xe2>
				tempo_irrigacao = 6;
 800226e:	4b2d      	ldr	r3, [pc, #180]	@ (8002324 <select_params+0x190>)
 8002270:	2206      	movs	r2, #6
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e00d      	b.n	8002292 <select_params+0xfe>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 8002276:	4b29      	ldr	r3, [pc, #164]	@ (800231c <select_params+0x188>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d144      	bne.n	800230a <select_params+0x176>
 8002280:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <select_params+0x18c>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13f      	bne.n	800230a <select_params+0x176>
				tempo_irrigacao = 3;
 800228a:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <select_params+0x190>)
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
			break;
 8002290:	e03b      	b.n	800230a <select_params+0x176>
 8002292:	e03a      	b.n	800230a <select_params+0x176>
			if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 1){
 8002294:	4b21      	ldr	r3, [pc, #132]	@ (800231c <select_params+0x188>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <select_params+0x11c>
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <select_params+0x18c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d103      	bne.n	80022b0 <select_params+0x11c>
				tempo_irrigacao = 19;
 80022a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002324 <select_params+0x190>)
 80022aa:	2213      	movs	r2, #19
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e029      	b.n	8002304 <select_params+0x170>
			else if(flag_turno_dia == 1 && flag_temperatura_acima_limite == 0){
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <select_params+0x188>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <select_params+0x138>
 80022ba:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <select_params+0x18c>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <select_params+0x138>
				tempo_irrigacao = 17;
 80022c4:	4b17      	ldr	r3, [pc, #92]	@ (8002324 <select_params+0x190>)
 80022c6:	2211      	movs	r2, #17
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e01b      	b.n	8002304 <select_params+0x170>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 1){
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <select_params+0x188>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d108      	bne.n	80022e8 <select_params+0x154>
 80022d6:	4b12      	ldr	r3, [pc, #72]	@ (8002320 <select_params+0x18c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d103      	bne.n	80022e8 <select_params+0x154>
				tempo_irrigacao = 13;
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <select_params+0x190>)
 80022e2:	220d      	movs	r2, #13
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e00d      	b.n	8002304 <select_params+0x170>
			else if(flag_turno_dia == 0 && flag_temperatura_acima_limite == 0){
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <select_params+0x188>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <select_params+0x17a>
 80022f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <select_params+0x18c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d108      	bne.n	800230e <select_params+0x17a>
				tempo_irrigacao = 10;
 80022fc:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <select_params+0x190>)
 80022fe:	220a      	movs	r2, #10
 8002300:	701a      	strb	r2, [r3, #0]
			break;
 8002302:	e004      	b.n	800230e <select_params+0x17a>
 8002304:	e003      	b.n	800230e <select_params+0x17a>
			break;
 8002306:	bf00      	nop
 8002308:	e002      	b.n	8002310 <select_params+0x17c>
			break;
 800230a:	bf00      	nop
 800230c:	e000      	b.n	8002310 <select_params+0x17c>
			break;
 800230e:	bf00      	nop
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	20000347 	.word	0x20000347
 800231c:	20000001 	.word	0x20000001
 8002320:	20000346 	.word	0x20000346
 8002324:	20000000 	.word	0x20000000

08002328 <menu_selection>:

void menu_selection(void){
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
	selected_menu = 2;
 800232e:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <menu_selection+0x90>)
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
	const char *options[] = {"  Informacoes", " Mudar Temp " "\xDF" "C", "  Mudar Planta", "      Sair"};
 8002334:	4b21      	ldr	r3, [pc, #132]	@ (80023bc <menu_selection+0x94>)
 8002336:	1d3c      	adds	r4, r7, #4
 8002338:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800233a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char num_options = sizeof(options) / sizeof(options[0]);
 800233e:	2304      	movs	r3, #4
 8002340:	75fb      	strb	r3, [r7, #23]
	char option = navigate_options(options, num_options);
 8002342:	7dfa      	ldrb	r2, [r7, #23]
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fb83 	bl	8001a54 <navigate_options>
 800234e:	4603      	mov	r3, r0
 8002350:	75bb      	strb	r3, [r7, #22]
	switch(option){
 8002352:	7dbb      	ldrb	r3, [r7, #22]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d82b      	bhi.n	80023b0 <menu_selection+0x88>
 8002358:	a201      	add	r2, pc, #4	@ (adr r2, 8002360 <menu_selection+0x38>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002371 	.word	0x08002371
 8002364:	0800237d 	.word	0x0800237d
 8002368:	08002391 	.word	0x08002391
 800236c:	080023a5 	.word	0x080023a5
		case 0:
			menu_actual_state();
 8002370:	f000 f940 	bl	80025f4 <menu_actual_state>
			selected_menu = 1;
 8002374:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <menu_selection+0x90>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
			break;
 800237a:	e019      	b.n	80023b0 <menu_selection+0x88>
		case 1:
			menu_temperature_selection();
 800237c:	f000 f820 	bl	80023c0 <menu_temperature_selection>
			menu_main();
 8002380:	f000 f90a 	bl	8002598 <menu_main>
			select_params();
 8002384:	f7ff ff06 	bl	8002194 <select_params>
			selected_menu = 0;
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <menu_selection+0x90>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
			break;
 800238e:	e00f      	b.n	80023b0 <menu_selection+0x88>
		case 2:
			menu_plant_selection();
 8002390:	f000 f854 	bl	800243c <menu_plant_selection>
			menu_main();
 8002394:	f000 f900 	bl	8002598 <menu_main>
			select_params();
 8002398:	f7ff fefc 	bl	8002194 <select_params>
			selected_menu = 0;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <menu_selection+0x90>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			break;
 80023a2:	e005      	b.n	80023b0 <menu_selection+0x88>
		case 3:
			menu_main();
 80023a4:	f000 f8f8 	bl	8002598 <menu_main>
			selected_menu = 0;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <menu_selection+0x90>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
			break;
 80023ae:	bf00      	nop
	}
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	2000034c 	.word	0x2000034c
 80023bc:	08009990 	.word	0x08009990

080023c0 <menu_temperature_selection>:

void menu_temperature_selection(void){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
	clear_display();
 80023c6:	f7ff fb3a 	bl	8001a3e <clear_display>
	write_string_line(1,"Digite o Valor:");
 80023ca:	4916      	ldr	r1, [pc, #88]	@ (8002424 <menu_temperature_selection+0x64>)
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fb1c 	bl	8001a0a <write_string_line>
	char buffer[3];
	float temp = read_temperature_keypad(buffer);
 80023d2:	463b      	mov	r3, r7
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff f93d 	bl	8001654 <read_temperature_keypad>
 80023da:	6078      	str	r0, [r7, #4]
	if(temp != -1.0){
 80023dc:	4912      	ldr	r1, [pc, #72]	@ (8002428 <menu_temperature_selection+0x68>)
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fe64 	bl	80010ac <__aeabi_fcmpeq>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d000      	beq.n	80023ec <menu_temperature_selection+0x2c>
		HAL_Delay(3000);
	}else{

	}

}
 80023ea:	e017      	b.n	800241c <menu_temperature_selection+0x5c>
		temperatura_limite = temp;
 80023ec:	4a0f      	ldr	r2, [pc, #60]	@ (800242c <menu_temperature_selection+0x6c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
		clear_display();
 80023f2:	f7ff fb24 	bl	8001a3e <clear_display>
		write_string_line(1, "Temp Selecionada");
 80023f6:	490e      	ldr	r1, [pc, #56]	@ (8002430 <menu_temperature_selection+0x70>)
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7ff fb06 	bl	8001a0a <write_string_line>
		write_string_line(2, "      ");
 80023fe:	490d      	ldr	r1, [pc, #52]	@ (8002434 <menu_temperature_selection+0x74>)
 8002400:	2002      	movs	r0, #2
 8002402:	f7ff fb02 	bl	8001a0a <write_string_line>
		write_string_LCD(buffer);
 8002406:	463b      	mov	r3, r7
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fae9 	bl	80019e0 <write_string_LCD>
		write_string_LCD("\xDF" "C");
 800240e:	480a      	ldr	r0, [pc, #40]	@ (8002438 <menu_temperature_selection+0x78>)
 8002410:	f7ff fae6 	bl	80019e0 <write_string_LCD>
		HAL_Delay(3000);
 8002414:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002418:	f000 fc0e 	bl	8002c38 <HAL_Delay>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	080099a0 	.word	0x080099a0
 8002428:	bf800000 	.word	0xbf800000
 800242c:	20000004 	.word	0x20000004
 8002430:	080099b0 	.word	0x080099b0
 8002434:	080099c4 	.word	0x080099c4
 8002438:	080099cc 	.word	0x080099cc

0800243c <menu_plant_selection>:

void menu_plant_selection(void){
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
	const char *options[] = {"     Alface", "    Pimentao", "    Morango"};
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <menu_plant_selection+0x68>)
 8002444:	f107 0310 	add.w	r3, r7, #16
 8002448:	ca07      	ldmia	r2, {r0, r1, r2}
 800244a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char num_options = sizeof(options) / sizeof(options[0]);
 800244e:	2303      	movs	r3, #3
 8002450:	77fb      	strb	r3, [r7, #31]
	variedade = navigate_options(options, num_options);
 8002452:	7ffa      	ldrb	r2, [r7, #31]
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fafa 	bl	8001a54 <navigate_options>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <menu_plant_selection+0x6c>)
 8002466:	701a      	strb	r2, [r3, #0]
	char buffer[16];
	get_name(variedade, buffer);
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <menu_plant_selection+0x6c>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	463a      	mov	r2, r7
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f81f 	bl	80024b4 <get_name>
	clear_display();
 8002476:	f7ff fae2 	bl	8001a3e <clear_display>
	write_string_line(1, "   ");
 800247a:	490c      	ldr	r1, [pc, #48]	@ (80024ac <menu_plant_selection+0x70>)
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff fac4 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 8002482:	463b      	mov	r3, r7
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff faab 	bl	80019e0 <write_string_LCD>
	write_string_line(2, "  Selecionado");
 800248a:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <menu_plant_selection+0x74>)
 800248c:	2002      	movs	r0, #2
 800248e:	f7ff fabc 	bl	8001a0a <write_string_line>
	HAL_Delay(3000);
 8002492:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002496:	f000 fbcf 	bl	8002c38 <HAL_Delay>
}
 800249a:	bf00      	nop
 800249c:	3720      	adds	r7, #32
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	08009a0c 	.word	0x08009a0c
 80024a8:	20000347 	.word	0x20000347
 80024ac:	080099d0 	.word	0x080099d0
 80024b0:	080099d4 	.word	0x080099d4

080024b4 <get_name>:

void get_name(char code, char* buffer) {
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	6039      	str	r1, [r7, #0]
 80024be:	71fb      	strb	r3, [r7, #7]
    switch(code) {
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d01a      	beq.n	80024fc <get_name+0x48>
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	dc22      	bgt.n	8002510 <get_name+0x5c>
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d002      	beq.n	80024d4 <get_name+0x20>
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d00a      	beq.n	80024e8 <get_name+0x34>
 80024d2:	e01d      	b.n	8002510 <get_name+0x5c>
        case 0:
            strcpy(buffer, "Alface  ");
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4916      	ldr	r1, [pc, #88]	@ (8002530 <get_name+0x7c>)
 80024d8:	461a      	mov	r2, r3
 80024da:	460b      	mov	r3, r1
 80024dc:	cb03      	ldmia	r3!, {r0, r1}
 80024de:	6010      	str	r0, [r2, #0]
 80024e0:	6051      	str	r1, [r2, #4]
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	7213      	strb	r3, [r2, #8]
            break;
 80024e6:	e01d      	b.n	8002524 <get_name+0x70>
        case 1:
            strcpy(buffer, "Pimentao");
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4912      	ldr	r1, [pc, #72]	@ (8002534 <get_name+0x80>)
 80024ec:	461a      	mov	r2, r3
 80024ee:	460b      	mov	r3, r1
 80024f0:	cb03      	ldmia	r3!, {r0, r1}
 80024f2:	6010      	str	r0, [r2, #0]
 80024f4:	6051      	str	r1, [r2, #4]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	7213      	strb	r3, [r2, #8]
            break;
 80024fa:	e013      	b.n	8002524 <get_name+0x70>
        case 2:
            strcpy(buffer, "Morango ");
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	490e      	ldr	r1, [pc, #56]	@ (8002538 <get_name+0x84>)
 8002500:	461a      	mov	r2, r3
 8002502:	460b      	mov	r3, r1
 8002504:	cb03      	ldmia	r3!, {r0, r1}
 8002506:	6010      	str	r0, [r2, #0]
 8002508:	6051      	str	r1, [r2, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	7213      	strb	r3, [r2, #8]
            break;
 800250e:	e009      	b.n	8002524 <get_name+0x70>
        default:
            strcpy(buffer, "Unknown "); // Handle unexpected code values
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	490a      	ldr	r1, [pc, #40]	@ (800253c <get_name+0x88>)
 8002514:	461a      	mov	r2, r3
 8002516:	460b      	mov	r3, r1
 8002518:	cb03      	ldmia	r3!, {r0, r1}
 800251a:	6010      	str	r0, [r2, #0]
 800251c:	6051      	str	r1, [r2, #4]
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	7213      	strb	r3, [r2, #8]
            break;
 8002522:	bf00      	nop
    }
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	08009a18 	.word	0x08009a18
 8002534:	08009a24 	.word	0x08009a24
 8002538:	08009a30 	.word	0x08009a30
 800253c:	08009a3c 	.word	0x08009a3c

08002540 <get_day_night>:

void get_day_night(char code, char* buffer) {
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	71fb      	strb	r3, [r7, #7]
    switch(code) {
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <get_day_night+0x18>
 8002552:	2b01      	cmp	r3, #1
 8002554:	d007      	beq.n	8002566 <get_day_night+0x26>
 8002556:	e00b      	b.n	8002570 <get_day_night+0x30>
        case 0:
            strcpy(buffer, "Noite");
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4a0c      	ldr	r2, [pc, #48]	@ (800258c <get_day_night+0x4c>)
 800255c:	6810      	ldr	r0, [r2, #0]
 800255e:	6018      	str	r0, [r3, #0]
 8002560:	8892      	ldrh	r2, [r2, #4]
 8002562:	809a      	strh	r2, [r3, #4]
            break;
 8002564:	e00c      	b.n	8002580 <get_day_night+0x40>
        case 1:
            strcpy(buffer, "Dia");
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <get_day_night+0x50>)
 800256a:	6810      	ldr	r0, [r2, #0]
 800256c:	6018      	str	r0, [r3, #0]
            break;
 800256e:	e007      	b.n	8002580 <get_day_night+0x40>
        default:
            strcpy(buffer, "Unknown"); // Handle unexpected code values
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4908      	ldr	r1, [pc, #32]	@ (8002594 <get_day_night+0x54>)
 8002574:	461a      	mov	r2, r3
 8002576:	460b      	mov	r3, r1
 8002578:	cb03      	ldmia	r3!, {r0, r1}
 800257a:	6010      	str	r0, [r2, #0]
 800257c:	6051      	str	r1, [r2, #4]
            break;
 800257e:	bf00      	nop
    }
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	08009a48 	.word	0x08009a48
 8002590:	08009a50 	.word	0x08009a50
 8002594:	08009a54 	.word	0x08009a54

08002598 <menu_main>:

void menu_main(void){
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
	char buffer [16];
	sprintf(buffer, "%.2f", temperatura_atual);  // Convert float to string with 2 decimal places
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <menu_main+0x48>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ff40 	bl	8000428 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4638      	mov	r0, r7
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <menu_main+0x4c>)
 80025b0:	f004 fbec 	bl	8006d8c <siprintf>
	clear_display();
 80025b4:	f7ff fa43 	bl	8001a3e <clear_display>
	write_string_line(1,"   Smart-fARM");
 80025b8:	490b      	ldr	r1, [pc, #44]	@ (80025e8 <menu_main+0x50>)
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff fa25 	bl	8001a0a <write_string_line>
	write_string_line(2,"    ");
 80025c0:	490a      	ldr	r1, [pc, #40]	@ (80025ec <menu_main+0x54>)
 80025c2:	2002      	movs	r0, #2
 80025c4:	f7ff fa21 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 80025c8:	463b      	mov	r3, r7
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fa08 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 80025d0:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <menu_main+0x58>)
 80025d2:	f7ff fa05 	bl	80019e0 <write_string_LCD>
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000348 	.word	0x20000348
 80025e4:	08009a5c 	.word	0x08009a5c
 80025e8:	08009a64 	.word	0x08009a64
 80025ec:	08009a74 	.word	0x08009a74
 80025f0:	080099cc 	.word	0x080099cc

080025f4 <menu_actual_state>:

void menu_actual_state(void){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
	char buffer [16];
	sprintf(buffer, "%.2f", temperatura_atual);  // Convert float to string with 2 decimal places
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <menu_actual_state+0x98>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ff12 	bl	8000428 <__aeabi_f2d>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4638      	mov	r0, r7
 800260a:	4921      	ldr	r1, [pc, #132]	@ (8002690 <menu_actual_state+0x9c>)
 800260c:	f004 fbbe 	bl	8006d8c <siprintf>
	clear_display();
 8002610:	f7ff fa15 	bl	8001a3e <clear_display>
	write_string_line(1,"");
 8002614:	491f      	ldr	r1, [pc, #124]	@ (8002694 <menu_actual_state+0xa0>)
 8002616:	2001      	movs	r0, #1
 8002618:	f7ff f9f7 	bl	8001a0a <write_string_line>
	write_string_LCD(buffer);
 800261c:	463b      	mov	r3, r7
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f9de 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C |TL:");
 8002624:	481c      	ldr	r0, [pc, #112]	@ (8002698 <menu_actual_state+0xa4>)
 8002626:	f7ff f9db 	bl	80019e0 <write_string_LCD>
	sprintf(buffer, "%.0f", temperatura_limite);  // Convert float to string with 2 decimal places
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <menu_actual_state+0xa8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd fefa 	bl	8000428 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4638      	mov	r0, r7
 800263a:	4919      	ldr	r1, [pc, #100]	@ (80026a0 <menu_actual_state+0xac>)
 800263c:	f004 fba6 	bl	8006d8c <siprintf>
	write_string_LCD(buffer);
 8002640:	463b      	mov	r3, r7
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f9cc 	bl	80019e0 <write_string_LCD>
	write_string_LCD("\xDF" "C");
 8002648:	4816      	ldr	r0, [pc, #88]	@ (80026a4 <menu_actual_state+0xb0>)
 800264a:	f7ff f9c9 	bl	80019e0 <write_string_LCD>
	get_name(variedade,buffer);
 800264e:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <menu_actual_state+0xb4>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	463a      	mov	r2, r7
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff2c 	bl	80024b4 <get_name>
	write_string_line(2,buffer);
 800265c:	463b      	mov	r3, r7
 800265e:	4619      	mov	r1, r3
 8002660:	2002      	movs	r0, #2
 8002662:	f7ff f9d2 	bl	8001a0a <write_string_line>
	write_string_LCD("| ");
 8002666:	4811      	ldr	r0, [pc, #68]	@ (80026ac <menu_actual_state+0xb8>)
 8002668:	f7ff f9ba 	bl	80019e0 <write_string_LCD>
	get_day_night(flag_turno_dia,buffer);
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <menu_actual_state+0xbc>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	463a      	mov	r2, r7
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff ff62 	bl	8002540 <get_day_night>
	write_string_LCD(buffer);
 800267c:	463b      	mov	r3, r7
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f9ae 	bl	80019e0 <write_string_LCD>
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000348 	.word	0x20000348
 8002690:	08009a5c 	.word	0x08009a5c
 8002694:	08009a7c 	.word	0x08009a7c
 8002698:	08009a80 	.word	0x08009a80
 800269c:	20000004 	.word	0x20000004
 80026a0:	08009a88 	.word	0x08009a88
 80026a4:	080099cc 	.word	0x080099cc
 80026a8:	20000347 	.word	0x20000347
 80026ac:	08009a90 	.word	0x08009a90
 80026b0:	20000001 	.word	0x20000001

080026b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b8:	b672      	cpsid	i
}
 80026ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <Error_Handler+0x8>

080026c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c6:	4b15      	ldr	r3, [pc, #84]	@ (800271c <HAL_MspInit+0x5c>)
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	4a14      	ldr	r2, [pc, #80]	@ (800271c <HAL_MspInit+0x5c>)
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	6193      	str	r3, [r2, #24]
 80026d2:	4b12      	ldr	r3, [pc, #72]	@ (800271c <HAL_MspInit+0x5c>)
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	4b0f      	ldr	r3, [pc, #60]	@ (800271c <HAL_MspInit+0x5c>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	4a0e      	ldr	r2, [pc, #56]	@ (800271c <HAL_MspInit+0x5c>)
 80026e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e8:	61d3      	str	r3, [r2, #28]
 80026ea:	4b0c      	ldr	r3, [pc, #48]	@ (800271c <HAL_MspInit+0x5c>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_MspInit+0x60>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <HAL_MspInit+0x60>)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	40010000 	.word	0x40010000

08002724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 0310 	add.w	r3, r7, #16
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a28      	ldr	r2, [pc, #160]	@ (80027e0 <HAL_ADC_MspInit+0xbc>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d149      	bne.n	80027d8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002744:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4a26      	ldr	r2, [pc, #152]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 800274a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800274e:	6193      	str	r3, [r2, #24]
 8002750:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	4a20      	ldr	r2, [pc, #128]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6193      	str	r3, [r2, #24]
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_ADC_MspInit+0xc0>)
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8002774:	2303      	movs	r3, #3
 8002776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002778:	2303      	movs	r3, #3
 800277a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0310 	add.w	r3, r7, #16
 8002780:	4619      	mov	r1, r3
 8002782:	4819      	ldr	r0, [pc, #100]	@ (80027e8 <HAL_ADC_MspInit+0xc4>)
 8002784:	f001 f942 	bl	8003a0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 800278a:	4a19      	ldr	r2, [pc, #100]	@ (80027f0 <HAL_ADC_MspInit+0xcc>)
 800278c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800278e:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 8002790:	2200      	movs	r2, #0
 8002792:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002794:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800279a:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a0:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027a6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027a8:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027b0:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027bc:	480b      	ldr	r0, [pc, #44]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027be:	f000 ffc5 	bl	800374c <HAL_DMA_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80027c8:	f7ff ff74 	bl	80026b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027d0:	621a      	str	r2, [r3, #32]
 80027d2:	4a06      	ldr	r2, [pc, #24]	@ (80027ec <HAL_ADC_MspInit+0xc8>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40012400 	.word	0x40012400
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010800 	.word	0x40010800
 80027ec:	20000228 	.word	0x20000228
 80027f0:	40020008 	.word	0x40020008

080027f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002804:	d114      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002806:	4b22      	ldr	r3, [pc, #136]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	61d3      	str	r3, [r2, #28]
 8002812:	4b1f      	ldr	r3, [pc, #124]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2100      	movs	r1, #0
 8002822:	201c      	movs	r0, #28
 8002824:	f000 ff5b 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002828:	201c      	movs	r0, #28
 800282a:	f000 ff74 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800282e:	e02a      	b.n	8002886 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_TIM_Base_MspInit+0xa0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d114      	bne.n	8002864 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	61d3      	str	r3, [r2, #28]
 8002846:	4b12      	ldr	r3, [pc, #72]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	201d      	movs	r0, #29
 8002858:	f000 ff41 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800285c:	201d      	movs	r0, #29
 800285e:	f000 ff5a 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8002862:	e010      	b.n	8002886 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0b      	ldr	r2, [pc, #44]	@ (8002898 <HAL_TIM_Base_MspInit+0xa4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d10b      	bne.n	8002886 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4a07      	ldr	r2, [pc, #28]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	61d3      	str	r3, [r2, #28]
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_TIM_Base_MspInit+0x9c>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40021000 	.word	0x40021000
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_TIM_MspPostInit+0x5c>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d118      	bne.n	80028ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028bc:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <HAL_TIM_MspPostInit+0x60>)
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	@ (80028fc <HAL_TIM_MspPostInit+0x60>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	6193      	str	r3, [r2, #24]
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <HAL_TIM_MspPostInit+0x60>)
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = INTERNAL_LED_Pin;
 80028d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028da:	2302      	movs	r3, #2
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028de:	2302      	movs	r3, #2
 80028e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(INTERNAL_LED_GPIO_Port, &GPIO_InitStruct);
 80028e2:	f107 0310 	add.w	r3, r7, #16
 80028e6:	4619      	mov	r1, r3
 80028e8:	4805      	ldr	r0, [pc, #20]	@ (8002900 <HAL_TIM_MspPostInit+0x64>)
 80028ea:	f001 f88f 	bl	8003a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40000800 	.word	0x40000800
 80028fc:	40021000 	.word	0x40021000
 8002900:	40010c00 	.word	0x40010c00

08002904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <NMI_Handler+0x4>

0800290c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <MemManage_Handler+0x4>

0800291c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <UsageFault_Handler+0x4>

0800292c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 f954 	bl	8002c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002960:	4802      	ldr	r0, [pc, #8]	@ (800296c <DMA1_Channel1_IRQHandler+0x10>)
 8002962:	f000 ff4d 	bl	8003800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000228 	.word	0x20000228

08002970 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002974:	4802      	ldr	r0, [pc, #8]	@ (8002980 <TIM2_IRQHandler+0x10>)
 8002976:	f002 f919 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000026c 	.word	0x2000026c

08002984 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002988:	4802      	ldr	r0, [pc, #8]	@ (8002994 <TIM3_IRQHandler+0x10>)
 800298a:	f002 f90f 	bl	8004bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200002b4 	.word	0x200002b4

08002998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr

080029a6 <_kill>:

int _kill(int pid, int sig)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b0:	f004 fab4 	bl	8006f1c <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2216      	movs	r2, #22
 80029b8:	601a      	str	r2, [r3, #0]
  return -1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_exit>:

void _exit (int status)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029ce:	f04f 31ff 	mov.w	r1, #4294967295
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff ffe7 	bl	80029a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <_exit+0x12>

080029dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e00a      	b.n	8002a04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ee:	f3af 8000 	nop.w
 80029f2:	4601      	mov	r1, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	60ba      	str	r2, [r7, #8]
 80029fa:	b2ca      	uxtb	r2, r1
 80029fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	dbf0      	blt.n	80029ee <_read+0x12>
  }

  return len;
 8002a0c:	687b      	ldr	r3, [r7, #4]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	e009      	b.n	8002a3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60ba      	str	r2, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf1      	blt.n	8002a28 <_write+0x12>
  }
  return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_close>:

int _close(int file)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a74:	605a      	str	r2, [r3, #4]
  return 0;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr

08002a82 <_isatty>:

int _isatty(int file)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b085      	sub	sp, #20
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
	...

08002ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <_sbrk+0x5c>)
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <_sbrk+0x60>)
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <_sbrk+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <_sbrk+0x64>)
 8002ace:	4a12      	ldr	r2, [pc, #72]	@ (8002b18 <_sbrk+0x68>)
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad2:	4b10      	ldr	r3, [pc, #64]	@ (8002b14 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d207      	bcs.n	8002af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae0:	f004 fa1c 	bl	8006f1c <__errno>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295
 8002aee:	e009      	b.n	8002b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af6:	4b07      	ldr	r3, [pc, #28]	@ (8002b14 <_sbrk+0x64>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	4a05      	ldr	r2, [pc, #20]	@ (8002b14 <_sbrk+0x64>)
 8002b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b02:	68fb      	ldr	r3, [r7, #12]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20005000 	.word	0x20005000
 8002b10:	00000400 	.word	0x00000400
 8002b14:	20000350 	.word	0x20000350
 8002b18:	200004a8 	.word	0x200004a8

08002b1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b28:	f7ff fff8 	bl	8002b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b2c:	480b      	ldr	r0, [pc, #44]	@ (8002b5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b2e:	490c      	ldr	r1, [pc, #48]	@ (8002b60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b30:	4a0c      	ldr	r2, [pc, #48]	@ (8002b64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b34:	e002      	b.n	8002b3c <LoopCopyDataInit>

08002b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b3a:	3304      	adds	r3, #4

08002b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b40:	d3f9      	bcc.n	8002b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b42:	4a09      	ldr	r2, [pc, #36]	@ (8002b68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b44:	4c09      	ldr	r4, [pc, #36]	@ (8002b6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b48:	e001      	b.n	8002b4e <LoopFillZerobss>

08002b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b4c:	3204      	adds	r2, #4

08002b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b50:	d3fb      	bcc.n	8002b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b52:	f004 f9e9 	bl	8006f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b56:	f7ff f86f 	bl	8001c38 <main>
  bx lr
 8002b5a:	4770      	bx	lr
  ldr r0, =_sdata
 8002b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002b64:	08009f08 	.word	0x08009f08
  ldr r2, =_sbss
 8002b68:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002b6c:	200004a4 	.word	0x200004a4

08002b70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b70:	e7fe      	b.n	8002b70 <ADC1_2_IRQHandler>
	...

08002b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <HAL_Init+0x28>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a07      	ldr	r2, [pc, #28]	@ (8002b9c <HAL_Init+0x28>)
 8002b7e:	f043 0310 	orr.w	r3, r3, #16
 8002b82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b84:	2003      	movs	r0, #3
 8002b86:	f000 fd9f 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b8a:	200f      	movs	r0, #15
 8002b8c:	f000 f808 	bl	8002ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b90:	f7ff fd96 	bl	80026c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000

08002ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_InitTick+0x54>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <HAL_InitTick+0x58>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fdb7 	bl	8003732 <HAL_SYSTICK_Config>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e00e      	b.n	8002bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b0f      	cmp	r3, #15
 8002bd2:	d80a      	bhi.n	8002bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bdc:	f000 fd7f 	bl	80036de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be0:	4a06      	ldr	r2, [pc, #24]	@ (8002bfc <HAL_InitTick+0x5c>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e000      	b.n	8002bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000008 	.word	0x20000008
 8002bf8:	20000010 	.word	0x20000010
 8002bfc:	2000000c 	.word	0x2000000c

08002c00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c04:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_IncTick+0x1c>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a03      	ldr	r2, [pc, #12]	@ (8002c20 <HAL_IncTick+0x20>)
 8002c12:	6013      	str	r3, [r2, #0]
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	20000010 	.word	0x20000010
 8002c20:	20000354 	.word	0x20000354

08002c24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b02      	ldr	r3, [pc, #8]	@ (8002c34 <HAL_GetTick+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr
 8002c34:	20000354 	.word	0x20000354

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffe0 	bl	8002c24 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000010 	.word	0x20000010

08002c80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e0be      	b.n	8002e20 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d109      	bne.n	8002cc4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff fd30 	bl	8002724 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fbf1 	bl	80034ac <ADC_ConversionStop_Disable>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8099 	bne.w	8002e0e <HAL_ADC_Init+0x18e>
 8002cdc:	7dfb      	ldrb	r3, [r7, #23]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f040 8095 	bne.w	8002e0e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002cec:	f023 0302 	bic.w	r3, r3, #2
 8002cf0:	f043 0202 	orr.w	r2, r3, #2
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7b1b      	ldrb	r3, [r3, #12]
 8002d06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d18:	d003      	beq.n	8002d22 <HAL_ADC_Init+0xa2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_ADC_Init+0xa8>
 8002d22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_Init+0xaa>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7d1b      	ldrb	r3, [r3, #20]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d119      	bne.n	8002d6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	035a      	lsls	r2, r3, #13
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e00b      	b.n	8002d6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <HAL_ADC_Init+0x1a8>)
 8002d88:	4013      	ands	r3, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d9c:	d003      	beq.n	8002da6 <HAL_ADC_Init+0x126>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d104      	bne.n	8002db0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	051b      	lsls	r3, r3, #20
 8002dae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <HAL_ADC_Init+0x1ac>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d10b      	bne.n	8002dec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	f023 0303 	bic.w	r3, r3, #3
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dea:	e018      	b.n	8002e1e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df0:	f023 0312 	bic.w	r3, r3, #18
 8002df4:	f043 0210 	orr.w	r2, r3, #16
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e0c:	e007      	b.n	8002e1e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e12:	f043 0210 	orr.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	ffe1f7fd 	.word	0xffe1f7fd
 8002e2c:	ff1f0efe 	.word	0xff1f0efe

08002e30 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_Start+0x1a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e098      	b.n	8002f7c <HAL_ADC_Start+0x14c>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fad0 	bl	80033f8 <ADC_Enable>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f040 8087 	bne.w	8002f72 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a41      	ldr	r2, [pc, #260]	@ (8002f84 <HAL_ADC_Start+0x154>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d105      	bne.n	8002e8e <HAL_ADC_Start+0x5e>
 8002e82:	4b41      	ldr	r3, [pc, #260]	@ (8002f88 <HAL_ADC_Start+0x158>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d115      	bne.n	8002eba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d026      	beq.n	8002ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002eb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb8:	e01d      	b.n	8002ef6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a2f      	ldr	r2, [pc, #188]	@ (8002f88 <HAL_ADC_Start+0x158>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Start+0xaa>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f84 <HAL_ADC_Start+0x154>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10d      	bne.n	8002ef6 <HAL_ADC_Start+0xc6>
 8002eda:	4b2b      	ldr	r3, [pc, #172]	@ (8002f88 <HAL_ADC_Start+0x158>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002eee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d006      	beq.n	8002f10 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	f023 0206 	bic.w	r2, r3, #6
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f0e:	e002      	b.n	8002f16 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0202 	mvn.w	r2, #2
 8002f26:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002f32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002f36:	d113      	bne.n	8002f60 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f3c:	4a11      	ldr	r2, [pc, #68]	@ (8002f84 <HAL_ADC_Start+0x154>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d105      	bne.n	8002f4e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f42:	4b11      	ldr	r3, [pc, #68]	@ (8002f88 <HAL_ADC_Start+0x158>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	e00c      	b.n	8002f7a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e003      	b.n	8002f7a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40012800 	.word	0x40012800
 8002f88:	40012400 	.word	0x40012400

08002f8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Stop+0x1a>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e01a      	b.n	8002fdc <HAL_ADC_Stop+0x50>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa7c 	bl	80034ac <ADC_ConversionStop_Disable>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	f043 0201 	orr.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002ffa:	f7ff fe13 	bl	8002c24 <HAL_GetTick>
 8002ffe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	f043 0220 	orr.w	r2, r3, #32
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0d3      	b.n	80031ce <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d131      	bne.n	8003098 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800303e:	2b00      	cmp	r3, #0
 8003040:	d12a      	bne.n	8003098 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003042:	e021      	b.n	8003088 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d01d      	beq.n	8003088 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_PollForConversion+0x7e>
 8003052:	f7ff fde7 	bl	8002c24 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d212      	bcs.n	8003088 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10b      	bne.n	8003088 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	f043 0204 	orr.w	r2, r3, #4
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e0a2      	b.n	80031ce <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0d6      	beq.n	8003044 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003096:	e070      	b.n	800317a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003098:	4b4f      	ldr	r3, [pc, #316]	@ (80031d8 <HAL_ADC_PollForConversion+0x1f4>)
 800309a:	681c      	ldr	r4, [r3, #0]
 800309c:	2002      	movs	r0, #2
 800309e:	f001 fb33 	bl	8004708 <HAL_RCCEx_GetPeriphCLKFreq>
 80030a2:	4603      	mov	r3, r0
 80030a4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6919      	ldr	r1, [r3, #16]
 80030ae:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <HAL_ADC_PollForConversion+0x1f8>)
 80030b0:	400b      	ands	r3, r1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x104>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	4b48      	ldr	r3, [pc, #288]	@ (80031e0 <HAL_ADC_PollForConversion+0x1fc>)
 80030be:	400b      	ands	r3, r1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d111      	bne.n	80030e8 <HAL_ADC_PollForConversion+0x104>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6919      	ldr	r1, [r3, #16]
 80030ca:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <HAL_ADC_PollForConversion+0x200>)
 80030cc:	400b      	ands	r3, r1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <HAL_ADC_PollForConversion+0x100>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68d9      	ldr	r1, [r3, #12]
 80030d8:	4b43      	ldr	r3, [pc, #268]	@ (80031e8 <HAL_ADC_PollForConversion+0x204>)
 80030da:	400b      	ands	r3, r1
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_PollForConversion+0x100>
 80030e0:	2314      	movs	r3, #20
 80030e2:	e020      	b.n	8003126 <HAL_ADC_PollForConversion+0x142>
 80030e4:	2329      	movs	r3, #41	@ 0x29
 80030e6:	e01e      	b.n	8003126 <HAL_ADC_PollForConversion+0x142>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	4b3d      	ldr	r3, [pc, #244]	@ (80031e4 <HAL_ADC_PollForConversion+0x200>)
 80030f0:	400b      	ands	r3, r1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <HAL_ADC_PollForConversion+0x120>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68d9      	ldr	r1, [r3, #12]
 80030fc:	4b3a      	ldr	r3, [pc, #232]	@ (80031e8 <HAL_ADC_PollForConversion+0x204>)
 80030fe:	400b      	ands	r3, r1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <HAL_ADC_PollForConversion+0x13c>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <HAL_ADC_PollForConversion+0x208>)
 800310c:	400b      	ands	r3, r1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d108      	bne.n	8003124 <HAL_ADC_PollForConversion+0x140>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68d9      	ldr	r1, [r3, #12]
 8003118:	4b34      	ldr	r3, [pc, #208]	@ (80031ec <HAL_ADC_PollForConversion+0x208>)
 800311a:	400b      	ands	r3, r1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_PollForConversion+0x140>
 8003120:	2354      	movs	r3, #84	@ 0x54
 8003122:	e000      	b.n	8003126 <HAL_ADC_PollForConversion+0x142>
 8003124:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800312c:	e021      	b.n	8003172 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d01a      	beq.n	800316c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_ADC_PollForConversion+0x168>
 800313c:	f7ff fd72 	bl	8002c24 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d20f      	bcs.n	800316c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	429a      	cmp	r2, r3
 8003152:	d90b      	bls.n	800316c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	f043 0204 	orr.w	r2, r3, #4
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e030      	b.n	80031ce <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	3301      	adds	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d8d9      	bhi.n	800312e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0212 	mvn.w	r2, #18
 8003182:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800319a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800319e:	d115      	bne.n	80031cc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000008 	.word	0x20000008
 80031dc:	24924924 	.word	0x24924924
 80031e0:	00924924 	.word	0x00924924
 80031e4:	12492492 	.word	0x12492492
 80031e8:	00492492 	.word	0x00492492
 80031ec:	00249249 	.word	0x00249249

080031f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031fe:	4618      	mov	r0, r3
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x20>
 8003224:	2302      	movs	r3, #2
 8003226:	e0dc      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x1da>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b06      	cmp	r3, #6
 8003236:	d81c      	bhi.n	8003272 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	3b05      	subs	r3, #5
 800324a:	221f      	movs	r2, #31
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	4019      	ands	r1, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b05      	subs	r3, #5
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003270:	e03c      	b.n	80032ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d81c      	bhi.n	80032b4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	3b23      	subs	r3, #35	@ 0x23
 800328c:	221f      	movs	r2, #31
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	4019      	ands	r1, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b23      	subs	r3, #35	@ 0x23
 80032a6:	fa00 f203 	lsl.w	r2, r0, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b2:	e01b      	b.n	80032ec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	3b41      	subs	r3, #65	@ 0x41
 80032c6:	221f      	movs	r2, #31
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4019      	ands	r1, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	3b41      	subs	r3, #65	@ 0x41
 80032e0:	fa00 f203 	lsl.w	r2, r0, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d91c      	bls.n	800332e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68d9      	ldr	r1, [r3, #12]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	3b1e      	subs	r3, #30
 8003306:	2207      	movs	r2, #7
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	4019      	ands	r1, r3
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6898      	ldr	r0, [r3, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	3b1e      	subs	r3, #30
 8003320:	fa00 f203 	lsl.w	r2, r0, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e019      	b.n	8003362 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	2207      	movs	r2, #7
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	4019      	ands	r1, r3
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6898      	ldr	r0, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4413      	add	r3, r2
 8003356:	fa00 f203 	lsl.w	r2, r0, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b10      	cmp	r3, #16
 8003368:	d003      	beq.n	8003372 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800336e:	2b11      	cmp	r3, #17
 8003370:	d132      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <HAL_ADC_ConfigChannel+0x1e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d125      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d126      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003398:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b10      	cmp	r3, #16
 80033a0:	d11a      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033a2:	4b13      	ldr	r3, [pc, #76]	@ (80033f0 <HAL_ADC_ConfigChannel+0x1e8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a13      	ldr	r2, [pc, #76]	@ (80033f4 <HAL_ADC_ConfigChannel+0x1ec>)
 80033a8:	fba2 2303 	umull	r2, r3, r2, r3
 80033ac:	0c9a      	lsrs	r2, r3, #18
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033b8:	e002      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x1b2>
 80033c6:	e007      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	40012400 	.word	0x40012400
 80033f0:	20000008 	.word	0x20000008
 80033f4:	431bde83 	.word	0x431bde83

080033f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d040      	beq.n	8003498 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003426:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <ADC_Enable+0xac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <ADC_Enable+0xb0>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	0c9b      	lsrs	r3, r3, #18
 8003432:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003434:	e002      	b.n	800343c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3b01      	subs	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f9      	bne.n	8003436 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003442:	f7ff fbef 	bl	8002c24 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003448:	e01f      	b.n	800348a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800344a:	f7ff fbeb 	bl	8002c24 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d918      	bls.n	800348a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d011      	beq.n	800348a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	f043 0210 	orr.w	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	f043 0201 	orr.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e007      	b.n	800349a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	d1d8      	bne.n	800344a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000008 	.word	0x20000008
 80034a8:	431bde83 	.word	0x431bde83

080034ac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d12e      	bne.n	8003524 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034d6:	f7ff fba5 	bl	8002c24 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80034dc:	e01b      	b.n	8003516 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034de:	f7ff fba1 	bl	8002c24 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d914      	bls.n	8003516 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d10d      	bne.n	8003516 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e007      	b.n	8003526 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d0dc      	beq.n	80034de <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003540:	4b0c      	ldr	r3, [pc, #48]	@ (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800355c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003562:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	60d3      	str	r3, [r2, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <__NVIC_GetPriorityGrouping+0x18>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 0307 	and.w	r3, r3, #7
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db0b      	blt.n	80035be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4906      	ldr	r1, [pc, #24]	@ (80035c8 <__NVIC_EnableIRQ+0x34>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2001      	movs	r0, #1
 80035b6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	db0a      	blt.n	80035f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	490c      	ldr	r1, [pc, #48]	@ (8003618 <__NVIC_SetPriority+0x4c>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	440b      	add	r3, r1
 80035f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f4:	e00a      	b.n	800360c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4908      	ldr	r1, [pc, #32]	@ (800361c <__NVIC_SetPriority+0x50>)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	3b04      	subs	r3, #4
 8003604:	0112      	lsls	r2, r2, #4
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	440b      	add	r3, r1
 800360a:	761a      	strb	r2, [r3, #24]
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000e100 	.word	0xe000e100
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003620:	b480      	push	{r7}
 8003622:	b089      	sub	sp, #36	@ 0x24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f1c3 0307 	rsb	r3, r3, #7
 800363a:	2b04      	cmp	r3, #4
 800363c:	bf28      	it	cs
 800363e:	2304      	movcs	r3, #4
 8003640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3304      	adds	r3, #4
 8003646:	2b06      	cmp	r3, #6
 8003648:	d902      	bls.n	8003650 <NVIC_EncodePriority+0x30>
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	3b03      	subs	r3, #3
 800364e:	e000      	b.n	8003652 <NVIC_EncodePriority+0x32>
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	43da      	mvns	r2, r3
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	401a      	ands	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003668:	f04f 31ff 	mov.w	r1, #4294967295
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	43d9      	mvns	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	4313      	orrs	r3, r2
         );
}
 800367a:	4618      	mov	r0, r3
 800367c:	3724      	adds	r7, #36	@ 0x24
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	@ (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff90 	bl	80035cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	@ (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff2d 	bl	8003530 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff42 	bl	8003578 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff90 	bl	8003620 <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5f 	bl	80035cc <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff35 	bl	8003594 <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e043      	b.n	80037ea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	4b22      	ldr	r3, [pc, #136]	@ (80037f4 <HAL_DMA_Init+0xa8>)
 800376a:	4413      	add	r3, r2
 800376c:	4a22      	ldr	r2, [pc, #136]	@ (80037f8 <HAL_DMA_Init+0xac>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	091b      	lsrs	r3, r3, #4
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a1f      	ldr	r2, [pc, #124]	@ (80037fc <HAL_DMA_Init+0xb0>)
 800377e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003796:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800379a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	bffdfff8 	.word	0xbffdfff8
 80037f8:	cccccccd 	.word	0xcccccccd
 80037fc:	40020000 	.word	0x40020000

08003800 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	2204      	movs	r2, #4
 800381e:	409a      	lsls	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4013      	ands	r3, r2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d04f      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xc8>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d04a      	beq.n	80038c8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d107      	bne.n	8003850 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a66      	ldr	r2, [pc, #408]	@ (80039f0 <HAL_DMA_IRQHandler+0x1f0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d029      	beq.n	80038ae <HAL_DMA_IRQHandler+0xae>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <HAL_DMA_IRQHandler+0xaa>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a63      	ldr	r2, [pc, #396]	@ (80039f8 <HAL_DMA_IRQHandler+0x1f8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01a      	beq.n	80038a4 <HAL_DMA_IRQHandler+0xa4>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a62      	ldr	r2, [pc, #392]	@ (80039fc <HAL_DMA_IRQHandler+0x1fc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d012      	beq.n	800389e <HAL_DMA_IRQHandler+0x9e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a60      	ldr	r2, [pc, #384]	@ (8003a00 <HAL_DMA_IRQHandler+0x200>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00a      	beq.n	8003898 <HAL_DMA_IRQHandler+0x98>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a5f      	ldr	r2, [pc, #380]	@ (8003a04 <HAL_DMA_IRQHandler+0x204>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d102      	bne.n	8003892 <HAL_DMA_IRQHandler+0x92>
 800388c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003890:	e00e      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 8003892:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003896:	e00b      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 8003898:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800389c:	e008      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 800389e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80038a2:	e005      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 80038a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038a8:	e002      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 80038aa:	2340      	movs	r3, #64	@ 0x40
 80038ac:	e000      	b.n	80038b0 <HAL_DMA_IRQHandler+0xb0>
 80038ae:	2304      	movs	r3, #4
 80038b0:	4a55      	ldr	r2, [pc, #340]	@ (8003a08 <HAL_DMA_IRQHandler+0x208>)
 80038b2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8094 	beq.w	80039e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038c6:	e08e      	b.n	80039e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	2202      	movs	r2, #2
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d056      	beq.n	8003986 <HAL_DMA_IRQHandler+0x186>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d051      	beq.n	8003986 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10b      	bne.n	8003908 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 020a 	bic.w	r2, r2, #10
 80038fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a38      	ldr	r2, [pc, #224]	@ (80039f0 <HAL_DMA_IRQHandler+0x1f0>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d029      	beq.n	8003966 <HAL_DMA_IRQHandler+0x166>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a37      	ldr	r2, [pc, #220]	@ (80039f4 <HAL_DMA_IRQHandler+0x1f4>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x162>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a35      	ldr	r2, [pc, #212]	@ (80039f8 <HAL_DMA_IRQHandler+0x1f8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01a      	beq.n	800395c <HAL_DMA_IRQHandler+0x15c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a34      	ldr	r2, [pc, #208]	@ (80039fc <HAL_DMA_IRQHandler+0x1fc>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d012      	beq.n	8003956 <HAL_DMA_IRQHandler+0x156>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a32      	ldr	r2, [pc, #200]	@ (8003a00 <HAL_DMA_IRQHandler+0x200>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00a      	beq.n	8003950 <HAL_DMA_IRQHandler+0x150>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a31      	ldr	r2, [pc, #196]	@ (8003a04 <HAL_DMA_IRQHandler+0x204>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d102      	bne.n	800394a <HAL_DMA_IRQHandler+0x14a>
 8003944:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003948:	e00e      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 800394a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800394e:	e00b      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 8003950:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003954:	e008      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 8003956:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800395a:	e005      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 800395c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003960:	e002      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 8003962:	2320      	movs	r3, #32
 8003964:	e000      	b.n	8003968 <HAL_DMA_IRQHandler+0x168>
 8003966:	2302      	movs	r3, #2
 8003968:	4a27      	ldr	r2, [pc, #156]	@ (8003a08 <HAL_DMA_IRQHandler+0x208>)
 800396a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d034      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003984:	e02f      	b.n	80039e6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398a:	2208      	movs	r2, #8
 800398c:	409a      	lsls	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d028      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x1e8>
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d023      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 020e 	bic.w	r2, r2, #14
 80039ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	4798      	blx	r3
    }
  }
  return;
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
}
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40020008 	.word	0x40020008
 80039f4:	4002001c 	.word	0x4002001c
 80039f8:	40020030 	.word	0x40020030
 80039fc:	40020044 	.word	0x40020044
 8003a00:	40020058 	.word	0x40020058
 8003a04:	4002006c 	.word	0x4002006c
 8003a08:	40020000 	.word	0x40020000

08003a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b08b      	sub	sp, #44	@ 0x2c
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1e:	e169      	b.n	8003cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a20:	2201      	movs	r2, #1
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 8158 	bne.w	8003cee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4a9a      	ldr	r2, [pc, #616]	@ (8003cac <HAL_GPIO_Init+0x2a0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d05e      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
 8003a48:	4a98      	ldr	r2, [pc, #608]	@ (8003cac <HAL_GPIO_Init+0x2a0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d875      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a4e:	4a98      	ldr	r2, [pc, #608]	@ (8003cb0 <HAL_GPIO_Init+0x2a4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d058      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
 8003a54:	4a96      	ldr	r2, [pc, #600]	@ (8003cb0 <HAL_GPIO_Init+0x2a4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d86f      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a5a:	4a96      	ldr	r2, [pc, #600]	@ (8003cb4 <HAL_GPIO_Init+0x2a8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d052      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
 8003a60:	4a94      	ldr	r2, [pc, #592]	@ (8003cb4 <HAL_GPIO_Init+0x2a8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d869      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a66:	4a94      	ldr	r2, [pc, #592]	@ (8003cb8 <HAL_GPIO_Init+0x2ac>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d04c      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
 8003a6c:	4a92      	ldr	r2, [pc, #584]	@ (8003cb8 <HAL_GPIO_Init+0x2ac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d863      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a72:	4a92      	ldr	r2, [pc, #584]	@ (8003cbc <HAL_GPIO_Init+0x2b0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d046      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
 8003a78:	4a90      	ldr	r2, [pc, #576]	@ (8003cbc <HAL_GPIO_Init+0x2b0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d85d      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a7e:	2b12      	cmp	r3, #18
 8003a80:	d82a      	bhi.n	8003ad8 <HAL_GPIO_Init+0xcc>
 8003a82:	2b12      	cmp	r3, #18
 8003a84:	d859      	bhi.n	8003b3a <HAL_GPIO_Init+0x12e>
 8003a86:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <HAL_GPIO_Init+0x80>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003b07 	.word	0x08003b07
 8003a90:	08003ae1 	.word	0x08003ae1
 8003a94:	08003af3 	.word	0x08003af3
 8003a98:	08003b35 	.word	0x08003b35
 8003a9c:	08003b3b 	.word	0x08003b3b
 8003aa0:	08003b3b 	.word	0x08003b3b
 8003aa4:	08003b3b 	.word	0x08003b3b
 8003aa8:	08003b3b 	.word	0x08003b3b
 8003aac:	08003b3b 	.word	0x08003b3b
 8003ab0:	08003b3b 	.word	0x08003b3b
 8003ab4:	08003b3b 	.word	0x08003b3b
 8003ab8:	08003b3b 	.word	0x08003b3b
 8003abc:	08003b3b 	.word	0x08003b3b
 8003ac0:	08003b3b 	.word	0x08003b3b
 8003ac4:	08003b3b 	.word	0x08003b3b
 8003ac8:	08003b3b 	.word	0x08003b3b
 8003acc:	08003b3b 	.word	0x08003b3b
 8003ad0:	08003ae9 	.word	0x08003ae9
 8003ad4:	08003afd 	.word	0x08003afd
 8003ad8:	4a79      	ldr	r2, [pc, #484]	@ (8003cc0 <HAL_GPIO_Init+0x2b4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ade:	e02c      	b.n	8003b3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	623b      	str	r3, [r7, #32]
          break;
 8003ae6:	e029      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	3304      	adds	r3, #4
 8003aee:	623b      	str	r3, [r7, #32]
          break;
 8003af0:	e024      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	3308      	adds	r3, #8
 8003af8:	623b      	str	r3, [r7, #32]
          break;
 8003afa:	e01f      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	330c      	adds	r3, #12
 8003b02:	623b      	str	r3, [r7, #32]
          break;
 8003b04:	e01a      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d102      	bne.n	8003b14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b0e:	2304      	movs	r3, #4
 8003b10:	623b      	str	r3, [r7, #32]
          break;
 8003b12:	e013      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b1c:	2308      	movs	r3, #8
 8003b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	611a      	str	r2, [r3, #16]
          break;
 8003b26:	e009      	b.n	8003b3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b28:	2308      	movs	r3, #8
 8003b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69fa      	ldr	r2, [r7, #28]
 8003b30:	615a      	str	r2, [r3, #20]
          break;
 8003b32:	e003      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
          break;
 8003b38:	e000      	b.n	8003b3c <HAL_GPIO_Init+0x130>
          break;
 8003b3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	2bff      	cmp	r3, #255	@ 0xff
 8003b40:	d801      	bhi.n	8003b46 <HAL_GPIO_Init+0x13a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	e001      	b.n	8003b4a <HAL_GPIO_Init+0x13e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2bff      	cmp	r3, #255	@ 0xff
 8003b50:	d802      	bhi.n	8003b58 <HAL_GPIO_Init+0x14c>
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	e002      	b.n	8003b5e <HAL_GPIO_Init+0x152>
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	3b08      	subs	r3, #8
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	210f      	movs	r1, #15
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	401a      	ands	r2, r3
 8003b70:	6a39      	ldr	r1, [r7, #32]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80b1 	beq.w	8003cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8003cc4 <HAL_GPIO_Init+0x2b8>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	4a4c      	ldr	r2, [pc, #304]	@ (8003cc4 <HAL_GPIO_Init+0x2b8>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6193      	str	r3, [r2, #24]
 8003b98:	4b4a      	ldr	r3, [pc, #296]	@ (8003cc4 <HAL_GPIO_Init+0x2b8>)
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ba4:	4a48      	ldr	r2, [pc, #288]	@ (8003cc8 <HAL_GPIO_Init+0x2bc>)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <HAL_GPIO_Init+0x2c0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_GPIO_Init+0x1ec>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8003cd0 <HAL_GPIO_Init+0x2c4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_GPIO_Init+0x1e8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3e      	ldr	r2, [pc, #248]	@ (8003cd4 <HAL_GPIO_Init+0x2c8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_Init+0x1e4>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3d      	ldr	r2, [pc, #244]	@ (8003cd8 <HAL_GPIO_Init+0x2cc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d101      	bne.n	8003bec <HAL_GPIO_Init+0x1e0>
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <HAL_GPIO_Init+0x1ee>
 8003bec:	2304      	movs	r3, #4
 8003bee:	e004      	b.n	8003bfa <HAL_GPIO_Init+0x1ee>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_Init+0x1ee>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_GPIO_Init+0x1ee>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4093      	lsls	r3, r2
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c0a:	492f      	ldr	r1, [pc, #188]	@ (8003cc8 <HAL_GPIO_Init+0x2bc>)
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d006      	beq.n	8003c32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003c24:	4b2d      	ldr	r3, [pc, #180]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	492c      	ldr	r1, [pc, #176]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]
 8003c30:	e006      	b.n	8003c40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c32:	4b2a      	ldr	r3, [pc, #168]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	4928      	ldr	r1, [pc, #160]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d006      	beq.n	8003c5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c4c:	4b23      	ldr	r3, [pc, #140]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	4922      	ldr	r1, [pc, #136]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60cb      	str	r3, [r1, #12]
 8003c58:	e006      	b.n	8003c68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c5a:	4b20      	ldr	r3, [pc, #128]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	43db      	mvns	r3, r3
 8003c62:	491e      	ldr	r1, [pc, #120]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d006      	beq.n	8003c82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c74:	4b19      	ldr	r3, [pc, #100]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	4918      	ldr	r1, [pc, #96]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
 8003c80:	e006      	b.n	8003c90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c82:	4b16      	ldr	r3, [pc, #88]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	4914      	ldr	r1, [pc, #80]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d021      	beq.n	8003ce0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	490e      	ldr	r1, [pc, #56]	@ (8003cdc <HAL_GPIO_Init+0x2d0>)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	600b      	str	r3, [r1, #0]
 8003ca8:	e021      	b.n	8003cee <HAL_GPIO_Init+0x2e2>
 8003caa:	bf00      	nop
 8003cac:	10320000 	.word	0x10320000
 8003cb0:	10310000 	.word	0x10310000
 8003cb4:	10220000 	.word	0x10220000
 8003cb8:	10210000 	.word	0x10210000
 8003cbc:	10120000 	.word	0x10120000
 8003cc0:	10110000 	.word	0x10110000
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	40010000 	.word	0x40010000
 8003ccc:	40010800 	.word	0x40010800
 8003cd0:	40010c00 	.word	0x40010c00
 8003cd4:	40011000 	.word	0x40011000
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_GPIO_Init+0x304>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	4909      	ldr	r1, [pc, #36]	@ (8003d10 <HAL_GPIO_Init+0x304>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f ae8e 	bne.w	8003a20 <HAL_GPIO_Init+0x14>
  }
}
 8003d04:	bf00      	nop
 8003d06:	bf00      	nop
 8003d08:	372c      	adds	r7, #44	@ 0x2c
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr
 8003d10:	40010400 	.word	0x40010400

08003d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	e001      	b.n	8003d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc80      	pop	{r7}
 8003d40:	4770      	bx	lr

08003d42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	807b      	strh	r3, [r7, #2]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d52:	787b      	ldrb	r3, [r7, #1]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d58:	887a      	ldrh	r2, [r7, #2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d5e:	e003      	b.n	8003d68 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d60:	887b      	ldrh	r3, [r7, #2]
 8003d62:	041a      	lsls	r2, r3, #16
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	611a      	str	r2, [r3, #16]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr

08003d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d84:	887a      	ldrh	r2, [r7, #2]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	041a      	lsls	r2, r3, #16
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	43d9      	mvns	r1, r3
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	400b      	ands	r3, r1
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	611a      	str	r2, [r3, #16]
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e272      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8087 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc4:	4b92      	ldr	r3, [pc, #584]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d00c      	beq.n	8003dea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d112      	bne.n	8003e02 <HAL_RCC_OscConfig+0x5e>
 8003ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de8:	d10b      	bne.n	8003e02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dea:	4b89      	ldr	r3, [pc, #548]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d06c      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x12c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d168      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e24c      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCC_OscConfig+0x76>
 8003e0c:	4b80      	ldr	r3, [pc, #512]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a7f      	ldr	r2, [pc, #508]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	e02e      	b.n	8003e78 <HAL_RCC_OscConfig+0xd4>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x98>
 8003e22:	4b7b      	ldr	r3, [pc, #492]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7a      	ldr	r2, [pc, #488]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b78      	ldr	r3, [pc, #480]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a77      	ldr	r2, [pc, #476]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e01d      	b.n	8003e78 <HAL_RCC_OscConfig+0xd4>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e44:	d10c      	bne.n	8003e60 <HAL_RCC_OscConfig+0xbc>
 8003e46:	4b72      	ldr	r3, [pc, #456]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a71      	ldr	r2, [pc, #452]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e50:	6013      	str	r3, [r2, #0]
 8003e52:	4b6f      	ldr	r3, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a6e      	ldr	r2, [pc, #440]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCC_OscConfig+0xd4>
 8003e60:	4b6b      	ldr	r3, [pc, #428]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a6a      	ldr	r2, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b68      	ldr	r3, [pc, #416]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a67      	ldr	r2, [pc, #412]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d013      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7fe fed0 	bl	8002c24 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e88:	f7fe fecc 	bl	8002c24 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e200      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0xe4>
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe febc 	bl	8002c24 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fe feb8 	bl	8002c24 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	@ 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e1ec      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x10c>
 8003ece:	e000      	b.n	8003ed2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d063      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ede:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 030c 	and.w	r3, r3, #12
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eea:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f003 030c 	and.w	r3, r3, #12
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d11c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x18c>
 8003ef6:	4b46      	ldr	r3, [pc, #280]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_RCC_OscConfig+0x176>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d001      	beq.n	8003f1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e1c0      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4939      	ldr	r1, [pc, #228]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e03a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b36      	ldr	r3, [pc, #216]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fe fe71 	bl	8002c24 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f46:	f7fe fe6d 	bl	8002c24 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e1a1      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0f0      	beq.n	8003f46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f64:	4b2a      	ldr	r3, [pc, #168]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	4927      	ldr	r1, [pc, #156]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	600b      	str	r3, [r1, #0]
 8003f78:	e015      	b.n	8003fa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe fe50 	bl	8002c24 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fe fe4c 	bl	8002c24 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e180      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d03a      	beq.n	8004028 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d019      	beq.n	8003fee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fba:	4b17      	ldr	r3, [pc, #92]	@ (8004018 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc0:	f7fe fe30 	bl	8002c24 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc8:	f7fe fe2c 	bl	8002c24 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e160      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	4b0d      	ldr	r3, [pc, #52]	@ (8004010 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f0      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	f000 faba 	bl	8004560 <RCC_Delay>
 8003fec:	e01c      	b.n	8004028 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fee:	4b0a      	ldr	r3, [pc, #40]	@ (8004018 <HAL_RCC_OscConfig+0x274>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ff4:	f7fe fe16 	bl	8002c24 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffa:	e00f      	b.n	800401c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ffc:	f7fe fe12 	bl	8002c24 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d908      	bls.n	800401c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e146      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
 8004014:	42420000 	.word	0x42420000
 8004018:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b92      	ldr	r3, [pc, #584]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e9      	bne.n	8003ffc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a6 	beq.w	8004182 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800403a:	4b8b      	ldr	r3, [pc, #556]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004046:	4b88      	ldr	r3, [pc, #544]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4a87      	ldr	r2, [pc, #540]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004050:	61d3      	str	r3, [r2, #28]
 8004052:	4b85      	ldr	r3, [pc, #532]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405e:	2301      	movs	r3, #1
 8004060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004062:	4b82      	ldr	r3, [pc, #520]	@ (800426c <HAL_RCC_OscConfig+0x4c8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406a:	2b00      	cmp	r3, #0
 800406c:	d118      	bne.n	80040a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800406e:	4b7f      	ldr	r3, [pc, #508]	@ (800426c <HAL_RCC_OscConfig+0x4c8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a7e      	ldr	r2, [pc, #504]	@ (800426c <HAL_RCC_OscConfig+0x4c8>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407a:	f7fe fdd3 	bl	8002c24 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004082:	f7fe fdcf 	bl	8002c24 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b64      	cmp	r3, #100	@ 0x64
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e103      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004094:	4b75      	ldr	r3, [pc, #468]	@ (800426c <HAL_RCC_OscConfig+0x4c8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x312>
 80040a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6213      	str	r3, [r2, #32]
 80040b4:	e02d      	b.n	8004112 <HAL_RCC_OscConfig+0x36e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x334>
 80040be:	4b6a      	ldr	r3, [pc, #424]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4a69      	ldr	r2, [pc, #420]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	6213      	str	r3, [r2, #32]
 80040ca:	4b67      	ldr	r3, [pc, #412]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4a66      	ldr	r2, [pc, #408]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040d0:	f023 0304 	bic.w	r3, r3, #4
 80040d4:	6213      	str	r3, [r2, #32]
 80040d6:	e01c      	b.n	8004112 <HAL_RCC_OscConfig+0x36e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b05      	cmp	r3, #5
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x356>
 80040e0:	4b61      	ldr	r3, [pc, #388]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	4a60      	ldr	r2, [pc, #384]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040e6:	f043 0304 	orr.w	r3, r3, #4
 80040ea:	6213      	str	r3, [r2, #32]
 80040ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	6213      	str	r3, [r2, #32]
 80040f8:	e00b      	b.n	8004112 <HAL_RCC_OscConfig+0x36e>
 80040fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6213      	str	r3, [r2, #32]
 8004106:	4b58      	ldr	r3, [pc, #352]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	4a57      	ldr	r2, [pc, #348]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800410c:	f023 0304 	bic.w	r3, r3, #4
 8004110:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d015      	beq.n	8004146 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411a:	f7fe fd83 	bl	8002c24 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004120:	e00a      	b.n	8004138 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f7fe fd7f 	bl	8002c24 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004130:	4293      	cmp	r3, r2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e0b1      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ee      	beq.n	8004122 <HAL_RCC_OscConfig+0x37e>
 8004144:	e014      	b.n	8004170 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fe fd6d 	bl	8002c24 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fe fd69 	bl	8002c24 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e09b      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004164:	4b40      	ldr	r3, [pc, #256]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ee      	bne.n	800414e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004170:	7dfb      	ldrb	r3, [r7, #23]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d105      	bne.n	8004182 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004176:	4b3c      	ldr	r3, [pc, #240]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4a3b      	ldr	r2, [pc, #236]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800417c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004180:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8087 	beq.w	800429a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800418c:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b08      	cmp	r3, #8
 8004196:	d061      	beq.n	800425c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d146      	bne.n	800422e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b33      	ldr	r3, [pc, #204]	@ (8004270 <HAL_RCC_OscConfig+0x4cc>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fe fd3d 	bl	8002c24 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fe fd39 	bl	8002c24 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e06d      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c0:	4b29      	ldr	r3, [pc, #164]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d108      	bne.n	80041e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041d6:	4b24      	ldr	r3, [pc, #144]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	4921      	ldr	r1, [pc, #132]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a19      	ldr	r1, [r3, #32]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	430b      	orrs	r3, r1
 80041fa:	491b      	ldr	r1, [pc, #108]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004200:	4b1b      	ldr	r3, [pc, #108]	@ (8004270 <HAL_RCC_OscConfig+0x4cc>)
 8004202:	2201      	movs	r2, #1
 8004204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004206:	f7fe fd0d 	bl	8002c24 <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800420c:	e008      	b.n	8004220 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800420e:	f7fe fd09 	bl	8002c24 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03d      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004220:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d0f0      	beq.n	800420e <HAL_RCC_OscConfig+0x46a>
 800422c:	e035      	b.n	800429a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422e:	4b10      	ldr	r3, [pc, #64]	@ (8004270 <HAL_RCC_OscConfig+0x4cc>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7fe fcf6 	bl	8002c24 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423c:	f7fe fcf2 	bl	8002c24 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e026      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800424e:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <HAL_RCC_OscConfig+0x4c4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x498>
 800425a:	e01e      	b.n	800429a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e019      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
 8004268:	40021000 	.word	0x40021000
 800426c:	40007000 	.word	0x40007000
 8004270:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_RCC_OscConfig+0x500>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	429a      	cmp	r2, r3
 8004286:	d106      	bne.n	8004296 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40021000 	.word	0x40021000

080042a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0d0      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d910      	bls.n	80042ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ca:	4b67      	ldr	r3, [pc, #412]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f023 0207 	bic.w	r2, r3, #7
 80042d2:	4965      	ldr	r1, [pc, #404]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	4a58      	ldr	r2, [pc, #352]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800430e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	4a52      	ldr	r2, [pc, #328]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004326:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d040      	beq.n	80043c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d115      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d107      	bne.n	8004376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004366:	4b41      	ldr	r3, [pc, #260]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e073      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004376:	4b3d      	ldr	r3, [pc, #244]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e06b      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f023 0203 	bic.w	r2, r3, #3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	4936      	ldr	r1, [pc, #216]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004398:	f7fe fc44 	bl	8002c24 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a0:	f7fe fc40 	bl	8002c24 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e053      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b6:	4b2d      	ldr	r3, [pc, #180]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 020c 	and.w	r2, r3, #12
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1eb      	bne.n	80043a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043c8:	4b27      	ldr	r3, [pc, #156]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d210      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043d6:	4b24      	ldr	r3, [pc, #144]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 0207 	bic.w	r2, r3, #7
 80043de:	4922      	ldr	r1, [pc, #136]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	@ (8004468 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	@ (800446c <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	@ (8004470 <HAL_RCC_ClockConfig+0x1c8>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x1cc>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	@ (8004478 <HAL_RCC_ClockConfig+0x1d0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe fba2 	bl	8002ba0 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40022000 	.word	0x40022000
 800446c:	40021000 	.word	0x40021000
 8004470:	08009a94 	.word	0x08009a94
 8004474:	20000008 	.word	0x20000008
 8004478:	2000000c 	.word	0x2000000c

0800447c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004496:	4b1e      	ldr	r3, [pc, #120]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x94>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 030c 	and.w	r3, r3, #12
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d002      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x30>
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d003      	beq.n	80044b2 <HAL_RCC_GetSysClockFreq+0x36>
 80044aa:	e027      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x98>)
 80044ae:	613b      	str	r3, [r7, #16]
      break;
 80044b0:	e027      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0c9b      	lsrs	r3, r3, #18
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	4a17      	ldr	r2, [pc, #92]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d010      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044ca:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <HAL_RCC_GetSysClockFreq+0x94>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	0c5b      	lsrs	r3, r3, #17
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	4a11      	ldr	r2, [pc, #68]	@ (800451c <HAL_RCC_GetSysClockFreq+0xa0>)
 80044d6:	5cd3      	ldrb	r3, [r2, r3]
 80044d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x98>)
 80044de:	fb03 f202 	mul.w	r2, r3, r2
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e004      	b.n	80044f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004520 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	613b      	str	r3, [r7, #16]
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b05      	ldr	r3, [pc, #20]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x98>)
 80044fe:	613b      	str	r3, [r7, #16]
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	693b      	ldr	r3, [r7, #16]
}
 8004504:	4618      	mov	r0, r3
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40021000 	.word	0x40021000
 8004514:	007a1200 	.word	0x007a1200
 8004518:	08009aac 	.word	0x08009aac
 800451c:	08009abc 	.word	0x08009abc
 8004520:	003d0900 	.word	0x003d0900

08004524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004528:	4b02      	ldr	r3, [pc, #8]	@ (8004534 <HAL_RCC_GetHCLKFreq+0x10>)
 800452a:	681b      	ldr	r3, [r3, #0]
}
 800452c:	4618      	mov	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	20000008 	.word	0x20000008

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff fff2 	bl	8004524 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	@ (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	08009aa4 	.word	0x08009aa4

08004560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004568:	4b0a      	ldr	r3, [pc, #40]	@ (8004594 <RCC_Delay+0x34>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <RCC_Delay+0x38>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800457c:	bf00      	nop
  }
  while (Delay --);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e5a      	subs	r2, r3, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f9      	bne.n	800457c <RCC_Delay+0x1c>
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	20000008 	.word	0x20000008
 8004598:	10624dd3 	.word	0x10624dd3

0800459c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d07d      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045bc:	4b4f      	ldr	r3, [pc, #316]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10d      	bne.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c8:	4b4c      	ldr	r3, [pc, #304]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	4a4b      	ldr	r2, [pc, #300]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d2:	61d3      	str	r3, [r2, #28]
 80045d4:	4b49      	ldr	r3, [pc, #292]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045e0:	2301      	movs	r3, #1
 80045e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e4:	4b46      	ldr	r3, [pc, #280]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d118      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045f0:	4b43      	ldr	r3, [pc, #268]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a42      	ldr	r2, [pc, #264]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80045f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045fc:	f7fe fb12 	bl	8002c24 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004602:	e008      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004604:	f7fe fb0e 	bl	8002c24 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b64      	cmp	r3, #100	@ 0x64
 8004610:	d901      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e06d      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004616:	4b3a      	ldr	r3, [pc, #232]	@ (8004700 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004622:	4b36      	ldr	r3, [pc, #216]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800462a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02e      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d027      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004640:	4b2e      	ldr	r3, [pc, #184]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004648:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800464a:	4b2e      	ldr	r3, [pc, #184]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004650:	4b2c      	ldr	r3, [pc, #176]	@ (8004704 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004656:	4a29      	ldr	r2, [pc, #164]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d014      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fe fadd 	bl	8002c24 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	e00a      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fe fad9 	bl	8002c24 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e036      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004684:	4b1d      	ldr	r3, [pc, #116]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ee      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004690:	4b1a      	ldr	r3, [pc, #104]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4917      	ldr	r1, [pc, #92]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d105      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046a8:	4b14      	ldr	r3, [pc, #80]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4a13      	ldr	r2, [pc, #76]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80046c0:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	490b      	ldr	r1, [pc, #44]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046de:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	4904      	ldr	r1, [pc, #16]	@ (80046fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000
 8004700:	40007000 	.word	0x40007000
 8004704:	42420440 	.word	0x42420440

08004708 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	2300      	movs	r3, #0
 800471a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b10      	cmp	r3, #16
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b10      	cmp	r3, #16
 800472e:	f200 808a 	bhi.w	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d045      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d075      	beq.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800473e:	e082      	b.n	8004846 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004740:	4b46      	ldr	r3, [pc, #280]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004746:	4b45      	ldr	r3, [pc, #276]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07b      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	4a41      	ldr	r2, [pc, #260]	@ (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800475c:	5cd3      	ldrb	r3, [r2, r3]
 800475e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d015      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800476a:	4b3c      	ldr	r3, [pc, #240]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	0c5b      	lsrs	r3, r3, #17
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	4a3b      	ldr	r2, [pc, #236]	@ (8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004776:	5cd3      	ldrb	r3, [r2, r3]
 8004778:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00d      	beq.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004784:	4a38      	ldr	r2, [pc, #224]	@ (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	fbb2 f2f3 	udiv	r2, r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	e004      	b.n	80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4a34      	ldr	r2, [pc, #208]	@ (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80047a0:	4b2e      	ldr	r3, [pc, #184]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	61bb      	str	r3, [r7, #24]
      break;
 80047b2:	e04a      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
      break;
 80047c2:	e042      	b.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047d4:	d108      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80047e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	e01f      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80047f4:	4b19      	ldr	r3, [pc, #100]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80047f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004800:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	e00f      	b.n	8004828 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800480e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004812:	d11c      	bne.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004814:	4b11      	ldr	r3, [pc, #68]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d016      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004820:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004824:	61bb      	str	r3, [r7, #24]
      break;
 8004826:	e012      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004828:	e011      	b.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800482a:	f7ff fe85 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	0b9b      	lsrs	r3, r3, #14
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
      break;
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004846:	bf00      	nop
 8004848:	e002      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800484a:	bf00      	nop
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800484e:	bf00      	nop
    }
  }
  return (frequency);
 8004850:	69bb      	ldr	r3, [r7, #24]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	08009ac0 	.word	0x08009ac0
 8004864:	08009ad0 	.word	0x08009ad0
 8004868:	007a1200 	.word	0x007a1200
 800486c:	003d0900 	.word	0x003d0900
 8004870:	aaaaaaab 	.word	0xaaaaaaab

08004874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e041      	b.n	800490a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d106      	bne.n	80048a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f7fd ffaa 	bl	80027f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f000 fc30 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	d001      	beq.n	800492c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e03a      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a18      	ldr	r2, [pc, #96]	@ (80049ac <HAL_TIM_Base_Start_IT+0x98>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x58>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004956:	d009      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x58>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a14      	ldr	r2, [pc, #80]	@ (80049b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x58>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a13      	ldr	r2, [pc, #76]	@ (80049b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d111      	bne.n	8004990 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b06      	cmp	r3, #6
 800497c:	d010      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498e:	e007      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0201 	orr.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800

080049b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e041      	b.n	8004a4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f839 	bl	8004a56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3304      	adds	r3, #4
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f000 fb8e 	bl	8005118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <HAL_TIM_PWM_Start+0x24>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	bf14      	ite	ne
 8004a84:	2301      	movne	r3, #1
 8004a86:	2300      	moveq	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e022      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d109      	bne.n	8004aa6 <HAL_TIM_PWM_Start+0x3e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e015      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d109      	bne.n	8004ac0 <HAL_TIM_PWM_Start+0x58>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	e008      	b.n	8004ad2 <HAL_TIM_PWM_Start+0x6a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	bf14      	ite	ne
 8004acc:	2301      	movne	r3, #1
 8004ace:	2300      	moveq	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e05e      	b.n	8004b98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <HAL_TIM_PWM_Start+0x82>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ae8:	e013      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d104      	bne.n	8004afa <HAL_TIM_PWM_Start+0x92>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af8:	e00b      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d104      	bne.n	8004b0a <HAL_TIM_PWM_Start+0xa2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b08:	e003      	b.n	8004b12 <HAL_TIM_PWM_Start+0xaa>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	6839      	ldr	r1, [r7, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fd7c 	bl	8005618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ba0 <HAL_TIM_PWM_Start+0x138>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d107      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <HAL_TIM_PWM_Start+0x138>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a14      	ldr	r2, [pc, #80]	@ (8004ba4 <HAL_TIM_PWM_Start+0x13c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIM_PWM_Start+0xfa>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ba8 <HAL_TIM_PWM_Start+0x140>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d111      	bne.n	8004b86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2b06      	cmp	r3, #6
 8004b72:	d010      	beq.n	8004b96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0201 	orr.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b84:	e007      	b.n	8004b96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800

08004bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d122      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0202 	mvn.w	r2, #2
 8004bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa76 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa69 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fa78 	bl	80050f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d122      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d11b      	bne.n	8004c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0204 	mvn.w	r2, #4
 8004c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2202      	movs	r2, #2
 8004c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa4c 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004c48:	e005      	b.n	8004c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa3f 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa4e 	bl	80050f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d122      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d11b      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0208 	mvn.w	r2, #8
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2204      	movs	r2, #4
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 fa22 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fa15 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fa24 	bl	80050f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	2b10      	cmp	r3, #16
 8004cbc:	d122      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d11b      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0210 	mvn.w	r2, #16
 8004cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9f8 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004cf0:	e005      	b.n	8004cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f9eb 	bl	80050ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f9fa 	bl	80050f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d10e      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d107      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0201 	mvn.w	r2, #1
 8004d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fefe 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b80      	cmp	r3, #128	@ 0x80
 8004d3c:	d10e      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d48:	2b80      	cmp	r3, #128	@ 0x80
 8004d4a:	d107      	bne.n	8004d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fce9 	bl	800572e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d10e      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d107      	bne.n	8004d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f9be 	bl	8005104 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d10e      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b20      	cmp	r3, #32
 8004da2:	d107      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0220 	mvn.w	r2, #32
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fcb4 	bl	800571c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e0ae      	b.n	8004f38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b0c      	cmp	r3, #12
 8004de6:	f200 809f 	bhi.w	8004f28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e25 	.word	0x08004e25
 8004df4:	08004f29 	.word	0x08004f29
 8004df8:	08004f29 	.word	0x08004f29
 8004dfc:	08004f29 	.word	0x08004f29
 8004e00:	08004e65 	.word	0x08004e65
 8004e04:	08004f29 	.word	0x08004f29
 8004e08:	08004f29 	.word	0x08004f29
 8004e0c:	08004f29 	.word	0x08004f29
 8004e10:	08004ea7 	.word	0x08004ea7
 8004e14:	08004f29 	.word	0x08004f29
 8004e18:	08004f29 	.word	0x08004f29
 8004e1c:	08004f29 	.word	0x08004f29
 8004e20:	08004ee7 	.word	0x08004ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f9d6 	bl	80051dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0208 	orr.w	r2, r2, #8
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0204 	bic.w	r2, r2, #4
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	619a      	str	r2, [r3, #24]
      break;
 8004e62:	e064      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fa1c 	bl	80052a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	699a      	ldr	r2, [r3, #24]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6999      	ldr	r1, [r3, #24]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	619a      	str	r2, [r3, #24]
      break;
 8004ea4:	e043      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fa65 	bl	800537c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0208 	orr.w	r2, r2, #8
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0204 	bic.w	r2, r2, #4
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	61da      	str	r2, [r3, #28]
      break;
 8004ee4:	e023      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 faaf 	bl	8005450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69da      	ldr	r2, [r3, #28]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69d9      	ldr	r1, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	021a      	lsls	r2, r3, #8
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	61da      	str	r2, [r3, #28]
      break;
 8004f26:	e002      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3718      	adds	r7, #24
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_TIM_ConfigClockSource+0x1c>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	e0b4      	b.n	80050c6 <HAL_TIM_ConfigClockSource+0x186>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f94:	d03e      	beq.n	8005014 <HAL_TIM_ConfigClockSource+0xd4>
 8004f96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f9a:	f200 8087 	bhi.w	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa2:	f000 8086 	beq.w	80050b2 <HAL_TIM_ConfigClockSource+0x172>
 8004fa6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004faa:	d87f      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fac:	2b70      	cmp	r3, #112	@ 0x70
 8004fae:	d01a      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0xa6>
 8004fb0:	2b70      	cmp	r3, #112	@ 0x70
 8004fb2:	d87b      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fb4:	2b60      	cmp	r3, #96	@ 0x60
 8004fb6:	d050      	beq.n	800505a <HAL_TIM_ConfigClockSource+0x11a>
 8004fb8:	2b60      	cmp	r3, #96	@ 0x60
 8004fba:	d877      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fbc:	2b50      	cmp	r3, #80	@ 0x50
 8004fbe:	d03c      	beq.n	800503a <HAL_TIM_ConfigClockSource+0xfa>
 8004fc0:	2b50      	cmp	r3, #80	@ 0x50
 8004fc2:	d873      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fc4:	2b40      	cmp	r3, #64	@ 0x40
 8004fc6:	d058      	beq.n	800507a <HAL_TIM_ConfigClockSource+0x13a>
 8004fc8:	2b40      	cmp	r3, #64	@ 0x40
 8004fca:	d86f      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fcc:	2b30      	cmp	r3, #48	@ 0x30
 8004fce:	d064      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x15a>
 8004fd0:	2b30      	cmp	r3, #48	@ 0x30
 8004fd2:	d86b      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fd4:	2b20      	cmp	r3, #32
 8004fd6:	d060      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x15a>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d867      	bhi.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d05c      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x15a>
 8004fe0:	2b10      	cmp	r3, #16
 8004fe2:	d05a      	beq.n	800509a <HAL_TIM_ConfigClockSource+0x15a>
 8004fe4:	e062      	b.n	80050ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ff6:	f000 faf0 	bl	80055da <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005008:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	609a      	str	r2, [r3, #8]
      break;
 8005012:	e04f      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005024:	f000 fad9 	bl	80055da <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005036:	609a      	str	r2, [r3, #8]
      break;
 8005038:	e03c      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005046:	461a      	mov	r2, r3
 8005048:	f000 fa50 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2150      	movs	r1, #80	@ 0x50
 8005052:	4618      	mov	r0, r3
 8005054:	f000 faa7 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005058:	e02c      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005066:	461a      	mov	r2, r3
 8005068:	f000 fa6e 	bl	8005548 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2160      	movs	r1, #96	@ 0x60
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fa97 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005078:	e01c      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	461a      	mov	r2, r3
 8005088:	f000 fa30 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2140      	movs	r1, #64	@ 0x40
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fa87 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 8005098:	e00c      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f000 fa7e 	bl	80055a6 <TIM_ITRx_SetConfig>
      break;
 80050aa:	e003      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      break;
 80050b0:	e000      	b.n	80050b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bc80      	pop	{r7}
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr

08005104 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
	...

08005118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a29      	ldr	r2, [pc, #164]	@ (80051d0 <TIM_Base_SetConfig+0xb8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <TIM_Base_SetConfig+0xbc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x30>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a25      	ldr	r2, [pc, #148]	@ (80051d8 <TIM_Base_SetConfig+0xc0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1c      	ldr	r2, [pc, #112]	@ (80051d0 <TIM_Base_SetConfig+0xb8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00b      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005168:	d007      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <TIM_Base_SetConfig+0xbc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d003      	beq.n	800517a <TIM_Base_SetConfig+0x62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <TIM_Base_SetConfig+0xc0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d108      	bne.n	800518c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	4313      	orrs	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	689a      	ldr	r2, [r3, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a07      	ldr	r2, [pc, #28]	@ (80051d0 <TIM_Base_SetConfig+0xb8>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d103      	bne.n	80051c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	615a      	str	r2, [r3, #20]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800

080051dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0201 	bic.w	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f023 0302 	bic.w	r3, r3, #2
 8005224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d10c      	bne.n	8005252 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	f023 0308 	bic.w	r3, r3, #8
 800523e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 0304 	bic.w	r3, r3, #4
 8005250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a13      	ldr	r2, [pc, #76]	@ (80052a4 <TIM_OC1_SetConfig+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d111      	bne.n	800527e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00

080052a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f023 0210 	bic.w	r2, r3, #16
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a1d      	ldr	r2, [pc, #116]	@ (8005378 <TIM_OC2_SetConfig+0xd0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10d      	bne.n	8005324 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a14      	ldr	r2, [pc, #80]	@ (8005378 <TIM_OC2_SetConfig+0xd0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d113      	bne.n	8005354 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800533a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	621a      	str	r2, [r3, #32]
}
 800536e:	bf00      	nop
 8005370:	371c      	adds	r7, #28
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr
 8005378:	40012c00 	.word	0x40012c00

0800537c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0303 	bic.w	r3, r3, #3
 80053b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1d      	ldr	r2, [pc, #116]	@ (800544c <TIM_OC3_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10d      	bne.n	80053f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <TIM_OC3_SetConfig+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d113      	bne.n	8005426 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800540c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	621a      	str	r2, [r3, #32]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	bc80      	pop	{r7}
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40012c00 	.word	0x40012c00

08005450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800547e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0f      	ldr	r2, [pc, #60]	@ (80054e8 <TIM_OC4_SetConfig+0x98>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	019b      	lsls	r3, r3, #6
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f023 0210 	bic.w	r2, r3, #16
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	031b      	lsls	r3, r3, #12
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005584:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	621a      	str	r2, [r3, #32]
}
 800559c:	bf00      	nop
 800559e:	371c      	adds	r7, #28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr

080055a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f043 0307 	orr.w	r3, r3, #7
 80055c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	609a      	str	r2, [r3, #8]
}
 80055d0:	bf00      	nop
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr

080055da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
 80055e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	021a      	lsls	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4313      	orrs	r3, r2
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4313      	orrs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	609a      	str	r2, [r3, #8]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005618:	b480      	push	{r7}
 800561a:	b087      	sub	sp, #28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	2201      	movs	r2, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6a1a      	ldr	r2, [r3, #32]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	43db      	mvns	r3, r3
 800563a:	401a      	ands	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1a      	ldr	r2, [r3, #32]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	431a      	orrs	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	621a      	str	r2, [r3, #32]
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005674:	2302      	movs	r3, #2
 8005676:	e046      	b.n	8005706 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056c4:	d009      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a12      	ldr	r2, [pc, #72]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a10      	ldr	r2, [pc, #64]	@ (8005718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10c      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40012c00 	.word	0x40012c00
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800

0800571c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr

0800572e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <atof>:
 8005740:	2100      	movs	r1, #0
 8005742:	f000 bdf9 	b.w	8006338 <strtod>

08005746 <sulp>:
 8005746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800574a:	460f      	mov	r7, r1
 800574c:	4690      	mov	r8, r2
 800574e:	f003 fa43 	bl	8008bd8 <__ulp>
 8005752:	4604      	mov	r4, r0
 8005754:	460d      	mov	r5, r1
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	d011      	beq.n	8005780 <sulp+0x3a>
 800575c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005760:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005764:	2b00      	cmp	r3, #0
 8005766:	dd0b      	ble.n	8005780 <sulp+0x3a>
 8005768:	2400      	movs	r4, #0
 800576a:	051b      	lsls	r3, r3, #20
 800576c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005770:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005774:	4622      	mov	r2, r4
 8005776:	462b      	mov	r3, r5
 8005778:	f7fa feae 	bl	80004d8 <__aeabi_dmul>
 800577c:	4604      	mov	r4, r0
 800577e:	460d      	mov	r5, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005788 <_strtod_l>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	b09f      	sub	sp, #124	@ 0x7c
 800578e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005790:	2200      	movs	r2, #0
 8005792:	460c      	mov	r4, r1
 8005794:	921a      	str	r2, [sp, #104]	@ 0x68
 8005796:	f04f 0a00 	mov.w	sl, #0
 800579a:	f04f 0b00 	mov.w	fp, #0
 800579e:	460a      	mov	r2, r1
 80057a0:	9005      	str	r0, [sp, #20]
 80057a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80057a4:	7811      	ldrb	r1, [r2, #0]
 80057a6:	292b      	cmp	r1, #43	@ 0x2b
 80057a8:	d048      	beq.n	800583c <_strtod_l+0xb4>
 80057aa:	d836      	bhi.n	800581a <_strtod_l+0x92>
 80057ac:	290d      	cmp	r1, #13
 80057ae:	d830      	bhi.n	8005812 <_strtod_l+0x8a>
 80057b0:	2908      	cmp	r1, #8
 80057b2:	d830      	bhi.n	8005816 <_strtod_l+0x8e>
 80057b4:	2900      	cmp	r1, #0
 80057b6:	d039      	beq.n	800582c <_strtod_l+0xa4>
 80057b8:	2200      	movs	r2, #0
 80057ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 80057bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80057be:	782a      	ldrb	r2, [r5, #0]
 80057c0:	2a30      	cmp	r2, #48	@ 0x30
 80057c2:	f040 80b1 	bne.w	8005928 <_strtod_l+0x1a0>
 80057c6:	786a      	ldrb	r2, [r5, #1]
 80057c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80057cc:	2a58      	cmp	r2, #88	@ 0x58
 80057ce:	d16c      	bne.n	80058aa <_strtod_l+0x122>
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057d4:	4a8e      	ldr	r2, [pc, #568]	@ (8005a10 <_strtod_l+0x288>)
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	ab1a      	add	r3, sp, #104	@ 0x68
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	9805      	ldr	r0, [sp, #20]
 80057de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80057e0:	a919      	add	r1, sp, #100	@ 0x64
 80057e2:	f002 faed 	bl	8007dc0 <__gethex>
 80057e6:	f010 060f 	ands.w	r6, r0, #15
 80057ea:	4604      	mov	r4, r0
 80057ec:	d005      	beq.n	80057fa <_strtod_l+0x72>
 80057ee:	2e06      	cmp	r6, #6
 80057f0:	d126      	bne.n	8005840 <_strtod_l+0xb8>
 80057f2:	2300      	movs	r3, #0
 80057f4:	3501      	adds	r5, #1
 80057f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80057f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f040 8584 	bne.w	800630a <_strtod_l+0xb82>
 8005802:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005804:	b1bb      	cbz	r3, 8005836 <_strtod_l+0xae>
 8005806:	4650      	mov	r0, sl
 8005808:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800580c:	b01f      	add	sp, #124	@ 0x7c
 800580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005812:	2920      	cmp	r1, #32
 8005814:	d1d0      	bne.n	80057b8 <_strtod_l+0x30>
 8005816:	3201      	adds	r2, #1
 8005818:	e7c3      	b.n	80057a2 <_strtod_l+0x1a>
 800581a:	292d      	cmp	r1, #45	@ 0x2d
 800581c:	d1cc      	bne.n	80057b8 <_strtod_l+0x30>
 800581e:	2101      	movs	r1, #1
 8005820:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005822:	1c51      	adds	r1, r2, #1
 8005824:	9119      	str	r1, [sp, #100]	@ 0x64
 8005826:	7852      	ldrb	r2, [r2, #1]
 8005828:	2a00      	cmp	r2, #0
 800582a:	d1c7      	bne.n	80057bc <_strtod_l+0x34>
 800582c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800582e:	9419      	str	r4, [sp, #100]	@ 0x64
 8005830:	2b00      	cmp	r3, #0
 8005832:	f040 8568 	bne.w	8006306 <_strtod_l+0xb7e>
 8005836:	4650      	mov	r0, sl
 8005838:	4659      	mov	r1, fp
 800583a:	e7e7      	b.n	800580c <_strtod_l+0x84>
 800583c:	2100      	movs	r1, #0
 800583e:	e7ef      	b.n	8005820 <_strtod_l+0x98>
 8005840:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005842:	b13a      	cbz	r2, 8005854 <_strtod_l+0xcc>
 8005844:	2135      	movs	r1, #53	@ 0x35
 8005846:	a81c      	add	r0, sp, #112	@ 0x70
 8005848:	f003 fab6 	bl	8008db8 <__copybits>
 800584c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800584e:	9805      	ldr	r0, [sp, #20]
 8005850:	f002 fe90 	bl	8008574 <_Bfree>
 8005854:	3e01      	subs	r6, #1
 8005856:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005858:	2e04      	cmp	r6, #4
 800585a:	d806      	bhi.n	800586a <_strtod_l+0xe2>
 800585c:	e8df f006 	tbb	[pc, r6]
 8005860:	201d0314 	.word	0x201d0314
 8005864:	14          	.byte	0x14
 8005865:	00          	.byte	0x00
 8005866:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800586a:	05e1      	lsls	r1, r4, #23
 800586c:	bf48      	it	mi
 800586e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005872:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005876:	0d1b      	lsrs	r3, r3, #20
 8005878:	051b      	lsls	r3, r3, #20
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1bd      	bne.n	80057fa <_strtod_l+0x72>
 800587e:	f001 fb4d 	bl	8006f1c <__errno>
 8005882:	2322      	movs	r3, #34	@ 0x22
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	e7b8      	b.n	80057fa <_strtod_l+0x72>
 8005888:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800588c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005890:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005894:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005898:	e7e7      	b.n	800586a <_strtod_l+0xe2>
 800589a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005a14 <_strtod_l+0x28c>
 800589e:	e7e4      	b.n	800586a <_strtod_l+0xe2>
 80058a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80058a4:	f04f 3aff 	mov.w	sl, #4294967295
 80058a8:	e7df      	b.n	800586a <_strtod_l+0xe2>
 80058aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058ac:	1c5a      	adds	r2, r3, #1
 80058ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	2b30      	cmp	r3, #48	@ 0x30
 80058b4:	d0f9      	beq.n	80058aa <_strtod_l+0x122>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d09f      	beq.n	80057fa <_strtod_l+0x72>
 80058ba:	2301      	movs	r3, #1
 80058bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80058be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058c0:	220a      	movs	r2, #10
 80058c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80058c4:	2300      	movs	r3, #0
 80058c6:	461f      	mov	r7, r3
 80058c8:	9308      	str	r3, [sp, #32]
 80058ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80058cc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80058ce:	7805      	ldrb	r5, [r0, #0]
 80058d0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80058d4:	b2d9      	uxtb	r1, r3
 80058d6:	2909      	cmp	r1, #9
 80058d8:	d928      	bls.n	800592c <_strtod_l+0x1a4>
 80058da:	2201      	movs	r2, #1
 80058dc:	494e      	ldr	r1, [pc, #312]	@ (8005a18 <_strtod_l+0x290>)
 80058de:	f001 fac0 	bl	8006e62 <strncmp>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d032      	beq.n	800594c <_strtod_l+0x1c4>
 80058e6:	2000      	movs	r0, #0
 80058e8:	462a      	mov	r2, r5
 80058ea:	4681      	mov	r9, r0
 80058ec:	463d      	mov	r5, r7
 80058ee:	4603      	mov	r3, r0
 80058f0:	2a65      	cmp	r2, #101	@ 0x65
 80058f2:	d001      	beq.n	80058f8 <_strtod_l+0x170>
 80058f4:	2a45      	cmp	r2, #69	@ 0x45
 80058f6:	d114      	bne.n	8005922 <_strtod_l+0x19a>
 80058f8:	b91d      	cbnz	r5, 8005902 <_strtod_l+0x17a>
 80058fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058fc:	4302      	orrs	r2, r0
 80058fe:	d095      	beq.n	800582c <_strtod_l+0xa4>
 8005900:	2500      	movs	r5, #0
 8005902:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005904:	1c62      	adds	r2, r4, #1
 8005906:	9219      	str	r2, [sp, #100]	@ 0x64
 8005908:	7862      	ldrb	r2, [r4, #1]
 800590a:	2a2b      	cmp	r2, #43	@ 0x2b
 800590c:	d077      	beq.n	80059fe <_strtod_l+0x276>
 800590e:	2a2d      	cmp	r2, #45	@ 0x2d
 8005910:	d07b      	beq.n	8005a0a <_strtod_l+0x282>
 8005912:	f04f 0c00 	mov.w	ip, #0
 8005916:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800591a:	2909      	cmp	r1, #9
 800591c:	f240 8082 	bls.w	8005a24 <_strtod_l+0x29c>
 8005920:	9419      	str	r4, [sp, #100]	@ 0x64
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	e0a2      	b.n	8005a6e <_strtod_l+0x2e6>
 8005928:	2300      	movs	r3, #0
 800592a:	e7c7      	b.n	80058bc <_strtod_l+0x134>
 800592c:	2f08      	cmp	r7, #8
 800592e:	bfd5      	itete	le
 8005930:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005932:	9908      	ldrgt	r1, [sp, #32]
 8005934:	fb02 3301 	mlale	r3, r2, r1, r3
 8005938:	fb02 3301 	mlagt	r3, r2, r1, r3
 800593c:	f100 0001 	add.w	r0, r0, #1
 8005940:	bfd4      	ite	le
 8005942:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005944:	9308      	strgt	r3, [sp, #32]
 8005946:	3701      	adds	r7, #1
 8005948:	9019      	str	r0, [sp, #100]	@ 0x64
 800594a:	e7bf      	b.n	80058cc <_strtod_l+0x144>
 800594c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	9219      	str	r2, [sp, #100]	@ 0x64
 8005952:	785a      	ldrb	r2, [r3, #1]
 8005954:	b37f      	cbz	r7, 80059b6 <_strtod_l+0x22e>
 8005956:	4681      	mov	r9, r0
 8005958:	463d      	mov	r5, r7
 800595a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800595e:	2b09      	cmp	r3, #9
 8005960:	d912      	bls.n	8005988 <_strtod_l+0x200>
 8005962:	2301      	movs	r3, #1
 8005964:	e7c4      	b.n	80058f0 <_strtod_l+0x168>
 8005966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005968:	3001      	adds	r0, #1
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	9219      	str	r2, [sp, #100]	@ 0x64
 800596e:	785a      	ldrb	r2, [r3, #1]
 8005970:	2a30      	cmp	r2, #48	@ 0x30
 8005972:	d0f8      	beq.n	8005966 <_strtod_l+0x1de>
 8005974:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005978:	2b08      	cmp	r3, #8
 800597a:	f200 84cb 	bhi.w	8006314 <_strtod_l+0xb8c>
 800597e:	4681      	mov	r9, r0
 8005980:	2000      	movs	r0, #0
 8005982:	4605      	mov	r5, r0
 8005984:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005986:	930c      	str	r3, [sp, #48]	@ 0x30
 8005988:	3a30      	subs	r2, #48	@ 0x30
 800598a:	f100 0301 	add.w	r3, r0, #1
 800598e:	d02a      	beq.n	80059e6 <_strtod_l+0x25e>
 8005990:	4499      	add	r9, r3
 8005992:	210a      	movs	r1, #10
 8005994:	462b      	mov	r3, r5
 8005996:	eb00 0c05 	add.w	ip, r0, r5
 800599a:	4563      	cmp	r3, ip
 800599c:	d10d      	bne.n	80059ba <_strtod_l+0x232>
 800599e:	1c69      	adds	r1, r5, #1
 80059a0:	4401      	add	r1, r0
 80059a2:	4428      	add	r0, r5
 80059a4:	2808      	cmp	r0, #8
 80059a6:	dc16      	bgt.n	80059d6 <_strtod_l+0x24e>
 80059a8:	230a      	movs	r3, #10
 80059aa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80059ac:	fb03 2300 	mla	r3, r3, r0, r2
 80059b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80059b2:	2300      	movs	r3, #0
 80059b4:	e018      	b.n	80059e8 <_strtod_l+0x260>
 80059b6:	4638      	mov	r0, r7
 80059b8:	e7da      	b.n	8005970 <_strtod_l+0x1e8>
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	f103 0301 	add.w	r3, r3, #1
 80059c0:	dc03      	bgt.n	80059ca <_strtod_l+0x242>
 80059c2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80059c4:	434e      	muls	r6, r1
 80059c6:	960a      	str	r6, [sp, #40]	@ 0x28
 80059c8:	e7e7      	b.n	800599a <_strtod_l+0x212>
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	bfde      	ittt	le
 80059ce:	9e08      	ldrle	r6, [sp, #32]
 80059d0:	434e      	mulle	r6, r1
 80059d2:	9608      	strle	r6, [sp, #32]
 80059d4:	e7e1      	b.n	800599a <_strtod_l+0x212>
 80059d6:	280f      	cmp	r0, #15
 80059d8:	dceb      	bgt.n	80059b2 <_strtod_l+0x22a>
 80059da:	230a      	movs	r3, #10
 80059dc:	9808      	ldr	r0, [sp, #32]
 80059de:	fb03 2300 	mla	r3, r3, r0, r2
 80059e2:	9308      	str	r3, [sp, #32]
 80059e4:	e7e5      	b.n	80059b2 <_strtod_l+0x22a>
 80059e6:	4629      	mov	r1, r5
 80059e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059ea:	460d      	mov	r5, r1
 80059ec:	1c50      	adds	r0, r2, #1
 80059ee:	9019      	str	r0, [sp, #100]	@ 0x64
 80059f0:	7852      	ldrb	r2, [r2, #1]
 80059f2:	4618      	mov	r0, r3
 80059f4:	e7b1      	b.n	800595a <_strtod_l+0x1d2>
 80059f6:	f04f 0900 	mov.w	r9, #0
 80059fa:	2301      	movs	r3, #1
 80059fc:	e77d      	b.n	80058fa <_strtod_l+0x172>
 80059fe:	f04f 0c00 	mov.w	ip, #0
 8005a02:	1ca2      	adds	r2, r4, #2
 8005a04:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a06:	78a2      	ldrb	r2, [r4, #2]
 8005a08:	e785      	b.n	8005916 <_strtod_l+0x18e>
 8005a0a:	f04f 0c01 	mov.w	ip, #1
 8005a0e:	e7f8      	b.n	8005a02 <_strtod_l+0x27a>
 8005a10:	08009ae8 	.word	0x08009ae8
 8005a14:	7ff00000 	.word	0x7ff00000
 8005a18:	08009ad2 	.word	0x08009ad2
 8005a1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a1e:	1c51      	adds	r1, r2, #1
 8005a20:	9119      	str	r1, [sp, #100]	@ 0x64
 8005a22:	7852      	ldrb	r2, [r2, #1]
 8005a24:	2a30      	cmp	r2, #48	@ 0x30
 8005a26:	d0f9      	beq.n	8005a1c <_strtod_l+0x294>
 8005a28:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005a2c:	2908      	cmp	r1, #8
 8005a2e:	f63f af78 	bhi.w	8005922 <_strtod_l+0x19a>
 8005a32:	f04f 080a 	mov.w	r8, #10
 8005a36:	3a30      	subs	r2, #48	@ 0x30
 8005a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a3a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a3c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005a3e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005a40:	1c56      	adds	r6, r2, #1
 8005a42:	9619      	str	r6, [sp, #100]	@ 0x64
 8005a44:	7852      	ldrb	r2, [r2, #1]
 8005a46:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005a4a:	f1be 0f09 	cmp.w	lr, #9
 8005a4e:	d939      	bls.n	8005ac4 <_strtod_l+0x33c>
 8005a50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a52:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005a56:	1a76      	subs	r6, r6, r1
 8005a58:	2e08      	cmp	r6, #8
 8005a5a:	dc03      	bgt.n	8005a64 <_strtod_l+0x2dc>
 8005a5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005a5e:	4588      	cmp	r8, r1
 8005a60:	bfa8      	it	ge
 8005a62:	4688      	movge	r8, r1
 8005a64:	f1bc 0f00 	cmp.w	ip, #0
 8005a68:	d001      	beq.n	8005a6e <_strtod_l+0x2e6>
 8005a6a:	f1c8 0800 	rsb	r8, r8, #0
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d14e      	bne.n	8005b10 <_strtod_l+0x388>
 8005a72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a74:	4308      	orrs	r0, r1
 8005a76:	f47f aec0 	bne.w	80057fa <_strtod_l+0x72>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f47f aed6 	bne.w	800582c <_strtod_l+0xa4>
 8005a80:	2a69      	cmp	r2, #105	@ 0x69
 8005a82:	d028      	beq.n	8005ad6 <_strtod_l+0x34e>
 8005a84:	dc25      	bgt.n	8005ad2 <_strtod_l+0x34a>
 8005a86:	2a49      	cmp	r2, #73	@ 0x49
 8005a88:	d025      	beq.n	8005ad6 <_strtod_l+0x34e>
 8005a8a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005a8c:	f47f aece 	bne.w	800582c <_strtod_l+0xa4>
 8005a90:	499a      	ldr	r1, [pc, #616]	@ (8005cfc <_strtod_l+0x574>)
 8005a92:	a819      	add	r0, sp, #100	@ 0x64
 8005a94:	f002 fbb6 	bl	8008204 <__match>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f43f aec7 	beq.w	800582c <_strtod_l+0xa4>
 8005a9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b28      	cmp	r3, #40	@ 0x28
 8005aa4:	d12e      	bne.n	8005b04 <_strtod_l+0x37c>
 8005aa6:	4996      	ldr	r1, [pc, #600]	@ (8005d00 <_strtod_l+0x578>)
 8005aa8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005aaa:	a819      	add	r0, sp, #100	@ 0x64
 8005aac:	f002 fbbe 	bl	800822c <__hexnan>
 8005ab0:	2805      	cmp	r0, #5
 8005ab2:	d127      	bne.n	8005b04 <_strtod_l+0x37c>
 8005ab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005ab6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005aba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005abe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005ac2:	e69a      	b.n	80057fa <_strtod_l+0x72>
 8005ac4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005ac6:	fb08 2101 	mla	r1, r8, r1, r2
 8005aca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005ace:	920e      	str	r2, [sp, #56]	@ 0x38
 8005ad0:	e7b5      	b.n	8005a3e <_strtod_l+0x2b6>
 8005ad2:	2a6e      	cmp	r2, #110	@ 0x6e
 8005ad4:	e7da      	b.n	8005a8c <_strtod_l+0x304>
 8005ad6:	498b      	ldr	r1, [pc, #556]	@ (8005d04 <_strtod_l+0x57c>)
 8005ad8:	a819      	add	r0, sp, #100	@ 0x64
 8005ada:	f002 fb93 	bl	8008204 <__match>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	f43f aea4 	beq.w	800582c <_strtod_l+0xa4>
 8005ae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ae6:	4988      	ldr	r1, [pc, #544]	@ (8005d08 <_strtod_l+0x580>)
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	a819      	add	r0, sp, #100	@ 0x64
 8005aec:	9319      	str	r3, [sp, #100]	@ 0x64
 8005aee:	f002 fb89 	bl	8008204 <__match>
 8005af2:	b910      	cbnz	r0, 8005afa <_strtod_l+0x372>
 8005af4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005af6:	3301      	adds	r3, #1
 8005af8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005afa:	f04f 0a00 	mov.w	sl, #0
 8005afe:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8005d0c <_strtod_l+0x584>
 8005b02:	e67a      	b.n	80057fa <_strtod_l+0x72>
 8005b04:	4882      	ldr	r0, [pc, #520]	@ (8005d10 <_strtod_l+0x588>)
 8005b06:	f001 fa53 	bl	8006fb0 <nan>
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	468b      	mov	fp, r1
 8005b0e:	e674      	b.n	80057fa <_strtod_l+0x72>
 8005b10:	eba8 0309 	sub.w	r3, r8, r9
 8005b14:	2f00      	cmp	r7, #0
 8005b16:	bf08      	it	eq
 8005b18:	462f      	moveq	r7, r5
 8005b1a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005b1c:	2d10      	cmp	r5, #16
 8005b1e:	462c      	mov	r4, r5
 8005b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b22:	bfa8      	it	ge
 8005b24:	2410      	movge	r4, #16
 8005b26:	f7fa fc5d 	bl	80003e4 <__aeabi_ui2d>
 8005b2a:	2d09      	cmp	r5, #9
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	468b      	mov	fp, r1
 8005b30:	dc11      	bgt.n	8005b56 <_strtod_l+0x3ce>
 8005b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	f43f ae60 	beq.w	80057fa <_strtod_l+0x72>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	dd76      	ble.n	8005c2c <_strtod_l+0x4a4>
 8005b3e:	2b16      	cmp	r3, #22
 8005b40:	dc5d      	bgt.n	8005bfe <_strtod_l+0x476>
 8005b42:	4974      	ldr	r1, [pc, #464]	@ (8005d14 <_strtod_l+0x58c>)
 8005b44:	4652      	mov	r2, sl
 8005b46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b4a:	465b      	mov	r3, fp
 8005b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b50:	f7fa fcc2 	bl	80004d8 <__aeabi_dmul>
 8005b54:	e7d9      	b.n	8005b0a <_strtod_l+0x382>
 8005b56:	4b6f      	ldr	r3, [pc, #444]	@ (8005d14 <_strtod_l+0x58c>)
 8005b58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005b60:	f7fa fcba 	bl	80004d8 <__aeabi_dmul>
 8005b64:	4682      	mov	sl, r0
 8005b66:	9808      	ldr	r0, [sp, #32]
 8005b68:	468b      	mov	fp, r1
 8005b6a:	f7fa fc3b 	bl	80003e4 <__aeabi_ui2d>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4650      	mov	r0, sl
 8005b74:	4659      	mov	r1, fp
 8005b76:	f7fa faf9 	bl	800016c <__adddf3>
 8005b7a:	2d0f      	cmp	r5, #15
 8005b7c:	4682      	mov	sl, r0
 8005b7e:	468b      	mov	fp, r1
 8005b80:	ddd7      	ble.n	8005b32 <_strtod_l+0x3aa>
 8005b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b84:	1b2c      	subs	r4, r5, r4
 8005b86:	441c      	add	r4, r3
 8005b88:	2c00      	cmp	r4, #0
 8005b8a:	f340 8096 	ble.w	8005cba <_strtod_l+0x532>
 8005b8e:	f014 030f 	ands.w	r3, r4, #15
 8005b92:	d00a      	beq.n	8005baa <_strtod_l+0x422>
 8005b94:	495f      	ldr	r1, [pc, #380]	@ (8005d14 <_strtod_l+0x58c>)
 8005b96:	4652      	mov	r2, sl
 8005b98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ba0:	465b      	mov	r3, fp
 8005ba2:	f7fa fc99 	bl	80004d8 <__aeabi_dmul>
 8005ba6:	4682      	mov	sl, r0
 8005ba8:	468b      	mov	fp, r1
 8005baa:	f034 040f 	bics.w	r4, r4, #15
 8005bae:	d073      	beq.n	8005c98 <_strtod_l+0x510>
 8005bb0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005bb4:	dd48      	ble.n	8005c48 <_strtod_l+0x4c0>
 8005bb6:	2400      	movs	r4, #0
 8005bb8:	46a0      	mov	r8, r4
 8005bba:	46a1      	mov	r9, r4
 8005bbc:	940a      	str	r4, [sp, #40]	@ 0x28
 8005bbe:	2322      	movs	r3, #34	@ 0x22
 8005bc0:	f04f 0a00 	mov.w	sl, #0
 8005bc4:	9a05      	ldr	r2, [sp, #20]
 8005bc6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8005d0c <_strtod_l+0x584>
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f43f ae13 	beq.w	80057fa <_strtod_l+0x72>
 8005bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005bd6:	9805      	ldr	r0, [sp, #20]
 8005bd8:	f002 fccc 	bl	8008574 <_Bfree>
 8005bdc:	4649      	mov	r1, r9
 8005bde:	9805      	ldr	r0, [sp, #20]
 8005be0:	f002 fcc8 	bl	8008574 <_Bfree>
 8005be4:	4641      	mov	r1, r8
 8005be6:	9805      	ldr	r0, [sp, #20]
 8005be8:	f002 fcc4 	bl	8008574 <_Bfree>
 8005bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005bee:	9805      	ldr	r0, [sp, #20]
 8005bf0:	f002 fcc0 	bl	8008574 <_Bfree>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	9805      	ldr	r0, [sp, #20]
 8005bf8:	f002 fcbc 	bl	8008574 <_Bfree>
 8005bfc:	e5fd      	b.n	80057fa <_strtod_l+0x72>
 8005bfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005c04:	4293      	cmp	r3, r2
 8005c06:	dbbc      	blt.n	8005b82 <_strtod_l+0x3fa>
 8005c08:	4c42      	ldr	r4, [pc, #264]	@ (8005d14 <_strtod_l+0x58c>)
 8005c0a:	f1c5 050f 	rsb	r5, r5, #15
 8005c0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005c12:	4652      	mov	r2, sl
 8005c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c18:	465b      	mov	r3, fp
 8005c1a:	f7fa fc5d 	bl	80004d8 <__aeabi_dmul>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c20:	1b5d      	subs	r5, r3, r5
 8005c22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005c26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005c2a:	e791      	b.n	8005b50 <_strtod_l+0x3c8>
 8005c2c:	3316      	adds	r3, #22
 8005c2e:	dba8      	blt.n	8005b82 <_strtod_l+0x3fa>
 8005c30:	4b38      	ldr	r3, [pc, #224]	@ (8005d14 <_strtod_l+0x58c>)
 8005c32:	eba9 0808 	sub.w	r8, r9, r8
 8005c36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005c3a:	4650      	mov	r0, sl
 8005c3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005c40:	4659      	mov	r1, fp
 8005c42:	f7fa fd73 	bl	800072c <__aeabi_ddiv>
 8005c46:	e760      	b.n	8005b0a <_strtod_l+0x382>
 8005c48:	4b33      	ldr	r3, [pc, #204]	@ (8005d18 <_strtod_l+0x590>)
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	9308      	str	r3, [sp, #32]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4659      	mov	r1, fp
 8005c52:	461e      	mov	r6, r3
 8005c54:	1124      	asrs	r4, r4, #4
 8005c56:	2c01      	cmp	r4, #1
 8005c58:	dc21      	bgt.n	8005c9e <_strtod_l+0x516>
 8005c5a:	b10b      	cbz	r3, 8005c60 <_strtod_l+0x4d8>
 8005c5c:	4682      	mov	sl, r0
 8005c5e:	468b      	mov	fp, r1
 8005c60:	492d      	ldr	r1, [pc, #180]	@ (8005d18 <_strtod_l+0x590>)
 8005c62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005c66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005c6a:	4652      	mov	r2, sl
 8005c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c70:	465b      	mov	r3, fp
 8005c72:	f7fa fc31 	bl	80004d8 <__aeabi_dmul>
 8005c76:	4b25      	ldr	r3, [pc, #148]	@ (8005d0c <_strtod_l+0x584>)
 8005c78:	460a      	mov	r2, r1
 8005c7a:	400b      	ands	r3, r1
 8005c7c:	4927      	ldr	r1, [pc, #156]	@ (8005d1c <_strtod_l+0x594>)
 8005c7e:	4682      	mov	sl, r0
 8005c80:	428b      	cmp	r3, r1
 8005c82:	d898      	bhi.n	8005bb6 <_strtod_l+0x42e>
 8005c84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005c88:	428b      	cmp	r3, r1
 8005c8a:	bf86      	itte	hi
 8005c8c:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c90:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8005d20 <_strtod_l+0x598>
 8005c94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005c98:	2300      	movs	r3, #0
 8005c9a:	9308      	str	r3, [sp, #32]
 8005c9c:	e07a      	b.n	8005d94 <_strtod_l+0x60c>
 8005c9e:	07e2      	lsls	r2, r4, #31
 8005ca0:	d505      	bpl.n	8005cae <_strtod_l+0x526>
 8005ca2:	9b08      	ldr	r3, [sp, #32]
 8005ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca8:	f7fa fc16 	bl	80004d8 <__aeabi_dmul>
 8005cac:	2301      	movs	r3, #1
 8005cae:	9a08      	ldr	r2, [sp, #32]
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	3208      	adds	r2, #8
 8005cb4:	1064      	asrs	r4, r4, #1
 8005cb6:	9208      	str	r2, [sp, #32]
 8005cb8:	e7cd      	b.n	8005c56 <_strtod_l+0x4ce>
 8005cba:	d0ed      	beq.n	8005c98 <_strtod_l+0x510>
 8005cbc:	4264      	negs	r4, r4
 8005cbe:	f014 020f 	ands.w	r2, r4, #15
 8005cc2:	d00a      	beq.n	8005cda <_strtod_l+0x552>
 8005cc4:	4b13      	ldr	r3, [pc, #76]	@ (8005d14 <_strtod_l+0x58c>)
 8005cc6:	4650      	mov	r0, sl
 8005cc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ccc:	4659      	mov	r1, fp
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fd2b 	bl	800072c <__aeabi_ddiv>
 8005cd6:	4682      	mov	sl, r0
 8005cd8:	468b      	mov	fp, r1
 8005cda:	1124      	asrs	r4, r4, #4
 8005cdc:	d0dc      	beq.n	8005c98 <_strtod_l+0x510>
 8005cde:	2c1f      	cmp	r4, #31
 8005ce0:	dd20      	ble.n	8005d24 <_strtod_l+0x59c>
 8005ce2:	2400      	movs	r4, #0
 8005ce4:	46a0      	mov	r8, r4
 8005ce6:	46a1      	mov	r9, r4
 8005ce8:	940a      	str	r4, [sp, #40]	@ 0x28
 8005cea:	2322      	movs	r3, #34	@ 0x22
 8005cec:	9a05      	ldr	r2, [sp, #20]
 8005cee:	f04f 0a00 	mov.w	sl, #0
 8005cf2:	f04f 0b00 	mov.w	fp, #0
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	e768      	b.n	8005bcc <_strtod_l+0x444>
 8005cfa:	bf00      	nop
 8005cfc:	08009b35 	.word	0x08009b35
 8005d00:	08009ad4 	.word	0x08009ad4
 8005d04:	08009b2d 	.word	0x08009b2d
 8005d08:	08009b67 	.word	0x08009b67
 8005d0c:	7ff00000 	.word	0x7ff00000
 8005d10:	08009ef5 	.word	0x08009ef5
 8005d14:	08009ce0 	.word	0x08009ce0
 8005d18:	08009cb8 	.word	0x08009cb8
 8005d1c:	7ca00000 	.word	0x7ca00000
 8005d20:	7fefffff 	.word	0x7fefffff
 8005d24:	f014 0310 	ands.w	r3, r4, #16
 8005d28:	bf18      	it	ne
 8005d2a:	236a      	movne	r3, #106	@ 0x6a
 8005d2c:	4650      	mov	r0, sl
 8005d2e:	9308      	str	r3, [sp, #32]
 8005d30:	4659      	mov	r1, fp
 8005d32:	2300      	movs	r3, #0
 8005d34:	4ea9      	ldr	r6, [pc, #676]	@ (8005fdc <_strtod_l+0x854>)
 8005d36:	07e2      	lsls	r2, r4, #31
 8005d38:	d504      	bpl.n	8005d44 <_strtod_l+0x5bc>
 8005d3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005d3e:	f7fa fbcb 	bl	80004d8 <__aeabi_dmul>
 8005d42:	2301      	movs	r3, #1
 8005d44:	1064      	asrs	r4, r4, #1
 8005d46:	f106 0608 	add.w	r6, r6, #8
 8005d4a:	d1f4      	bne.n	8005d36 <_strtod_l+0x5ae>
 8005d4c:	b10b      	cbz	r3, 8005d52 <_strtod_l+0x5ca>
 8005d4e:	4682      	mov	sl, r0
 8005d50:	468b      	mov	fp, r1
 8005d52:	9b08      	ldr	r3, [sp, #32]
 8005d54:	b1b3      	cbz	r3, 8005d84 <_strtod_l+0x5fc>
 8005d56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	4659      	mov	r1, fp
 8005d62:	dd0f      	ble.n	8005d84 <_strtod_l+0x5fc>
 8005d64:	2b1f      	cmp	r3, #31
 8005d66:	dd57      	ble.n	8005e18 <_strtod_l+0x690>
 8005d68:	2b34      	cmp	r3, #52	@ 0x34
 8005d6a:	bfd8      	it	le
 8005d6c:	f04f 33ff 	movle.w	r3, #4294967295
 8005d70:	f04f 0a00 	mov.w	sl, #0
 8005d74:	bfcf      	iteee	gt
 8005d76:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005d7a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005d7e:	4093      	lslle	r3, r2
 8005d80:	ea03 0b01 	andle.w	fp, r3, r1
 8005d84:	2200      	movs	r2, #0
 8005d86:	2300      	movs	r3, #0
 8005d88:	4650      	mov	r0, sl
 8005d8a:	4659      	mov	r1, fp
 8005d8c:	f7fa fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d1a6      	bne.n	8005ce2 <_strtod_l+0x55a>
 8005d94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d96:	463a      	mov	r2, r7
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d9c:	462b      	mov	r3, r5
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	f002 fc50 	bl	8008644 <__s2b>
 8005da4:	900a      	str	r0, [sp, #40]	@ 0x28
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f af05 	beq.w	8005bb6 <_strtod_l+0x42e>
 8005dac:	2400      	movs	r4, #0
 8005dae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db0:	eba9 0308 	sub.w	r3, r9, r8
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	bfa8      	it	ge
 8005db8:	2300      	movge	r3, #0
 8005dba:	46a0      	mov	r8, r4
 8005dbc:	9312      	str	r3, [sp, #72]	@ 0x48
 8005dbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005dc2:	9316      	str	r3, [sp, #88]	@ 0x58
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dc6:	9805      	ldr	r0, [sp, #20]
 8005dc8:	6859      	ldr	r1, [r3, #4]
 8005dca:	f002 fb93 	bl	80084f4 <_Balloc>
 8005dce:	4681      	mov	r9, r0
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	f43f aef4 	beq.w	8005bbe <_strtod_l+0x436>
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd8:	300c      	adds	r0, #12
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	f103 010c 	add.w	r1, r3, #12
 8005de0:	3202      	adds	r2, #2
 8005de2:	0092      	lsls	r2, r2, #2
 8005de4:	f001 f8d5 	bl	8006f92 <memcpy>
 8005de8:	ab1c      	add	r3, sp, #112	@ 0x70
 8005dea:	9301      	str	r3, [sp, #4]
 8005dec:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4652      	mov	r2, sl
 8005df2:	465b      	mov	r3, fp
 8005df4:	9805      	ldr	r0, [sp, #20]
 8005df6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005dfa:	f002 ff55 	bl	8008ca8 <__d2b>
 8005dfe:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f43f aedc 	beq.w	8005bbe <_strtod_l+0x436>
 8005e06:	2101      	movs	r1, #1
 8005e08:	9805      	ldr	r0, [sp, #20]
 8005e0a:	f002 fcb1 	bl	8008770 <__i2b>
 8005e0e:	4680      	mov	r8, r0
 8005e10:	b948      	cbnz	r0, 8005e26 <_strtod_l+0x69e>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	e6d2      	b.n	8005bbe <_strtod_l+0x436>
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	ea03 0a0a 	and.w	sl, r3, sl
 8005e24:	e7ae      	b.n	8005d84 <_strtod_l+0x5fc>
 8005e26:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005e28:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005e2a:	2d00      	cmp	r5, #0
 8005e2c:	bfab      	itete	ge
 8005e2e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005e30:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005e32:	18ef      	addge	r7, r5, r3
 8005e34:	1b5e      	sublt	r6, r3, r5
 8005e36:	9b08      	ldr	r3, [sp, #32]
 8005e38:	bfa8      	it	ge
 8005e3a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005e3c:	eba5 0503 	sub.w	r5, r5, r3
 8005e40:	4415      	add	r5, r2
 8005e42:	4b67      	ldr	r3, [pc, #412]	@ (8005fe0 <_strtod_l+0x858>)
 8005e44:	f105 35ff 	add.w	r5, r5, #4294967295
 8005e48:	bfb8      	it	lt
 8005e4a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005e4c:	429d      	cmp	r5, r3
 8005e4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005e52:	da50      	bge.n	8005ef6 <_strtod_l+0x76e>
 8005e54:	1b5b      	subs	r3, r3, r5
 8005e56:	2b1f      	cmp	r3, #31
 8005e58:	f04f 0101 	mov.w	r1, #1
 8005e5c:	eba2 0203 	sub.w	r2, r2, r3
 8005e60:	dc3d      	bgt.n	8005ede <_strtod_l+0x756>
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e68:	2300      	movs	r3, #0
 8005e6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e6c:	18bd      	adds	r5, r7, r2
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	42af      	cmp	r7, r5
 8005e72:	4416      	add	r6, r2
 8005e74:	441e      	add	r6, r3
 8005e76:	463b      	mov	r3, r7
 8005e78:	bfa8      	it	ge
 8005e7a:	462b      	movge	r3, r5
 8005e7c:	42b3      	cmp	r3, r6
 8005e7e:	bfa8      	it	ge
 8005e80:	4633      	movge	r3, r6
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	bfc2      	ittt	gt
 8005e86:	1aed      	subgt	r5, r5, r3
 8005e88:	1af6      	subgt	r6, r6, r3
 8005e8a:	1aff      	subgt	r7, r7, r3
 8005e8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd16      	ble.n	8005ec0 <_strtod_l+0x738>
 8005e92:	4641      	mov	r1, r8
 8005e94:	461a      	mov	r2, r3
 8005e96:	9805      	ldr	r0, [sp, #20]
 8005e98:	f002 fd28 	bl	80088ec <__pow5mult>
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0b7      	beq.n	8005e12 <_strtod_l+0x68a>
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005ea6:	9805      	ldr	r0, [sp, #20]
 8005ea8:	f002 fc78 	bl	800879c <__multiply>
 8005eac:	900e      	str	r0, [sp, #56]	@ 0x38
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	f43f ae85 	beq.w	8005bbe <_strtod_l+0x436>
 8005eb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005eb6:	9805      	ldr	r0, [sp, #20]
 8005eb8:	f002 fb5c 	bl	8008574 <_Bfree>
 8005ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ebe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	dc1d      	bgt.n	8005f00 <_strtod_l+0x778>
 8005ec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dd23      	ble.n	8005f12 <_strtod_l+0x78a>
 8005eca:	4649      	mov	r1, r9
 8005ecc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005ece:	9805      	ldr	r0, [sp, #20]
 8005ed0:	f002 fd0c 	bl	80088ec <__pow5mult>
 8005ed4:	4681      	mov	r9, r0
 8005ed6:	b9e0      	cbnz	r0, 8005f12 <_strtod_l+0x78a>
 8005ed8:	f04f 0900 	mov.w	r9, #0
 8005edc:	e66f      	b.n	8005bbe <_strtod_l+0x436>
 8005ede:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005ee2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005ee6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005eea:	35e2      	adds	r5, #226	@ 0xe2
 8005eec:	fa01 f305 	lsl.w	r3, r1, r5
 8005ef0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ef2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ef4:	e7ba      	b.n	8005e6c <_strtod_l+0x6e4>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005efa:	2301      	movs	r3, #1
 8005efc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005efe:	e7b5      	b.n	8005e6c <_strtod_l+0x6e4>
 8005f00:	462a      	mov	r2, r5
 8005f02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f04:	9805      	ldr	r0, [sp, #20]
 8005f06:	f002 fd4b 	bl	80089a0 <__lshift>
 8005f0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	d1d9      	bne.n	8005ec4 <_strtod_l+0x73c>
 8005f10:	e655      	b.n	8005bbe <_strtod_l+0x436>
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	dd07      	ble.n	8005f26 <_strtod_l+0x79e>
 8005f16:	4649      	mov	r1, r9
 8005f18:	4632      	mov	r2, r6
 8005f1a:	9805      	ldr	r0, [sp, #20]
 8005f1c:	f002 fd40 	bl	80089a0 <__lshift>
 8005f20:	4681      	mov	r9, r0
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d0d8      	beq.n	8005ed8 <_strtod_l+0x750>
 8005f26:	2f00      	cmp	r7, #0
 8005f28:	dd08      	ble.n	8005f3c <_strtod_l+0x7b4>
 8005f2a:	4641      	mov	r1, r8
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	9805      	ldr	r0, [sp, #20]
 8005f30:	f002 fd36 	bl	80089a0 <__lshift>
 8005f34:	4680      	mov	r8, r0
 8005f36:	2800      	cmp	r0, #0
 8005f38:	f43f ae41 	beq.w	8005bbe <_strtod_l+0x436>
 8005f3c:	464a      	mov	r2, r9
 8005f3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f40:	9805      	ldr	r0, [sp, #20]
 8005f42:	f002 fdb5 	bl	8008ab0 <__mdiff>
 8005f46:	4604      	mov	r4, r0
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	f43f ae38 	beq.w	8005bbe <_strtod_l+0x436>
 8005f4e:	68c3      	ldr	r3, [r0, #12]
 8005f50:	4641      	mov	r1, r8
 8005f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f54:	2300      	movs	r3, #0
 8005f56:	60c3      	str	r3, [r0, #12]
 8005f58:	f002 fd8e 	bl	8008a78 <__mcmp>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	da45      	bge.n	8005fec <_strtod_l+0x864>
 8005f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f62:	ea53 030a 	orrs.w	r3, r3, sl
 8005f66:	d16b      	bne.n	8006040 <_strtod_l+0x8b8>
 8005f68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d167      	bne.n	8006040 <_strtod_l+0x8b8>
 8005f70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f74:	0d1b      	lsrs	r3, r3, #20
 8005f76:	051b      	lsls	r3, r3, #20
 8005f78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f7c:	d960      	bls.n	8006040 <_strtod_l+0x8b8>
 8005f7e:	6963      	ldr	r3, [r4, #20]
 8005f80:	b913      	cbnz	r3, 8005f88 <_strtod_l+0x800>
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	dd5b      	ble.n	8006040 <_strtod_l+0x8b8>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	9805      	ldr	r0, [sp, #20]
 8005f8e:	f002 fd07 	bl	80089a0 <__lshift>
 8005f92:	4641      	mov	r1, r8
 8005f94:	4604      	mov	r4, r0
 8005f96:	f002 fd6f 	bl	8008a78 <__mcmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	dd50      	ble.n	8006040 <_strtod_l+0x8b8>
 8005f9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005fa2:	9a08      	ldr	r2, [sp, #32]
 8005fa4:	0d1b      	lsrs	r3, r3, #20
 8005fa6:	051b      	lsls	r3, r3, #20
 8005fa8:	2a00      	cmp	r2, #0
 8005faa:	d06a      	beq.n	8006082 <_strtod_l+0x8fa>
 8005fac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005fb0:	d867      	bhi.n	8006082 <_strtod_l+0x8fa>
 8005fb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005fb6:	f67f ae98 	bls.w	8005cea <_strtod_l+0x562>
 8005fba:	4650      	mov	r0, sl
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	4b09      	ldr	r3, [pc, #36]	@ (8005fe4 <_strtod_l+0x85c>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f7fa fa89 	bl	80004d8 <__aeabi_dmul>
 8005fc6:	4b08      	ldr	r3, [pc, #32]	@ (8005fe8 <_strtod_l+0x860>)
 8005fc8:	4682      	mov	sl, r0
 8005fca:	400b      	ands	r3, r1
 8005fcc:	468b      	mov	fp, r1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f47f ae00 	bne.w	8005bd4 <_strtod_l+0x44c>
 8005fd4:	2322      	movs	r3, #34	@ 0x22
 8005fd6:	9a05      	ldr	r2, [sp, #20]
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	e5fb      	b.n	8005bd4 <_strtod_l+0x44c>
 8005fdc:	08009b00 	.word	0x08009b00
 8005fe0:	fffffc02 	.word	0xfffffc02
 8005fe4:	39500000 	.word	0x39500000
 8005fe8:	7ff00000 	.word	0x7ff00000
 8005fec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005ff0:	d165      	bne.n	80060be <_strtod_l+0x936>
 8005ff2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ff8:	b35a      	cbz	r2, 8006052 <_strtod_l+0x8ca>
 8005ffa:	4a99      	ldr	r2, [pc, #612]	@ (8006260 <_strtod_l+0xad8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d12b      	bne.n	8006058 <_strtod_l+0x8d0>
 8006000:	9b08      	ldr	r3, [sp, #32]
 8006002:	4651      	mov	r1, sl
 8006004:	b303      	cbz	r3, 8006048 <_strtod_l+0x8c0>
 8006006:	465a      	mov	r2, fp
 8006008:	4b96      	ldr	r3, [pc, #600]	@ (8006264 <_strtod_l+0xadc>)
 800600a:	4013      	ands	r3, r2
 800600c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	d81b      	bhi.n	800604e <_strtod_l+0x8c6>
 8006016:	0d1b      	lsrs	r3, r3, #20
 8006018:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800601c:	fa02 f303 	lsl.w	r3, r2, r3
 8006020:	4299      	cmp	r1, r3
 8006022:	d119      	bne.n	8006058 <_strtod_l+0x8d0>
 8006024:	4b90      	ldr	r3, [pc, #576]	@ (8006268 <_strtod_l+0xae0>)
 8006026:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006028:	429a      	cmp	r2, r3
 800602a:	d102      	bne.n	8006032 <_strtod_l+0x8aa>
 800602c:	3101      	adds	r1, #1
 800602e:	f43f adc6 	beq.w	8005bbe <_strtod_l+0x436>
 8006032:	f04f 0a00 	mov.w	sl, #0
 8006036:	4b8b      	ldr	r3, [pc, #556]	@ (8006264 <_strtod_l+0xadc>)
 8006038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800603a:	401a      	ands	r2, r3
 800603c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006040:	9b08      	ldr	r3, [sp, #32]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1b9      	bne.n	8005fba <_strtod_l+0x832>
 8006046:	e5c5      	b.n	8005bd4 <_strtod_l+0x44c>
 8006048:	f04f 33ff 	mov.w	r3, #4294967295
 800604c:	e7e8      	b.n	8006020 <_strtod_l+0x898>
 800604e:	4613      	mov	r3, r2
 8006050:	e7e6      	b.n	8006020 <_strtod_l+0x898>
 8006052:	ea53 030a 	orrs.w	r3, r3, sl
 8006056:	d0a2      	beq.n	8005f9e <_strtod_l+0x816>
 8006058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800605a:	b1db      	cbz	r3, 8006094 <_strtod_l+0x90c>
 800605c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800605e:	4213      	tst	r3, r2
 8006060:	d0ee      	beq.n	8006040 <_strtod_l+0x8b8>
 8006062:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	9a08      	ldr	r2, [sp, #32]
 800606a:	b1bb      	cbz	r3, 800609c <_strtod_l+0x914>
 800606c:	f7ff fb6b 	bl	8005746 <sulp>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006078:	f7fa f878 	bl	800016c <__adddf3>
 800607c:	4682      	mov	sl, r0
 800607e:	468b      	mov	fp, r1
 8006080:	e7de      	b.n	8006040 <_strtod_l+0x8b8>
 8006082:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006086:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800608a:	f04f 3aff 	mov.w	sl, #4294967295
 800608e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006092:	e7d5      	b.n	8006040 <_strtod_l+0x8b8>
 8006094:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006096:	ea13 0f0a 	tst.w	r3, sl
 800609a:	e7e1      	b.n	8006060 <_strtod_l+0x8d8>
 800609c:	f7ff fb53 	bl	8005746 <sulp>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060a8:	f7fa f85e 	bl	8000168 <__aeabi_dsub>
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	4682      	mov	sl, r0
 80060b2:	468b      	mov	fp, r1
 80060b4:	f7fa fc78 	bl	80009a8 <__aeabi_dcmpeq>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0c1      	beq.n	8006040 <_strtod_l+0x8b8>
 80060bc:	e615      	b.n	8005cea <_strtod_l+0x562>
 80060be:	4641      	mov	r1, r8
 80060c0:	4620      	mov	r0, r4
 80060c2:	f002 fe49 	bl	8008d58 <__ratio>
 80060c6:	2200      	movs	r2, #0
 80060c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80060cc:	4606      	mov	r6, r0
 80060ce:	460f      	mov	r7, r1
 80060d0:	f7fa fc7e 	bl	80009d0 <__aeabi_dcmple>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d06d      	beq.n	80061b4 <_strtod_l+0xa2c>
 80060d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d178      	bne.n	80061d0 <_strtod_l+0xa48>
 80060de:	f1ba 0f00 	cmp.w	sl, #0
 80060e2:	d156      	bne.n	8006192 <_strtod_l+0xa0a>
 80060e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d158      	bne.n	80061a0 <_strtod_l+0xa18>
 80060ee:	2200      	movs	r2, #0
 80060f0:	4630      	mov	r0, r6
 80060f2:	4639      	mov	r1, r7
 80060f4:	4b5d      	ldr	r3, [pc, #372]	@ (800626c <_strtod_l+0xae4>)
 80060f6:	f7fa fc61 	bl	80009bc <__aeabi_dcmplt>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d157      	bne.n	80061ae <_strtod_l+0xa26>
 80060fe:	4630      	mov	r0, r6
 8006100:	4639      	mov	r1, r7
 8006102:	2200      	movs	r2, #0
 8006104:	4b5a      	ldr	r3, [pc, #360]	@ (8006270 <_strtod_l+0xae8>)
 8006106:	f7fa f9e7 	bl	80004d8 <__aeabi_dmul>
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006112:	9606      	str	r6, [sp, #24]
 8006114:	9307      	str	r3, [sp, #28]
 8006116:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800611a:	4d52      	ldr	r5, [pc, #328]	@ (8006264 <_strtod_l+0xadc>)
 800611c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006120:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006122:	401d      	ands	r5, r3
 8006124:	4b53      	ldr	r3, [pc, #332]	@ (8006274 <_strtod_l+0xaec>)
 8006126:	429d      	cmp	r5, r3
 8006128:	f040 80aa 	bne.w	8006280 <_strtod_l+0xaf8>
 800612c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800612e:	4650      	mov	r0, sl
 8006130:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006134:	4659      	mov	r1, fp
 8006136:	f002 fd4f 	bl	8008bd8 <__ulp>
 800613a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800613e:	f7fa f9cb 	bl	80004d8 <__aeabi_dmul>
 8006142:	4652      	mov	r2, sl
 8006144:	465b      	mov	r3, fp
 8006146:	f7fa f811 	bl	800016c <__adddf3>
 800614a:	460b      	mov	r3, r1
 800614c:	4945      	ldr	r1, [pc, #276]	@ (8006264 <_strtod_l+0xadc>)
 800614e:	4a4a      	ldr	r2, [pc, #296]	@ (8006278 <_strtod_l+0xaf0>)
 8006150:	4019      	ands	r1, r3
 8006152:	4291      	cmp	r1, r2
 8006154:	4682      	mov	sl, r0
 8006156:	d942      	bls.n	80061de <_strtod_l+0xa56>
 8006158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800615a:	4b43      	ldr	r3, [pc, #268]	@ (8006268 <_strtod_l+0xae0>)
 800615c:	429a      	cmp	r2, r3
 800615e:	d103      	bne.n	8006168 <_strtod_l+0x9e0>
 8006160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006162:	3301      	adds	r3, #1
 8006164:	f43f ad2b 	beq.w	8005bbe <_strtod_l+0x436>
 8006168:	f04f 3aff 	mov.w	sl, #4294967295
 800616c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006268 <_strtod_l+0xae0>
 8006170:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006172:	9805      	ldr	r0, [sp, #20]
 8006174:	f002 f9fe 	bl	8008574 <_Bfree>
 8006178:	4649      	mov	r1, r9
 800617a:	9805      	ldr	r0, [sp, #20]
 800617c:	f002 f9fa 	bl	8008574 <_Bfree>
 8006180:	4641      	mov	r1, r8
 8006182:	9805      	ldr	r0, [sp, #20]
 8006184:	f002 f9f6 	bl	8008574 <_Bfree>
 8006188:	4621      	mov	r1, r4
 800618a:	9805      	ldr	r0, [sp, #20]
 800618c:	f002 f9f2 	bl	8008574 <_Bfree>
 8006190:	e618      	b.n	8005dc4 <_strtod_l+0x63c>
 8006192:	f1ba 0f01 	cmp.w	sl, #1
 8006196:	d103      	bne.n	80061a0 <_strtod_l+0xa18>
 8006198:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800619a:	2b00      	cmp	r3, #0
 800619c:	f43f ada5 	beq.w	8005cea <_strtod_l+0x562>
 80061a0:	2200      	movs	r2, #0
 80061a2:	4b36      	ldr	r3, [pc, #216]	@ (800627c <_strtod_l+0xaf4>)
 80061a4:	2600      	movs	r6, #0
 80061a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061aa:	4f30      	ldr	r7, [pc, #192]	@ (800626c <_strtod_l+0xae4>)
 80061ac:	e7b3      	b.n	8006116 <_strtod_l+0x98e>
 80061ae:	2600      	movs	r6, #0
 80061b0:	4f2f      	ldr	r7, [pc, #188]	@ (8006270 <_strtod_l+0xae8>)
 80061b2:	e7ac      	b.n	800610e <_strtod_l+0x986>
 80061b4:	4630      	mov	r0, r6
 80061b6:	4639      	mov	r1, r7
 80061b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006270 <_strtod_l+0xae8>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	f7fa f98c 	bl	80004d8 <__aeabi_dmul>
 80061c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0a1      	beq.n	800610e <_strtod_l+0x986>
 80061ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80061ce:	e7a2      	b.n	8006116 <_strtod_l+0x98e>
 80061d0:	2200      	movs	r2, #0
 80061d2:	4b26      	ldr	r3, [pc, #152]	@ (800626c <_strtod_l+0xae4>)
 80061d4:	4616      	mov	r6, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80061dc:	e79b      	b.n	8006116 <_strtod_l+0x98e>
 80061de:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80061e2:	9b08      	ldr	r3, [sp, #32]
 80061e4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1c1      	bne.n	8006170 <_strtod_l+0x9e8>
 80061ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	051b      	lsls	r3, r3, #20
 80061f4:	429d      	cmp	r5, r3
 80061f6:	d1bb      	bne.n	8006170 <_strtod_l+0x9e8>
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa ff88 	bl	8001110 <__aeabi_d2lz>
 8006200:	f7fa f93c 	bl	800047c <__aeabi_l2d>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7f9 ffac 	bl	8000168 <__aeabi_dsub>
 8006210:	460b      	mov	r3, r1
 8006212:	4602      	mov	r2, r0
 8006214:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006218:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800621c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800621e:	ea46 060a 	orr.w	r6, r6, sl
 8006222:	431e      	orrs	r6, r3
 8006224:	d069      	beq.n	80062fa <_strtod_l+0xb72>
 8006226:	a30a      	add	r3, pc, #40	@ (adr r3, 8006250 <_strtod_l+0xac8>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa fbc6 	bl	80009bc <__aeabi_dcmplt>
 8006230:	2800      	cmp	r0, #0
 8006232:	f47f accf 	bne.w	8005bd4 <_strtod_l+0x44c>
 8006236:	a308      	add	r3, pc, #32	@ (adr r3, 8006258 <_strtod_l+0xad0>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006240:	f7fa fbda 	bl	80009f8 <__aeabi_dcmpgt>
 8006244:	2800      	cmp	r0, #0
 8006246:	d093      	beq.n	8006170 <_strtod_l+0x9e8>
 8006248:	e4c4      	b.n	8005bd4 <_strtod_l+0x44c>
 800624a:	bf00      	nop
 800624c:	f3af 8000 	nop.w
 8006250:	94a03595 	.word	0x94a03595
 8006254:	3fdfffff 	.word	0x3fdfffff
 8006258:	35afe535 	.word	0x35afe535
 800625c:	3fe00000 	.word	0x3fe00000
 8006260:	000fffff 	.word	0x000fffff
 8006264:	7ff00000 	.word	0x7ff00000
 8006268:	7fefffff 	.word	0x7fefffff
 800626c:	3ff00000 	.word	0x3ff00000
 8006270:	3fe00000 	.word	0x3fe00000
 8006274:	7fe00000 	.word	0x7fe00000
 8006278:	7c9fffff 	.word	0x7c9fffff
 800627c:	bff00000 	.word	0xbff00000
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	b323      	cbz	r3, 80062ce <_strtod_l+0xb46>
 8006284:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006288:	d821      	bhi.n	80062ce <_strtod_l+0xb46>
 800628a:	a327      	add	r3, pc, #156	@ (adr r3, 8006328 <_strtod_l+0xba0>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4630      	mov	r0, r6
 8006292:	4639      	mov	r1, r7
 8006294:	f7fa fb9c 	bl	80009d0 <__aeabi_dcmple>
 8006298:	b1a0      	cbz	r0, 80062c4 <_strtod_l+0xb3c>
 800629a:	4639      	mov	r1, r7
 800629c:	4630      	mov	r0, r6
 800629e:	f7fa fbf3 	bl	8000a88 <__aeabi_d2uiz>
 80062a2:	2801      	cmp	r0, #1
 80062a4:	bf38      	it	cc
 80062a6:	2001      	movcc	r0, #1
 80062a8:	f7fa f89c 	bl	80003e4 <__aeabi_ui2d>
 80062ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ae:	4606      	mov	r6, r0
 80062b0:	460f      	mov	r7, r1
 80062b2:	b9fb      	cbnz	r3, 80062f4 <_strtod_l+0xb6c>
 80062b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80062b8:	9014      	str	r0, [sp, #80]	@ 0x50
 80062ba:	9315      	str	r3, [sp, #84]	@ 0x54
 80062bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80062c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80062c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80062c6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80062ca:	1b5b      	subs	r3, r3, r5
 80062cc:	9311      	str	r3, [sp, #68]	@ 0x44
 80062ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062d2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80062d6:	f002 fc7f 	bl	8008bd8 <__ulp>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4650      	mov	r0, sl
 80062e0:	4659      	mov	r1, fp
 80062e2:	f7fa f8f9 	bl	80004d8 <__aeabi_dmul>
 80062e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062ea:	f7f9 ff3f 	bl	800016c <__adddf3>
 80062ee:	4682      	mov	sl, r0
 80062f0:	468b      	mov	fp, r1
 80062f2:	e776      	b.n	80061e2 <_strtod_l+0xa5a>
 80062f4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80062f8:	e7e0      	b.n	80062bc <_strtod_l+0xb34>
 80062fa:	a30d      	add	r3, pc, #52	@ (adr r3, 8006330 <_strtod_l+0xba8>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7fa fb5c 	bl	80009bc <__aeabi_dcmplt>
 8006304:	e79e      	b.n	8006244 <_strtod_l+0xabc>
 8006306:	2300      	movs	r3, #0
 8006308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800630a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800630c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	f7ff ba77 	b.w	8005802 <_strtod_l+0x7a>
 8006314:	2a65      	cmp	r2, #101	@ 0x65
 8006316:	f43f ab6e 	beq.w	80059f6 <_strtod_l+0x26e>
 800631a:	2a45      	cmp	r2, #69	@ 0x45
 800631c:	f43f ab6b 	beq.w	80059f6 <_strtod_l+0x26e>
 8006320:	2301      	movs	r3, #1
 8006322:	f7ff bba6 	b.w	8005a72 <_strtod_l+0x2ea>
 8006326:	bf00      	nop
 8006328:	ffc00000 	.word	0xffc00000
 800632c:	41dfffff 	.word	0x41dfffff
 8006330:	94a03595 	.word	0x94a03595
 8006334:	3fcfffff 	.word	0x3fcfffff

08006338 <strtod>:
 8006338:	460a      	mov	r2, r1
 800633a:	4601      	mov	r1, r0
 800633c:	4802      	ldr	r0, [pc, #8]	@ (8006348 <strtod+0x10>)
 800633e:	4b03      	ldr	r3, [pc, #12]	@ (800634c <strtod+0x14>)
 8006340:	6800      	ldr	r0, [r0, #0]
 8006342:	f7ff ba21 	b.w	8005788 <_strtod_l>
 8006346:	bf00      	nop
 8006348:	2000018c 	.word	0x2000018c
 800634c:	20000020 	.word	0x20000020

08006350 <__cvt>:
 8006350:	2b00      	cmp	r3, #0
 8006352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006356:	461d      	mov	r5, r3
 8006358:	bfbb      	ittet	lt
 800635a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800635e:	461d      	movlt	r5, r3
 8006360:	2300      	movge	r3, #0
 8006362:	232d      	movlt	r3, #45	@ 0x2d
 8006364:	b088      	sub	sp, #32
 8006366:	4614      	mov	r4, r2
 8006368:	bfb8      	it	lt
 800636a:	4614      	movlt	r4, r2
 800636c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800636e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006374:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006378:	f023 0820 	bic.w	r8, r3, #32
 800637c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006380:	d005      	beq.n	800638e <__cvt+0x3e>
 8006382:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006386:	d100      	bne.n	800638a <__cvt+0x3a>
 8006388:	3601      	adds	r6, #1
 800638a:	2302      	movs	r3, #2
 800638c:	e000      	b.n	8006390 <__cvt+0x40>
 800638e:	2303      	movs	r3, #3
 8006390:	aa07      	add	r2, sp, #28
 8006392:	9204      	str	r2, [sp, #16]
 8006394:	aa06      	add	r2, sp, #24
 8006396:	e9cd a202 	strd	sl, r2, [sp, #8]
 800639a:	e9cd 3600 	strd	r3, r6, [sp]
 800639e:	4622      	mov	r2, r4
 80063a0:	462b      	mov	r3, r5
 80063a2:	f000 fe95 	bl	80070d0 <_dtoa_r>
 80063a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80063aa:	4607      	mov	r7, r0
 80063ac:	d119      	bne.n	80063e2 <__cvt+0x92>
 80063ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80063b0:	07db      	lsls	r3, r3, #31
 80063b2:	d50e      	bpl.n	80063d2 <__cvt+0x82>
 80063b4:	eb00 0906 	add.w	r9, r0, r6
 80063b8:	2200      	movs	r2, #0
 80063ba:	2300      	movs	r3, #0
 80063bc:	4620      	mov	r0, r4
 80063be:	4629      	mov	r1, r5
 80063c0:	f7fa faf2 	bl	80009a8 <__aeabi_dcmpeq>
 80063c4:	b108      	cbz	r0, 80063ca <__cvt+0x7a>
 80063c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80063ca:	2230      	movs	r2, #48	@ 0x30
 80063cc:	9b07      	ldr	r3, [sp, #28]
 80063ce:	454b      	cmp	r3, r9
 80063d0:	d31e      	bcc.n	8006410 <__cvt+0xc0>
 80063d2:	4638      	mov	r0, r7
 80063d4:	9b07      	ldr	r3, [sp, #28]
 80063d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80063d8:	1bdb      	subs	r3, r3, r7
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	b008      	add	sp, #32
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80063e6:	eb00 0906 	add.w	r9, r0, r6
 80063ea:	d1e5      	bne.n	80063b8 <__cvt+0x68>
 80063ec:	7803      	ldrb	r3, [r0, #0]
 80063ee:	2b30      	cmp	r3, #48	@ 0x30
 80063f0:	d10a      	bne.n	8006408 <__cvt+0xb8>
 80063f2:	2200      	movs	r2, #0
 80063f4:	2300      	movs	r3, #0
 80063f6:	4620      	mov	r0, r4
 80063f8:	4629      	mov	r1, r5
 80063fa:	f7fa fad5 	bl	80009a8 <__aeabi_dcmpeq>
 80063fe:	b918      	cbnz	r0, 8006408 <__cvt+0xb8>
 8006400:	f1c6 0601 	rsb	r6, r6, #1
 8006404:	f8ca 6000 	str.w	r6, [sl]
 8006408:	f8da 3000 	ldr.w	r3, [sl]
 800640c:	4499      	add	r9, r3
 800640e:	e7d3      	b.n	80063b8 <__cvt+0x68>
 8006410:	1c59      	adds	r1, r3, #1
 8006412:	9107      	str	r1, [sp, #28]
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e7d9      	b.n	80063cc <__cvt+0x7c>

08006418 <__exponent>:
 8006418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800641a:	2900      	cmp	r1, #0
 800641c:	bfb6      	itet	lt
 800641e:	232d      	movlt	r3, #45	@ 0x2d
 8006420:	232b      	movge	r3, #43	@ 0x2b
 8006422:	4249      	neglt	r1, r1
 8006424:	2909      	cmp	r1, #9
 8006426:	7002      	strb	r2, [r0, #0]
 8006428:	7043      	strb	r3, [r0, #1]
 800642a:	dd29      	ble.n	8006480 <__exponent+0x68>
 800642c:	f10d 0307 	add.w	r3, sp, #7
 8006430:	461d      	mov	r5, r3
 8006432:	270a      	movs	r7, #10
 8006434:	fbb1 f6f7 	udiv	r6, r1, r7
 8006438:	461a      	mov	r2, r3
 800643a:	fb07 1416 	mls	r4, r7, r6, r1
 800643e:	3430      	adds	r4, #48	@ 0x30
 8006440:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006444:	460c      	mov	r4, r1
 8006446:	2c63      	cmp	r4, #99	@ 0x63
 8006448:	4631      	mov	r1, r6
 800644a:	f103 33ff 	add.w	r3, r3, #4294967295
 800644e:	dcf1      	bgt.n	8006434 <__exponent+0x1c>
 8006450:	3130      	adds	r1, #48	@ 0x30
 8006452:	1e94      	subs	r4, r2, #2
 8006454:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006458:	4623      	mov	r3, r4
 800645a:	1c41      	adds	r1, r0, #1
 800645c:	42ab      	cmp	r3, r5
 800645e:	d30a      	bcc.n	8006476 <__exponent+0x5e>
 8006460:	f10d 0309 	add.w	r3, sp, #9
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	42ac      	cmp	r4, r5
 8006468:	bf88      	it	hi
 800646a:	2300      	movhi	r3, #0
 800646c:	3302      	adds	r3, #2
 800646e:	4403      	add	r3, r0
 8006470:	1a18      	subs	r0, r3, r0
 8006472:	b003      	add	sp, #12
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006476:	f813 6b01 	ldrb.w	r6, [r3], #1
 800647a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800647e:	e7ed      	b.n	800645c <__exponent+0x44>
 8006480:	2330      	movs	r3, #48	@ 0x30
 8006482:	3130      	adds	r1, #48	@ 0x30
 8006484:	7083      	strb	r3, [r0, #2]
 8006486:	70c1      	strb	r1, [r0, #3]
 8006488:	1d03      	adds	r3, r0, #4
 800648a:	e7f1      	b.n	8006470 <__exponent+0x58>

0800648c <_printf_float>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	b091      	sub	sp, #68	@ 0x44
 8006492:	460c      	mov	r4, r1
 8006494:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006498:	4616      	mov	r6, r2
 800649a:	461f      	mov	r7, r3
 800649c:	4605      	mov	r5, r0
 800649e:	f000 fcf3 	bl	8006e88 <_localeconv_r>
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	4618      	mov	r0, r3
 80064a6:	9308      	str	r3, [sp, #32]
 80064a8:	f7f9 fe52 	bl	8000150 <strlen>
 80064ac:	2300      	movs	r3, #0
 80064ae:	930e      	str	r3, [sp, #56]	@ 0x38
 80064b0:	f8d8 3000 	ldr.w	r3, [r8]
 80064b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80064b6:	3307      	adds	r3, #7
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	f103 0208 	add.w	r2, r3, #8
 80064c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80064c4:	f8d4 b000 	ldr.w	fp, [r4]
 80064c8:	f8c8 2000 	str.w	r2, [r8]
 80064cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80064d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064d6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80064da:	f04f 32ff 	mov.w	r2, #4294967295
 80064de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80064e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006758 <_printf_float+0x2cc>)
 80064e8:	f7fa fa90 	bl	8000a0c <__aeabi_dcmpun>
 80064ec:	bb70      	cbnz	r0, 800654c <_printf_float+0xc0>
 80064ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064f2:	f04f 32ff 	mov.w	r2, #4294967295
 80064f6:	4b98      	ldr	r3, [pc, #608]	@ (8006758 <_printf_float+0x2cc>)
 80064f8:	f7fa fa6a 	bl	80009d0 <__aeabi_dcmple>
 80064fc:	bb30      	cbnz	r0, 800654c <_printf_float+0xc0>
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	4640      	mov	r0, r8
 8006504:	4649      	mov	r1, r9
 8006506:	f7fa fa59 	bl	80009bc <__aeabi_dcmplt>
 800650a:	b110      	cbz	r0, 8006512 <_printf_float+0x86>
 800650c:	232d      	movs	r3, #45	@ 0x2d
 800650e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006512:	4a92      	ldr	r2, [pc, #584]	@ (800675c <_printf_float+0x2d0>)
 8006514:	4b92      	ldr	r3, [pc, #584]	@ (8006760 <_printf_float+0x2d4>)
 8006516:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800651a:	bf94      	ite	ls
 800651c:	4690      	movls	r8, r2
 800651e:	4698      	movhi	r8, r3
 8006520:	2303      	movs	r3, #3
 8006522:	f04f 0900 	mov.w	r9, #0
 8006526:	6123      	str	r3, [r4, #16]
 8006528:	f02b 0304 	bic.w	r3, fp, #4
 800652c:	6023      	str	r3, [r4, #0]
 800652e:	4633      	mov	r3, r6
 8006530:	4621      	mov	r1, r4
 8006532:	4628      	mov	r0, r5
 8006534:	9700      	str	r7, [sp, #0]
 8006536:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006538:	f000 f9d4 	bl	80068e4 <_printf_common>
 800653c:	3001      	adds	r0, #1
 800653e:	f040 8090 	bne.w	8006662 <_printf_float+0x1d6>
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	b011      	add	sp, #68	@ 0x44
 8006548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654c:	4642      	mov	r2, r8
 800654e:	464b      	mov	r3, r9
 8006550:	4640      	mov	r0, r8
 8006552:	4649      	mov	r1, r9
 8006554:	f7fa fa5a 	bl	8000a0c <__aeabi_dcmpun>
 8006558:	b148      	cbz	r0, 800656e <_printf_float+0xe2>
 800655a:	464b      	mov	r3, r9
 800655c:	2b00      	cmp	r3, #0
 800655e:	bfb8      	it	lt
 8006560:	232d      	movlt	r3, #45	@ 0x2d
 8006562:	4a80      	ldr	r2, [pc, #512]	@ (8006764 <_printf_float+0x2d8>)
 8006564:	bfb8      	it	lt
 8006566:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800656a:	4b7f      	ldr	r3, [pc, #508]	@ (8006768 <_printf_float+0x2dc>)
 800656c:	e7d3      	b.n	8006516 <_printf_float+0x8a>
 800656e:	6863      	ldr	r3, [r4, #4]
 8006570:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	d13f      	bne.n	80065f8 <_printf_float+0x16c>
 8006578:	2306      	movs	r3, #6
 800657a:	6063      	str	r3, [r4, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	9206      	str	r2, [sp, #24]
 8006586:	aa0e      	add	r2, sp, #56	@ 0x38
 8006588:	e9cd a204 	strd	sl, r2, [sp, #16]
 800658c:	aa0d      	add	r2, sp, #52	@ 0x34
 800658e:	9203      	str	r2, [sp, #12]
 8006590:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006594:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	4642      	mov	r2, r8
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4628      	mov	r0, r5
 80065a0:	464b      	mov	r3, r9
 80065a2:	910a      	str	r1, [sp, #40]	@ 0x28
 80065a4:	f7ff fed4 	bl	8006350 <__cvt>
 80065a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80065aa:	4680      	mov	r8, r0
 80065ac:	2947      	cmp	r1, #71	@ 0x47
 80065ae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80065b0:	d128      	bne.n	8006604 <_printf_float+0x178>
 80065b2:	1cc8      	adds	r0, r1, #3
 80065b4:	db02      	blt.n	80065bc <_printf_float+0x130>
 80065b6:	6863      	ldr	r3, [r4, #4]
 80065b8:	4299      	cmp	r1, r3
 80065ba:	dd40      	ble.n	800663e <_printf_float+0x1b2>
 80065bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80065c0:	fa5f fa8a 	uxtb.w	sl, sl
 80065c4:	4652      	mov	r2, sl
 80065c6:	3901      	subs	r1, #1
 80065c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065cc:	910d      	str	r1, [sp, #52]	@ 0x34
 80065ce:	f7ff ff23 	bl	8006418 <__exponent>
 80065d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065d4:	4681      	mov	r9, r0
 80065d6:	1813      	adds	r3, r2, r0
 80065d8:	2a01      	cmp	r2, #1
 80065da:	6123      	str	r3, [r4, #16]
 80065dc:	dc02      	bgt.n	80065e4 <_printf_float+0x158>
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	07d2      	lsls	r2, r2, #31
 80065e2:	d501      	bpl.n	80065e8 <_printf_float+0x15c>
 80065e4:	3301      	adds	r3, #1
 80065e6:	6123      	str	r3, [r4, #16]
 80065e8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d09e      	beq.n	800652e <_printf_float+0xa2>
 80065f0:	232d      	movs	r3, #45	@ 0x2d
 80065f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065f6:	e79a      	b.n	800652e <_printf_float+0xa2>
 80065f8:	2947      	cmp	r1, #71	@ 0x47
 80065fa:	d1bf      	bne.n	800657c <_printf_float+0xf0>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1bd      	bne.n	800657c <_printf_float+0xf0>
 8006600:	2301      	movs	r3, #1
 8006602:	e7ba      	b.n	800657a <_printf_float+0xee>
 8006604:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006608:	d9dc      	bls.n	80065c4 <_printf_float+0x138>
 800660a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800660e:	d118      	bne.n	8006642 <_printf_float+0x1b6>
 8006610:	2900      	cmp	r1, #0
 8006612:	6863      	ldr	r3, [r4, #4]
 8006614:	dd0b      	ble.n	800662e <_printf_float+0x1a2>
 8006616:	6121      	str	r1, [r4, #16]
 8006618:	b913      	cbnz	r3, 8006620 <_printf_float+0x194>
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	07d0      	lsls	r0, r2, #31
 800661e:	d502      	bpl.n	8006626 <_printf_float+0x19a>
 8006620:	3301      	adds	r3, #1
 8006622:	440b      	add	r3, r1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	f04f 0900 	mov.w	r9, #0
 800662a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800662c:	e7dc      	b.n	80065e8 <_printf_float+0x15c>
 800662e:	b913      	cbnz	r3, 8006636 <_printf_float+0x1aa>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	07d2      	lsls	r2, r2, #31
 8006634:	d501      	bpl.n	800663a <_printf_float+0x1ae>
 8006636:	3302      	adds	r3, #2
 8006638:	e7f4      	b.n	8006624 <_printf_float+0x198>
 800663a:	2301      	movs	r3, #1
 800663c:	e7f2      	b.n	8006624 <_printf_float+0x198>
 800663e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006644:	4299      	cmp	r1, r3
 8006646:	db05      	blt.n	8006654 <_printf_float+0x1c8>
 8006648:	6823      	ldr	r3, [r4, #0]
 800664a:	6121      	str	r1, [r4, #16]
 800664c:	07d8      	lsls	r0, r3, #31
 800664e:	d5ea      	bpl.n	8006626 <_printf_float+0x19a>
 8006650:	1c4b      	adds	r3, r1, #1
 8006652:	e7e7      	b.n	8006624 <_printf_float+0x198>
 8006654:	2900      	cmp	r1, #0
 8006656:	bfcc      	ite	gt
 8006658:	2201      	movgt	r2, #1
 800665a:	f1c1 0202 	rsble	r2, r1, #2
 800665e:	4413      	add	r3, r2
 8006660:	e7e0      	b.n	8006624 <_printf_float+0x198>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	055a      	lsls	r2, r3, #21
 8006666:	d407      	bmi.n	8006678 <_printf_float+0x1ec>
 8006668:	6923      	ldr	r3, [r4, #16]
 800666a:	4642      	mov	r2, r8
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	d12b      	bne.n	80066ce <_printf_float+0x242>
 8006676:	e764      	b.n	8006542 <_printf_float+0xb6>
 8006678:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800667c:	f240 80dc 	bls.w	8006838 <_printf_float+0x3ac>
 8006680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006684:	2200      	movs	r2, #0
 8006686:	2300      	movs	r3, #0
 8006688:	f7fa f98e 	bl	80009a8 <__aeabi_dcmpeq>
 800668c:	2800      	cmp	r0, #0
 800668e:	d033      	beq.n	80066f8 <_printf_float+0x26c>
 8006690:	2301      	movs	r3, #1
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	4a35      	ldr	r2, [pc, #212]	@ (800676c <_printf_float+0x2e0>)
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f af51 	beq.w	8006542 <_printf_float+0xb6>
 80066a0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80066a4:	4543      	cmp	r3, r8
 80066a6:	db02      	blt.n	80066ae <_printf_float+0x222>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	07d8      	lsls	r0, r3, #31
 80066ac:	d50f      	bpl.n	80066ce <_printf_float+0x242>
 80066ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f af42 	beq.w	8006542 <_printf_float+0xb6>
 80066be:	f04f 0900 	mov.w	r9, #0
 80066c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80066c6:	f104 0a1a 	add.w	sl, r4, #26
 80066ca:	45c8      	cmp	r8, r9
 80066cc:	dc09      	bgt.n	80066e2 <_printf_float+0x256>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	079b      	lsls	r3, r3, #30
 80066d2:	f100 8102 	bmi.w	80068da <_printf_float+0x44e>
 80066d6:	68e0      	ldr	r0, [r4, #12]
 80066d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066da:	4298      	cmp	r0, r3
 80066dc:	bfb8      	it	lt
 80066de:	4618      	movlt	r0, r3
 80066e0:	e731      	b.n	8006546 <_printf_float+0xba>
 80066e2:	2301      	movs	r3, #1
 80066e4:	4652      	mov	r2, sl
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f af28 	beq.w	8006542 <_printf_float+0xb6>
 80066f2:	f109 0901 	add.w	r9, r9, #1
 80066f6:	e7e8      	b.n	80066ca <_printf_float+0x23e>
 80066f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dc38      	bgt.n	8006770 <_printf_float+0x2e4>
 80066fe:	2301      	movs	r3, #1
 8006700:	4631      	mov	r1, r6
 8006702:	4628      	mov	r0, r5
 8006704:	4a19      	ldr	r2, [pc, #100]	@ (800676c <_printf_float+0x2e0>)
 8006706:	47b8      	blx	r7
 8006708:	3001      	adds	r0, #1
 800670a:	f43f af1a 	beq.w	8006542 <_printf_float+0xb6>
 800670e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006712:	ea59 0303 	orrs.w	r3, r9, r3
 8006716:	d102      	bne.n	800671e <_printf_float+0x292>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07d9      	lsls	r1, r3, #31
 800671c:	d5d7      	bpl.n	80066ce <_printf_float+0x242>
 800671e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f af0a 	beq.w	8006542 <_printf_float+0xb6>
 800672e:	f04f 0a00 	mov.w	sl, #0
 8006732:	f104 0b1a 	add.w	fp, r4, #26
 8006736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006738:	425b      	negs	r3, r3
 800673a:	4553      	cmp	r3, sl
 800673c:	dc01      	bgt.n	8006742 <_printf_float+0x2b6>
 800673e:	464b      	mov	r3, r9
 8006740:	e793      	b.n	800666a <_printf_float+0x1de>
 8006742:	2301      	movs	r3, #1
 8006744:	465a      	mov	r2, fp
 8006746:	4631      	mov	r1, r6
 8006748:	4628      	mov	r0, r5
 800674a:	47b8      	blx	r7
 800674c:	3001      	adds	r0, #1
 800674e:	f43f aef8 	beq.w	8006542 <_printf_float+0xb6>
 8006752:	f10a 0a01 	add.w	sl, sl, #1
 8006756:	e7ee      	b.n	8006736 <_printf_float+0x2aa>
 8006758:	7fefffff 	.word	0x7fefffff
 800675c:	08009b28 	.word	0x08009b28
 8006760:	08009b2c 	.word	0x08009b2c
 8006764:	08009b30 	.word	0x08009b30
 8006768:	08009b34 	.word	0x08009b34
 800676c:	08009b38 	.word	0x08009b38
 8006770:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006772:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006776:	4553      	cmp	r3, sl
 8006778:	bfa8      	it	ge
 800677a:	4653      	movge	r3, sl
 800677c:	2b00      	cmp	r3, #0
 800677e:	4699      	mov	r9, r3
 8006780:	dc36      	bgt.n	80067f0 <_printf_float+0x364>
 8006782:	f04f 0b00 	mov.w	fp, #0
 8006786:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800678a:	f104 021a 	add.w	r2, r4, #26
 800678e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006790:	930a      	str	r3, [sp, #40]	@ 0x28
 8006792:	eba3 0309 	sub.w	r3, r3, r9
 8006796:	455b      	cmp	r3, fp
 8006798:	dc31      	bgt.n	80067fe <_printf_float+0x372>
 800679a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800679c:	459a      	cmp	sl, r3
 800679e:	dc3a      	bgt.n	8006816 <_printf_float+0x38a>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	07da      	lsls	r2, r3, #31
 80067a4:	d437      	bmi.n	8006816 <_printf_float+0x38a>
 80067a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067a8:	ebaa 0903 	sub.w	r9, sl, r3
 80067ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ae:	ebaa 0303 	sub.w	r3, sl, r3
 80067b2:	4599      	cmp	r9, r3
 80067b4:	bfa8      	it	ge
 80067b6:	4699      	movge	r9, r3
 80067b8:	f1b9 0f00 	cmp.w	r9, #0
 80067bc:	dc33      	bgt.n	8006826 <_printf_float+0x39a>
 80067be:	f04f 0800 	mov.w	r8, #0
 80067c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067c6:	f104 0b1a 	add.w	fp, r4, #26
 80067ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80067cc:	ebaa 0303 	sub.w	r3, sl, r3
 80067d0:	eba3 0309 	sub.w	r3, r3, r9
 80067d4:	4543      	cmp	r3, r8
 80067d6:	f77f af7a 	ble.w	80066ce <_printf_float+0x242>
 80067da:	2301      	movs	r3, #1
 80067dc:	465a      	mov	r2, fp
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f aeac 	beq.w	8006542 <_printf_float+0xb6>
 80067ea:	f108 0801 	add.w	r8, r8, #1
 80067ee:	e7ec      	b.n	80067ca <_printf_float+0x33e>
 80067f0:	4642      	mov	r2, r8
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1c2      	bne.n	8006782 <_printf_float+0x2f6>
 80067fc:	e6a1      	b.n	8006542 <_printf_float+0xb6>
 80067fe:	2301      	movs	r3, #1
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	920a      	str	r2, [sp, #40]	@ 0x28
 8006806:	47b8      	blx	r7
 8006808:	3001      	adds	r0, #1
 800680a:	f43f ae9a 	beq.w	8006542 <_printf_float+0xb6>
 800680e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006810:	f10b 0b01 	add.w	fp, fp, #1
 8006814:	e7bb      	b.n	800678e <_printf_float+0x302>
 8006816:	4631      	mov	r1, r6
 8006818:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800681c:	4628      	mov	r0, r5
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	d1c0      	bne.n	80067a6 <_printf_float+0x31a>
 8006824:	e68d      	b.n	8006542 <_printf_float+0xb6>
 8006826:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006828:	464b      	mov	r3, r9
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	4442      	add	r2, r8
 8006830:	47b8      	blx	r7
 8006832:	3001      	adds	r0, #1
 8006834:	d1c3      	bne.n	80067be <_printf_float+0x332>
 8006836:	e684      	b.n	8006542 <_printf_float+0xb6>
 8006838:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800683c:	f1ba 0f01 	cmp.w	sl, #1
 8006840:	dc01      	bgt.n	8006846 <_printf_float+0x3ba>
 8006842:	07db      	lsls	r3, r3, #31
 8006844:	d536      	bpl.n	80068b4 <_printf_float+0x428>
 8006846:	2301      	movs	r3, #1
 8006848:	4642      	mov	r2, r8
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	f43f ae76 	beq.w	8006542 <_printf_float+0xb6>
 8006856:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	f43f ae6e 	beq.w	8006542 <_printf_float+0xb6>
 8006866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006872:	f7fa f899 	bl	80009a8 <__aeabi_dcmpeq>
 8006876:	b9c0      	cbnz	r0, 80068aa <_printf_float+0x41e>
 8006878:	4653      	mov	r3, sl
 800687a:	f108 0201 	add.w	r2, r8, #1
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	d10c      	bne.n	80068a2 <_printf_float+0x416>
 8006888:	e65b      	b.n	8006542 <_printf_float+0xb6>
 800688a:	2301      	movs	r3, #1
 800688c:	465a      	mov	r2, fp
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae54 	beq.w	8006542 <_printf_float+0xb6>
 800689a:	f108 0801 	add.w	r8, r8, #1
 800689e:	45d0      	cmp	r8, sl
 80068a0:	dbf3      	blt.n	800688a <_printf_float+0x3fe>
 80068a2:	464b      	mov	r3, r9
 80068a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068a8:	e6e0      	b.n	800666c <_printf_float+0x1e0>
 80068aa:	f04f 0800 	mov.w	r8, #0
 80068ae:	f104 0b1a 	add.w	fp, r4, #26
 80068b2:	e7f4      	b.n	800689e <_printf_float+0x412>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4642      	mov	r2, r8
 80068b8:	e7e1      	b.n	800687e <_printf_float+0x3f2>
 80068ba:	2301      	movs	r3, #1
 80068bc:	464a      	mov	r2, r9
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae3c 	beq.w	8006542 <_printf_float+0xb6>
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	68e3      	ldr	r3, [r4, #12]
 80068d0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80068d2:	1a5b      	subs	r3, r3, r1
 80068d4:	4543      	cmp	r3, r8
 80068d6:	dcf0      	bgt.n	80068ba <_printf_float+0x42e>
 80068d8:	e6fd      	b.n	80066d6 <_printf_float+0x24a>
 80068da:	f04f 0800 	mov.w	r8, #0
 80068de:	f104 0919 	add.w	r9, r4, #25
 80068e2:	e7f4      	b.n	80068ce <_printf_float+0x442>

080068e4 <_printf_common>:
 80068e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e8:	4616      	mov	r6, r2
 80068ea:	4698      	mov	r8, r3
 80068ec:	688a      	ldr	r2, [r1, #8]
 80068ee:	690b      	ldr	r3, [r1, #16]
 80068f0:	4607      	mov	r7, r0
 80068f2:	4293      	cmp	r3, r2
 80068f4:	bfb8      	it	lt
 80068f6:	4613      	movlt	r3, r2
 80068f8:	6033      	str	r3, [r6, #0]
 80068fa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068fe:	460c      	mov	r4, r1
 8006900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006904:	b10a      	cbz	r2, 800690a <_printf_common+0x26>
 8006906:	3301      	adds	r3, #1
 8006908:	6033      	str	r3, [r6, #0]
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	0699      	lsls	r1, r3, #26
 800690e:	bf42      	ittt	mi
 8006910:	6833      	ldrmi	r3, [r6, #0]
 8006912:	3302      	addmi	r3, #2
 8006914:	6033      	strmi	r3, [r6, #0]
 8006916:	6825      	ldr	r5, [r4, #0]
 8006918:	f015 0506 	ands.w	r5, r5, #6
 800691c:	d106      	bne.n	800692c <_printf_common+0x48>
 800691e:	f104 0a19 	add.w	sl, r4, #25
 8006922:	68e3      	ldr	r3, [r4, #12]
 8006924:	6832      	ldr	r2, [r6, #0]
 8006926:	1a9b      	subs	r3, r3, r2
 8006928:	42ab      	cmp	r3, r5
 800692a:	dc2b      	bgt.n	8006984 <_printf_common+0xa0>
 800692c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006930:	6822      	ldr	r2, [r4, #0]
 8006932:	3b00      	subs	r3, #0
 8006934:	bf18      	it	ne
 8006936:	2301      	movne	r3, #1
 8006938:	0692      	lsls	r2, r2, #26
 800693a:	d430      	bmi.n	800699e <_printf_common+0xba>
 800693c:	4641      	mov	r1, r8
 800693e:	4638      	mov	r0, r7
 8006940:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006944:	47c8      	blx	r9
 8006946:	3001      	adds	r0, #1
 8006948:	d023      	beq.n	8006992 <_printf_common+0xae>
 800694a:	6823      	ldr	r3, [r4, #0]
 800694c:	6922      	ldr	r2, [r4, #16]
 800694e:	f003 0306 	and.w	r3, r3, #6
 8006952:	2b04      	cmp	r3, #4
 8006954:	bf14      	ite	ne
 8006956:	2500      	movne	r5, #0
 8006958:	6833      	ldreq	r3, [r6, #0]
 800695a:	f04f 0600 	mov.w	r6, #0
 800695e:	bf08      	it	eq
 8006960:	68e5      	ldreq	r5, [r4, #12]
 8006962:	f104 041a 	add.w	r4, r4, #26
 8006966:	bf08      	it	eq
 8006968:	1aed      	subeq	r5, r5, r3
 800696a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800696e:	bf08      	it	eq
 8006970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006974:	4293      	cmp	r3, r2
 8006976:	bfc4      	itt	gt
 8006978:	1a9b      	subgt	r3, r3, r2
 800697a:	18ed      	addgt	r5, r5, r3
 800697c:	42b5      	cmp	r5, r6
 800697e:	d11a      	bne.n	80069b6 <_printf_common+0xd2>
 8006980:	2000      	movs	r0, #0
 8006982:	e008      	b.n	8006996 <_printf_common+0xb2>
 8006984:	2301      	movs	r3, #1
 8006986:	4652      	mov	r2, sl
 8006988:	4641      	mov	r1, r8
 800698a:	4638      	mov	r0, r7
 800698c:	47c8      	blx	r9
 800698e:	3001      	adds	r0, #1
 8006990:	d103      	bne.n	800699a <_printf_common+0xb6>
 8006992:	f04f 30ff 	mov.w	r0, #4294967295
 8006996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800699a:	3501      	adds	r5, #1
 800699c:	e7c1      	b.n	8006922 <_printf_common+0x3e>
 800699e:	2030      	movs	r0, #48	@ 0x30
 80069a0:	18e1      	adds	r1, r4, r3
 80069a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069a6:	1c5a      	adds	r2, r3, #1
 80069a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069ac:	4422      	add	r2, r4
 80069ae:	3302      	adds	r3, #2
 80069b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069b4:	e7c2      	b.n	800693c <_printf_common+0x58>
 80069b6:	2301      	movs	r3, #1
 80069b8:	4622      	mov	r2, r4
 80069ba:	4641      	mov	r1, r8
 80069bc:	4638      	mov	r0, r7
 80069be:	47c8      	blx	r9
 80069c0:	3001      	adds	r0, #1
 80069c2:	d0e6      	beq.n	8006992 <_printf_common+0xae>
 80069c4:	3601      	adds	r6, #1
 80069c6:	e7d9      	b.n	800697c <_printf_common+0x98>

080069c8 <_printf_i>:
 80069c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069cc:	7e0f      	ldrb	r7, [r1, #24]
 80069ce:	4691      	mov	r9, r2
 80069d0:	2f78      	cmp	r7, #120	@ 0x78
 80069d2:	4680      	mov	r8, r0
 80069d4:	460c      	mov	r4, r1
 80069d6:	469a      	mov	sl, r3
 80069d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069de:	d807      	bhi.n	80069f0 <_printf_i+0x28>
 80069e0:	2f62      	cmp	r7, #98	@ 0x62
 80069e2:	d80a      	bhi.n	80069fa <_printf_i+0x32>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f000 80d3 	beq.w	8006b90 <_printf_i+0x1c8>
 80069ea:	2f58      	cmp	r7, #88	@ 0x58
 80069ec:	f000 80ba 	beq.w	8006b64 <_printf_i+0x19c>
 80069f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069f8:	e03a      	b.n	8006a70 <_printf_i+0xa8>
 80069fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069fe:	2b15      	cmp	r3, #21
 8006a00:	d8f6      	bhi.n	80069f0 <_printf_i+0x28>
 8006a02:	a101      	add	r1, pc, #4	@ (adr r1, 8006a08 <_printf_i+0x40>)
 8006a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	080069f1 	.word	0x080069f1
 8006a14:	080069f1 	.word	0x080069f1
 8006a18:	080069f1 	.word	0x080069f1
 8006a1c:	080069f1 	.word	0x080069f1
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	080069f1 	.word	0x080069f1
 8006a28:	080069f1 	.word	0x080069f1
 8006a2c:	080069f1 	.word	0x080069f1
 8006a30:	080069f1 	.word	0x080069f1
 8006a34:	08006b77 	.word	0x08006b77
 8006a38:	08006a9f 	.word	0x08006a9f
 8006a3c:	08006b31 	.word	0x08006b31
 8006a40:	080069f1 	.word	0x080069f1
 8006a44:	080069f1 	.word	0x080069f1
 8006a48:	08006b99 	.word	0x08006b99
 8006a4c:	080069f1 	.word	0x080069f1
 8006a50:	08006a9f 	.word	0x08006a9f
 8006a54:	080069f1 	.word	0x080069f1
 8006a58:	080069f1 	.word	0x080069f1
 8006a5c:	08006b39 	.word	0x08006b39
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	1d1a      	adds	r2, r3, #4
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6032      	str	r2, [r6, #0]
 8006a68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a70:	2301      	movs	r3, #1
 8006a72:	e09e      	b.n	8006bb2 <_printf_i+0x1ea>
 8006a74:	6833      	ldr	r3, [r6, #0]
 8006a76:	6820      	ldr	r0, [r4, #0]
 8006a78:	1d19      	adds	r1, r3, #4
 8006a7a:	6031      	str	r1, [r6, #0]
 8006a7c:	0606      	lsls	r6, r0, #24
 8006a7e:	d501      	bpl.n	8006a84 <_printf_i+0xbc>
 8006a80:	681d      	ldr	r5, [r3, #0]
 8006a82:	e003      	b.n	8006a8c <_printf_i+0xc4>
 8006a84:	0645      	lsls	r5, r0, #25
 8006a86:	d5fb      	bpl.n	8006a80 <_printf_i+0xb8>
 8006a88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a8c:	2d00      	cmp	r5, #0
 8006a8e:	da03      	bge.n	8006a98 <_printf_i+0xd0>
 8006a90:	232d      	movs	r3, #45	@ 0x2d
 8006a92:	426d      	negs	r5, r5
 8006a94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a98:	230a      	movs	r3, #10
 8006a9a:	4859      	ldr	r0, [pc, #356]	@ (8006c00 <_printf_i+0x238>)
 8006a9c:	e011      	b.n	8006ac2 <_printf_i+0xfa>
 8006a9e:	6821      	ldr	r1, [r4, #0]
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	0608      	lsls	r0, r1, #24
 8006aa4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006aa8:	d402      	bmi.n	8006ab0 <_printf_i+0xe8>
 8006aaa:	0649      	lsls	r1, r1, #25
 8006aac:	bf48      	it	mi
 8006aae:	b2ad      	uxthmi	r5, r5
 8006ab0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	bf14      	ite	ne
 8006ab6:	230a      	movne	r3, #10
 8006ab8:	2308      	moveq	r3, #8
 8006aba:	4851      	ldr	r0, [pc, #324]	@ (8006c00 <_printf_i+0x238>)
 8006abc:	2100      	movs	r1, #0
 8006abe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ac2:	6866      	ldr	r6, [r4, #4]
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	bfa8      	it	ge
 8006ac8:	6821      	ldrge	r1, [r4, #0]
 8006aca:	60a6      	str	r6, [r4, #8]
 8006acc:	bfa4      	itt	ge
 8006ace:	f021 0104 	bicge.w	r1, r1, #4
 8006ad2:	6021      	strge	r1, [r4, #0]
 8006ad4:	b90d      	cbnz	r5, 8006ada <_printf_i+0x112>
 8006ad6:	2e00      	cmp	r6, #0
 8006ad8:	d04b      	beq.n	8006b72 <_printf_i+0x1aa>
 8006ada:	4616      	mov	r6, r2
 8006adc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ae0:	fb03 5711 	mls	r7, r3, r1, r5
 8006ae4:	5dc7      	ldrb	r7, [r0, r7]
 8006ae6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aea:	462f      	mov	r7, r5
 8006aec:	42bb      	cmp	r3, r7
 8006aee:	460d      	mov	r5, r1
 8006af0:	d9f4      	bls.n	8006adc <_printf_i+0x114>
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d10b      	bne.n	8006b0e <_printf_i+0x146>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	07df      	lsls	r7, r3, #31
 8006afa:	d508      	bpl.n	8006b0e <_printf_i+0x146>
 8006afc:	6923      	ldr	r3, [r4, #16]
 8006afe:	6861      	ldr	r1, [r4, #4]
 8006b00:	4299      	cmp	r1, r3
 8006b02:	bfde      	ittt	le
 8006b04:	2330      	movle	r3, #48	@ 0x30
 8006b06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b0e:	1b92      	subs	r2, r2, r6
 8006b10:	6122      	str	r2, [r4, #16]
 8006b12:	464b      	mov	r3, r9
 8006b14:	4621      	mov	r1, r4
 8006b16:	4640      	mov	r0, r8
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	aa03      	add	r2, sp, #12
 8006b1e:	f7ff fee1 	bl	80068e4 <_printf_common>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d14a      	bne.n	8006bbc <_printf_i+0x1f4>
 8006b26:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2a:	b004      	add	sp, #16
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	f043 0320 	orr.w	r3, r3, #32
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	2778      	movs	r7, #120	@ 0x78
 8006b3a:	4832      	ldr	r0, [pc, #200]	@ (8006c04 <_printf_i+0x23c>)
 8006b3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	6831      	ldr	r1, [r6, #0]
 8006b44:	061f      	lsls	r7, r3, #24
 8006b46:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b4a:	d402      	bmi.n	8006b52 <_printf_i+0x18a>
 8006b4c:	065f      	lsls	r7, r3, #25
 8006b4e:	bf48      	it	mi
 8006b50:	b2ad      	uxthmi	r5, r5
 8006b52:	6031      	str	r1, [r6, #0]
 8006b54:	07d9      	lsls	r1, r3, #31
 8006b56:	bf44      	itt	mi
 8006b58:	f043 0320 	orrmi.w	r3, r3, #32
 8006b5c:	6023      	strmi	r3, [r4, #0]
 8006b5e:	b11d      	cbz	r5, 8006b68 <_printf_i+0x1a0>
 8006b60:	2310      	movs	r3, #16
 8006b62:	e7ab      	b.n	8006abc <_printf_i+0xf4>
 8006b64:	4826      	ldr	r0, [pc, #152]	@ (8006c00 <_printf_i+0x238>)
 8006b66:	e7e9      	b.n	8006b3c <_printf_i+0x174>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	f023 0320 	bic.w	r3, r3, #32
 8006b6e:	6023      	str	r3, [r4, #0]
 8006b70:	e7f6      	b.n	8006b60 <_printf_i+0x198>
 8006b72:	4616      	mov	r6, r2
 8006b74:	e7bd      	b.n	8006af2 <_printf_i+0x12a>
 8006b76:	6833      	ldr	r3, [r6, #0]
 8006b78:	6825      	ldr	r5, [r4, #0]
 8006b7a:	1d18      	adds	r0, r3, #4
 8006b7c:	6961      	ldr	r1, [r4, #20]
 8006b7e:	6030      	str	r0, [r6, #0]
 8006b80:	062e      	lsls	r6, r5, #24
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	d501      	bpl.n	8006b8a <_printf_i+0x1c2>
 8006b86:	6019      	str	r1, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <_printf_i+0x1c8>
 8006b8a:	0668      	lsls	r0, r5, #25
 8006b8c:	d5fb      	bpl.n	8006b86 <_printf_i+0x1be>
 8006b8e:	8019      	strh	r1, [r3, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	4616      	mov	r6, r2
 8006b94:	6123      	str	r3, [r4, #16]
 8006b96:	e7bc      	b.n	8006b12 <_printf_i+0x14a>
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	1d1a      	adds	r2, r3, #4
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	681e      	ldr	r6, [r3, #0]
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f9e6 	bl	8006f76 <memchr>
 8006baa:	b108      	cbz	r0, 8006bb0 <_printf_i+0x1e8>
 8006bac:	1b80      	subs	r0, r0, r6
 8006bae:	6060      	str	r0, [r4, #4]
 8006bb0:	6863      	ldr	r3, [r4, #4]
 8006bb2:	6123      	str	r3, [r4, #16]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bba:	e7aa      	b.n	8006b12 <_printf_i+0x14a>
 8006bbc:	4632      	mov	r2, r6
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	47d0      	blx	sl
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d0ad      	beq.n	8006b26 <_printf_i+0x15e>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	079b      	lsls	r3, r3, #30
 8006bce:	d413      	bmi.n	8006bf8 <_printf_i+0x230>
 8006bd0:	68e0      	ldr	r0, [r4, #12]
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	4298      	cmp	r0, r3
 8006bd6:	bfb8      	it	lt
 8006bd8:	4618      	movlt	r0, r3
 8006bda:	e7a6      	b.n	8006b2a <_printf_i+0x162>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4632      	mov	r2, r6
 8006be0:	4649      	mov	r1, r9
 8006be2:	4640      	mov	r0, r8
 8006be4:	47d0      	blx	sl
 8006be6:	3001      	adds	r0, #1
 8006be8:	d09d      	beq.n	8006b26 <_printf_i+0x15e>
 8006bea:	3501      	adds	r5, #1
 8006bec:	68e3      	ldr	r3, [r4, #12]
 8006bee:	9903      	ldr	r1, [sp, #12]
 8006bf0:	1a5b      	subs	r3, r3, r1
 8006bf2:	42ab      	cmp	r3, r5
 8006bf4:	dcf2      	bgt.n	8006bdc <_printf_i+0x214>
 8006bf6:	e7eb      	b.n	8006bd0 <_printf_i+0x208>
 8006bf8:	2500      	movs	r5, #0
 8006bfa:	f104 0619 	add.w	r6, r4, #25
 8006bfe:	e7f5      	b.n	8006bec <_printf_i+0x224>
 8006c00:	08009b3a 	.word	0x08009b3a
 8006c04:	08009b4b 	.word	0x08009b4b

08006c08 <std>:
 8006c08:	2300      	movs	r3, #0
 8006c0a:	b510      	push	{r4, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c16:	6083      	str	r3, [r0, #8]
 8006c18:	8181      	strh	r1, [r0, #12]
 8006c1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c1c:	81c2      	strh	r2, [r0, #14]
 8006c1e:	6183      	str	r3, [r0, #24]
 8006c20:	4619      	mov	r1, r3
 8006c22:	2208      	movs	r2, #8
 8006c24:	305c      	adds	r0, #92	@ 0x5c
 8006c26:	f000 f914 	bl	8006e52 <memset>
 8006c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c60 <std+0x58>)
 8006c2c:	6224      	str	r4, [r4, #32]
 8006c2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c30:	4b0c      	ldr	r3, [pc, #48]	@ (8006c64 <std+0x5c>)
 8006c32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c34:	4b0c      	ldr	r3, [pc, #48]	@ (8006c68 <std+0x60>)
 8006c36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c38:	4b0c      	ldr	r3, [pc, #48]	@ (8006c6c <std+0x64>)
 8006c3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <std+0x68>)
 8006c3e:	429c      	cmp	r4, r3
 8006c40:	d006      	beq.n	8006c50 <std+0x48>
 8006c42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c46:	4294      	cmp	r4, r2
 8006c48:	d002      	beq.n	8006c50 <std+0x48>
 8006c4a:	33d0      	adds	r3, #208	@ 0xd0
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	d105      	bne.n	8006c5c <std+0x54>
 8006c50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c58:	f000 b98a 	b.w	8006f70 <__retarget_lock_init_recursive>
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	08006dcd 	.word	0x08006dcd
 8006c64:	08006def 	.word	0x08006def
 8006c68:	08006e27 	.word	0x08006e27
 8006c6c:	08006e4b 	.word	0x08006e4b
 8006c70:	20000358 	.word	0x20000358

08006c74 <stdio_exit_handler>:
 8006c74:	4a02      	ldr	r2, [pc, #8]	@ (8006c80 <stdio_exit_handler+0xc>)
 8006c76:	4903      	ldr	r1, [pc, #12]	@ (8006c84 <stdio_exit_handler+0x10>)
 8006c78:	4803      	ldr	r0, [pc, #12]	@ (8006c88 <stdio_exit_handler+0x14>)
 8006c7a:	f000 b869 	b.w	8006d50 <_fwalk_sglue>
 8006c7e:	bf00      	nop
 8006c80:	20000014 	.word	0x20000014
 8006c84:	08009209 	.word	0x08009209
 8006c88:	20000190 	.word	0x20000190

08006c8c <cleanup_stdio>:
 8006c8c:	6841      	ldr	r1, [r0, #4]
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc0 <cleanup_stdio+0x34>)
 8006c90:	b510      	push	{r4, lr}
 8006c92:	4299      	cmp	r1, r3
 8006c94:	4604      	mov	r4, r0
 8006c96:	d001      	beq.n	8006c9c <cleanup_stdio+0x10>
 8006c98:	f002 fab6 	bl	8009208 <_fflush_r>
 8006c9c:	68a1      	ldr	r1, [r4, #8]
 8006c9e:	4b09      	ldr	r3, [pc, #36]	@ (8006cc4 <cleanup_stdio+0x38>)
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d002      	beq.n	8006caa <cleanup_stdio+0x1e>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f002 faaf 	bl	8009208 <_fflush_r>
 8006caa:	68e1      	ldr	r1, [r4, #12]
 8006cac:	4b06      	ldr	r3, [pc, #24]	@ (8006cc8 <cleanup_stdio+0x3c>)
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	d004      	beq.n	8006cbc <cleanup_stdio+0x30>
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f002 baa6 	b.w	8009208 <_fflush_r>
 8006cbc:	bd10      	pop	{r4, pc}
 8006cbe:	bf00      	nop
 8006cc0:	20000358 	.word	0x20000358
 8006cc4:	200003c0 	.word	0x200003c0
 8006cc8:	20000428 	.word	0x20000428

08006ccc <global_stdio_init.part.0>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	4b0b      	ldr	r3, [pc, #44]	@ (8006cfc <global_stdio_init.part.0+0x30>)
 8006cd0:	4c0b      	ldr	r4, [pc, #44]	@ (8006d00 <global_stdio_init.part.0+0x34>)
 8006cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d04 <global_stdio_init.part.0+0x38>)
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	2104      	movs	r1, #4
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f7ff ff94 	bl	8006c08 <std>
 8006ce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	2109      	movs	r1, #9
 8006ce8:	f7ff ff8e 	bl	8006c08 <std>
 8006cec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cf6:	2112      	movs	r1, #18
 8006cf8:	f7ff bf86 	b.w	8006c08 <std>
 8006cfc:	20000490 	.word	0x20000490
 8006d00:	20000358 	.word	0x20000358
 8006d04:	08006c75 	.word	0x08006c75

08006d08 <__sfp_lock_acquire>:
 8006d08:	4801      	ldr	r0, [pc, #4]	@ (8006d10 <__sfp_lock_acquire+0x8>)
 8006d0a:	f000 b932 	b.w	8006f72 <__retarget_lock_acquire_recursive>
 8006d0e:	bf00      	nop
 8006d10:	20000499 	.word	0x20000499

08006d14 <__sfp_lock_release>:
 8006d14:	4801      	ldr	r0, [pc, #4]	@ (8006d1c <__sfp_lock_release+0x8>)
 8006d16:	f000 b92d 	b.w	8006f74 <__retarget_lock_release_recursive>
 8006d1a:	bf00      	nop
 8006d1c:	20000499 	.word	0x20000499

08006d20 <__sinit>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	4604      	mov	r4, r0
 8006d24:	f7ff fff0 	bl	8006d08 <__sfp_lock_acquire>
 8006d28:	6a23      	ldr	r3, [r4, #32]
 8006d2a:	b11b      	cbz	r3, 8006d34 <__sinit+0x14>
 8006d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d30:	f7ff bff0 	b.w	8006d14 <__sfp_lock_release>
 8006d34:	4b04      	ldr	r3, [pc, #16]	@ (8006d48 <__sinit+0x28>)
 8006d36:	6223      	str	r3, [r4, #32]
 8006d38:	4b04      	ldr	r3, [pc, #16]	@ (8006d4c <__sinit+0x2c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1f5      	bne.n	8006d2c <__sinit+0xc>
 8006d40:	f7ff ffc4 	bl	8006ccc <global_stdio_init.part.0>
 8006d44:	e7f2      	b.n	8006d2c <__sinit+0xc>
 8006d46:	bf00      	nop
 8006d48:	08006c8d 	.word	0x08006c8d
 8006d4c:	20000490 	.word	0x20000490

08006d50 <_fwalk_sglue>:
 8006d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d54:	4607      	mov	r7, r0
 8006d56:	4688      	mov	r8, r1
 8006d58:	4614      	mov	r4, r2
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d60:	f1b9 0901 	subs.w	r9, r9, #1
 8006d64:	d505      	bpl.n	8006d72 <_fwalk_sglue+0x22>
 8006d66:	6824      	ldr	r4, [r4, #0]
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	d1f7      	bne.n	8006d5c <_fwalk_sglue+0xc>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d907      	bls.n	8006d88 <_fwalk_sglue+0x38>
 8006d78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	d003      	beq.n	8006d88 <_fwalk_sglue+0x38>
 8006d80:	4629      	mov	r1, r5
 8006d82:	4638      	mov	r0, r7
 8006d84:	47c0      	blx	r8
 8006d86:	4306      	orrs	r6, r0
 8006d88:	3568      	adds	r5, #104	@ 0x68
 8006d8a:	e7e9      	b.n	8006d60 <_fwalk_sglue+0x10>

08006d8c <siprintf>:
 8006d8c:	b40e      	push	{r1, r2, r3}
 8006d8e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d92:	b500      	push	{lr}
 8006d94:	b09c      	sub	sp, #112	@ 0x70
 8006d96:	ab1d      	add	r3, sp, #116	@ 0x74
 8006d98:	9002      	str	r0, [sp, #8]
 8006d9a:	9006      	str	r0, [sp, #24]
 8006d9c:	9107      	str	r1, [sp, #28]
 8006d9e:	9104      	str	r1, [sp, #16]
 8006da0:	4808      	ldr	r0, [pc, #32]	@ (8006dc4 <siprintf+0x38>)
 8006da2:	4909      	ldr	r1, [pc, #36]	@ (8006dc8 <siprintf+0x3c>)
 8006da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da8:	9105      	str	r1, [sp, #20]
 8006daa:	6800      	ldr	r0, [r0, #0]
 8006dac:	a902      	add	r1, sp, #8
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	f002 f8ae 	bl	8008f10 <_svfiprintf_r>
 8006db4:	2200      	movs	r2, #0
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	b01c      	add	sp, #112	@ 0x70
 8006dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc0:	b003      	add	sp, #12
 8006dc2:	4770      	bx	lr
 8006dc4:	2000018c 	.word	0x2000018c
 8006dc8:	ffff0208 	.word	0xffff0208

08006dcc <__sread>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	460c      	mov	r4, r1
 8006dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd4:	f000 f87e 	bl	8006ed4 <_read_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	bfab      	itete	ge
 8006ddc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006dde:	89a3      	ldrhlt	r3, [r4, #12]
 8006de0:	181b      	addge	r3, r3, r0
 8006de2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006de6:	bfac      	ite	ge
 8006de8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006dea:	81a3      	strhlt	r3, [r4, #12]
 8006dec:	bd10      	pop	{r4, pc}

08006dee <__swrite>:
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	461f      	mov	r7, r3
 8006df4:	898b      	ldrh	r3, [r1, #12]
 8006df6:	4605      	mov	r5, r0
 8006df8:	05db      	lsls	r3, r3, #23
 8006dfa:	460c      	mov	r4, r1
 8006dfc:	4616      	mov	r6, r2
 8006dfe:	d505      	bpl.n	8006e0c <__swrite+0x1e>
 8006e00:	2302      	movs	r3, #2
 8006e02:	2200      	movs	r2, #0
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	f000 f852 	bl	8006eb0 <_lseek_r>
 8006e0c:	89a3      	ldrh	r3, [r4, #12]
 8006e0e:	4632      	mov	r2, r6
 8006e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	4628      	mov	r0, r5
 8006e18:	463b      	mov	r3, r7
 8006e1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	f000 b869 	b.w	8006ef8 <_write_r>

08006e26 <__sseek>:
 8006e26:	b510      	push	{r4, lr}
 8006e28:	460c      	mov	r4, r1
 8006e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e2e:	f000 f83f 	bl	8006eb0 <_lseek_r>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	bf15      	itete	ne
 8006e38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e42:	81a3      	strheq	r3, [r4, #12]
 8006e44:	bf18      	it	ne
 8006e46:	81a3      	strhne	r3, [r4, #12]
 8006e48:	bd10      	pop	{r4, pc}

08006e4a <__sclose>:
 8006e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e4e:	f000 b81f 	b.w	8006e90 <_close_r>

08006e52 <memset>:
 8006e52:	4603      	mov	r3, r0
 8006e54:	4402      	add	r2, r0
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d100      	bne.n	8006e5c <memset+0xa>
 8006e5a:	4770      	bx	lr
 8006e5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006e60:	e7f9      	b.n	8006e56 <memset+0x4>

08006e62 <strncmp>:
 8006e62:	b510      	push	{r4, lr}
 8006e64:	b16a      	cbz	r2, 8006e82 <strncmp+0x20>
 8006e66:	3901      	subs	r1, #1
 8006e68:	1884      	adds	r4, r0, r2
 8006e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d103      	bne.n	8006e7e <strncmp+0x1c>
 8006e76:	42a0      	cmp	r0, r4
 8006e78:	d001      	beq.n	8006e7e <strncmp+0x1c>
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	d1f5      	bne.n	8006e6a <strncmp+0x8>
 8006e7e:	1ad0      	subs	r0, r2, r3
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	4610      	mov	r0, r2
 8006e84:	e7fc      	b.n	8006e80 <strncmp+0x1e>
	...

08006e88 <_localeconv_r>:
 8006e88:	4800      	ldr	r0, [pc, #0]	@ (8006e8c <_localeconv_r+0x4>)
 8006e8a:	4770      	bx	lr
 8006e8c:	20000110 	.word	0x20000110

08006e90 <_close_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	2300      	movs	r3, #0
 8006e94:	4d05      	ldr	r5, [pc, #20]	@ (8006eac <_close_r+0x1c>)
 8006e96:	4604      	mov	r4, r0
 8006e98:	4608      	mov	r0, r1
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	f7fb fdd7 	bl	8002a4e <_close>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_close_r+0x1a>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_close_r+0x1a>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	20000494 	.word	0x20000494

08006eb0 <_lseek_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	2200      	movs	r2, #0
 8006eba:	4d05      	ldr	r5, [pc, #20]	@ (8006ed0 <_lseek_r+0x20>)
 8006ebc:	602a      	str	r2, [r5, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f7fb fde9 	bl	8002a96 <_lseek>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_lseek_r+0x1e>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_lseek_r+0x1e>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	20000494 	.word	0x20000494

08006ed4 <_read_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	2200      	movs	r2, #0
 8006ede:	4d05      	ldr	r5, [pc, #20]	@ (8006ef4 <_read_r+0x20>)
 8006ee0:	602a      	str	r2, [r5, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f7fb fd7a 	bl	80029dc <_read>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_read_r+0x1e>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_read_r+0x1e>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	20000494 	.word	0x20000494

08006ef8 <_write_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	2200      	movs	r2, #0
 8006f02:	4d05      	ldr	r5, [pc, #20]	@ (8006f18 <_write_r+0x20>)
 8006f04:	602a      	str	r2, [r5, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	f7fb fd85 	bl	8002a16 <_write>
 8006f0c:	1c43      	adds	r3, r0, #1
 8006f0e:	d102      	bne.n	8006f16 <_write_r+0x1e>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	b103      	cbz	r3, 8006f16 <_write_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20000494 	.word	0x20000494

08006f1c <__errno>:
 8006f1c:	4b01      	ldr	r3, [pc, #4]	@ (8006f24 <__errno+0x8>)
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	2000018c 	.word	0x2000018c

08006f28 <__libc_init_array>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	2600      	movs	r6, #0
 8006f2c:	4d0c      	ldr	r5, [pc, #48]	@ (8006f60 <__libc_init_array+0x38>)
 8006f2e:	4c0d      	ldr	r4, [pc, #52]	@ (8006f64 <__libc_init_array+0x3c>)
 8006f30:	1b64      	subs	r4, r4, r5
 8006f32:	10a4      	asrs	r4, r4, #2
 8006f34:	42a6      	cmp	r6, r4
 8006f36:	d109      	bne.n	8006f4c <__libc_init_array+0x24>
 8006f38:	f002 fcd4 	bl	80098e4 <_init>
 8006f3c:	2600      	movs	r6, #0
 8006f3e:	4d0a      	ldr	r5, [pc, #40]	@ (8006f68 <__libc_init_array+0x40>)
 8006f40:	4c0a      	ldr	r4, [pc, #40]	@ (8006f6c <__libc_init_array+0x44>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	42a6      	cmp	r6, r4
 8006f48:	d105      	bne.n	8006f56 <__libc_init_array+0x2e>
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f50:	4798      	blx	r3
 8006f52:	3601      	adds	r6, #1
 8006f54:	e7ee      	b.n	8006f34 <__libc_init_array+0xc>
 8006f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f5a:	4798      	blx	r3
 8006f5c:	3601      	adds	r6, #1
 8006f5e:	e7f2      	b.n	8006f46 <__libc_init_array+0x1e>
 8006f60:	08009f00 	.word	0x08009f00
 8006f64:	08009f00 	.word	0x08009f00
 8006f68:	08009f00 	.word	0x08009f00
 8006f6c:	08009f04 	.word	0x08009f04

08006f70 <__retarget_lock_init_recursive>:
 8006f70:	4770      	bx	lr

08006f72 <__retarget_lock_acquire_recursive>:
 8006f72:	4770      	bx	lr

08006f74 <__retarget_lock_release_recursive>:
 8006f74:	4770      	bx	lr

08006f76 <memchr>:
 8006f76:	4603      	mov	r3, r0
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	b2c9      	uxtb	r1, r1
 8006f7c:	4402      	add	r2, r0
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	d101      	bne.n	8006f88 <memchr+0x12>
 8006f84:	2000      	movs	r0, #0
 8006f86:	e003      	b.n	8006f90 <memchr+0x1a>
 8006f88:	7804      	ldrb	r4, [r0, #0]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	428c      	cmp	r4, r1
 8006f8e:	d1f6      	bne.n	8006f7e <memchr+0x8>
 8006f90:	bd10      	pop	{r4, pc}

08006f92 <memcpy>:
 8006f92:	440a      	add	r2, r1
 8006f94:	4291      	cmp	r1, r2
 8006f96:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f9a:	d100      	bne.n	8006f9e <memcpy+0xc>
 8006f9c:	4770      	bx	lr
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa4:	4291      	cmp	r1, r2
 8006fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006faa:	d1f9      	bne.n	8006fa0 <memcpy+0xe>
 8006fac:	bd10      	pop	{r4, pc}
	...

08006fb0 <nan>:
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4901      	ldr	r1, [pc, #4]	@ (8006fb8 <nan+0x8>)
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	7ff80000 	.word	0x7ff80000

08006fbc <quorem>:
 8006fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	6903      	ldr	r3, [r0, #16]
 8006fc2:	690c      	ldr	r4, [r1, #16]
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	42a3      	cmp	r3, r4
 8006fc8:	db7e      	blt.n	80070c8 <quorem+0x10c>
 8006fca:	3c01      	subs	r4, #1
 8006fcc:	00a3      	lsls	r3, r4, #2
 8006fce:	f100 0514 	add.w	r5, r0, #20
 8006fd2:	f101 0814 	add.w	r8, r1, #20
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff2:	d32e      	bcc.n	8007052 <quorem+0x96>
 8006ff4:	f04f 0a00 	mov.w	sl, #0
 8006ff8:	46c4      	mov	ip, r8
 8006ffa:	46ae      	mov	lr, r5
 8006ffc:	46d3      	mov	fp, sl
 8006ffe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007002:	b298      	uxth	r0, r3
 8007004:	fb06 a000 	mla	r0, r6, r0, sl
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	0c02      	lsrs	r2, r0, #16
 800700c:	fb06 2303 	mla	r3, r6, r3, r2
 8007010:	f8de 2000 	ldr.w	r2, [lr]
 8007014:	b280      	uxth	r0, r0
 8007016:	b292      	uxth	r2, r2
 8007018:	1a12      	subs	r2, r2, r0
 800701a:	445a      	add	r2, fp
 800701c:	f8de 0000 	ldr.w	r0, [lr]
 8007020:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007024:	b29b      	uxth	r3, r3
 8007026:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800702a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800702e:	b292      	uxth	r2, r2
 8007030:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007034:	45e1      	cmp	r9, ip
 8007036:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800703a:	f84e 2b04 	str.w	r2, [lr], #4
 800703e:	d2de      	bcs.n	8006ffe <quorem+0x42>
 8007040:	9b00      	ldr	r3, [sp, #0]
 8007042:	58eb      	ldr	r3, [r5, r3]
 8007044:	b92b      	cbnz	r3, 8007052 <quorem+0x96>
 8007046:	9b01      	ldr	r3, [sp, #4]
 8007048:	3b04      	subs	r3, #4
 800704a:	429d      	cmp	r5, r3
 800704c:	461a      	mov	r2, r3
 800704e:	d32f      	bcc.n	80070b0 <quorem+0xf4>
 8007050:	613c      	str	r4, [r7, #16]
 8007052:	4638      	mov	r0, r7
 8007054:	f001 fd10 	bl	8008a78 <__mcmp>
 8007058:	2800      	cmp	r0, #0
 800705a:	db25      	blt.n	80070a8 <quorem+0xec>
 800705c:	4629      	mov	r1, r5
 800705e:	2000      	movs	r0, #0
 8007060:	f858 2b04 	ldr.w	r2, [r8], #4
 8007064:	f8d1 c000 	ldr.w	ip, [r1]
 8007068:	fa1f fe82 	uxth.w	lr, r2
 800706c:	fa1f f38c 	uxth.w	r3, ip
 8007070:	eba3 030e 	sub.w	r3, r3, lr
 8007074:	4403      	add	r3, r0
 8007076:	0c12      	lsrs	r2, r2, #16
 8007078:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800707c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007080:	b29b      	uxth	r3, r3
 8007082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007086:	45c1      	cmp	r9, r8
 8007088:	ea4f 4022 	mov.w	r0, r2, asr #16
 800708c:	f841 3b04 	str.w	r3, [r1], #4
 8007090:	d2e6      	bcs.n	8007060 <quorem+0xa4>
 8007092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800709a:	b922      	cbnz	r2, 80070a6 <quorem+0xea>
 800709c:	3b04      	subs	r3, #4
 800709e:	429d      	cmp	r5, r3
 80070a0:	461a      	mov	r2, r3
 80070a2:	d30b      	bcc.n	80070bc <quorem+0x100>
 80070a4:	613c      	str	r4, [r7, #16]
 80070a6:	3601      	adds	r6, #1
 80070a8:	4630      	mov	r0, r6
 80070aa:	b003      	add	sp, #12
 80070ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b0:	6812      	ldr	r2, [r2, #0]
 80070b2:	3b04      	subs	r3, #4
 80070b4:	2a00      	cmp	r2, #0
 80070b6:	d1cb      	bne.n	8007050 <quorem+0x94>
 80070b8:	3c01      	subs	r4, #1
 80070ba:	e7c6      	b.n	800704a <quorem+0x8e>
 80070bc:	6812      	ldr	r2, [r2, #0]
 80070be:	3b04      	subs	r3, #4
 80070c0:	2a00      	cmp	r2, #0
 80070c2:	d1ef      	bne.n	80070a4 <quorem+0xe8>
 80070c4:	3c01      	subs	r4, #1
 80070c6:	e7ea      	b.n	800709e <quorem+0xe2>
 80070c8:	2000      	movs	r0, #0
 80070ca:	e7ee      	b.n	80070aa <quorem+0xee>
 80070cc:	0000      	movs	r0, r0
	...

080070d0 <_dtoa_r>:
 80070d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d4:	4614      	mov	r4, r2
 80070d6:	461d      	mov	r5, r3
 80070d8:	69c7      	ldr	r7, [r0, #28]
 80070da:	b097      	sub	sp, #92	@ 0x5c
 80070dc:	4683      	mov	fp, r0
 80070de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80070e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80070e4:	b97f      	cbnz	r7, 8007106 <_dtoa_r+0x36>
 80070e6:	2010      	movs	r0, #16
 80070e8:	f001 f93c 	bl	8008364 <malloc>
 80070ec:	4602      	mov	r2, r0
 80070ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80070f2:	b920      	cbnz	r0, 80070fe <_dtoa_r+0x2e>
 80070f4:	21ef      	movs	r1, #239	@ 0xef
 80070f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007398 <_dtoa_r+0x2c8>)
 80070f8:	48a8      	ldr	r0, [pc, #672]	@ (800739c <_dtoa_r+0x2cc>)
 80070fa:	f002 f8d7 	bl	80092ac <__assert_func>
 80070fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007102:	6007      	str	r7, [r0, #0]
 8007104:	60c7      	str	r7, [r0, #12]
 8007106:	f8db 301c 	ldr.w	r3, [fp, #28]
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	b159      	cbz	r1, 8007126 <_dtoa_r+0x56>
 800710e:	685a      	ldr	r2, [r3, #4]
 8007110:	2301      	movs	r3, #1
 8007112:	4093      	lsls	r3, r2
 8007114:	604a      	str	r2, [r1, #4]
 8007116:	608b      	str	r3, [r1, #8]
 8007118:	4658      	mov	r0, fp
 800711a:	f001 fa2b 	bl	8008574 <_Bfree>
 800711e:	2200      	movs	r2, #0
 8007120:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	1e2b      	subs	r3, r5, #0
 8007128:	bfaf      	iteee	ge
 800712a:	2300      	movge	r3, #0
 800712c:	2201      	movlt	r2, #1
 800712e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007132:	9303      	strlt	r3, [sp, #12]
 8007134:	bfa8      	it	ge
 8007136:	6033      	strge	r3, [r6, #0]
 8007138:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800713c:	4b98      	ldr	r3, [pc, #608]	@ (80073a0 <_dtoa_r+0x2d0>)
 800713e:	bfb8      	it	lt
 8007140:	6032      	strlt	r2, [r6, #0]
 8007142:	ea33 0308 	bics.w	r3, r3, r8
 8007146:	d112      	bne.n	800716e <_dtoa_r+0x9e>
 8007148:	f242 730f 	movw	r3, #9999	@ 0x270f
 800714c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007154:	4323      	orrs	r3, r4
 8007156:	f000 8550 	beq.w	8007bfa <_dtoa_r+0xb2a>
 800715a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800715c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80073a4 <_dtoa_r+0x2d4>
 8007160:	2b00      	cmp	r3, #0
 8007162:	f000 8552 	beq.w	8007c0a <_dtoa_r+0xb3a>
 8007166:	f10a 0303 	add.w	r3, sl, #3
 800716a:	f000 bd4c 	b.w	8007c06 <_dtoa_r+0xb36>
 800716e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007172:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	2300      	movs	r3, #0
 800717e:	f7f9 fc13 	bl	80009a8 <__aeabi_dcmpeq>
 8007182:	4607      	mov	r7, r0
 8007184:	b158      	cbz	r0, 800719e <_dtoa_r+0xce>
 8007186:	2301      	movs	r3, #1
 8007188:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800718a:	6013      	str	r3, [r2, #0]
 800718c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800718e:	b113      	cbz	r3, 8007196 <_dtoa_r+0xc6>
 8007190:	4b85      	ldr	r3, [pc, #532]	@ (80073a8 <_dtoa_r+0x2d8>)
 8007192:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80073ac <_dtoa_r+0x2dc>
 800719a:	f000 bd36 	b.w	8007c0a <_dtoa_r+0xb3a>
 800719e:	ab14      	add	r3, sp, #80	@ 0x50
 80071a0:	9301      	str	r3, [sp, #4]
 80071a2:	ab15      	add	r3, sp, #84	@ 0x54
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4658      	mov	r0, fp
 80071a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071ac:	f001 fd7c 	bl	8008ca8 <__d2b>
 80071b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80071b4:	4681      	mov	r9, r0
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	d077      	beq.n	80072aa <_dtoa_r+0x1da>
 80071ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80071cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80071d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80071d2:	4619      	mov	r1, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	4b76      	ldr	r3, [pc, #472]	@ (80073b0 <_dtoa_r+0x2e0>)
 80071d8:	f7f8 ffc6 	bl	8000168 <__aeabi_dsub>
 80071dc:	a368      	add	r3, pc, #416	@ (adr r3, 8007380 <_dtoa_r+0x2b0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f9 f979 	bl	80004d8 <__aeabi_dmul>
 80071e6:	a368      	add	r3, pc, #416	@ (adr r3, 8007388 <_dtoa_r+0x2b8>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f8 ffbe 	bl	800016c <__adddf3>
 80071f0:	4604      	mov	r4, r0
 80071f2:	4630      	mov	r0, r6
 80071f4:	460d      	mov	r5, r1
 80071f6:	f7f9 f905 	bl	8000404 <__aeabi_i2d>
 80071fa:	a365      	add	r3, pc, #404	@ (adr r3, 8007390 <_dtoa_r+0x2c0>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 f96a 	bl	80004d8 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4620      	mov	r0, r4
 800720a:	4629      	mov	r1, r5
 800720c:	f7f8 ffae 	bl	800016c <__adddf3>
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	f7f9 fc10 	bl	8000a38 <__aeabi_d2iz>
 8007218:	2200      	movs	r2, #0
 800721a:	4607      	mov	r7, r0
 800721c:	2300      	movs	r3, #0
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 fbcb 	bl	80009bc <__aeabi_dcmplt>
 8007226:	b140      	cbz	r0, 800723a <_dtoa_r+0x16a>
 8007228:	4638      	mov	r0, r7
 800722a:	f7f9 f8eb 	bl	8000404 <__aeabi_i2d>
 800722e:	4622      	mov	r2, r4
 8007230:	462b      	mov	r3, r5
 8007232:	f7f9 fbb9 	bl	80009a8 <__aeabi_dcmpeq>
 8007236:	b900      	cbnz	r0, 800723a <_dtoa_r+0x16a>
 8007238:	3f01      	subs	r7, #1
 800723a:	2f16      	cmp	r7, #22
 800723c:	d853      	bhi.n	80072e6 <_dtoa_r+0x216>
 800723e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007242:	4b5c      	ldr	r3, [pc, #368]	@ (80073b4 <_dtoa_r+0x2e4>)
 8007244:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	f7f9 fbb6 	bl	80009bc <__aeabi_dcmplt>
 8007250:	2800      	cmp	r0, #0
 8007252:	d04a      	beq.n	80072ea <_dtoa_r+0x21a>
 8007254:	2300      	movs	r3, #0
 8007256:	3f01      	subs	r7, #1
 8007258:	930f      	str	r3, [sp, #60]	@ 0x3c
 800725a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800725c:	1b9b      	subs	r3, r3, r6
 800725e:	1e5a      	subs	r2, r3, #1
 8007260:	bf46      	itte	mi
 8007262:	f1c3 0801 	rsbmi	r8, r3, #1
 8007266:	2300      	movmi	r3, #0
 8007268:	f04f 0800 	movpl.w	r8, #0
 800726c:	9209      	str	r2, [sp, #36]	@ 0x24
 800726e:	bf48      	it	mi
 8007270:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007272:	2f00      	cmp	r7, #0
 8007274:	db3b      	blt.n	80072ee <_dtoa_r+0x21e>
 8007276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007278:	970e      	str	r7, [sp, #56]	@ 0x38
 800727a:	443b      	add	r3, r7
 800727c:	9309      	str	r3, [sp, #36]	@ 0x24
 800727e:	2300      	movs	r3, #0
 8007280:	930a      	str	r3, [sp, #40]	@ 0x28
 8007282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007284:	2b09      	cmp	r3, #9
 8007286:	d866      	bhi.n	8007356 <_dtoa_r+0x286>
 8007288:	2b05      	cmp	r3, #5
 800728a:	bfc4      	itt	gt
 800728c:	3b04      	subgt	r3, #4
 800728e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007292:	bfc8      	it	gt
 8007294:	2400      	movgt	r4, #0
 8007296:	f1a3 0302 	sub.w	r3, r3, #2
 800729a:	bfd8      	it	le
 800729c:	2401      	movle	r4, #1
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d864      	bhi.n	800736c <_dtoa_r+0x29c>
 80072a2:	e8df f003 	tbb	[pc, r3]
 80072a6:	382b      	.short	0x382b
 80072a8:	5636      	.short	0x5636
 80072aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80072ae:	441e      	add	r6, r3
 80072b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	bfc1      	itttt	gt
 80072b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80072bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80072c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80072c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80072c8:	bfd6      	itet	le
 80072ca:	f1c3 0320 	rsble	r3, r3, #32
 80072ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80072d2:	fa04 f003 	lslle.w	r0, r4, r3
 80072d6:	f7f9 f885 	bl	80003e4 <__aeabi_ui2d>
 80072da:	2201      	movs	r2, #1
 80072dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072e0:	3e01      	subs	r6, #1
 80072e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80072e4:	e775      	b.n	80071d2 <_dtoa_r+0x102>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e7b6      	b.n	8007258 <_dtoa_r+0x188>
 80072ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80072ec:	e7b5      	b.n	800725a <_dtoa_r+0x18a>
 80072ee:	427b      	negs	r3, r7
 80072f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f2:	2300      	movs	r3, #0
 80072f4:	eba8 0807 	sub.w	r8, r8, r7
 80072f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80072fa:	e7c2      	b.n	8007282 <_dtoa_r+0x1b2>
 80072fc:	2300      	movs	r3, #0
 80072fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007300:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007302:	2b00      	cmp	r3, #0
 8007304:	dc35      	bgt.n	8007372 <_dtoa_r+0x2a2>
 8007306:	2301      	movs	r3, #1
 8007308:	461a      	mov	r2, r3
 800730a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800730e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007310:	e00b      	b.n	800732a <_dtoa_r+0x25a>
 8007312:	2301      	movs	r3, #1
 8007314:	e7f3      	b.n	80072fe <_dtoa_r+0x22e>
 8007316:	2300      	movs	r3, #0
 8007318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	9308      	str	r3, [sp, #32]
 8007320:	3301      	adds	r3, #1
 8007322:	2b01      	cmp	r3, #1
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	bfb8      	it	lt
 8007328:	2301      	movlt	r3, #1
 800732a:	2100      	movs	r1, #0
 800732c:	2204      	movs	r2, #4
 800732e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007332:	f102 0514 	add.w	r5, r2, #20
 8007336:	429d      	cmp	r5, r3
 8007338:	d91f      	bls.n	800737a <_dtoa_r+0x2aa>
 800733a:	6041      	str	r1, [r0, #4]
 800733c:	4658      	mov	r0, fp
 800733e:	f001 f8d9 	bl	80084f4 <_Balloc>
 8007342:	4682      	mov	sl, r0
 8007344:	2800      	cmp	r0, #0
 8007346:	d139      	bne.n	80073bc <_dtoa_r+0x2ec>
 8007348:	4602      	mov	r2, r0
 800734a:	f240 11af 	movw	r1, #431	@ 0x1af
 800734e:	4b1a      	ldr	r3, [pc, #104]	@ (80073b8 <_dtoa_r+0x2e8>)
 8007350:	e6d2      	b.n	80070f8 <_dtoa_r+0x28>
 8007352:	2301      	movs	r3, #1
 8007354:	e7e0      	b.n	8007318 <_dtoa_r+0x248>
 8007356:	2401      	movs	r4, #1
 8007358:	2300      	movs	r3, #0
 800735a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800735c:	9320      	str	r3, [sp, #128]	@ 0x80
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
 8007362:	2200      	movs	r2, #0
 8007364:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007368:	2312      	movs	r3, #18
 800736a:	e7d0      	b.n	800730e <_dtoa_r+0x23e>
 800736c:	2301      	movs	r3, #1
 800736e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007370:	e7f5      	b.n	800735e <_dtoa_r+0x28e>
 8007372:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007374:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007378:	e7d7      	b.n	800732a <_dtoa_r+0x25a>
 800737a:	3101      	adds	r1, #1
 800737c:	0052      	lsls	r2, r2, #1
 800737e:	e7d8      	b.n	8007332 <_dtoa_r+0x262>
 8007380:	636f4361 	.word	0x636f4361
 8007384:	3fd287a7 	.word	0x3fd287a7
 8007388:	8b60c8b3 	.word	0x8b60c8b3
 800738c:	3fc68a28 	.word	0x3fc68a28
 8007390:	509f79fb 	.word	0x509f79fb
 8007394:	3fd34413 	.word	0x3fd34413
 8007398:	08009b71 	.word	0x08009b71
 800739c:	08009b88 	.word	0x08009b88
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	08009b6d 	.word	0x08009b6d
 80073a8:	08009b39 	.word	0x08009b39
 80073ac:	08009b38 	.word	0x08009b38
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	08009ce0 	.word	0x08009ce0
 80073b8:	08009be0 	.word	0x08009be0
 80073bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80073c0:	6018      	str	r0, [r3, #0]
 80073c2:	9b07      	ldr	r3, [sp, #28]
 80073c4:	2b0e      	cmp	r3, #14
 80073c6:	f200 80a4 	bhi.w	8007512 <_dtoa_r+0x442>
 80073ca:	2c00      	cmp	r4, #0
 80073cc:	f000 80a1 	beq.w	8007512 <_dtoa_r+0x442>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	dd33      	ble.n	800743c <_dtoa_r+0x36c>
 80073d4:	4b86      	ldr	r3, [pc, #536]	@ (80075f0 <_dtoa_r+0x520>)
 80073d6:	f007 020f 	and.w	r2, r7, #15
 80073da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073de:	05f8      	lsls	r0, r7, #23
 80073e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073ec:	d516      	bpl.n	800741c <_dtoa_r+0x34c>
 80073ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f2:	4b80      	ldr	r3, [pc, #512]	@ (80075f4 <_dtoa_r+0x524>)
 80073f4:	2603      	movs	r6, #3
 80073f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073fa:	f7f9 f997 	bl	800072c <__aeabi_ddiv>
 80073fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007402:	f004 040f 	and.w	r4, r4, #15
 8007406:	4d7b      	ldr	r5, [pc, #492]	@ (80075f4 <_dtoa_r+0x524>)
 8007408:	b954      	cbnz	r4, 8007420 <_dtoa_r+0x350>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007412:	f7f9 f98b 	bl	800072c <__aeabi_ddiv>
 8007416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800741a:	e028      	b.n	800746e <_dtoa_r+0x39e>
 800741c:	2602      	movs	r6, #2
 800741e:	e7f2      	b.n	8007406 <_dtoa_r+0x336>
 8007420:	07e1      	lsls	r1, r4, #31
 8007422:	d508      	bpl.n	8007436 <_dtoa_r+0x366>
 8007424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800742c:	f7f9 f854 	bl	80004d8 <__aeabi_dmul>
 8007430:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007434:	3601      	adds	r6, #1
 8007436:	1064      	asrs	r4, r4, #1
 8007438:	3508      	adds	r5, #8
 800743a:	e7e5      	b.n	8007408 <_dtoa_r+0x338>
 800743c:	f000 80d2 	beq.w	80075e4 <_dtoa_r+0x514>
 8007440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007444:	427c      	negs	r4, r7
 8007446:	4b6a      	ldr	r3, [pc, #424]	@ (80075f0 <_dtoa_r+0x520>)
 8007448:	f004 020f 	and.w	r2, r4, #15
 800744c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	2602      	movs	r6, #2
 800745a:	2300      	movs	r3, #0
 800745c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007460:	4d64      	ldr	r5, [pc, #400]	@ (80075f4 <_dtoa_r+0x524>)
 8007462:	1124      	asrs	r4, r4, #4
 8007464:	2c00      	cmp	r4, #0
 8007466:	f040 80b2 	bne.w	80075ce <_dtoa_r+0x4fe>
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1d3      	bne.n	8007416 <_dtoa_r+0x346>
 800746e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007472:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80b7 	beq.w	80075e8 <_dtoa_r+0x518>
 800747a:	2200      	movs	r2, #0
 800747c:	4620      	mov	r0, r4
 800747e:	4629      	mov	r1, r5
 8007480:	4b5d      	ldr	r3, [pc, #372]	@ (80075f8 <_dtoa_r+0x528>)
 8007482:	f7f9 fa9b 	bl	80009bc <__aeabi_dcmplt>
 8007486:	2800      	cmp	r0, #0
 8007488:	f000 80ae 	beq.w	80075e8 <_dtoa_r+0x518>
 800748c:	9b07      	ldr	r3, [sp, #28]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 80aa 	beq.w	80075e8 <_dtoa_r+0x518>
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	dd37      	ble.n	800750a <_dtoa_r+0x43a>
 800749a:	1e7b      	subs	r3, r7, #1
 800749c:	4620      	mov	r0, r4
 800749e:	9304      	str	r3, [sp, #16]
 80074a0:	2200      	movs	r2, #0
 80074a2:	4629      	mov	r1, r5
 80074a4:	4b55      	ldr	r3, [pc, #340]	@ (80075fc <_dtoa_r+0x52c>)
 80074a6:	f7f9 f817 	bl	80004d8 <__aeabi_dmul>
 80074aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ae:	9c08      	ldr	r4, [sp, #32]
 80074b0:	3601      	adds	r6, #1
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7f8 ffa6 	bl	8000404 <__aeabi_i2d>
 80074b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074bc:	f7f9 f80c 	bl	80004d8 <__aeabi_dmul>
 80074c0:	2200      	movs	r2, #0
 80074c2:	4b4f      	ldr	r3, [pc, #316]	@ (8007600 <_dtoa_r+0x530>)
 80074c4:	f7f8 fe52 	bl	800016c <__adddf3>
 80074c8:	4605      	mov	r5, r0
 80074ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074ce:	2c00      	cmp	r4, #0
 80074d0:	f040 809a 	bne.w	8007608 <_dtoa_r+0x538>
 80074d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	4b4a      	ldr	r3, [pc, #296]	@ (8007604 <_dtoa_r+0x534>)
 80074dc:	f7f8 fe44 	bl	8000168 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074e8:	462a      	mov	r2, r5
 80074ea:	4633      	mov	r3, r6
 80074ec:	f7f9 fa84 	bl	80009f8 <__aeabi_dcmpgt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f040 828e 	bne.w	8007a12 <_dtoa_r+0x942>
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	462a      	mov	r2, r5
 80074fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007500:	f7f9 fa5c 	bl	80009bc <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 8127 	bne.w	8007758 <_dtoa_r+0x688>
 800750a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800750e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007512:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007514:	2b00      	cmp	r3, #0
 8007516:	f2c0 8163 	blt.w	80077e0 <_dtoa_r+0x710>
 800751a:	2f0e      	cmp	r7, #14
 800751c:	f300 8160 	bgt.w	80077e0 <_dtoa_r+0x710>
 8007520:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <_dtoa_r+0x520>)
 8007522:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007526:	e9d3 3400 	ldrd	r3, r4, [r3]
 800752a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800752e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007530:	2b00      	cmp	r3, #0
 8007532:	da03      	bge.n	800753c <_dtoa_r+0x46c>
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f340 8100 	ble.w	800773c <_dtoa_r+0x66c>
 800753c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007540:	4656      	mov	r6, sl
 8007542:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 f8ef 	bl	800072c <__aeabi_ddiv>
 800754e:	f7f9 fa73 	bl	8000a38 <__aeabi_d2iz>
 8007552:	4680      	mov	r8, r0
 8007554:	f7f8 ff56 	bl	8000404 <__aeabi_i2d>
 8007558:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755c:	f7f8 ffbc 	bl	80004d8 <__aeabi_dmul>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4620      	mov	r0, r4
 8007566:	4629      	mov	r1, r5
 8007568:	f7f8 fdfe 	bl	8000168 <__aeabi_dsub>
 800756c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007570:	9d07      	ldr	r5, [sp, #28]
 8007572:	f806 4b01 	strb.w	r4, [r6], #1
 8007576:	eba6 040a 	sub.w	r4, r6, sl
 800757a:	42a5      	cmp	r5, r4
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	f040 8116 	bne.w	80077b0 <_dtoa_r+0x6e0>
 8007584:	f7f8 fdf2 	bl	800016c <__adddf3>
 8007588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758c:	4604      	mov	r4, r0
 800758e:	460d      	mov	r5, r1
 8007590:	f7f9 fa32 	bl	80009f8 <__aeabi_dcmpgt>
 8007594:	2800      	cmp	r0, #0
 8007596:	f040 80f8 	bne.w	800778a <_dtoa_r+0x6ba>
 800759a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759e:	4620      	mov	r0, r4
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7f9 fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80075a6:	b118      	cbz	r0, 80075b0 <_dtoa_r+0x4e0>
 80075a8:	f018 0f01 	tst.w	r8, #1
 80075ac:	f040 80ed 	bne.w	800778a <_dtoa_r+0x6ba>
 80075b0:	4649      	mov	r1, r9
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 ffde 	bl	8008574 <_Bfree>
 80075b8:	2300      	movs	r3, #0
 80075ba:	7033      	strb	r3, [r6, #0]
 80075bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80075be:	3701      	adds	r7, #1
 80075c0:	601f      	str	r7, [r3, #0]
 80075c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8320 	beq.w	8007c0a <_dtoa_r+0xb3a>
 80075ca:	601e      	str	r6, [r3, #0]
 80075cc:	e31d      	b.n	8007c0a <_dtoa_r+0xb3a>
 80075ce:	07e2      	lsls	r2, r4, #31
 80075d0:	d505      	bpl.n	80075de <_dtoa_r+0x50e>
 80075d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d6:	f7f8 ff7f 	bl	80004d8 <__aeabi_dmul>
 80075da:	2301      	movs	r3, #1
 80075dc:	3601      	adds	r6, #1
 80075de:	1064      	asrs	r4, r4, #1
 80075e0:	3508      	adds	r5, #8
 80075e2:	e73f      	b.n	8007464 <_dtoa_r+0x394>
 80075e4:	2602      	movs	r6, #2
 80075e6:	e742      	b.n	800746e <_dtoa_r+0x39e>
 80075e8:	9c07      	ldr	r4, [sp, #28]
 80075ea:	9704      	str	r7, [sp, #16]
 80075ec:	e761      	b.n	80074b2 <_dtoa_r+0x3e2>
 80075ee:	bf00      	nop
 80075f0:	08009ce0 	.word	0x08009ce0
 80075f4:	08009cb8 	.word	0x08009cb8
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	4b70      	ldr	r3, [pc, #448]	@ (80077cc <_dtoa_r+0x6fc>)
 800760a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800760c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007614:	4454      	add	r4, sl
 8007616:	2900      	cmp	r1, #0
 8007618:	d045      	beq.n	80076a6 <_dtoa_r+0x5d6>
 800761a:	2000      	movs	r0, #0
 800761c:	496c      	ldr	r1, [pc, #432]	@ (80077d0 <_dtoa_r+0x700>)
 800761e:	f7f9 f885 	bl	800072c <__aeabi_ddiv>
 8007622:	4633      	mov	r3, r6
 8007624:	462a      	mov	r2, r5
 8007626:	f7f8 fd9f 	bl	8000168 <__aeabi_dsub>
 800762a:	4656      	mov	r6, sl
 800762c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007630:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007634:	f7f9 fa00 	bl	8000a38 <__aeabi_d2iz>
 8007638:	4605      	mov	r5, r0
 800763a:	f7f8 fee3 	bl	8000404 <__aeabi_i2d>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007646:	f7f8 fd8f 	bl	8000168 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	3530      	adds	r5, #48	@ 0x30
 8007650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007654:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007658:	f806 5b01 	strb.w	r5, [r6], #1
 800765c:	f7f9 f9ae 	bl	80009bc <__aeabi_dcmplt>
 8007660:	2800      	cmp	r0, #0
 8007662:	d163      	bne.n	800772c <_dtoa_r+0x65c>
 8007664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007668:	2000      	movs	r0, #0
 800766a:	495a      	ldr	r1, [pc, #360]	@ (80077d4 <_dtoa_r+0x704>)
 800766c:	f7f8 fd7c 	bl	8000168 <__aeabi_dsub>
 8007670:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007674:	f7f9 f9a2 	bl	80009bc <__aeabi_dcmplt>
 8007678:	2800      	cmp	r0, #0
 800767a:	f040 8087 	bne.w	800778c <_dtoa_r+0x6bc>
 800767e:	42a6      	cmp	r6, r4
 8007680:	f43f af43 	beq.w	800750a <_dtoa_r+0x43a>
 8007684:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007688:	2200      	movs	r2, #0
 800768a:	4b53      	ldr	r3, [pc, #332]	@ (80077d8 <_dtoa_r+0x708>)
 800768c:	f7f8 ff24 	bl	80004d8 <__aeabi_dmul>
 8007690:	2200      	movs	r2, #0
 8007692:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769a:	4b4f      	ldr	r3, [pc, #316]	@ (80077d8 <_dtoa_r+0x708>)
 800769c:	f7f8 ff1c 	bl	80004d8 <__aeabi_dmul>
 80076a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a4:	e7c4      	b.n	8007630 <_dtoa_r+0x560>
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	f7f8 ff15 	bl	80004d8 <__aeabi_dmul>
 80076ae:	4656      	mov	r6, sl
 80076b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80076b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ba:	f7f9 f9bd 	bl	8000a38 <__aeabi_d2iz>
 80076be:	4605      	mov	r5, r0
 80076c0:	f7f8 fea0 	bl	8000404 <__aeabi_i2d>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076cc:	f7f8 fd4c 	bl	8000168 <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	3530      	adds	r5, #48	@ 0x30
 80076d6:	f806 5b01 	strb.w	r5, [r6], #1
 80076da:	42a6      	cmp	r6, r4
 80076dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	d124      	bne.n	8007730 <_dtoa_r+0x660>
 80076e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80076ea:	4b39      	ldr	r3, [pc, #228]	@ (80077d0 <_dtoa_r+0x700>)
 80076ec:	f7f8 fd3e 	bl	800016c <__adddf3>
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	f7f9 f97e 	bl	80009f8 <__aeabi_dcmpgt>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d145      	bne.n	800778c <_dtoa_r+0x6bc>
 8007700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007704:	2000      	movs	r0, #0
 8007706:	4932      	ldr	r1, [pc, #200]	@ (80077d0 <_dtoa_r+0x700>)
 8007708:	f7f8 fd2e 	bl	8000168 <__aeabi_dsub>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007714:	f7f9 f952 	bl	80009bc <__aeabi_dcmplt>
 8007718:	2800      	cmp	r0, #0
 800771a:	f43f aef6 	beq.w	800750a <_dtoa_r+0x43a>
 800771e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007720:	1e73      	subs	r3, r6, #1
 8007722:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007724:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007728:	2b30      	cmp	r3, #48	@ 0x30
 800772a:	d0f8      	beq.n	800771e <_dtoa_r+0x64e>
 800772c:	9f04      	ldr	r7, [sp, #16]
 800772e:	e73f      	b.n	80075b0 <_dtoa_r+0x4e0>
 8007730:	4b29      	ldr	r3, [pc, #164]	@ (80077d8 <_dtoa_r+0x708>)
 8007732:	f7f8 fed1 	bl	80004d8 <__aeabi_dmul>
 8007736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800773a:	e7bc      	b.n	80076b6 <_dtoa_r+0x5e6>
 800773c:	d10c      	bne.n	8007758 <_dtoa_r+0x688>
 800773e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007742:	2200      	movs	r2, #0
 8007744:	4b25      	ldr	r3, [pc, #148]	@ (80077dc <_dtoa_r+0x70c>)
 8007746:	f7f8 fec7 	bl	80004d8 <__aeabi_dmul>
 800774a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800774e:	f7f9 f949 	bl	80009e4 <__aeabi_dcmpge>
 8007752:	2800      	cmp	r0, #0
 8007754:	f000 815b 	beq.w	8007a0e <_dtoa_r+0x93e>
 8007758:	2400      	movs	r4, #0
 800775a:	4625      	mov	r5, r4
 800775c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800775e:	4656      	mov	r6, sl
 8007760:	43db      	mvns	r3, r3
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	2700      	movs	r7, #0
 8007766:	4621      	mov	r1, r4
 8007768:	4658      	mov	r0, fp
 800776a:	f000 ff03 	bl	8008574 <_Bfree>
 800776e:	2d00      	cmp	r5, #0
 8007770:	d0dc      	beq.n	800772c <_dtoa_r+0x65c>
 8007772:	b12f      	cbz	r7, 8007780 <_dtoa_r+0x6b0>
 8007774:	42af      	cmp	r7, r5
 8007776:	d003      	beq.n	8007780 <_dtoa_r+0x6b0>
 8007778:	4639      	mov	r1, r7
 800777a:	4658      	mov	r0, fp
 800777c:	f000 fefa 	bl	8008574 <_Bfree>
 8007780:	4629      	mov	r1, r5
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fef6 	bl	8008574 <_Bfree>
 8007788:	e7d0      	b.n	800772c <_dtoa_r+0x65c>
 800778a:	9704      	str	r7, [sp, #16]
 800778c:	4633      	mov	r3, r6
 800778e:	461e      	mov	r6, r3
 8007790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007794:	2a39      	cmp	r2, #57	@ 0x39
 8007796:	d107      	bne.n	80077a8 <_dtoa_r+0x6d8>
 8007798:	459a      	cmp	sl, r3
 800779a:	d1f8      	bne.n	800778e <_dtoa_r+0x6be>
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	3201      	adds	r2, #1
 80077a0:	9204      	str	r2, [sp, #16]
 80077a2:	2230      	movs	r2, #48	@ 0x30
 80077a4:	f88a 2000 	strb.w	r2, [sl]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	3201      	adds	r2, #1
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e7bd      	b.n	800772c <_dtoa_r+0x65c>
 80077b0:	2200      	movs	r2, #0
 80077b2:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <_dtoa_r+0x708>)
 80077b4:	f7f8 fe90 	bl	80004d8 <__aeabi_dmul>
 80077b8:	2200      	movs	r2, #0
 80077ba:	2300      	movs	r3, #0
 80077bc:	4604      	mov	r4, r0
 80077be:	460d      	mov	r5, r1
 80077c0:	f7f9 f8f2 	bl	80009a8 <__aeabi_dcmpeq>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	f43f aebc 	beq.w	8007542 <_dtoa_r+0x472>
 80077ca:	e6f1      	b.n	80075b0 <_dtoa_r+0x4e0>
 80077cc:	08009ce0 	.word	0x08009ce0
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	3ff00000 	.word	0x3ff00000
 80077d8:	40240000 	.word	0x40240000
 80077dc:	40140000 	.word	0x40140000
 80077e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077e2:	2a00      	cmp	r2, #0
 80077e4:	f000 80db 	beq.w	800799e <_dtoa_r+0x8ce>
 80077e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	f300 80bf 	bgt.w	800796e <_dtoa_r+0x89e>
 80077f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	f000 80b7 	beq.w	8007966 <_dtoa_r+0x896>
 80077f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077fc:	4646      	mov	r6, r8
 80077fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007800:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007802:	2101      	movs	r1, #1
 8007804:	441a      	add	r2, r3
 8007806:	4658      	mov	r0, fp
 8007808:	4498      	add	r8, r3
 800780a:	9209      	str	r2, [sp, #36]	@ 0x24
 800780c:	f000 ffb0 	bl	8008770 <__i2b>
 8007810:	4605      	mov	r5, r0
 8007812:	b15e      	cbz	r6, 800782c <_dtoa_r+0x75c>
 8007814:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd08      	ble.n	800782c <_dtoa_r+0x75c>
 800781a:	42b3      	cmp	r3, r6
 800781c:	bfa8      	it	ge
 800781e:	4633      	movge	r3, r6
 8007820:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007822:	eba8 0803 	sub.w	r8, r8, r3
 8007826:	1af6      	subs	r6, r6, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	9309      	str	r3, [sp, #36]	@ 0x24
 800782c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782e:	b1f3      	cbz	r3, 800786e <_dtoa_r+0x79e>
 8007830:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80b7 	beq.w	80079a6 <_dtoa_r+0x8d6>
 8007838:	b18c      	cbz	r4, 800785e <_dtoa_r+0x78e>
 800783a:	4629      	mov	r1, r5
 800783c:	4622      	mov	r2, r4
 800783e:	4658      	mov	r0, fp
 8007840:	f001 f854 	bl	80088ec <__pow5mult>
 8007844:	464a      	mov	r2, r9
 8007846:	4601      	mov	r1, r0
 8007848:	4605      	mov	r5, r0
 800784a:	4658      	mov	r0, fp
 800784c:	f000 ffa6 	bl	800879c <__multiply>
 8007850:	4649      	mov	r1, r9
 8007852:	9004      	str	r0, [sp, #16]
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fe8d 	bl	8008574 <_Bfree>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	4699      	mov	r9, r3
 800785e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007860:	1b1a      	subs	r2, r3, r4
 8007862:	d004      	beq.n	800786e <_dtoa_r+0x79e>
 8007864:	4649      	mov	r1, r9
 8007866:	4658      	mov	r0, fp
 8007868:	f001 f840 	bl	80088ec <__pow5mult>
 800786c:	4681      	mov	r9, r0
 800786e:	2101      	movs	r1, #1
 8007870:	4658      	mov	r0, fp
 8007872:	f000 ff7d 	bl	8008770 <__i2b>
 8007876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007878:	4604      	mov	r4, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	f000 81c9 	beq.w	8007c12 <_dtoa_r+0xb42>
 8007880:	461a      	mov	r2, r3
 8007882:	4601      	mov	r1, r0
 8007884:	4658      	mov	r0, fp
 8007886:	f001 f831 	bl	80088ec <__pow5mult>
 800788a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800788c:	4604      	mov	r4, r0
 800788e:	2b01      	cmp	r3, #1
 8007890:	f300 808f 	bgt.w	80079b2 <_dtoa_r+0x8e2>
 8007894:	9b02      	ldr	r3, [sp, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f040 8087 	bne.w	80079aa <_dtoa_r+0x8da>
 800789c:	9b03      	ldr	r3, [sp, #12]
 800789e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f040 8083 	bne.w	80079ae <_dtoa_r+0x8de>
 80078a8:	9b03      	ldr	r3, [sp, #12]
 80078aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078ae:	0d1b      	lsrs	r3, r3, #20
 80078b0:	051b      	lsls	r3, r3, #20
 80078b2:	b12b      	cbz	r3, 80078c0 <_dtoa_r+0x7f0>
 80078b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b6:	f108 0801 	add.w	r8, r8, #1
 80078ba:	3301      	adds	r3, #1
 80078bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078be:	2301      	movs	r3, #1
 80078c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 81aa 	beq.w	8007c1e <_dtoa_r+0xb4e>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078d0:	6918      	ldr	r0, [r3, #16]
 80078d2:	f000 ff01 	bl	80086d8 <__hi0bits>
 80078d6:	f1c0 0020 	rsb	r0, r0, #32
 80078da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078dc:	4418      	add	r0, r3
 80078de:	f010 001f 	ands.w	r0, r0, #31
 80078e2:	d071      	beq.n	80079c8 <_dtoa_r+0x8f8>
 80078e4:	f1c0 0320 	rsb	r3, r0, #32
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	dd65      	ble.n	80079b8 <_dtoa_r+0x8e8>
 80078ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ee:	f1c0 001c 	rsb	r0, r0, #28
 80078f2:	4403      	add	r3, r0
 80078f4:	4480      	add	r8, r0
 80078f6:	4406      	add	r6, r0
 80078f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fa:	f1b8 0f00 	cmp.w	r8, #0
 80078fe:	dd05      	ble.n	800790c <_dtoa_r+0x83c>
 8007900:	4649      	mov	r1, r9
 8007902:	4642      	mov	r2, r8
 8007904:	4658      	mov	r0, fp
 8007906:	f001 f84b 	bl	80089a0 <__lshift>
 800790a:	4681      	mov	r9, r0
 800790c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	dd05      	ble.n	800791e <_dtoa_r+0x84e>
 8007912:	4621      	mov	r1, r4
 8007914:	461a      	mov	r2, r3
 8007916:	4658      	mov	r0, fp
 8007918:	f001 f842 	bl	80089a0 <__lshift>
 800791c:	4604      	mov	r4, r0
 800791e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007920:	2b00      	cmp	r3, #0
 8007922:	d053      	beq.n	80079cc <_dtoa_r+0x8fc>
 8007924:	4621      	mov	r1, r4
 8007926:	4648      	mov	r0, r9
 8007928:	f001 f8a6 	bl	8008a78 <__mcmp>
 800792c:	2800      	cmp	r0, #0
 800792e:	da4d      	bge.n	80079cc <_dtoa_r+0x8fc>
 8007930:	1e7b      	subs	r3, r7, #1
 8007932:	4649      	mov	r1, r9
 8007934:	9304      	str	r3, [sp, #16]
 8007936:	220a      	movs	r2, #10
 8007938:	2300      	movs	r3, #0
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fe3c 	bl	80085b8 <__multadd>
 8007940:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007942:	4681      	mov	r9, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 816c 	beq.w	8007c22 <_dtoa_r+0xb52>
 800794a:	2300      	movs	r3, #0
 800794c:	4629      	mov	r1, r5
 800794e:	220a      	movs	r2, #10
 8007950:	4658      	mov	r0, fp
 8007952:	f000 fe31 	bl	80085b8 <__multadd>
 8007956:	9b08      	ldr	r3, [sp, #32]
 8007958:	4605      	mov	r5, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc61      	bgt.n	8007a22 <_dtoa_r+0x952>
 800795e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007960:	2b02      	cmp	r3, #2
 8007962:	dc3b      	bgt.n	80079dc <_dtoa_r+0x90c>
 8007964:	e05d      	b.n	8007a22 <_dtoa_r+0x952>
 8007966:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007968:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800796c:	e746      	b.n	80077fc <_dtoa_r+0x72c>
 800796e:	9b07      	ldr	r3, [sp, #28]
 8007970:	1e5c      	subs	r4, r3, #1
 8007972:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007974:	42a3      	cmp	r3, r4
 8007976:	bfbf      	itttt	lt
 8007978:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800797a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800797c:	1ae3      	sublt	r3, r4, r3
 800797e:	18d2      	addlt	r2, r2, r3
 8007980:	bfa8      	it	ge
 8007982:	1b1c      	subge	r4, r3, r4
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	bfbe      	ittt	lt
 8007988:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800798a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800798c:	2400      	movlt	r4, #0
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfb5      	itete	lt
 8007992:	eba8 0603 	sublt.w	r6, r8, r3
 8007996:	4646      	movge	r6, r8
 8007998:	2300      	movlt	r3, #0
 800799a:	9b07      	ldrge	r3, [sp, #28]
 800799c:	e730      	b.n	8007800 <_dtoa_r+0x730>
 800799e:	4646      	mov	r6, r8
 80079a0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079a2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80079a4:	e735      	b.n	8007812 <_dtoa_r+0x742>
 80079a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80079a8:	e75c      	b.n	8007864 <_dtoa_r+0x794>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e788      	b.n	80078c0 <_dtoa_r+0x7f0>
 80079ae:	9b02      	ldr	r3, [sp, #8]
 80079b0:	e786      	b.n	80078c0 <_dtoa_r+0x7f0>
 80079b2:	2300      	movs	r3, #0
 80079b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80079b6:	e788      	b.n	80078ca <_dtoa_r+0x7fa>
 80079b8:	d09f      	beq.n	80078fa <_dtoa_r+0x82a>
 80079ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079bc:	331c      	adds	r3, #28
 80079be:	441a      	add	r2, r3
 80079c0:	4498      	add	r8, r3
 80079c2:	441e      	add	r6, r3
 80079c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80079c6:	e798      	b.n	80078fa <_dtoa_r+0x82a>
 80079c8:	4603      	mov	r3, r0
 80079ca:	e7f6      	b.n	80079ba <_dtoa_r+0x8ea>
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	9704      	str	r7, [sp, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	dc20      	bgt.n	8007a16 <_dtoa_r+0x946>
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079d8:	2b02      	cmp	r3, #2
 80079da:	dd1e      	ble.n	8007a1a <_dtoa_r+0x94a>
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f47f aebc 	bne.w	800775c <_dtoa_r+0x68c>
 80079e4:	4621      	mov	r1, r4
 80079e6:	2205      	movs	r2, #5
 80079e8:	4658      	mov	r0, fp
 80079ea:	f000 fde5 	bl	80085b8 <__multadd>
 80079ee:	4601      	mov	r1, r0
 80079f0:	4604      	mov	r4, r0
 80079f2:	4648      	mov	r0, r9
 80079f4:	f001 f840 	bl	8008a78 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f77f aeaf 	ble.w	800775c <_dtoa_r+0x68c>
 80079fe:	2331      	movs	r3, #49	@ 0x31
 8007a00:	4656      	mov	r6, sl
 8007a02:	f806 3b01 	strb.w	r3, [r6], #1
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	9304      	str	r3, [sp, #16]
 8007a0c:	e6aa      	b.n	8007764 <_dtoa_r+0x694>
 8007a0e:	9c07      	ldr	r4, [sp, #28]
 8007a10:	9704      	str	r7, [sp, #16]
 8007a12:	4625      	mov	r5, r4
 8007a14:	e7f3      	b.n	80079fe <_dtoa_r+0x92e>
 8007a16:	9b07      	ldr	r3, [sp, #28]
 8007a18:	9308      	str	r3, [sp, #32]
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 8104 	beq.w	8007c2a <_dtoa_r+0xb5a>
 8007a22:	2e00      	cmp	r6, #0
 8007a24:	dd05      	ble.n	8007a32 <_dtoa_r+0x962>
 8007a26:	4629      	mov	r1, r5
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 ffb8 	bl	80089a0 <__lshift>
 8007a30:	4605      	mov	r5, r0
 8007a32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d05a      	beq.n	8007aee <_dtoa_r+0xa1e>
 8007a38:	4658      	mov	r0, fp
 8007a3a:	6869      	ldr	r1, [r5, #4]
 8007a3c:	f000 fd5a 	bl	80084f4 <_Balloc>
 8007a40:	4606      	mov	r6, r0
 8007a42:	b928      	cbnz	r0, 8007a50 <_dtoa_r+0x980>
 8007a44:	4602      	mov	r2, r0
 8007a46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a4a:	4b83      	ldr	r3, [pc, #524]	@ (8007c58 <_dtoa_r+0xb88>)
 8007a4c:	f7ff bb54 	b.w	80070f8 <_dtoa_r+0x28>
 8007a50:	692a      	ldr	r2, [r5, #16]
 8007a52:	f105 010c 	add.w	r1, r5, #12
 8007a56:	3202      	adds	r2, #2
 8007a58:	0092      	lsls	r2, r2, #2
 8007a5a:	300c      	adds	r0, #12
 8007a5c:	f7ff fa99 	bl	8006f92 <memcpy>
 8007a60:	2201      	movs	r2, #1
 8007a62:	4631      	mov	r1, r6
 8007a64:	4658      	mov	r0, fp
 8007a66:	f000 ff9b 	bl	80089a0 <__lshift>
 8007a6a:	462f      	mov	r7, r5
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	f10a 0301 	add.w	r3, sl, #1
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	9b08      	ldr	r3, [sp, #32]
 8007a76:	4453      	add	r3, sl
 8007a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a82:	9b07      	ldr	r3, [sp, #28]
 8007a84:	4621      	mov	r1, r4
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4648      	mov	r0, r9
 8007a8a:	9302      	str	r3, [sp, #8]
 8007a8c:	f7ff fa96 	bl	8006fbc <quorem>
 8007a90:	4639      	mov	r1, r7
 8007a92:	9008      	str	r0, [sp, #32]
 8007a94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a98:	4648      	mov	r0, r9
 8007a9a:	f000 ffed 	bl	8008a78 <__mcmp>
 8007a9e:	462a      	mov	r2, r5
 8007aa0:	9009      	str	r0, [sp, #36]	@ 0x24
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4658      	mov	r0, fp
 8007aa6:	f001 f803 	bl	8008ab0 <__mdiff>
 8007aaa:	68c2      	ldr	r2, [r0, #12]
 8007aac:	4606      	mov	r6, r0
 8007aae:	bb02      	cbnz	r2, 8007af2 <_dtoa_r+0xa22>
 8007ab0:	4601      	mov	r1, r0
 8007ab2:	4648      	mov	r0, r9
 8007ab4:	f000 ffe0 	bl	8008a78 <__mcmp>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	4631      	mov	r1, r6
 8007abc:	4658      	mov	r0, fp
 8007abe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ac0:	f000 fd58 	bl	8008574 <_Bfree>
 8007ac4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ac6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007ac8:	9e07      	ldr	r6, [sp, #28]
 8007aca:	ea43 0102 	orr.w	r1, r3, r2
 8007ace:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad0:	4319      	orrs	r1, r3
 8007ad2:	d110      	bne.n	8007af6 <_dtoa_r+0xa26>
 8007ad4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ad8:	d029      	beq.n	8007b2e <_dtoa_r+0xa5e>
 8007ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dd02      	ble.n	8007ae6 <_dtoa_r+0xa16>
 8007ae0:	9b08      	ldr	r3, [sp, #32]
 8007ae2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007ae6:	9b02      	ldr	r3, [sp, #8]
 8007ae8:	f883 8000 	strb.w	r8, [r3]
 8007aec:	e63b      	b.n	8007766 <_dtoa_r+0x696>
 8007aee:	4628      	mov	r0, r5
 8007af0:	e7bb      	b.n	8007a6a <_dtoa_r+0x99a>
 8007af2:	2201      	movs	r2, #1
 8007af4:	e7e1      	b.n	8007aba <_dtoa_r+0x9ea>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db04      	blt.n	8007b06 <_dtoa_r+0xa36>
 8007afc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007afe:	430b      	orrs	r3, r1
 8007b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b02:	430b      	orrs	r3, r1
 8007b04:	d120      	bne.n	8007b48 <_dtoa_r+0xa78>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dded      	ble.n	8007ae6 <_dtoa_r+0xa16>
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4658      	mov	r0, fp
 8007b10:	f000 ff46 	bl	80089a0 <__lshift>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4681      	mov	r9, r0
 8007b18:	f000 ffae 	bl	8008a78 <__mcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	dc03      	bgt.n	8007b28 <_dtoa_r+0xa58>
 8007b20:	d1e1      	bne.n	8007ae6 <_dtoa_r+0xa16>
 8007b22:	f018 0f01 	tst.w	r8, #1
 8007b26:	d0de      	beq.n	8007ae6 <_dtoa_r+0xa16>
 8007b28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b2c:	d1d8      	bne.n	8007ae0 <_dtoa_r+0xa10>
 8007b2e:	2339      	movs	r3, #57	@ 0x39
 8007b30:	9a02      	ldr	r2, [sp, #8]
 8007b32:	7013      	strb	r3, [r2, #0]
 8007b34:	4633      	mov	r3, r6
 8007b36:	461e      	mov	r6, r3
 8007b38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	2a39      	cmp	r2, #57	@ 0x39
 8007b40:	d052      	beq.n	8007be8 <_dtoa_r+0xb18>
 8007b42:	3201      	adds	r2, #1
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e60e      	b.n	8007766 <_dtoa_r+0x696>
 8007b48:	2a00      	cmp	r2, #0
 8007b4a:	dd07      	ble.n	8007b5c <_dtoa_r+0xa8c>
 8007b4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007b50:	d0ed      	beq.n	8007b2e <_dtoa_r+0xa5e>
 8007b52:	9a02      	ldr	r2, [sp, #8]
 8007b54:	f108 0301 	add.w	r3, r8, #1
 8007b58:	7013      	strb	r3, [r2, #0]
 8007b5a:	e604      	b.n	8007766 <_dtoa_r+0x696>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	9a07      	ldr	r2, [sp, #28]
 8007b60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d028      	beq.n	8007bbc <_dtoa_r+0xaec>
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	220a      	movs	r2, #10
 8007b70:	4658      	mov	r0, fp
 8007b72:	f000 fd21 	bl	80085b8 <__multadd>
 8007b76:	42af      	cmp	r7, r5
 8007b78:	4681      	mov	r9, r0
 8007b7a:	f04f 0300 	mov.w	r3, #0
 8007b7e:	f04f 020a 	mov.w	r2, #10
 8007b82:	4639      	mov	r1, r7
 8007b84:	4658      	mov	r0, fp
 8007b86:	d107      	bne.n	8007b98 <_dtoa_r+0xac8>
 8007b88:	f000 fd16 	bl	80085b8 <__multadd>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	4605      	mov	r5, r0
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	3301      	adds	r3, #1
 8007b94:	9307      	str	r3, [sp, #28]
 8007b96:	e774      	b.n	8007a82 <_dtoa_r+0x9b2>
 8007b98:	f000 fd0e 	bl	80085b8 <__multadd>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	220a      	movs	r2, #10
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	f000 fd07 	bl	80085b8 <__multadd>
 8007baa:	4605      	mov	r5, r0
 8007bac:	e7f0      	b.n	8007b90 <_dtoa_r+0xac0>
 8007bae:	9b08      	ldr	r3, [sp, #32]
 8007bb0:	2700      	movs	r7, #0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfcc      	ite	gt
 8007bb6:	461e      	movgt	r6, r3
 8007bb8:	2601      	movle	r6, #1
 8007bba:	4456      	add	r6, sl
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	4658      	mov	r0, fp
 8007bc2:	f000 feed 	bl	80089a0 <__lshift>
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	4681      	mov	r9, r0
 8007bca:	f000 ff55 	bl	8008a78 <__mcmp>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	dcb0      	bgt.n	8007b34 <_dtoa_r+0xa64>
 8007bd2:	d102      	bne.n	8007bda <_dtoa_r+0xb0a>
 8007bd4:	f018 0f01 	tst.w	r8, #1
 8007bd8:	d1ac      	bne.n	8007b34 <_dtoa_r+0xa64>
 8007bda:	4633      	mov	r3, r6
 8007bdc:	461e      	mov	r6, r3
 8007bde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007be2:	2a30      	cmp	r2, #48	@ 0x30
 8007be4:	d0fa      	beq.n	8007bdc <_dtoa_r+0xb0c>
 8007be6:	e5be      	b.n	8007766 <_dtoa_r+0x696>
 8007be8:	459a      	cmp	sl, r3
 8007bea:	d1a4      	bne.n	8007b36 <_dtoa_r+0xa66>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	2331      	movs	r3, #49	@ 0x31
 8007bf4:	f88a 3000 	strb.w	r3, [sl]
 8007bf8:	e5b5      	b.n	8007766 <_dtoa_r+0x696>
 8007bfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bfc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c5c <_dtoa_r+0xb8c>
 8007c00:	b11b      	cbz	r3, 8007c0a <_dtoa_r+0xb3a>
 8007c02:	f10a 0308 	add.w	r3, sl, #8
 8007c06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	b017      	add	sp, #92	@ 0x5c
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	f77f ae3d 	ble.w	8007894 <_dtoa_r+0x7c4>
 8007c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c1e:	2001      	movs	r0, #1
 8007c20:	e65b      	b.n	80078da <_dtoa_r+0x80a>
 8007c22:	9b08      	ldr	r3, [sp, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f77f aed6 	ble.w	80079d6 <_dtoa_r+0x906>
 8007c2a:	4656      	mov	r6, sl
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f7ff f9c4 	bl	8006fbc <quorem>
 8007c34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007c3e:	eba6 020a 	sub.w	r2, r6, sl
 8007c42:	4293      	cmp	r3, r2
 8007c44:	ddb3      	ble.n	8007bae <_dtoa_r+0xade>
 8007c46:	4649      	mov	r1, r9
 8007c48:	2300      	movs	r3, #0
 8007c4a:	220a      	movs	r2, #10
 8007c4c:	4658      	mov	r0, fp
 8007c4e:	f000 fcb3 	bl	80085b8 <__multadd>
 8007c52:	4681      	mov	r9, r0
 8007c54:	e7ea      	b.n	8007c2c <_dtoa_r+0xb5c>
 8007c56:	bf00      	nop
 8007c58:	08009be0 	.word	0x08009be0
 8007c5c:	08009b64 	.word	0x08009b64

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d040      	beq.n	8007cea <_free_r+0x8a>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f000 fc32 	bl	80084dc <__malloc_lock>
 8007c78:	4a1c      	ldr	r2, [pc, #112]	@ (8007cec <_free_r+0x8c>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	b933      	cbnz	r3, 8007c8c <_free_r+0x2c>
 8007c7e:	6063      	str	r3, [r4, #4]
 8007c80:	6014      	str	r4, [r2, #0]
 8007c82:	4628      	mov	r0, r5
 8007c84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c88:	f000 bc2e 	b.w	80084e8 <__malloc_unlock>
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	d908      	bls.n	8007ca2 <_free_r+0x42>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	1821      	adds	r1, r4, r0
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf01      	itttt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	1809      	addeq	r1, r1, r0
 8007c9e:	6021      	streq	r1, [r4, #0]
 8007ca0:	e7ed      	b.n	8007c7e <_free_r+0x1e>
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	b10b      	cbz	r3, 8007cac <_free_r+0x4c>
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d9fa      	bls.n	8007ca2 <_free_r+0x42>
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	1850      	adds	r0, r2, r1
 8007cb0:	42a0      	cmp	r0, r4
 8007cb2:	d10b      	bne.n	8007ccc <_free_r+0x6c>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	4401      	add	r1, r0
 8007cb8:	1850      	adds	r0, r2, r1
 8007cba:	4283      	cmp	r3, r0
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	d1e0      	bne.n	8007c82 <_free_r+0x22>
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4408      	add	r0, r1
 8007cc6:	6010      	str	r0, [r2, #0]
 8007cc8:	6053      	str	r3, [r2, #4]
 8007cca:	e7da      	b.n	8007c82 <_free_r+0x22>
 8007ccc:	d902      	bls.n	8007cd4 <_free_r+0x74>
 8007cce:	230c      	movs	r3, #12
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	e7d6      	b.n	8007c82 <_free_r+0x22>
 8007cd4:	6820      	ldr	r0, [r4, #0]
 8007cd6:	1821      	adds	r1, r4, r0
 8007cd8:	428b      	cmp	r3, r1
 8007cda:	bf01      	itttt	eq
 8007cdc:	6819      	ldreq	r1, [r3, #0]
 8007cde:	685b      	ldreq	r3, [r3, #4]
 8007ce0:	1809      	addeq	r1, r1, r0
 8007ce2:	6021      	streq	r1, [r4, #0]
 8007ce4:	6063      	str	r3, [r4, #4]
 8007ce6:	6054      	str	r4, [r2, #4]
 8007ce8:	e7cb      	b.n	8007c82 <_free_r+0x22>
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	200004a0 	.word	0x200004a0

08007cf0 <rshift>:
 8007cf0:	6903      	ldr	r3, [r0, #16]
 8007cf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007cf6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007cfa:	f100 0414 	add.w	r4, r0, #20
 8007cfe:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d02:	dd46      	ble.n	8007d92 <rshift+0xa2>
 8007d04:	f011 011f 	ands.w	r1, r1, #31
 8007d08:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007d0c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007d10:	d10c      	bne.n	8007d2c <rshift+0x3c>
 8007d12:	4629      	mov	r1, r5
 8007d14:	f100 0710 	add.w	r7, r0, #16
 8007d18:	42b1      	cmp	r1, r6
 8007d1a:	d335      	bcc.n	8007d88 <rshift+0x98>
 8007d1c:	1a9b      	subs	r3, r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	1eea      	subs	r2, r5, #3
 8007d22:	4296      	cmp	r6, r2
 8007d24:	bf38      	it	cc
 8007d26:	2300      	movcc	r3, #0
 8007d28:	4423      	add	r3, r4
 8007d2a:	e015      	b.n	8007d58 <rshift+0x68>
 8007d2c:	46a1      	mov	r9, r4
 8007d2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d32:	f1c1 0820 	rsb	r8, r1, #32
 8007d36:	40cf      	lsrs	r7, r1
 8007d38:	f105 0e04 	add.w	lr, r5, #4
 8007d3c:	4576      	cmp	r6, lr
 8007d3e:	46f4      	mov	ip, lr
 8007d40:	d816      	bhi.n	8007d70 <rshift+0x80>
 8007d42:	1a9a      	subs	r2, r3, r2
 8007d44:	0092      	lsls	r2, r2, #2
 8007d46:	3a04      	subs	r2, #4
 8007d48:	3501      	adds	r5, #1
 8007d4a:	42ae      	cmp	r6, r5
 8007d4c:	bf38      	it	cc
 8007d4e:	2200      	movcc	r2, #0
 8007d50:	18a3      	adds	r3, r4, r2
 8007d52:	50a7      	str	r7, [r4, r2]
 8007d54:	b107      	cbz	r7, 8007d58 <rshift+0x68>
 8007d56:	3304      	adds	r3, #4
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	eba3 0204 	sub.w	r2, r3, r4
 8007d5e:	bf08      	it	eq
 8007d60:	2300      	moveq	r3, #0
 8007d62:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d66:	6102      	str	r2, [r0, #16]
 8007d68:	bf08      	it	eq
 8007d6a:	6143      	streq	r3, [r0, #20]
 8007d6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d70:	f8dc c000 	ldr.w	ip, [ip]
 8007d74:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d78:	ea4c 0707 	orr.w	r7, ip, r7
 8007d7c:	f849 7b04 	str.w	r7, [r9], #4
 8007d80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d84:	40cf      	lsrs	r7, r1
 8007d86:	e7d9      	b.n	8007d3c <rshift+0x4c>
 8007d88:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d90:	e7c2      	b.n	8007d18 <rshift+0x28>
 8007d92:	4623      	mov	r3, r4
 8007d94:	e7e0      	b.n	8007d58 <rshift+0x68>

08007d96 <__hexdig_fun>:
 8007d96:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007d9a:	2b09      	cmp	r3, #9
 8007d9c:	d802      	bhi.n	8007da4 <__hexdig_fun+0xe>
 8007d9e:	3820      	subs	r0, #32
 8007da0:	b2c0      	uxtb	r0, r0
 8007da2:	4770      	bx	lr
 8007da4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d801      	bhi.n	8007db0 <__hexdig_fun+0x1a>
 8007dac:	3847      	subs	r0, #71	@ 0x47
 8007dae:	e7f7      	b.n	8007da0 <__hexdig_fun+0xa>
 8007db0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d801      	bhi.n	8007dbc <__hexdig_fun+0x26>
 8007db8:	3827      	subs	r0, #39	@ 0x27
 8007dba:	e7f1      	b.n	8007da0 <__hexdig_fun+0xa>
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	4770      	bx	lr

08007dc0 <__gethex>:
 8007dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	468a      	mov	sl, r1
 8007dc6:	4690      	mov	r8, r2
 8007dc8:	b085      	sub	sp, #20
 8007dca:	9302      	str	r3, [sp, #8]
 8007dcc:	680b      	ldr	r3, [r1, #0]
 8007dce:	9001      	str	r0, [sp, #4]
 8007dd0:	1c9c      	adds	r4, r3, #2
 8007dd2:	46a1      	mov	r9, r4
 8007dd4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007dd8:	2830      	cmp	r0, #48	@ 0x30
 8007dda:	d0fa      	beq.n	8007dd2 <__gethex+0x12>
 8007ddc:	eba9 0303 	sub.w	r3, r9, r3
 8007de0:	f1a3 0b02 	sub.w	fp, r3, #2
 8007de4:	f7ff ffd7 	bl	8007d96 <__hexdig_fun>
 8007de8:	4605      	mov	r5, r0
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d168      	bne.n	8007ec0 <__gethex+0x100>
 8007dee:	2201      	movs	r2, #1
 8007df0:	4648      	mov	r0, r9
 8007df2:	499f      	ldr	r1, [pc, #636]	@ (8008070 <__gethex+0x2b0>)
 8007df4:	f7ff f835 	bl	8006e62 <strncmp>
 8007df8:	4607      	mov	r7, r0
 8007dfa:	2800      	cmp	r0, #0
 8007dfc:	d167      	bne.n	8007ece <__gethex+0x10e>
 8007dfe:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007e02:	4626      	mov	r6, r4
 8007e04:	f7ff ffc7 	bl	8007d96 <__hexdig_fun>
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d062      	beq.n	8007ed2 <__gethex+0x112>
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	7818      	ldrb	r0, [r3, #0]
 8007e10:	4699      	mov	r9, r3
 8007e12:	2830      	cmp	r0, #48	@ 0x30
 8007e14:	f103 0301 	add.w	r3, r3, #1
 8007e18:	d0f9      	beq.n	8007e0e <__gethex+0x4e>
 8007e1a:	f7ff ffbc 	bl	8007d96 <__hexdig_fun>
 8007e1e:	fab0 f580 	clz	r5, r0
 8007e22:	f04f 0b01 	mov.w	fp, #1
 8007e26:	096d      	lsrs	r5, r5, #5
 8007e28:	464a      	mov	r2, r9
 8007e2a:	4616      	mov	r6, r2
 8007e2c:	7830      	ldrb	r0, [r6, #0]
 8007e2e:	3201      	adds	r2, #1
 8007e30:	f7ff ffb1 	bl	8007d96 <__hexdig_fun>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d1f8      	bne.n	8007e2a <__gethex+0x6a>
 8007e38:	2201      	movs	r2, #1
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	498c      	ldr	r1, [pc, #560]	@ (8008070 <__gethex+0x2b0>)
 8007e3e:	f7ff f810 	bl	8006e62 <strncmp>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d13f      	bne.n	8007ec6 <__gethex+0x106>
 8007e46:	b944      	cbnz	r4, 8007e5a <__gethex+0x9a>
 8007e48:	1c74      	adds	r4, r6, #1
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	7830      	ldrb	r0, [r6, #0]
 8007e50:	3201      	adds	r2, #1
 8007e52:	f7ff ffa0 	bl	8007d96 <__hexdig_fun>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d1f8      	bne.n	8007e4c <__gethex+0x8c>
 8007e5a:	1ba4      	subs	r4, r4, r6
 8007e5c:	00a7      	lsls	r7, r4, #2
 8007e5e:	7833      	ldrb	r3, [r6, #0]
 8007e60:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007e64:	2b50      	cmp	r3, #80	@ 0x50
 8007e66:	d13e      	bne.n	8007ee6 <__gethex+0x126>
 8007e68:	7873      	ldrb	r3, [r6, #1]
 8007e6a:	2b2b      	cmp	r3, #43	@ 0x2b
 8007e6c:	d033      	beq.n	8007ed6 <__gethex+0x116>
 8007e6e:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e70:	d034      	beq.n	8007edc <__gethex+0x11c>
 8007e72:	2400      	movs	r4, #0
 8007e74:	1c71      	adds	r1, r6, #1
 8007e76:	7808      	ldrb	r0, [r1, #0]
 8007e78:	f7ff ff8d 	bl	8007d96 <__hexdig_fun>
 8007e7c:	1e43      	subs	r3, r0, #1
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b18      	cmp	r3, #24
 8007e82:	d830      	bhi.n	8007ee6 <__gethex+0x126>
 8007e84:	f1a0 0210 	sub.w	r2, r0, #16
 8007e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e8c:	f7ff ff83 	bl	8007d96 <__hexdig_fun>
 8007e90:	f100 3cff 	add.w	ip, r0, #4294967295
 8007e94:	fa5f fc8c 	uxtb.w	ip, ip
 8007e98:	f1bc 0f18 	cmp.w	ip, #24
 8007e9c:	f04f 030a 	mov.w	r3, #10
 8007ea0:	d91e      	bls.n	8007ee0 <__gethex+0x120>
 8007ea2:	b104      	cbz	r4, 8007ea6 <__gethex+0xe6>
 8007ea4:	4252      	negs	r2, r2
 8007ea6:	4417      	add	r7, r2
 8007ea8:	f8ca 1000 	str.w	r1, [sl]
 8007eac:	b1ed      	cbz	r5, 8007eea <__gethex+0x12a>
 8007eae:	f1bb 0f00 	cmp.w	fp, #0
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2506      	moveq	r5, #6
 8007eb6:	2500      	movne	r5, #0
 8007eb8:	4628      	mov	r0, r5
 8007eba:	b005      	add	sp, #20
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	462c      	mov	r4, r5
 8007ec4:	e7b0      	b.n	8007e28 <__gethex+0x68>
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	d1c7      	bne.n	8007e5a <__gethex+0x9a>
 8007eca:	4627      	mov	r7, r4
 8007ecc:	e7c7      	b.n	8007e5e <__gethex+0x9e>
 8007ece:	464e      	mov	r6, r9
 8007ed0:	462f      	mov	r7, r5
 8007ed2:	2501      	movs	r5, #1
 8007ed4:	e7c3      	b.n	8007e5e <__gethex+0x9e>
 8007ed6:	2400      	movs	r4, #0
 8007ed8:	1cb1      	adds	r1, r6, #2
 8007eda:	e7cc      	b.n	8007e76 <__gethex+0xb6>
 8007edc:	2401      	movs	r4, #1
 8007ede:	e7fb      	b.n	8007ed8 <__gethex+0x118>
 8007ee0:	fb03 0002 	mla	r0, r3, r2, r0
 8007ee4:	e7ce      	b.n	8007e84 <__gethex+0xc4>
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	e7de      	b.n	8007ea8 <__gethex+0xe8>
 8007eea:	4629      	mov	r1, r5
 8007eec:	eba6 0309 	sub.w	r3, r6, r9
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	2b07      	cmp	r3, #7
 8007ef4:	dc0a      	bgt.n	8007f0c <__gethex+0x14c>
 8007ef6:	9801      	ldr	r0, [sp, #4]
 8007ef8:	f000 fafc 	bl	80084f4 <_Balloc>
 8007efc:	4604      	mov	r4, r0
 8007efe:	b940      	cbnz	r0, 8007f12 <__gethex+0x152>
 8007f00:	4602      	mov	r2, r0
 8007f02:	21e4      	movs	r1, #228	@ 0xe4
 8007f04:	4b5b      	ldr	r3, [pc, #364]	@ (8008074 <__gethex+0x2b4>)
 8007f06:	485c      	ldr	r0, [pc, #368]	@ (8008078 <__gethex+0x2b8>)
 8007f08:	f001 f9d0 	bl	80092ac <__assert_func>
 8007f0c:	3101      	adds	r1, #1
 8007f0e:	105b      	asrs	r3, r3, #1
 8007f10:	e7ef      	b.n	8007ef2 <__gethex+0x132>
 8007f12:	2300      	movs	r3, #0
 8007f14:	f100 0a14 	add.w	sl, r0, #20
 8007f18:	4655      	mov	r5, sl
 8007f1a:	469b      	mov	fp, r3
 8007f1c:	45b1      	cmp	r9, r6
 8007f1e:	d337      	bcc.n	8007f90 <__gethex+0x1d0>
 8007f20:	f845 bb04 	str.w	fp, [r5], #4
 8007f24:	eba5 050a 	sub.w	r5, r5, sl
 8007f28:	10ad      	asrs	r5, r5, #2
 8007f2a:	6125      	str	r5, [r4, #16]
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 fbd3 	bl	80086d8 <__hi0bits>
 8007f32:	016d      	lsls	r5, r5, #5
 8007f34:	f8d8 6000 	ldr.w	r6, [r8]
 8007f38:	1a2d      	subs	r5, r5, r0
 8007f3a:	42b5      	cmp	r5, r6
 8007f3c:	dd54      	ble.n	8007fe8 <__gethex+0x228>
 8007f3e:	1bad      	subs	r5, r5, r6
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f000 ff5b 	bl	8008dfe <__any_on>
 8007f48:	4681      	mov	r9, r0
 8007f4a:	b178      	cbz	r0, 8007f6c <__gethex+0x1ac>
 8007f4c:	f04f 0901 	mov.w	r9, #1
 8007f50:	1e6b      	subs	r3, r5, #1
 8007f52:	1159      	asrs	r1, r3, #5
 8007f54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f58:	f003 021f 	and.w	r2, r3, #31
 8007f5c:	fa09 f202 	lsl.w	r2, r9, r2
 8007f60:	420a      	tst	r2, r1
 8007f62:	d003      	beq.n	8007f6c <__gethex+0x1ac>
 8007f64:	454b      	cmp	r3, r9
 8007f66:	dc36      	bgt.n	8007fd6 <__gethex+0x216>
 8007f68:	f04f 0902 	mov.w	r9, #2
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4620      	mov	r0, r4
 8007f70:	f7ff febe 	bl	8007cf0 <rshift>
 8007f74:	442f      	add	r7, r5
 8007f76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f7a:	42bb      	cmp	r3, r7
 8007f7c:	da42      	bge.n	8008004 <__gethex+0x244>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	9801      	ldr	r0, [sp, #4]
 8007f82:	f000 faf7 	bl	8008574 <_Bfree>
 8007f86:	2300      	movs	r3, #0
 8007f88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f8a:	25a3      	movs	r5, #163	@ 0xa3
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e793      	b.n	8007eb8 <__gethex+0xf8>
 8007f90:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007f94:	2a2e      	cmp	r2, #46	@ 0x2e
 8007f96:	d012      	beq.n	8007fbe <__gethex+0x1fe>
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d104      	bne.n	8007fa6 <__gethex+0x1e6>
 8007f9c:	f845 bb04 	str.w	fp, [r5], #4
 8007fa0:	f04f 0b00 	mov.w	fp, #0
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	7830      	ldrb	r0, [r6, #0]
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	f7ff fef4 	bl	8007d96 <__hexdig_fun>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	f000 000f 	and.w	r0, r0, #15
 8007fb4:	4098      	lsls	r0, r3
 8007fb6:	ea4b 0b00 	orr.w	fp, fp, r0
 8007fba:	3304      	adds	r3, #4
 8007fbc:	e7ae      	b.n	8007f1c <__gethex+0x15c>
 8007fbe:	45b1      	cmp	r9, r6
 8007fc0:	d8ea      	bhi.n	8007f98 <__gethex+0x1d8>
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	492a      	ldr	r1, [pc, #168]	@ (8008070 <__gethex+0x2b0>)
 8007fc8:	9303      	str	r3, [sp, #12]
 8007fca:	f7fe ff4a 	bl	8006e62 <strncmp>
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d1e1      	bne.n	8007f98 <__gethex+0x1d8>
 8007fd4:	e7a2      	b.n	8007f1c <__gethex+0x15c>
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	1ea9      	subs	r1, r5, #2
 8007fda:	f000 ff10 	bl	8008dfe <__any_on>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d0c2      	beq.n	8007f68 <__gethex+0x1a8>
 8007fe2:	f04f 0903 	mov.w	r9, #3
 8007fe6:	e7c1      	b.n	8007f6c <__gethex+0x1ac>
 8007fe8:	da09      	bge.n	8007ffe <__gethex+0x23e>
 8007fea:	1b75      	subs	r5, r6, r5
 8007fec:	4621      	mov	r1, r4
 8007fee:	462a      	mov	r2, r5
 8007ff0:	9801      	ldr	r0, [sp, #4]
 8007ff2:	f000 fcd5 	bl	80089a0 <__lshift>
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	1b7f      	subs	r7, r7, r5
 8007ffa:	f100 0a14 	add.w	sl, r0, #20
 8007ffe:	f04f 0900 	mov.w	r9, #0
 8008002:	e7b8      	b.n	8007f76 <__gethex+0x1b6>
 8008004:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008008:	42bd      	cmp	r5, r7
 800800a:	dd6f      	ble.n	80080ec <__gethex+0x32c>
 800800c:	1bed      	subs	r5, r5, r7
 800800e:	42ae      	cmp	r6, r5
 8008010:	dc34      	bgt.n	800807c <__gethex+0x2bc>
 8008012:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008016:	2b02      	cmp	r3, #2
 8008018:	d022      	beq.n	8008060 <__gethex+0x2a0>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d024      	beq.n	8008068 <__gethex+0x2a8>
 800801e:	2b01      	cmp	r3, #1
 8008020:	d115      	bne.n	800804e <__gethex+0x28e>
 8008022:	42ae      	cmp	r6, r5
 8008024:	d113      	bne.n	800804e <__gethex+0x28e>
 8008026:	2e01      	cmp	r6, #1
 8008028:	d10b      	bne.n	8008042 <__gethex+0x282>
 800802a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800802e:	9a02      	ldr	r2, [sp, #8]
 8008030:	2562      	movs	r5, #98	@ 0x62
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	2301      	movs	r3, #1
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	f8ca 3000 	str.w	r3, [sl]
 800803c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800803e:	601c      	str	r4, [r3, #0]
 8008040:	e73a      	b.n	8007eb8 <__gethex+0xf8>
 8008042:	4620      	mov	r0, r4
 8008044:	1e71      	subs	r1, r6, #1
 8008046:	f000 feda 	bl	8008dfe <__any_on>
 800804a:	2800      	cmp	r0, #0
 800804c:	d1ed      	bne.n	800802a <__gethex+0x26a>
 800804e:	4621      	mov	r1, r4
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	f000 fa8f 	bl	8008574 <_Bfree>
 8008056:	2300      	movs	r3, #0
 8008058:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800805a:	2550      	movs	r5, #80	@ 0x50
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	e72b      	b.n	8007eb8 <__gethex+0xf8>
 8008060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f3      	bne.n	800804e <__gethex+0x28e>
 8008066:	e7e0      	b.n	800802a <__gethex+0x26a>
 8008068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1dd      	bne.n	800802a <__gethex+0x26a>
 800806e:	e7ee      	b.n	800804e <__gethex+0x28e>
 8008070:	08009ad2 	.word	0x08009ad2
 8008074:	08009be0 	.word	0x08009be0
 8008078:	08009bf1 	.word	0x08009bf1
 800807c:	1e6f      	subs	r7, r5, #1
 800807e:	f1b9 0f00 	cmp.w	r9, #0
 8008082:	d130      	bne.n	80080e6 <__gethex+0x326>
 8008084:	b127      	cbz	r7, 8008090 <__gethex+0x2d0>
 8008086:	4639      	mov	r1, r7
 8008088:	4620      	mov	r0, r4
 800808a:	f000 feb8 	bl	8008dfe <__any_on>
 800808e:	4681      	mov	r9, r0
 8008090:	2301      	movs	r3, #1
 8008092:	4629      	mov	r1, r5
 8008094:	1b76      	subs	r6, r6, r5
 8008096:	2502      	movs	r5, #2
 8008098:	117a      	asrs	r2, r7, #5
 800809a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800809e:	f007 071f 	and.w	r7, r7, #31
 80080a2:	40bb      	lsls	r3, r7
 80080a4:	4213      	tst	r3, r2
 80080a6:	4620      	mov	r0, r4
 80080a8:	bf18      	it	ne
 80080aa:	f049 0902 	orrne.w	r9, r9, #2
 80080ae:	f7ff fe1f 	bl	8007cf0 <rshift>
 80080b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80080b6:	f1b9 0f00 	cmp.w	r9, #0
 80080ba:	d047      	beq.n	800814c <__gethex+0x38c>
 80080bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d015      	beq.n	80080f0 <__gethex+0x330>
 80080c4:	2b03      	cmp	r3, #3
 80080c6:	d017      	beq.n	80080f8 <__gethex+0x338>
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d109      	bne.n	80080e0 <__gethex+0x320>
 80080cc:	f019 0f02 	tst.w	r9, #2
 80080d0:	d006      	beq.n	80080e0 <__gethex+0x320>
 80080d2:	f8da 3000 	ldr.w	r3, [sl]
 80080d6:	ea49 0903 	orr.w	r9, r9, r3
 80080da:	f019 0f01 	tst.w	r9, #1
 80080de:	d10e      	bne.n	80080fe <__gethex+0x33e>
 80080e0:	f045 0510 	orr.w	r5, r5, #16
 80080e4:	e032      	b.n	800814c <__gethex+0x38c>
 80080e6:	f04f 0901 	mov.w	r9, #1
 80080ea:	e7d1      	b.n	8008090 <__gethex+0x2d0>
 80080ec:	2501      	movs	r5, #1
 80080ee:	e7e2      	b.n	80080b6 <__gethex+0x2f6>
 80080f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f2:	f1c3 0301 	rsb	r3, r3, #1
 80080f6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f0      	beq.n	80080e0 <__gethex+0x320>
 80080fe:	f04f 0c00 	mov.w	ip, #0
 8008102:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008106:	f104 0314 	add.w	r3, r4, #20
 800810a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800810e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008112:	4618      	mov	r0, r3
 8008114:	f853 2b04 	ldr.w	r2, [r3], #4
 8008118:	f1b2 3fff 	cmp.w	r2, #4294967295
 800811c:	d01b      	beq.n	8008156 <__gethex+0x396>
 800811e:	3201      	adds	r2, #1
 8008120:	6002      	str	r2, [r0, #0]
 8008122:	2d02      	cmp	r5, #2
 8008124:	f104 0314 	add.w	r3, r4, #20
 8008128:	d13c      	bne.n	80081a4 <__gethex+0x3e4>
 800812a:	f8d8 2000 	ldr.w	r2, [r8]
 800812e:	3a01      	subs	r2, #1
 8008130:	42b2      	cmp	r2, r6
 8008132:	d109      	bne.n	8008148 <__gethex+0x388>
 8008134:	2201      	movs	r2, #1
 8008136:	1171      	asrs	r1, r6, #5
 8008138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800813c:	f006 061f 	and.w	r6, r6, #31
 8008140:	fa02 f606 	lsl.w	r6, r2, r6
 8008144:	421e      	tst	r6, r3
 8008146:	d13a      	bne.n	80081be <__gethex+0x3fe>
 8008148:	f045 0520 	orr.w	r5, r5, #32
 800814c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800814e:	601c      	str	r4, [r3, #0]
 8008150:	9b02      	ldr	r3, [sp, #8]
 8008152:	601f      	str	r7, [r3, #0]
 8008154:	e6b0      	b.n	8007eb8 <__gethex+0xf8>
 8008156:	4299      	cmp	r1, r3
 8008158:	f843 cc04 	str.w	ip, [r3, #-4]
 800815c:	d8d9      	bhi.n	8008112 <__gethex+0x352>
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	459b      	cmp	fp, r3
 8008162:	db17      	blt.n	8008194 <__gethex+0x3d4>
 8008164:	6861      	ldr	r1, [r4, #4]
 8008166:	9801      	ldr	r0, [sp, #4]
 8008168:	3101      	adds	r1, #1
 800816a:	f000 f9c3 	bl	80084f4 <_Balloc>
 800816e:	4681      	mov	r9, r0
 8008170:	b918      	cbnz	r0, 800817a <__gethex+0x3ba>
 8008172:	4602      	mov	r2, r0
 8008174:	2184      	movs	r1, #132	@ 0x84
 8008176:	4b19      	ldr	r3, [pc, #100]	@ (80081dc <__gethex+0x41c>)
 8008178:	e6c5      	b.n	8007f06 <__gethex+0x146>
 800817a:	6922      	ldr	r2, [r4, #16]
 800817c:	f104 010c 	add.w	r1, r4, #12
 8008180:	3202      	adds	r2, #2
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	300c      	adds	r0, #12
 8008186:	f7fe ff04 	bl	8006f92 <memcpy>
 800818a:	4621      	mov	r1, r4
 800818c:	9801      	ldr	r0, [sp, #4]
 800818e:	f000 f9f1 	bl	8008574 <_Bfree>
 8008192:	464c      	mov	r4, r9
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	6122      	str	r2, [r4, #16]
 800819a:	2201      	movs	r2, #1
 800819c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081a0:	615a      	str	r2, [r3, #20]
 80081a2:	e7be      	b.n	8008122 <__gethex+0x362>
 80081a4:	6922      	ldr	r2, [r4, #16]
 80081a6:	455a      	cmp	r2, fp
 80081a8:	dd0b      	ble.n	80081c2 <__gethex+0x402>
 80081aa:	2101      	movs	r1, #1
 80081ac:	4620      	mov	r0, r4
 80081ae:	f7ff fd9f 	bl	8007cf0 <rshift>
 80081b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081b6:	3701      	adds	r7, #1
 80081b8:	42bb      	cmp	r3, r7
 80081ba:	f6ff aee0 	blt.w	8007f7e <__gethex+0x1be>
 80081be:	2501      	movs	r5, #1
 80081c0:	e7c2      	b.n	8008148 <__gethex+0x388>
 80081c2:	f016 061f 	ands.w	r6, r6, #31
 80081c6:	d0fa      	beq.n	80081be <__gethex+0x3fe>
 80081c8:	4453      	add	r3, sl
 80081ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80081ce:	f000 fa83 	bl	80086d8 <__hi0bits>
 80081d2:	f1c6 0620 	rsb	r6, r6, #32
 80081d6:	42b0      	cmp	r0, r6
 80081d8:	dbe7      	blt.n	80081aa <__gethex+0x3ea>
 80081da:	e7f0      	b.n	80081be <__gethex+0x3fe>
 80081dc:	08009be0 	.word	0x08009be0

080081e0 <L_shift>:
 80081e0:	f1c2 0208 	rsb	r2, r2, #8
 80081e4:	0092      	lsls	r2, r2, #2
 80081e6:	b570      	push	{r4, r5, r6, lr}
 80081e8:	f1c2 0620 	rsb	r6, r2, #32
 80081ec:	6843      	ldr	r3, [r0, #4]
 80081ee:	6804      	ldr	r4, [r0, #0]
 80081f0:	fa03 f506 	lsl.w	r5, r3, r6
 80081f4:	432c      	orrs	r4, r5
 80081f6:	40d3      	lsrs	r3, r2
 80081f8:	6004      	str	r4, [r0, #0]
 80081fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80081fe:	4288      	cmp	r0, r1
 8008200:	d3f4      	bcc.n	80081ec <L_shift+0xc>
 8008202:	bd70      	pop	{r4, r5, r6, pc}

08008204 <__match>:
 8008204:	b530      	push	{r4, r5, lr}
 8008206:	6803      	ldr	r3, [r0, #0]
 8008208:	3301      	adds	r3, #1
 800820a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800820e:	b914      	cbnz	r4, 8008216 <__match+0x12>
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	2001      	movs	r0, #1
 8008214:	bd30      	pop	{r4, r5, pc}
 8008216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800821e:	2d19      	cmp	r5, #25
 8008220:	bf98      	it	ls
 8008222:	3220      	addls	r2, #32
 8008224:	42a2      	cmp	r2, r4
 8008226:	d0f0      	beq.n	800820a <__match+0x6>
 8008228:	2000      	movs	r0, #0
 800822a:	e7f3      	b.n	8008214 <__match+0x10>

0800822c <__hexnan>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	2500      	movs	r5, #0
 8008232:	680b      	ldr	r3, [r1, #0]
 8008234:	4682      	mov	sl, r0
 8008236:	115e      	asrs	r6, r3, #5
 8008238:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800823c:	f013 031f 	ands.w	r3, r3, #31
 8008240:	bf18      	it	ne
 8008242:	3604      	addne	r6, #4
 8008244:	1f37      	subs	r7, r6, #4
 8008246:	4690      	mov	r8, r2
 8008248:	46b9      	mov	r9, r7
 800824a:	463c      	mov	r4, r7
 800824c:	46ab      	mov	fp, r5
 800824e:	b087      	sub	sp, #28
 8008250:	6801      	ldr	r1, [r0, #0]
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	f846 5c04 	str.w	r5, [r6, #-4]
 8008258:	9502      	str	r5, [sp, #8]
 800825a:	784a      	ldrb	r2, [r1, #1]
 800825c:	1c4b      	adds	r3, r1, #1
 800825e:	9303      	str	r3, [sp, #12]
 8008260:	b342      	cbz	r2, 80082b4 <__hexnan+0x88>
 8008262:	4610      	mov	r0, r2
 8008264:	9105      	str	r1, [sp, #20]
 8008266:	9204      	str	r2, [sp, #16]
 8008268:	f7ff fd95 	bl	8007d96 <__hexdig_fun>
 800826c:	2800      	cmp	r0, #0
 800826e:	d151      	bne.n	8008314 <__hexnan+0xe8>
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	9905      	ldr	r1, [sp, #20]
 8008274:	2a20      	cmp	r2, #32
 8008276:	d818      	bhi.n	80082aa <__hexnan+0x7e>
 8008278:	9b02      	ldr	r3, [sp, #8]
 800827a:	459b      	cmp	fp, r3
 800827c:	dd13      	ble.n	80082a6 <__hexnan+0x7a>
 800827e:	454c      	cmp	r4, r9
 8008280:	d206      	bcs.n	8008290 <__hexnan+0x64>
 8008282:	2d07      	cmp	r5, #7
 8008284:	dc04      	bgt.n	8008290 <__hexnan+0x64>
 8008286:	462a      	mov	r2, r5
 8008288:	4649      	mov	r1, r9
 800828a:	4620      	mov	r0, r4
 800828c:	f7ff ffa8 	bl	80081e0 <L_shift>
 8008290:	4544      	cmp	r4, r8
 8008292:	d952      	bls.n	800833a <__hexnan+0x10e>
 8008294:	2300      	movs	r3, #0
 8008296:	f1a4 0904 	sub.w	r9, r4, #4
 800829a:	f844 3c04 	str.w	r3, [r4, #-4]
 800829e:	461d      	mov	r5, r3
 80082a0:	464c      	mov	r4, r9
 80082a2:	f8cd b008 	str.w	fp, [sp, #8]
 80082a6:	9903      	ldr	r1, [sp, #12]
 80082a8:	e7d7      	b.n	800825a <__hexnan+0x2e>
 80082aa:	2a29      	cmp	r2, #41	@ 0x29
 80082ac:	d157      	bne.n	800835e <__hexnan+0x132>
 80082ae:	3102      	adds	r1, #2
 80082b0:	f8ca 1000 	str.w	r1, [sl]
 80082b4:	f1bb 0f00 	cmp.w	fp, #0
 80082b8:	d051      	beq.n	800835e <__hexnan+0x132>
 80082ba:	454c      	cmp	r4, r9
 80082bc:	d206      	bcs.n	80082cc <__hexnan+0xa0>
 80082be:	2d07      	cmp	r5, #7
 80082c0:	dc04      	bgt.n	80082cc <__hexnan+0xa0>
 80082c2:	462a      	mov	r2, r5
 80082c4:	4649      	mov	r1, r9
 80082c6:	4620      	mov	r0, r4
 80082c8:	f7ff ff8a 	bl	80081e0 <L_shift>
 80082cc:	4544      	cmp	r4, r8
 80082ce:	d936      	bls.n	800833e <__hexnan+0x112>
 80082d0:	4623      	mov	r3, r4
 80082d2:	f1a8 0204 	sub.w	r2, r8, #4
 80082d6:	f853 1b04 	ldr.w	r1, [r3], #4
 80082da:	429f      	cmp	r7, r3
 80082dc:	f842 1f04 	str.w	r1, [r2, #4]!
 80082e0:	d2f9      	bcs.n	80082d6 <__hexnan+0xaa>
 80082e2:	1b3b      	subs	r3, r7, r4
 80082e4:	f023 0303 	bic.w	r3, r3, #3
 80082e8:	3304      	adds	r3, #4
 80082ea:	3401      	adds	r4, #1
 80082ec:	3e03      	subs	r6, #3
 80082ee:	42b4      	cmp	r4, r6
 80082f0:	bf88      	it	hi
 80082f2:	2304      	movhi	r3, #4
 80082f4:	2200      	movs	r2, #0
 80082f6:	4443      	add	r3, r8
 80082f8:	f843 2b04 	str.w	r2, [r3], #4
 80082fc:	429f      	cmp	r7, r3
 80082fe:	d2fb      	bcs.n	80082f8 <__hexnan+0xcc>
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	b91b      	cbnz	r3, 800830c <__hexnan+0xe0>
 8008304:	4547      	cmp	r7, r8
 8008306:	d128      	bne.n	800835a <__hexnan+0x12e>
 8008308:	2301      	movs	r3, #1
 800830a:	603b      	str	r3, [r7, #0]
 800830c:	2005      	movs	r0, #5
 800830e:	b007      	add	sp, #28
 8008310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008314:	3501      	adds	r5, #1
 8008316:	2d08      	cmp	r5, #8
 8008318:	f10b 0b01 	add.w	fp, fp, #1
 800831c:	dd06      	ble.n	800832c <__hexnan+0x100>
 800831e:	4544      	cmp	r4, r8
 8008320:	d9c1      	bls.n	80082a6 <__hexnan+0x7a>
 8008322:	2300      	movs	r3, #0
 8008324:	2501      	movs	r5, #1
 8008326:	f844 3c04 	str.w	r3, [r4, #-4]
 800832a:	3c04      	subs	r4, #4
 800832c:	6822      	ldr	r2, [r4, #0]
 800832e:	f000 000f 	and.w	r0, r0, #15
 8008332:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008336:	6020      	str	r0, [r4, #0]
 8008338:	e7b5      	b.n	80082a6 <__hexnan+0x7a>
 800833a:	2508      	movs	r5, #8
 800833c:	e7b3      	b.n	80082a6 <__hexnan+0x7a>
 800833e:	9b01      	ldr	r3, [sp, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0dd      	beq.n	8008300 <__hexnan+0xd4>
 8008344:	f04f 32ff 	mov.w	r2, #4294967295
 8008348:	f1c3 0320 	rsb	r3, r3, #32
 800834c:	40da      	lsrs	r2, r3
 800834e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008352:	4013      	ands	r3, r2
 8008354:	f846 3c04 	str.w	r3, [r6, #-4]
 8008358:	e7d2      	b.n	8008300 <__hexnan+0xd4>
 800835a:	3f04      	subs	r7, #4
 800835c:	e7d0      	b.n	8008300 <__hexnan+0xd4>
 800835e:	2004      	movs	r0, #4
 8008360:	e7d5      	b.n	800830e <__hexnan+0xe2>
	...

08008364 <malloc>:
 8008364:	4b02      	ldr	r3, [pc, #8]	@ (8008370 <malloc+0xc>)
 8008366:	4601      	mov	r1, r0
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	f000 b825 	b.w	80083b8 <_malloc_r>
 800836e:	bf00      	nop
 8008370:	2000018c 	.word	0x2000018c

08008374 <sbrk_aligned>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4e0f      	ldr	r6, [pc, #60]	@ (80083b4 <sbrk_aligned+0x40>)
 8008378:	460c      	mov	r4, r1
 800837a:	6831      	ldr	r1, [r6, #0]
 800837c:	4605      	mov	r5, r0
 800837e:	b911      	cbnz	r1, 8008386 <sbrk_aligned+0x12>
 8008380:	f000 ff84 	bl	800928c <_sbrk_r>
 8008384:	6030      	str	r0, [r6, #0]
 8008386:	4621      	mov	r1, r4
 8008388:	4628      	mov	r0, r5
 800838a:	f000 ff7f 	bl	800928c <_sbrk_r>
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d103      	bne.n	800839a <sbrk_aligned+0x26>
 8008392:	f04f 34ff 	mov.w	r4, #4294967295
 8008396:	4620      	mov	r0, r4
 8008398:	bd70      	pop	{r4, r5, r6, pc}
 800839a:	1cc4      	adds	r4, r0, #3
 800839c:	f024 0403 	bic.w	r4, r4, #3
 80083a0:	42a0      	cmp	r0, r4
 80083a2:	d0f8      	beq.n	8008396 <sbrk_aligned+0x22>
 80083a4:	1a21      	subs	r1, r4, r0
 80083a6:	4628      	mov	r0, r5
 80083a8:	f000 ff70 	bl	800928c <_sbrk_r>
 80083ac:	3001      	adds	r0, #1
 80083ae:	d1f2      	bne.n	8008396 <sbrk_aligned+0x22>
 80083b0:	e7ef      	b.n	8008392 <sbrk_aligned+0x1e>
 80083b2:	bf00      	nop
 80083b4:	2000049c 	.word	0x2000049c

080083b8 <_malloc_r>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	1ccd      	adds	r5, r1, #3
 80083be:	f025 0503 	bic.w	r5, r5, #3
 80083c2:	3508      	adds	r5, #8
 80083c4:	2d0c      	cmp	r5, #12
 80083c6:	bf38      	it	cc
 80083c8:	250c      	movcc	r5, #12
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	4606      	mov	r6, r0
 80083ce:	db01      	blt.n	80083d4 <_malloc_r+0x1c>
 80083d0:	42a9      	cmp	r1, r5
 80083d2:	d904      	bls.n	80083de <_malloc_r+0x26>
 80083d4:	230c      	movs	r3, #12
 80083d6:	6033      	str	r3, [r6, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b4 <_malloc_r+0xfc>
 80083e2:	f000 f87b 	bl	80084dc <__malloc_lock>
 80083e6:	f8d8 3000 	ldr.w	r3, [r8]
 80083ea:	461c      	mov	r4, r3
 80083ec:	bb44      	cbnz	r4, 8008440 <_malloc_r+0x88>
 80083ee:	4629      	mov	r1, r5
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffbf 	bl	8008374 <sbrk_aligned>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	4604      	mov	r4, r0
 80083fa:	d158      	bne.n	80084ae <_malloc_r+0xf6>
 80083fc:	f8d8 4000 	ldr.w	r4, [r8]
 8008400:	4627      	mov	r7, r4
 8008402:	2f00      	cmp	r7, #0
 8008404:	d143      	bne.n	800848e <_malloc_r+0xd6>
 8008406:	2c00      	cmp	r4, #0
 8008408:	d04b      	beq.n	80084a2 <_malloc_r+0xea>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	eb04 0903 	add.w	r9, r4, r3
 8008414:	f000 ff3a 	bl	800928c <_sbrk_r>
 8008418:	4581      	cmp	r9, r0
 800841a:	d142      	bne.n	80084a2 <_malloc_r+0xea>
 800841c:	6821      	ldr	r1, [r4, #0]
 800841e:	4630      	mov	r0, r6
 8008420:	1a6d      	subs	r5, r5, r1
 8008422:	4629      	mov	r1, r5
 8008424:	f7ff ffa6 	bl	8008374 <sbrk_aligned>
 8008428:	3001      	adds	r0, #1
 800842a:	d03a      	beq.n	80084a2 <_malloc_r+0xea>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	442b      	add	r3, r5
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	f8d8 3000 	ldr.w	r3, [r8]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	bb62      	cbnz	r2, 8008494 <_malloc_r+0xdc>
 800843a:	f8c8 7000 	str.w	r7, [r8]
 800843e:	e00f      	b.n	8008460 <_malloc_r+0xa8>
 8008440:	6822      	ldr	r2, [r4, #0]
 8008442:	1b52      	subs	r2, r2, r5
 8008444:	d420      	bmi.n	8008488 <_malloc_r+0xd0>
 8008446:	2a0b      	cmp	r2, #11
 8008448:	d917      	bls.n	800847a <_malloc_r+0xc2>
 800844a:	1961      	adds	r1, r4, r5
 800844c:	42a3      	cmp	r3, r4
 800844e:	6025      	str	r5, [r4, #0]
 8008450:	bf18      	it	ne
 8008452:	6059      	strne	r1, [r3, #4]
 8008454:	6863      	ldr	r3, [r4, #4]
 8008456:	bf08      	it	eq
 8008458:	f8c8 1000 	streq.w	r1, [r8]
 800845c:	5162      	str	r2, [r4, r5]
 800845e:	604b      	str	r3, [r1, #4]
 8008460:	4630      	mov	r0, r6
 8008462:	f000 f841 	bl	80084e8 <__malloc_unlock>
 8008466:	f104 000b 	add.w	r0, r4, #11
 800846a:	1d23      	adds	r3, r4, #4
 800846c:	f020 0007 	bic.w	r0, r0, #7
 8008470:	1ac2      	subs	r2, r0, r3
 8008472:	bf1c      	itt	ne
 8008474:	1a1b      	subne	r3, r3, r0
 8008476:	50a3      	strne	r3, [r4, r2]
 8008478:	e7af      	b.n	80083da <_malloc_r+0x22>
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	42a3      	cmp	r3, r4
 800847e:	bf0c      	ite	eq
 8008480:	f8c8 2000 	streq.w	r2, [r8]
 8008484:	605a      	strne	r2, [r3, #4]
 8008486:	e7eb      	b.n	8008460 <_malloc_r+0xa8>
 8008488:	4623      	mov	r3, r4
 800848a:	6864      	ldr	r4, [r4, #4]
 800848c:	e7ae      	b.n	80083ec <_malloc_r+0x34>
 800848e:	463c      	mov	r4, r7
 8008490:	687f      	ldr	r7, [r7, #4]
 8008492:	e7b6      	b.n	8008402 <_malloc_r+0x4a>
 8008494:	461a      	mov	r2, r3
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	42a3      	cmp	r3, r4
 800849a:	d1fb      	bne.n	8008494 <_malloc_r+0xdc>
 800849c:	2300      	movs	r3, #0
 800849e:	6053      	str	r3, [r2, #4]
 80084a0:	e7de      	b.n	8008460 <_malloc_r+0xa8>
 80084a2:	230c      	movs	r3, #12
 80084a4:	4630      	mov	r0, r6
 80084a6:	6033      	str	r3, [r6, #0]
 80084a8:	f000 f81e 	bl	80084e8 <__malloc_unlock>
 80084ac:	e794      	b.n	80083d8 <_malloc_r+0x20>
 80084ae:	6005      	str	r5, [r0, #0]
 80084b0:	e7d6      	b.n	8008460 <_malloc_r+0xa8>
 80084b2:	bf00      	nop
 80084b4:	200004a0 	.word	0x200004a0

080084b8 <__ascii_mbtowc>:
 80084b8:	b082      	sub	sp, #8
 80084ba:	b901      	cbnz	r1, 80084be <__ascii_mbtowc+0x6>
 80084bc:	a901      	add	r1, sp, #4
 80084be:	b142      	cbz	r2, 80084d2 <__ascii_mbtowc+0x1a>
 80084c0:	b14b      	cbz	r3, 80084d6 <__ascii_mbtowc+0x1e>
 80084c2:	7813      	ldrb	r3, [r2, #0]
 80084c4:	600b      	str	r3, [r1, #0]
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	1e10      	subs	r0, r2, #0
 80084ca:	bf18      	it	ne
 80084cc:	2001      	movne	r0, #1
 80084ce:	b002      	add	sp, #8
 80084d0:	4770      	bx	lr
 80084d2:	4610      	mov	r0, r2
 80084d4:	e7fb      	b.n	80084ce <__ascii_mbtowc+0x16>
 80084d6:	f06f 0001 	mvn.w	r0, #1
 80084da:	e7f8      	b.n	80084ce <__ascii_mbtowc+0x16>

080084dc <__malloc_lock>:
 80084dc:	4801      	ldr	r0, [pc, #4]	@ (80084e4 <__malloc_lock+0x8>)
 80084de:	f7fe bd48 	b.w	8006f72 <__retarget_lock_acquire_recursive>
 80084e2:	bf00      	nop
 80084e4:	20000498 	.word	0x20000498

080084e8 <__malloc_unlock>:
 80084e8:	4801      	ldr	r0, [pc, #4]	@ (80084f0 <__malloc_unlock+0x8>)
 80084ea:	f7fe bd43 	b.w	8006f74 <__retarget_lock_release_recursive>
 80084ee:	bf00      	nop
 80084f0:	20000498 	.word	0x20000498

080084f4 <_Balloc>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	69c6      	ldr	r6, [r0, #28]
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	b976      	cbnz	r6, 800851c <_Balloc+0x28>
 80084fe:	2010      	movs	r0, #16
 8008500:	f7ff ff30 	bl	8008364 <malloc>
 8008504:	4602      	mov	r2, r0
 8008506:	61e0      	str	r0, [r4, #28]
 8008508:	b920      	cbnz	r0, 8008514 <_Balloc+0x20>
 800850a:	216b      	movs	r1, #107	@ 0x6b
 800850c:	4b17      	ldr	r3, [pc, #92]	@ (800856c <_Balloc+0x78>)
 800850e:	4818      	ldr	r0, [pc, #96]	@ (8008570 <_Balloc+0x7c>)
 8008510:	f000 fecc 	bl	80092ac <__assert_func>
 8008514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008518:	6006      	str	r6, [r0, #0]
 800851a:	60c6      	str	r6, [r0, #12]
 800851c:	69e6      	ldr	r6, [r4, #28]
 800851e:	68f3      	ldr	r3, [r6, #12]
 8008520:	b183      	cbz	r3, 8008544 <_Balloc+0x50>
 8008522:	69e3      	ldr	r3, [r4, #28]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800852a:	b9b8      	cbnz	r0, 800855c <_Balloc+0x68>
 800852c:	2101      	movs	r1, #1
 800852e:	fa01 f605 	lsl.w	r6, r1, r5
 8008532:	1d72      	adds	r2, r6, #5
 8008534:	4620      	mov	r0, r4
 8008536:	0092      	lsls	r2, r2, #2
 8008538:	f000 fed6 	bl	80092e8 <_calloc_r>
 800853c:	b160      	cbz	r0, 8008558 <_Balloc+0x64>
 800853e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008542:	e00e      	b.n	8008562 <_Balloc+0x6e>
 8008544:	2221      	movs	r2, #33	@ 0x21
 8008546:	2104      	movs	r1, #4
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fecd 	bl	80092e8 <_calloc_r>
 800854e:	69e3      	ldr	r3, [r4, #28]
 8008550:	60f0      	str	r0, [r6, #12]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e4      	bne.n	8008522 <_Balloc+0x2e>
 8008558:	2000      	movs	r0, #0
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	6802      	ldr	r2, [r0, #0]
 800855e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008562:	2300      	movs	r3, #0
 8008564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008568:	e7f7      	b.n	800855a <_Balloc+0x66>
 800856a:	bf00      	nop
 800856c:	08009b71 	.word	0x08009b71
 8008570:	08009c51 	.word	0x08009c51

08008574 <_Bfree>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	69c6      	ldr	r6, [r0, #28]
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	b976      	cbnz	r6, 800859c <_Bfree+0x28>
 800857e:	2010      	movs	r0, #16
 8008580:	f7ff fef0 	bl	8008364 <malloc>
 8008584:	4602      	mov	r2, r0
 8008586:	61e8      	str	r0, [r5, #28]
 8008588:	b920      	cbnz	r0, 8008594 <_Bfree+0x20>
 800858a:	218f      	movs	r1, #143	@ 0x8f
 800858c:	4b08      	ldr	r3, [pc, #32]	@ (80085b0 <_Bfree+0x3c>)
 800858e:	4809      	ldr	r0, [pc, #36]	@ (80085b4 <_Bfree+0x40>)
 8008590:	f000 fe8c 	bl	80092ac <__assert_func>
 8008594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008598:	6006      	str	r6, [r0, #0]
 800859a:	60c6      	str	r6, [r0, #12]
 800859c:	b13c      	cbz	r4, 80085ae <_Bfree+0x3a>
 800859e:	69eb      	ldr	r3, [r5, #28]
 80085a0:	6862      	ldr	r2, [r4, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085a8:	6021      	str	r1, [r4, #0]
 80085aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085ae:	bd70      	pop	{r4, r5, r6, pc}
 80085b0:	08009b71 	.word	0x08009b71
 80085b4:	08009c51 	.word	0x08009c51

080085b8 <__multadd>:
 80085b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085bc:	4607      	mov	r7, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	461e      	mov	r6, r3
 80085c2:	2000      	movs	r0, #0
 80085c4:	690d      	ldr	r5, [r1, #16]
 80085c6:	f101 0c14 	add.w	ip, r1, #20
 80085ca:	f8dc 3000 	ldr.w	r3, [ip]
 80085ce:	3001      	adds	r0, #1
 80085d0:	b299      	uxth	r1, r3
 80085d2:	fb02 6101 	mla	r1, r2, r1, r6
 80085d6:	0c1e      	lsrs	r6, r3, #16
 80085d8:	0c0b      	lsrs	r3, r1, #16
 80085da:	fb02 3306 	mla	r3, r2, r6, r3
 80085de:	b289      	uxth	r1, r1
 80085e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085e4:	4285      	cmp	r5, r0
 80085e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ea:	f84c 1b04 	str.w	r1, [ip], #4
 80085ee:	dcec      	bgt.n	80085ca <__multadd+0x12>
 80085f0:	b30e      	cbz	r6, 8008636 <__multadd+0x7e>
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	42ab      	cmp	r3, r5
 80085f6:	dc19      	bgt.n	800862c <__multadd+0x74>
 80085f8:	6861      	ldr	r1, [r4, #4]
 80085fa:	4638      	mov	r0, r7
 80085fc:	3101      	adds	r1, #1
 80085fe:	f7ff ff79 	bl	80084f4 <_Balloc>
 8008602:	4680      	mov	r8, r0
 8008604:	b928      	cbnz	r0, 8008612 <__multadd+0x5a>
 8008606:	4602      	mov	r2, r0
 8008608:	21ba      	movs	r1, #186	@ 0xba
 800860a:	4b0c      	ldr	r3, [pc, #48]	@ (800863c <__multadd+0x84>)
 800860c:	480c      	ldr	r0, [pc, #48]	@ (8008640 <__multadd+0x88>)
 800860e:	f000 fe4d 	bl	80092ac <__assert_func>
 8008612:	6922      	ldr	r2, [r4, #16]
 8008614:	f104 010c 	add.w	r1, r4, #12
 8008618:	3202      	adds	r2, #2
 800861a:	0092      	lsls	r2, r2, #2
 800861c:	300c      	adds	r0, #12
 800861e:	f7fe fcb8 	bl	8006f92 <memcpy>
 8008622:	4621      	mov	r1, r4
 8008624:	4638      	mov	r0, r7
 8008626:	f7ff ffa5 	bl	8008574 <_Bfree>
 800862a:	4644      	mov	r4, r8
 800862c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008630:	3501      	adds	r5, #1
 8008632:	615e      	str	r6, [r3, #20]
 8008634:	6125      	str	r5, [r4, #16]
 8008636:	4620      	mov	r0, r4
 8008638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863c:	08009be0 	.word	0x08009be0
 8008640:	08009c51 	.word	0x08009c51

08008644 <__s2b>:
 8008644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008648:	4615      	mov	r5, r2
 800864a:	2209      	movs	r2, #9
 800864c:	461f      	mov	r7, r3
 800864e:	3308      	adds	r3, #8
 8008650:	460c      	mov	r4, r1
 8008652:	fb93 f3f2 	sdiv	r3, r3, r2
 8008656:	4606      	mov	r6, r0
 8008658:	2201      	movs	r2, #1
 800865a:	2100      	movs	r1, #0
 800865c:	429a      	cmp	r2, r3
 800865e:	db09      	blt.n	8008674 <__s2b+0x30>
 8008660:	4630      	mov	r0, r6
 8008662:	f7ff ff47 	bl	80084f4 <_Balloc>
 8008666:	b940      	cbnz	r0, 800867a <__s2b+0x36>
 8008668:	4602      	mov	r2, r0
 800866a:	21d3      	movs	r1, #211	@ 0xd3
 800866c:	4b18      	ldr	r3, [pc, #96]	@ (80086d0 <__s2b+0x8c>)
 800866e:	4819      	ldr	r0, [pc, #100]	@ (80086d4 <__s2b+0x90>)
 8008670:	f000 fe1c 	bl	80092ac <__assert_func>
 8008674:	0052      	lsls	r2, r2, #1
 8008676:	3101      	adds	r1, #1
 8008678:	e7f0      	b.n	800865c <__s2b+0x18>
 800867a:	9b08      	ldr	r3, [sp, #32]
 800867c:	2d09      	cmp	r5, #9
 800867e:	6143      	str	r3, [r0, #20]
 8008680:	f04f 0301 	mov.w	r3, #1
 8008684:	6103      	str	r3, [r0, #16]
 8008686:	dd16      	ble.n	80086b6 <__s2b+0x72>
 8008688:	f104 0909 	add.w	r9, r4, #9
 800868c:	46c8      	mov	r8, r9
 800868e:	442c      	add	r4, r5
 8008690:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008694:	4601      	mov	r1, r0
 8008696:	220a      	movs	r2, #10
 8008698:	4630      	mov	r0, r6
 800869a:	3b30      	subs	r3, #48	@ 0x30
 800869c:	f7ff ff8c 	bl	80085b8 <__multadd>
 80086a0:	45a0      	cmp	r8, r4
 80086a2:	d1f5      	bne.n	8008690 <__s2b+0x4c>
 80086a4:	f1a5 0408 	sub.w	r4, r5, #8
 80086a8:	444c      	add	r4, r9
 80086aa:	1b2d      	subs	r5, r5, r4
 80086ac:	1963      	adds	r3, r4, r5
 80086ae:	42bb      	cmp	r3, r7
 80086b0:	db04      	blt.n	80086bc <__s2b+0x78>
 80086b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086b6:	2509      	movs	r5, #9
 80086b8:	340a      	adds	r4, #10
 80086ba:	e7f6      	b.n	80086aa <__s2b+0x66>
 80086bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086c0:	4601      	mov	r1, r0
 80086c2:	220a      	movs	r2, #10
 80086c4:	4630      	mov	r0, r6
 80086c6:	3b30      	subs	r3, #48	@ 0x30
 80086c8:	f7ff ff76 	bl	80085b8 <__multadd>
 80086cc:	e7ee      	b.n	80086ac <__s2b+0x68>
 80086ce:	bf00      	nop
 80086d0:	08009be0 	.word	0x08009be0
 80086d4:	08009c51 	.word	0x08009c51

080086d8 <__hi0bits>:
 80086d8:	4603      	mov	r3, r0
 80086da:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086de:	bf3a      	itte	cc
 80086e0:	0403      	lslcc	r3, r0, #16
 80086e2:	2010      	movcc	r0, #16
 80086e4:	2000      	movcs	r0, #0
 80086e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ea:	bf3c      	itt	cc
 80086ec:	021b      	lslcc	r3, r3, #8
 80086ee:	3008      	addcc	r0, #8
 80086f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086f4:	bf3c      	itt	cc
 80086f6:	011b      	lslcc	r3, r3, #4
 80086f8:	3004      	addcc	r0, #4
 80086fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086fe:	bf3c      	itt	cc
 8008700:	009b      	lslcc	r3, r3, #2
 8008702:	3002      	addcc	r0, #2
 8008704:	2b00      	cmp	r3, #0
 8008706:	db05      	blt.n	8008714 <__hi0bits+0x3c>
 8008708:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800870c:	f100 0001 	add.w	r0, r0, #1
 8008710:	bf08      	it	eq
 8008712:	2020      	moveq	r0, #32
 8008714:	4770      	bx	lr

08008716 <__lo0bits>:
 8008716:	6803      	ldr	r3, [r0, #0]
 8008718:	4602      	mov	r2, r0
 800871a:	f013 0007 	ands.w	r0, r3, #7
 800871e:	d00b      	beq.n	8008738 <__lo0bits+0x22>
 8008720:	07d9      	lsls	r1, r3, #31
 8008722:	d421      	bmi.n	8008768 <__lo0bits+0x52>
 8008724:	0798      	lsls	r0, r3, #30
 8008726:	bf49      	itett	mi
 8008728:	085b      	lsrmi	r3, r3, #1
 800872a:	089b      	lsrpl	r3, r3, #2
 800872c:	2001      	movmi	r0, #1
 800872e:	6013      	strmi	r3, [r2, #0]
 8008730:	bf5c      	itt	pl
 8008732:	2002      	movpl	r0, #2
 8008734:	6013      	strpl	r3, [r2, #0]
 8008736:	4770      	bx	lr
 8008738:	b299      	uxth	r1, r3
 800873a:	b909      	cbnz	r1, 8008740 <__lo0bits+0x2a>
 800873c:	2010      	movs	r0, #16
 800873e:	0c1b      	lsrs	r3, r3, #16
 8008740:	b2d9      	uxtb	r1, r3
 8008742:	b909      	cbnz	r1, 8008748 <__lo0bits+0x32>
 8008744:	3008      	adds	r0, #8
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	0719      	lsls	r1, r3, #28
 800874a:	bf04      	itt	eq
 800874c:	091b      	lsreq	r3, r3, #4
 800874e:	3004      	addeq	r0, #4
 8008750:	0799      	lsls	r1, r3, #30
 8008752:	bf04      	itt	eq
 8008754:	089b      	lsreq	r3, r3, #2
 8008756:	3002      	addeq	r0, #2
 8008758:	07d9      	lsls	r1, r3, #31
 800875a:	d403      	bmi.n	8008764 <__lo0bits+0x4e>
 800875c:	085b      	lsrs	r3, r3, #1
 800875e:	f100 0001 	add.w	r0, r0, #1
 8008762:	d003      	beq.n	800876c <__lo0bits+0x56>
 8008764:	6013      	str	r3, [r2, #0]
 8008766:	4770      	bx	lr
 8008768:	2000      	movs	r0, #0
 800876a:	4770      	bx	lr
 800876c:	2020      	movs	r0, #32
 800876e:	4770      	bx	lr

08008770 <__i2b>:
 8008770:	b510      	push	{r4, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	2101      	movs	r1, #1
 8008776:	f7ff febd 	bl	80084f4 <_Balloc>
 800877a:	4602      	mov	r2, r0
 800877c:	b928      	cbnz	r0, 800878a <__i2b+0x1a>
 800877e:	f240 1145 	movw	r1, #325	@ 0x145
 8008782:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <__i2b+0x24>)
 8008784:	4804      	ldr	r0, [pc, #16]	@ (8008798 <__i2b+0x28>)
 8008786:	f000 fd91 	bl	80092ac <__assert_func>
 800878a:	2301      	movs	r3, #1
 800878c:	6144      	str	r4, [r0, #20]
 800878e:	6103      	str	r3, [r0, #16]
 8008790:	bd10      	pop	{r4, pc}
 8008792:	bf00      	nop
 8008794:	08009be0 	.word	0x08009be0
 8008798:	08009c51 	.word	0x08009c51

0800879c <__multiply>:
 800879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a0:	4614      	mov	r4, r2
 80087a2:	690a      	ldr	r2, [r1, #16]
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	460f      	mov	r7, r1
 80087a8:	429a      	cmp	r2, r3
 80087aa:	bfa2      	ittt	ge
 80087ac:	4623      	movge	r3, r4
 80087ae:	460c      	movge	r4, r1
 80087b0:	461f      	movge	r7, r3
 80087b2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087b6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	6861      	ldr	r1, [r4, #4]
 80087be:	eb0a 0609 	add.w	r6, sl, r9
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	b085      	sub	sp, #20
 80087c6:	bfb8      	it	lt
 80087c8:	3101      	addlt	r1, #1
 80087ca:	f7ff fe93 	bl	80084f4 <_Balloc>
 80087ce:	b930      	cbnz	r0, 80087de <__multiply+0x42>
 80087d0:	4602      	mov	r2, r0
 80087d2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087d6:	4b43      	ldr	r3, [pc, #268]	@ (80088e4 <__multiply+0x148>)
 80087d8:	4843      	ldr	r0, [pc, #268]	@ (80088e8 <__multiply+0x14c>)
 80087da:	f000 fd67 	bl	80092ac <__assert_func>
 80087de:	f100 0514 	add.w	r5, r0, #20
 80087e2:	462b      	mov	r3, r5
 80087e4:	2200      	movs	r2, #0
 80087e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087ea:	4543      	cmp	r3, r8
 80087ec:	d321      	bcc.n	8008832 <__multiply+0x96>
 80087ee:	f107 0114 	add.w	r1, r7, #20
 80087f2:	f104 0214 	add.w	r2, r4, #20
 80087f6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087fa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087fe:	9302      	str	r3, [sp, #8]
 8008800:	1b13      	subs	r3, r2, r4
 8008802:	3b15      	subs	r3, #21
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	3304      	adds	r3, #4
 800880a:	f104 0715 	add.w	r7, r4, #21
 800880e:	42ba      	cmp	r2, r7
 8008810:	bf38      	it	cc
 8008812:	2304      	movcc	r3, #4
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	9b02      	ldr	r3, [sp, #8]
 8008818:	9103      	str	r1, [sp, #12]
 800881a:	428b      	cmp	r3, r1
 800881c:	d80c      	bhi.n	8008838 <__multiply+0x9c>
 800881e:	2e00      	cmp	r6, #0
 8008820:	dd03      	ble.n	800882a <__multiply+0x8e>
 8008822:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008826:	2b00      	cmp	r3, #0
 8008828:	d05a      	beq.n	80088e0 <__multiply+0x144>
 800882a:	6106      	str	r6, [r0, #16]
 800882c:	b005      	add	sp, #20
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	f843 2b04 	str.w	r2, [r3], #4
 8008836:	e7d8      	b.n	80087ea <__multiply+0x4e>
 8008838:	f8b1 a000 	ldrh.w	sl, [r1]
 800883c:	f1ba 0f00 	cmp.w	sl, #0
 8008840:	d023      	beq.n	800888a <__multiply+0xee>
 8008842:	46a9      	mov	r9, r5
 8008844:	f04f 0c00 	mov.w	ip, #0
 8008848:	f104 0e14 	add.w	lr, r4, #20
 800884c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008850:	f8d9 3000 	ldr.w	r3, [r9]
 8008854:	fa1f fb87 	uxth.w	fp, r7
 8008858:	b29b      	uxth	r3, r3
 800885a:	fb0a 330b 	mla	r3, sl, fp, r3
 800885e:	4463      	add	r3, ip
 8008860:	f8d9 c000 	ldr.w	ip, [r9]
 8008864:	0c3f      	lsrs	r7, r7, #16
 8008866:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800886a:	fb0a c707 	mla	r7, sl, r7, ip
 800886e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008872:	b29b      	uxth	r3, r3
 8008874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008878:	4572      	cmp	r2, lr
 800887a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800887e:	f849 3b04 	str.w	r3, [r9], #4
 8008882:	d8e3      	bhi.n	800884c <__multiply+0xb0>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	f845 c003 	str.w	ip, [r5, r3]
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	3104      	adds	r1, #4
 800888e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008892:	f1b9 0f00 	cmp.w	r9, #0
 8008896:	d021      	beq.n	80088dc <__multiply+0x140>
 8008898:	46ae      	mov	lr, r5
 800889a:	f04f 0a00 	mov.w	sl, #0
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	f104 0c14 	add.w	ip, r4, #20
 80088a4:	f8bc b000 	ldrh.w	fp, [ip]
 80088a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	fb09 770b 	mla	r7, r9, fp, r7
 80088b2:	4457      	add	r7, sl
 80088b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088b8:	f84e 3b04 	str.w	r3, [lr], #4
 80088bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088c4:	f8be 3000 	ldrh.w	r3, [lr]
 80088c8:	4562      	cmp	r2, ip
 80088ca:	fb09 330a 	mla	r3, r9, sl, r3
 80088ce:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088d6:	d8e5      	bhi.n	80088a4 <__multiply+0x108>
 80088d8:	9f01      	ldr	r7, [sp, #4]
 80088da:	51eb      	str	r3, [r5, r7]
 80088dc:	3504      	adds	r5, #4
 80088de:	e79a      	b.n	8008816 <__multiply+0x7a>
 80088e0:	3e01      	subs	r6, #1
 80088e2:	e79c      	b.n	800881e <__multiply+0x82>
 80088e4:	08009be0 	.word	0x08009be0
 80088e8:	08009c51 	.word	0x08009c51

080088ec <__pow5mult>:
 80088ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f0:	4615      	mov	r5, r2
 80088f2:	f012 0203 	ands.w	r2, r2, #3
 80088f6:	4607      	mov	r7, r0
 80088f8:	460e      	mov	r6, r1
 80088fa:	d007      	beq.n	800890c <__pow5mult+0x20>
 80088fc:	4c25      	ldr	r4, [pc, #148]	@ (8008994 <__pow5mult+0xa8>)
 80088fe:	3a01      	subs	r2, #1
 8008900:	2300      	movs	r3, #0
 8008902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008906:	f7ff fe57 	bl	80085b8 <__multadd>
 800890a:	4606      	mov	r6, r0
 800890c:	10ad      	asrs	r5, r5, #2
 800890e:	d03d      	beq.n	800898c <__pow5mult+0xa0>
 8008910:	69fc      	ldr	r4, [r7, #28]
 8008912:	b97c      	cbnz	r4, 8008934 <__pow5mult+0x48>
 8008914:	2010      	movs	r0, #16
 8008916:	f7ff fd25 	bl	8008364 <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	61f8      	str	r0, [r7, #28]
 800891e:	b928      	cbnz	r0, 800892c <__pow5mult+0x40>
 8008920:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008924:	4b1c      	ldr	r3, [pc, #112]	@ (8008998 <__pow5mult+0xac>)
 8008926:	481d      	ldr	r0, [pc, #116]	@ (800899c <__pow5mult+0xb0>)
 8008928:	f000 fcc0 	bl	80092ac <__assert_func>
 800892c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008930:	6004      	str	r4, [r0, #0]
 8008932:	60c4      	str	r4, [r0, #12]
 8008934:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800893c:	b94c      	cbnz	r4, 8008952 <__pow5mult+0x66>
 800893e:	f240 2171 	movw	r1, #625	@ 0x271
 8008942:	4638      	mov	r0, r7
 8008944:	f7ff ff14 	bl	8008770 <__i2b>
 8008948:	2300      	movs	r3, #0
 800894a:	4604      	mov	r4, r0
 800894c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008950:	6003      	str	r3, [r0, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	07eb      	lsls	r3, r5, #31
 8008958:	d50a      	bpl.n	8008970 <__pow5mult+0x84>
 800895a:	4631      	mov	r1, r6
 800895c:	4622      	mov	r2, r4
 800895e:	4638      	mov	r0, r7
 8008960:	f7ff ff1c 	bl	800879c <__multiply>
 8008964:	4680      	mov	r8, r0
 8008966:	4631      	mov	r1, r6
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff fe03 	bl	8008574 <_Bfree>
 800896e:	4646      	mov	r6, r8
 8008970:	106d      	asrs	r5, r5, #1
 8008972:	d00b      	beq.n	800898c <__pow5mult+0xa0>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	b938      	cbnz	r0, 8008988 <__pow5mult+0x9c>
 8008978:	4622      	mov	r2, r4
 800897a:	4621      	mov	r1, r4
 800897c:	4638      	mov	r0, r7
 800897e:	f7ff ff0d 	bl	800879c <__multiply>
 8008982:	6020      	str	r0, [r4, #0]
 8008984:	f8c0 9000 	str.w	r9, [r0]
 8008988:	4604      	mov	r4, r0
 800898a:	e7e4      	b.n	8008956 <__pow5mult+0x6a>
 800898c:	4630      	mov	r0, r6
 800898e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008992:	bf00      	nop
 8008994:	08009cac 	.word	0x08009cac
 8008998:	08009b71 	.word	0x08009b71
 800899c:	08009c51 	.word	0x08009c51

080089a0 <__lshift>:
 80089a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	4607      	mov	r7, r0
 80089a8:	4691      	mov	r9, r2
 80089aa:	6923      	ldr	r3, [r4, #16]
 80089ac:	6849      	ldr	r1, [r1, #4]
 80089ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089b2:	68a3      	ldr	r3, [r4, #8]
 80089b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089b8:	f108 0601 	add.w	r6, r8, #1
 80089bc:	42b3      	cmp	r3, r6
 80089be:	db0b      	blt.n	80089d8 <__lshift+0x38>
 80089c0:	4638      	mov	r0, r7
 80089c2:	f7ff fd97 	bl	80084f4 <_Balloc>
 80089c6:	4605      	mov	r5, r0
 80089c8:	b948      	cbnz	r0, 80089de <__lshift+0x3e>
 80089ca:	4602      	mov	r2, r0
 80089cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089d0:	4b27      	ldr	r3, [pc, #156]	@ (8008a70 <__lshift+0xd0>)
 80089d2:	4828      	ldr	r0, [pc, #160]	@ (8008a74 <__lshift+0xd4>)
 80089d4:	f000 fc6a 	bl	80092ac <__assert_func>
 80089d8:	3101      	adds	r1, #1
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	e7ee      	b.n	80089bc <__lshift+0x1c>
 80089de:	2300      	movs	r3, #0
 80089e0:	f100 0114 	add.w	r1, r0, #20
 80089e4:	f100 0210 	add.w	r2, r0, #16
 80089e8:	4618      	mov	r0, r3
 80089ea:	4553      	cmp	r3, sl
 80089ec:	db33      	blt.n	8008a56 <__lshift+0xb6>
 80089ee:	6920      	ldr	r0, [r4, #16]
 80089f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089f4:	f104 0314 	add.w	r3, r4, #20
 80089f8:	f019 091f 	ands.w	r9, r9, #31
 80089fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a04:	d02b      	beq.n	8008a5e <__lshift+0xbe>
 8008a06:	468a      	mov	sl, r1
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	fa00 f009 	lsl.w	r0, r0, r9
 8008a14:	4310      	orrs	r0, r2
 8008a16:	f84a 0b04 	str.w	r0, [sl], #4
 8008a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a1e:	459c      	cmp	ip, r3
 8008a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a24:	d8f3      	bhi.n	8008a0e <__lshift+0x6e>
 8008a26:	ebac 0304 	sub.w	r3, ip, r4
 8008a2a:	3b15      	subs	r3, #21
 8008a2c:	f023 0303 	bic.w	r3, r3, #3
 8008a30:	3304      	adds	r3, #4
 8008a32:	f104 0015 	add.w	r0, r4, #21
 8008a36:	4584      	cmp	ip, r0
 8008a38:	bf38      	it	cc
 8008a3a:	2304      	movcc	r3, #4
 8008a3c:	50ca      	str	r2, [r1, r3]
 8008a3e:	b10a      	cbz	r2, 8008a44 <__lshift+0xa4>
 8008a40:	f108 0602 	add.w	r6, r8, #2
 8008a44:	3e01      	subs	r6, #1
 8008a46:	4638      	mov	r0, r7
 8008a48:	4621      	mov	r1, r4
 8008a4a:	612e      	str	r6, [r5, #16]
 8008a4c:	f7ff fd92 	bl	8008574 <_Bfree>
 8008a50:	4628      	mov	r0, r5
 8008a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	e7c5      	b.n	80089ea <__lshift+0x4a>
 8008a5e:	3904      	subs	r1, #4
 8008a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a64:	459c      	cmp	ip, r3
 8008a66:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a6a:	d8f9      	bhi.n	8008a60 <__lshift+0xc0>
 8008a6c:	e7ea      	b.n	8008a44 <__lshift+0xa4>
 8008a6e:	bf00      	nop
 8008a70:	08009be0 	.word	0x08009be0
 8008a74:	08009c51 	.word	0x08009c51

08008a78 <__mcmp>:
 8008a78:	4603      	mov	r3, r0
 8008a7a:	690a      	ldr	r2, [r1, #16]
 8008a7c:	6900      	ldr	r0, [r0, #16]
 8008a7e:	b530      	push	{r4, r5, lr}
 8008a80:	1a80      	subs	r0, r0, r2
 8008a82:	d10e      	bne.n	8008aa2 <__mcmp+0x2a>
 8008a84:	3314      	adds	r3, #20
 8008a86:	3114      	adds	r1, #20
 8008a88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a98:	4295      	cmp	r5, r2
 8008a9a:	d003      	beq.n	8008aa4 <__mcmp+0x2c>
 8008a9c:	d205      	bcs.n	8008aaa <__mcmp+0x32>
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	bd30      	pop	{r4, r5, pc}
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	d3f3      	bcc.n	8008a90 <__mcmp+0x18>
 8008aa8:	e7fb      	b.n	8008aa2 <__mcmp+0x2a>
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7f9      	b.n	8008aa2 <__mcmp+0x2a>
	...

08008ab0 <__mdiff>:
 8008ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	4611      	mov	r1, r2
 8008aba:	4648      	mov	r0, r9
 8008abc:	4614      	mov	r4, r2
 8008abe:	f7ff ffdb 	bl	8008a78 <__mcmp>
 8008ac2:	1e05      	subs	r5, r0, #0
 8008ac4:	d112      	bne.n	8008aec <__mdiff+0x3c>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff fd13 	bl	80084f4 <_Balloc>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	b928      	cbnz	r0, 8008ade <__mdiff+0x2e>
 8008ad2:	f240 2137 	movw	r1, #567	@ 0x237
 8008ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd0 <__mdiff+0x120>)
 8008ad8:	483e      	ldr	r0, [pc, #248]	@ (8008bd4 <__mdiff+0x124>)
 8008ada:	f000 fbe7 	bl	80092ac <__assert_func>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	b003      	add	sp, #12
 8008ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aec:	bfbc      	itt	lt
 8008aee:	464b      	movlt	r3, r9
 8008af0:	46a1      	movlt	r9, r4
 8008af2:	4630      	mov	r0, r6
 8008af4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008af8:	bfba      	itte	lt
 8008afa:	461c      	movlt	r4, r3
 8008afc:	2501      	movlt	r5, #1
 8008afe:	2500      	movge	r5, #0
 8008b00:	f7ff fcf8 	bl	80084f4 <_Balloc>
 8008b04:	4602      	mov	r2, r0
 8008b06:	b918      	cbnz	r0, 8008b10 <__mdiff+0x60>
 8008b08:	f240 2145 	movw	r1, #581	@ 0x245
 8008b0c:	4b30      	ldr	r3, [pc, #192]	@ (8008bd0 <__mdiff+0x120>)
 8008b0e:	e7e3      	b.n	8008ad8 <__mdiff+0x28>
 8008b10:	f100 0b14 	add.w	fp, r0, #20
 8008b14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b18:	f109 0310 	add.w	r3, r9, #16
 8008b1c:	60c5      	str	r5, [r0, #12]
 8008b1e:	f04f 0c00 	mov.w	ip, #0
 8008b22:	f109 0514 	add.w	r5, r9, #20
 8008b26:	46d9      	mov	r9, fp
 8008b28:	6926      	ldr	r6, [r4, #16]
 8008b2a:	f104 0e14 	add.w	lr, r4, #20
 8008b2e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b42:	b281      	uxth	r1, r0
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	fa1f f38a 	uxth.w	r3, sl
 8008b4a:	1a5b      	subs	r3, r3, r1
 8008b4c:	0c00      	lsrs	r0, r0, #16
 8008b4e:	4463      	add	r3, ip
 8008b50:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b54:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b5e:	4576      	cmp	r6, lr
 8008b60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b64:	f849 3b04 	str.w	r3, [r9], #4
 8008b68:	d8e6      	bhi.n	8008b38 <__mdiff+0x88>
 8008b6a:	1b33      	subs	r3, r6, r4
 8008b6c:	3b15      	subs	r3, #21
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	3415      	adds	r4, #21
 8008b74:	3304      	adds	r3, #4
 8008b76:	42a6      	cmp	r6, r4
 8008b78:	bf38      	it	cc
 8008b7a:	2304      	movcc	r3, #4
 8008b7c:	441d      	add	r5, r3
 8008b7e:	445b      	add	r3, fp
 8008b80:	461e      	mov	r6, r3
 8008b82:	462c      	mov	r4, r5
 8008b84:	4544      	cmp	r4, r8
 8008b86:	d30e      	bcc.n	8008ba6 <__mdiff+0xf6>
 8008b88:	f108 0103 	add.w	r1, r8, #3
 8008b8c:	1b49      	subs	r1, r1, r5
 8008b8e:	f021 0103 	bic.w	r1, r1, #3
 8008b92:	3d03      	subs	r5, #3
 8008b94:	45a8      	cmp	r8, r5
 8008b96:	bf38      	it	cc
 8008b98:	2100      	movcc	r1, #0
 8008b9a:	440b      	add	r3, r1
 8008b9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ba0:	b199      	cbz	r1, 8008bca <__mdiff+0x11a>
 8008ba2:	6117      	str	r7, [r2, #16]
 8008ba4:	e79e      	b.n	8008ae4 <__mdiff+0x34>
 8008ba6:	46e6      	mov	lr, ip
 8008ba8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bac:	fa1f fc81 	uxth.w	ip, r1
 8008bb0:	44f4      	add	ip, lr
 8008bb2:	0c08      	lsrs	r0, r1, #16
 8008bb4:	4471      	add	r1, lr
 8008bb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bba:	b289      	uxth	r1, r1
 8008bbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bc4:	f846 1b04 	str.w	r1, [r6], #4
 8008bc8:	e7dc      	b.n	8008b84 <__mdiff+0xd4>
 8008bca:	3f01      	subs	r7, #1
 8008bcc:	e7e6      	b.n	8008b9c <__mdiff+0xec>
 8008bce:	bf00      	nop
 8008bd0:	08009be0 	.word	0x08009be0
 8008bd4:	08009c51 	.word	0x08009c51

08008bd8 <__ulp>:
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8008c14 <__ulp+0x3c>)
 8008bda:	400b      	ands	r3, r1
 8008bdc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dc08      	bgt.n	8008bf6 <__ulp+0x1e>
 8008be4:	425b      	negs	r3, r3
 8008be6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bee:	da04      	bge.n	8008bfa <__ulp+0x22>
 8008bf0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bf4:	4113      	asrs	r3, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	e008      	b.n	8008c0c <__ulp+0x34>
 8008bfa:	f1a2 0314 	sub.w	r3, r2, #20
 8008bfe:	2b1e      	cmp	r3, #30
 8008c00:	bfd6      	itet	le
 8008c02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c06:	2201      	movgt	r2, #1
 8008c08:	40da      	lsrle	r2, r3
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	7ff00000 	.word	0x7ff00000

08008c18 <__b2d>:
 8008c18:	6902      	ldr	r2, [r0, #16]
 8008c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1c:	f100 0614 	add.w	r6, r0, #20
 8008c20:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008c24:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008c28:	4f1e      	ldr	r7, [pc, #120]	@ (8008ca4 <__b2d+0x8c>)
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	f7ff fd54 	bl	80086d8 <__hi0bits>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f1c0 0020 	rsb	r0, r0, #32
 8008c36:	2b0a      	cmp	r3, #10
 8008c38:	f1a2 0504 	sub.w	r5, r2, #4
 8008c3c:	6008      	str	r0, [r1, #0]
 8008c3e:	dc12      	bgt.n	8008c66 <__b2d+0x4e>
 8008c40:	42ae      	cmp	r6, r5
 8008c42:	bf2c      	ite	cs
 8008c44:	2200      	movcs	r2, #0
 8008c46:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c4a:	f1c3 0c0b 	rsb	ip, r3, #11
 8008c4e:	3315      	adds	r3, #21
 8008c50:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008c54:	fa04 f303 	lsl.w	r3, r4, r3
 8008c58:	fa22 f20c 	lsr.w	r2, r2, ip
 8008c5c:	ea4e 0107 	orr.w	r1, lr, r7
 8008c60:	431a      	orrs	r2, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c66:	42ae      	cmp	r6, r5
 8008c68:	bf36      	itet	cc
 8008c6a:	f1a2 0508 	subcc.w	r5, r2, #8
 8008c6e:	2200      	movcs	r2, #0
 8008c70:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c74:	3b0b      	subs	r3, #11
 8008c76:	d012      	beq.n	8008c9e <__b2d+0x86>
 8008c78:	f1c3 0720 	rsb	r7, r3, #32
 8008c7c:	fa22 f107 	lsr.w	r1, r2, r7
 8008c80:	409c      	lsls	r4, r3
 8008c82:	430c      	orrs	r4, r1
 8008c84:	42b5      	cmp	r5, r6
 8008c86:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008c8a:	bf94      	ite	ls
 8008c8c:	2400      	movls	r4, #0
 8008c8e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008c92:	409a      	lsls	r2, r3
 8008c94:	40fc      	lsrs	r4, r7
 8008c96:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008c9a:	4322      	orrs	r2, r4
 8008c9c:	e7e1      	b.n	8008c62 <__b2d+0x4a>
 8008c9e:	ea44 0107 	orr.w	r1, r4, r7
 8008ca2:	e7de      	b.n	8008c62 <__b2d+0x4a>
 8008ca4:	3ff00000 	.word	0x3ff00000

08008ca8 <__d2b>:
 8008ca8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008cac:	2101      	movs	r1, #1
 8008cae:	4690      	mov	r8, r2
 8008cb0:	4699      	mov	r9, r3
 8008cb2:	9e08      	ldr	r6, [sp, #32]
 8008cb4:	f7ff fc1e 	bl	80084f4 <_Balloc>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	b930      	cbnz	r0, 8008cca <__d2b+0x22>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cc2:	4b23      	ldr	r3, [pc, #140]	@ (8008d50 <__d2b+0xa8>)
 8008cc4:	4823      	ldr	r0, [pc, #140]	@ (8008d54 <__d2b+0xac>)
 8008cc6:	f000 faf1 	bl	80092ac <__assert_func>
 8008cca:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cd2:	b10d      	cbz	r5, 8008cd8 <__d2b+0x30>
 8008cd4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	f1b8 0300 	subs.w	r3, r8, #0
 8008cde:	d024      	beq.n	8008d2a <__d2b+0x82>
 8008ce0:	4668      	mov	r0, sp
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	f7ff fd17 	bl	8008716 <__lo0bits>
 8008ce8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cec:	b1d8      	cbz	r0, 8008d26 <__d2b+0x7e>
 8008cee:	f1c0 0320 	rsb	r3, r0, #32
 8008cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	40c2      	lsrs	r2, r0
 8008cfa:	6163      	str	r3, [r4, #20]
 8008cfc:	9201      	str	r2, [sp, #4]
 8008cfe:	9b01      	ldr	r3, [sp, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bf0c      	ite	eq
 8008d04:	2201      	moveq	r2, #1
 8008d06:	2202      	movne	r2, #2
 8008d08:	61a3      	str	r3, [r4, #24]
 8008d0a:	6122      	str	r2, [r4, #16]
 8008d0c:	b1ad      	cbz	r5, 8008d3a <__d2b+0x92>
 8008d0e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d12:	4405      	add	r5, r0
 8008d14:	6035      	str	r5, [r6, #0]
 8008d16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d1c:	6018      	str	r0, [r3, #0]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	b002      	add	sp, #8
 8008d22:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d26:	6161      	str	r1, [r4, #20]
 8008d28:	e7e9      	b.n	8008cfe <__d2b+0x56>
 8008d2a:	a801      	add	r0, sp, #4
 8008d2c:	f7ff fcf3 	bl	8008716 <__lo0bits>
 8008d30:	9b01      	ldr	r3, [sp, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	6163      	str	r3, [r4, #20]
 8008d36:	3020      	adds	r0, #32
 8008d38:	e7e7      	b.n	8008d0a <__d2b+0x62>
 8008d3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d42:	6030      	str	r0, [r6, #0]
 8008d44:	6918      	ldr	r0, [r3, #16]
 8008d46:	f7ff fcc7 	bl	80086d8 <__hi0bits>
 8008d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d4e:	e7e4      	b.n	8008d1a <__d2b+0x72>
 8008d50:	08009be0 	.word	0x08009be0
 8008d54:	08009c51 	.word	0x08009c51

08008d58 <__ratio>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	e9cd 1000 	strd	r1, r0, [sp]
 8008d62:	a902      	add	r1, sp, #8
 8008d64:	f7ff ff58 	bl	8008c18 <__b2d>
 8008d68:	468b      	mov	fp, r1
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	460f      	mov	r7, r1
 8008d6e:	9800      	ldr	r0, [sp, #0]
 8008d70:	a903      	add	r1, sp, #12
 8008d72:	f7ff ff51 	bl	8008c18 <__b2d>
 8008d76:	460d      	mov	r5, r1
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	4689      	mov	r9, r1
 8008d7c:	6919      	ldr	r1, [r3, #16]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	4604      	mov	r4, r0
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	4630      	mov	r0, r6
 8008d86:	1ac9      	subs	r1, r1, r3
 8008d88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bfcd      	iteet	gt
 8008d96:	463a      	movgt	r2, r7
 8008d98:	462a      	movle	r2, r5
 8008d9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d9e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008da2:	bfd8      	it	le
 8008da4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008da8:	464b      	mov	r3, r9
 8008daa:	4622      	mov	r2, r4
 8008dac:	4659      	mov	r1, fp
 8008dae:	f7f7 fcbd 	bl	800072c <__aeabi_ddiv>
 8008db2:	b005      	add	sp, #20
 8008db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008db8 <__copybits>:
 8008db8:	3901      	subs	r1, #1
 8008dba:	b570      	push	{r4, r5, r6, lr}
 8008dbc:	1149      	asrs	r1, r1, #5
 8008dbe:	6914      	ldr	r4, [r2, #16]
 8008dc0:	3101      	adds	r1, #1
 8008dc2:	f102 0314 	add.w	r3, r2, #20
 8008dc6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dce:	1f05      	subs	r5, r0, #4
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d30c      	bcc.n	8008dee <__copybits+0x36>
 8008dd4:	1aa3      	subs	r3, r4, r2
 8008dd6:	3b11      	subs	r3, #17
 8008dd8:	f023 0303 	bic.w	r3, r3, #3
 8008ddc:	3211      	adds	r2, #17
 8008dde:	42a2      	cmp	r2, r4
 8008de0:	bf88      	it	hi
 8008de2:	2300      	movhi	r3, #0
 8008de4:	4418      	add	r0, r3
 8008de6:	2300      	movs	r3, #0
 8008de8:	4288      	cmp	r0, r1
 8008dea:	d305      	bcc.n	8008df8 <__copybits+0x40>
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
 8008dee:	f853 6b04 	ldr.w	r6, [r3], #4
 8008df2:	f845 6f04 	str.w	r6, [r5, #4]!
 8008df6:	e7eb      	b.n	8008dd0 <__copybits+0x18>
 8008df8:	f840 3b04 	str.w	r3, [r0], #4
 8008dfc:	e7f4      	b.n	8008de8 <__copybits+0x30>

08008dfe <__any_on>:
 8008dfe:	f100 0214 	add.w	r2, r0, #20
 8008e02:	6900      	ldr	r0, [r0, #16]
 8008e04:	114b      	asrs	r3, r1, #5
 8008e06:	4298      	cmp	r0, r3
 8008e08:	b510      	push	{r4, lr}
 8008e0a:	db11      	blt.n	8008e30 <__any_on+0x32>
 8008e0c:	dd0a      	ble.n	8008e24 <__any_on+0x26>
 8008e0e:	f011 011f 	ands.w	r1, r1, #31
 8008e12:	d007      	beq.n	8008e24 <__any_on+0x26>
 8008e14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e18:	fa24 f001 	lsr.w	r0, r4, r1
 8008e1c:	fa00 f101 	lsl.w	r1, r0, r1
 8008e20:	428c      	cmp	r4, r1
 8008e22:	d10b      	bne.n	8008e3c <__any_on+0x3e>
 8008e24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d803      	bhi.n	8008e34 <__any_on+0x36>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	bd10      	pop	{r4, pc}
 8008e30:	4603      	mov	r3, r0
 8008e32:	e7f7      	b.n	8008e24 <__any_on+0x26>
 8008e34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d0f5      	beq.n	8008e28 <__any_on+0x2a>
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	e7f6      	b.n	8008e2e <__any_on+0x30>

08008e40 <__ascii_wctomb>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	b141      	cbz	r1, 8008e58 <__ascii_wctomb+0x18>
 8008e46:	2aff      	cmp	r2, #255	@ 0xff
 8008e48:	d904      	bls.n	8008e54 <__ascii_wctomb+0x14>
 8008e4a:	228a      	movs	r2, #138	@ 0x8a
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	4770      	bx	lr
 8008e54:	2001      	movs	r0, #1
 8008e56:	700a      	strb	r2, [r1, #0]
 8008e58:	4770      	bx	lr

08008e5a <__ssputs_r>:
 8008e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5e:	461f      	mov	r7, r3
 8008e60:	688e      	ldr	r6, [r1, #8]
 8008e62:	4682      	mov	sl, r0
 8008e64:	42be      	cmp	r6, r7
 8008e66:	460c      	mov	r4, r1
 8008e68:	4690      	mov	r8, r2
 8008e6a:	680b      	ldr	r3, [r1, #0]
 8008e6c:	d82d      	bhi.n	8008eca <__ssputs_r+0x70>
 8008e6e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e72:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e76:	d026      	beq.n	8008ec6 <__ssputs_r+0x6c>
 8008e78:	6965      	ldr	r5, [r4, #20]
 8008e7a:	6909      	ldr	r1, [r1, #16]
 8008e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e80:	eba3 0901 	sub.w	r9, r3, r1
 8008e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e88:	1c7b      	adds	r3, r7, #1
 8008e8a:	444b      	add	r3, r9
 8008e8c:	106d      	asrs	r5, r5, #1
 8008e8e:	429d      	cmp	r5, r3
 8008e90:	bf38      	it	cc
 8008e92:	461d      	movcc	r5, r3
 8008e94:	0553      	lsls	r3, r2, #21
 8008e96:	d527      	bpl.n	8008ee8 <__ssputs_r+0x8e>
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7ff fa8d 	bl	80083b8 <_malloc_r>
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	b360      	cbz	r0, 8008efc <__ssputs_r+0xa2>
 8008ea2:	464a      	mov	r2, r9
 8008ea4:	6921      	ldr	r1, [r4, #16]
 8008ea6:	f7fe f874 	bl	8006f92 <memcpy>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb4:	81a3      	strh	r3, [r4, #12]
 8008eb6:	6126      	str	r6, [r4, #16]
 8008eb8:	444e      	add	r6, r9
 8008eba:	6026      	str	r6, [r4, #0]
 8008ebc:	463e      	mov	r6, r7
 8008ebe:	6165      	str	r5, [r4, #20]
 8008ec0:	eba5 0509 	sub.w	r5, r5, r9
 8008ec4:	60a5      	str	r5, [r4, #8]
 8008ec6:	42be      	cmp	r6, r7
 8008ec8:	d900      	bls.n	8008ecc <__ssputs_r+0x72>
 8008eca:	463e      	mov	r6, r7
 8008ecc:	4632      	mov	r2, r6
 8008ece:	4641      	mov	r1, r8
 8008ed0:	6820      	ldr	r0, [r4, #0]
 8008ed2:	f000 f9c1 	bl	8009258 <memmove>
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	68a3      	ldr	r3, [r4, #8]
 8008eda:	1b9b      	subs	r3, r3, r6
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	4433      	add	r3, r6
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee8:	462a      	mov	r2, r5
 8008eea:	f000 fa11 	bl	8009310 <_realloc_r>
 8008eee:	4606      	mov	r6, r0
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d1e0      	bne.n	8008eb6 <__ssputs_r+0x5c>
 8008ef4:	4650      	mov	r0, sl
 8008ef6:	6921      	ldr	r1, [r4, #16]
 8008ef8:	f7fe feb2 	bl	8007c60 <_free_r>
 8008efc:	230c      	movs	r3, #12
 8008efe:	f8ca 3000 	str.w	r3, [sl]
 8008f02:	89a3      	ldrh	r3, [r4, #12]
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295
 8008f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f0c:	81a3      	strh	r3, [r4, #12]
 8008f0e:	e7e9      	b.n	8008ee4 <__ssputs_r+0x8a>

08008f10 <_svfiprintf_r>:
 8008f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f14:	4698      	mov	r8, r3
 8008f16:	898b      	ldrh	r3, [r1, #12]
 8008f18:	4607      	mov	r7, r0
 8008f1a:	061b      	lsls	r3, r3, #24
 8008f1c:	460d      	mov	r5, r1
 8008f1e:	4614      	mov	r4, r2
 8008f20:	b09d      	sub	sp, #116	@ 0x74
 8008f22:	d510      	bpl.n	8008f46 <_svfiprintf_r+0x36>
 8008f24:	690b      	ldr	r3, [r1, #16]
 8008f26:	b973      	cbnz	r3, 8008f46 <_svfiprintf_r+0x36>
 8008f28:	2140      	movs	r1, #64	@ 0x40
 8008f2a:	f7ff fa45 	bl	80083b8 <_malloc_r>
 8008f2e:	6028      	str	r0, [r5, #0]
 8008f30:	6128      	str	r0, [r5, #16]
 8008f32:	b930      	cbnz	r0, 8008f42 <_svfiprintf_r+0x32>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	b01d      	add	sp, #116	@ 0x74
 8008f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f42:	2340      	movs	r3, #64	@ 0x40
 8008f44:	616b      	str	r3, [r5, #20]
 8008f46:	2300      	movs	r3, #0
 8008f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f4a:	2320      	movs	r3, #32
 8008f4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f50:	2330      	movs	r3, #48	@ 0x30
 8008f52:	f04f 0901 	mov.w	r9, #1
 8008f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80090f4 <_svfiprintf_r+0x1e4>
 8008f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f62:	4623      	mov	r3, r4
 8008f64:	469a      	mov	sl, r3
 8008f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f6a:	b10a      	cbz	r2, 8008f70 <_svfiprintf_r+0x60>
 8008f6c:	2a25      	cmp	r2, #37	@ 0x25
 8008f6e:	d1f9      	bne.n	8008f64 <_svfiprintf_r+0x54>
 8008f70:	ebba 0b04 	subs.w	fp, sl, r4
 8008f74:	d00b      	beq.n	8008f8e <_svfiprintf_r+0x7e>
 8008f76:	465b      	mov	r3, fp
 8008f78:	4622      	mov	r2, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4638      	mov	r0, r7
 8008f7e:	f7ff ff6c 	bl	8008e5a <__ssputs_r>
 8008f82:	3001      	adds	r0, #1
 8008f84:	f000 80a7 	beq.w	80090d6 <_svfiprintf_r+0x1c6>
 8008f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f8a:	445a      	add	r2, fp
 8008f8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f000 809f 	beq.w	80090d6 <_svfiprintf_r+0x1c6>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa2:	f10a 0a01 	add.w	sl, sl, #1
 8008fa6:	9304      	str	r3, [sp, #16]
 8008fa8:	9307      	str	r3, [sp, #28]
 8008faa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fae:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fb0:	4654      	mov	r4, sl
 8008fb2:	2205      	movs	r2, #5
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	484e      	ldr	r0, [pc, #312]	@ (80090f4 <_svfiprintf_r+0x1e4>)
 8008fba:	f7fd ffdc 	bl	8006f76 <memchr>
 8008fbe:	9a04      	ldr	r2, [sp, #16]
 8008fc0:	b9d8      	cbnz	r0, 8008ffa <_svfiprintf_r+0xea>
 8008fc2:	06d0      	lsls	r0, r2, #27
 8008fc4:	bf44      	itt	mi
 8008fc6:	2320      	movmi	r3, #32
 8008fc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fcc:	0711      	lsls	r1, r2, #28
 8008fce:	bf44      	itt	mi
 8008fd0:	232b      	movmi	r3, #43	@ 0x2b
 8008fd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8008fda:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fdc:	d015      	beq.n	800900a <_svfiprintf_r+0xfa>
 8008fde:	4654      	mov	r4, sl
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f04f 0c0a 	mov.w	ip, #10
 8008fe6:	9a07      	ldr	r2, [sp, #28]
 8008fe8:	4621      	mov	r1, r4
 8008fea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fee:	3b30      	subs	r3, #48	@ 0x30
 8008ff0:	2b09      	cmp	r3, #9
 8008ff2:	d94b      	bls.n	800908c <_svfiprintf_r+0x17c>
 8008ff4:	b1b0      	cbz	r0, 8009024 <_svfiprintf_r+0x114>
 8008ff6:	9207      	str	r2, [sp, #28]
 8008ff8:	e014      	b.n	8009024 <_svfiprintf_r+0x114>
 8008ffa:	eba0 0308 	sub.w	r3, r0, r8
 8008ffe:	fa09 f303 	lsl.w	r3, r9, r3
 8009002:	4313      	orrs	r3, r2
 8009004:	46a2      	mov	sl, r4
 8009006:	9304      	str	r3, [sp, #16]
 8009008:	e7d2      	b.n	8008fb0 <_svfiprintf_r+0xa0>
 800900a:	9b03      	ldr	r3, [sp, #12]
 800900c:	1d19      	adds	r1, r3, #4
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	9103      	str	r1, [sp, #12]
 8009012:	2b00      	cmp	r3, #0
 8009014:	bfbb      	ittet	lt
 8009016:	425b      	neglt	r3, r3
 8009018:	f042 0202 	orrlt.w	r2, r2, #2
 800901c:	9307      	strge	r3, [sp, #28]
 800901e:	9307      	strlt	r3, [sp, #28]
 8009020:	bfb8      	it	lt
 8009022:	9204      	strlt	r2, [sp, #16]
 8009024:	7823      	ldrb	r3, [r4, #0]
 8009026:	2b2e      	cmp	r3, #46	@ 0x2e
 8009028:	d10a      	bne.n	8009040 <_svfiprintf_r+0x130>
 800902a:	7863      	ldrb	r3, [r4, #1]
 800902c:	2b2a      	cmp	r3, #42	@ 0x2a
 800902e:	d132      	bne.n	8009096 <_svfiprintf_r+0x186>
 8009030:	9b03      	ldr	r3, [sp, #12]
 8009032:	3402      	adds	r4, #2
 8009034:	1d1a      	adds	r2, r3, #4
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	9203      	str	r2, [sp, #12]
 800903a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800903e:	9305      	str	r3, [sp, #20]
 8009040:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80090f8 <_svfiprintf_r+0x1e8>
 8009044:	2203      	movs	r2, #3
 8009046:	4650      	mov	r0, sl
 8009048:	7821      	ldrb	r1, [r4, #0]
 800904a:	f7fd ff94 	bl	8006f76 <memchr>
 800904e:	b138      	cbz	r0, 8009060 <_svfiprintf_r+0x150>
 8009050:	2240      	movs	r2, #64	@ 0x40
 8009052:	9b04      	ldr	r3, [sp, #16]
 8009054:	eba0 000a 	sub.w	r0, r0, sl
 8009058:	4082      	lsls	r2, r0
 800905a:	4313      	orrs	r3, r2
 800905c:	3401      	adds	r4, #1
 800905e:	9304      	str	r3, [sp, #16]
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	2206      	movs	r2, #6
 8009066:	4825      	ldr	r0, [pc, #148]	@ (80090fc <_svfiprintf_r+0x1ec>)
 8009068:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800906c:	f7fd ff83 	bl	8006f76 <memchr>
 8009070:	2800      	cmp	r0, #0
 8009072:	d036      	beq.n	80090e2 <_svfiprintf_r+0x1d2>
 8009074:	4b22      	ldr	r3, [pc, #136]	@ (8009100 <_svfiprintf_r+0x1f0>)
 8009076:	bb1b      	cbnz	r3, 80090c0 <_svfiprintf_r+0x1b0>
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	3307      	adds	r3, #7
 800907c:	f023 0307 	bic.w	r3, r3, #7
 8009080:	3308      	adds	r3, #8
 8009082:	9303      	str	r3, [sp, #12]
 8009084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009086:	4433      	add	r3, r6
 8009088:	9309      	str	r3, [sp, #36]	@ 0x24
 800908a:	e76a      	b.n	8008f62 <_svfiprintf_r+0x52>
 800908c:	460c      	mov	r4, r1
 800908e:	2001      	movs	r0, #1
 8009090:	fb0c 3202 	mla	r2, ip, r2, r3
 8009094:	e7a8      	b.n	8008fe8 <_svfiprintf_r+0xd8>
 8009096:	2300      	movs	r3, #0
 8009098:	f04f 0c0a 	mov.w	ip, #10
 800909c:	4619      	mov	r1, r3
 800909e:	3401      	adds	r4, #1
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	4620      	mov	r0, r4
 80090a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090a8:	3a30      	subs	r2, #48	@ 0x30
 80090aa:	2a09      	cmp	r2, #9
 80090ac:	d903      	bls.n	80090b6 <_svfiprintf_r+0x1a6>
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0c6      	beq.n	8009040 <_svfiprintf_r+0x130>
 80090b2:	9105      	str	r1, [sp, #20]
 80090b4:	e7c4      	b.n	8009040 <_svfiprintf_r+0x130>
 80090b6:	4604      	mov	r4, r0
 80090b8:	2301      	movs	r3, #1
 80090ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80090be:	e7f0      	b.n	80090a2 <_svfiprintf_r+0x192>
 80090c0:	ab03      	add	r3, sp, #12
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	462a      	mov	r2, r5
 80090c6:	4638      	mov	r0, r7
 80090c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <_svfiprintf_r+0x1f4>)
 80090ca:	a904      	add	r1, sp, #16
 80090cc:	f7fd f9de 	bl	800648c <_printf_float>
 80090d0:	1c42      	adds	r2, r0, #1
 80090d2:	4606      	mov	r6, r0
 80090d4:	d1d6      	bne.n	8009084 <_svfiprintf_r+0x174>
 80090d6:	89ab      	ldrh	r3, [r5, #12]
 80090d8:	065b      	lsls	r3, r3, #25
 80090da:	f53f af2d 	bmi.w	8008f38 <_svfiprintf_r+0x28>
 80090de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090e0:	e72c      	b.n	8008f3c <_svfiprintf_r+0x2c>
 80090e2:	ab03      	add	r3, sp, #12
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	462a      	mov	r2, r5
 80090e8:	4638      	mov	r0, r7
 80090ea:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <_svfiprintf_r+0x1f4>)
 80090ec:	a904      	add	r1, sp, #16
 80090ee:	f7fd fc6b 	bl	80069c8 <_printf_i>
 80090f2:	e7ed      	b.n	80090d0 <_svfiprintf_r+0x1c0>
 80090f4:	08009ea9 	.word	0x08009ea9
 80090f8:	08009eaf 	.word	0x08009eaf
 80090fc:	08009eb3 	.word	0x08009eb3
 8009100:	0800648d 	.word	0x0800648d
 8009104:	08008e5b 	.word	0x08008e5b

08009108 <__sflush_r>:
 8009108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800910c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910e:	0716      	lsls	r6, r2, #28
 8009110:	4605      	mov	r5, r0
 8009112:	460c      	mov	r4, r1
 8009114:	d454      	bmi.n	80091c0 <__sflush_r+0xb8>
 8009116:	684b      	ldr	r3, [r1, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc02      	bgt.n	8009122 <__sflush_r+0x1a>
 800911c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800911e:	2b00      	cmp	r3, #0
 8009120:	dd48      	ble.n	80091b4 <__sflush_r+0xac>
 8009122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009124:	2e00      	cmp	r6, #0
 8009126:	d045      	beq.n	80091b4 <__sflush_r+0xac>
 8009128:	2300      	movs	r3, #0
 800912a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800912e:	682f      	ldr	r7, [r5, #0]
 8009130:	6a21      	ldr	r1, [r4, #32]
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	d030      	beq.n	8009198 <__sflush_r+0x90>
 8009136:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	0759      	lsls	r1, r3, #29
 800913c:	d505      	bpl.n	800914a <__sflush_r+0x42>
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	1ad2      	subs	r2, r2, r3
 8009142:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009144:	b10b      	cbz	r3, 800914a <__sflush_r+0x42>
 8009146:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009148:	1ad2      	subs	r2, r2, r3
 800914a:	2300      	movs	r3, #0
 800914c:	4628      	mov	r0, r5
 800914e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009150:	6a21      	ldr	r1, [r4, #32]
 8009152:	47b0      	blx	r6
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	d106      	bne.n	8009168 <__sflush_r+0x60>
 800915a:	6829      	ldr	r1, [r5, #0]
 800915c:	291d      	cmp	r1, #29
 800915e:	d82b      	bhi.n	80091b8 <__sflush_r+0xb0>
 8009160:	4a28      	ldr	r2, [pc, #160]	@ (8009204 <__sflush_r+0xfc>)
 8009162:	410a      	asrs	r2, r1
 8009164:	07d6      	lsls	r6, r2, #31
 8009166:	d427      	bmi.n	80091b8 <__sflush_r+0xb0>
 8009168:	2200      	movs	r2, #0
 800916a:	6062      	str	r2, [r4, #4]
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	04d9      	lsls	r1, r3, #19
 8009170:	6022      	str	r2, [r4, #0]
 8009172:	d504      	bpl.n	800917e <__sflush_r+0x76>
 8009174:	1c42      	adds	r2, r0, #1
 8009176:	d101      	bne.n	800917c <__sflush_r+0x74>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b903      	cbnz	r3, 800917e <__sflush_r+0x76>
 800917c:	6560      	str	r0, [r4, #84]	@ 0x54
 800917e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009180:	602f      	str	r7, [r5, #0]
 8009182:	b1b9      	cbz	r1, 80091b4 <__sflush_r+0xac>
 8009184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009188:	4299      	cmp	r1, r3
 800918a:	d002      	beq.n	8009192 <__sflush_r+0x8a>
 800918c:	4628      	mov	r0, r5
 800918e:	f7fe fd67 	bl	8007c60 <_free_r>
 8009192:	2300      	movs	r3, #0
 8009194:	6363      	str	r3, [r4, #52]	@ 0x34
 8009196:	e00d      	b.n	80091b4 <__sflush_r+0xac>
 8009198:	2301      	movs	r3, #1
 800919a:	4628      	mov	r0, r5
 800919c:	47b0      	blx	r6
 800919e:	4602      	mov	r2, r0
 80091a0:	1c50      	adds	r0, r2, #1
 80091a2:	d1c9      	bne.n	8009138 <__sflush_r+0x30>
 80091a4:	682b      	ldr	r3, [r5, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0c6      	beq.n	8009138 <__sflush_r+0x30>
 80091aa:	2b1d      	cmp	r3, #29
 80091ac:	d001      	beq.n	80091b2 <__sflush_r+0xaa>
 80091ae:	2b16      	cmp	r3, #22
 80091b0:	d11d      	bne.n	80091ee <__sflush_r+0xe6>
 80091b2:	602f      	str	r7, [r5, #0]
 80091b4:	2000      	movs	r0, #0
 80091b6:	e021      	b.n	80091fc <__sflush_r+0xf4>
 80091b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091bc:	b21b      	sxth	r3, r3
 80091be:	e01a      	b.n	80091f6 <__sflush_r+0xee>
 80091c0:	690f      	ldr	r7, [r1, #16]
 80091c2:	2f00      	cmp	r7, #0
 80091c4:	d0f6      	beq.n	80091b4 <__sflush_r+0xac>
 80091c6:	0793      	lsls	r3, r2, #30
 80091c8:	bf18      	it	ne
 80091ca:	2300      	movne	r3, #0
 80091cc:	680e      	ldr	r6, [r1, #0]
 80091ce:	bf08      	it	eq
 80091d0:	694b      	ldreq	r3, [r1, #20]
 80091d2:	1bf6      	subs	r6, r6, r7
 80091d4:	600f      	str	r7, [r1, #0]
 80091d6:	608b      	str	r3, [r1, #8]
 80091d8:	2e00      	cmp	r6, #0
 80091da:	ddeb      	ble.n	80091b4 <__sflush_r+0xac>
 80091dc:	4633      	mov	r3, r6
 80091de:	463a      	mov	r2, r7
 80091e0:	4628      	mov	r0, r5
 80091e2:	6a21      	ldr	r1, [r4, #32]
 80091e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80091e8:	47e0      	blx	ip
 80091ea:	2800      	cmp	r0, #0
 80091ec:	dc07      	bgt.n	80091fe <__sflush_r+0xf6>
 80091ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091fe:	4407      	add	r7, r0
 8009200:	1a36      	subs	r6, r6, r0
 8009202:	e7e9      	b.n	80091d8 <__sflush_r+0xd0>
 8009204:	dfbffffe 	.word	0xdfbffffe

08009208 <_fflush_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	4605      	mov	r5, r0
 800920e:	460c      	mov	r4, r1
 8009210:	b913      	cbnz	r3, 8009218 <_fflush_r+0x10>
 8009212:	2500      	movs	r5, #0
 8009214:	4628      	mov	r0, r5
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	b118      	cbz	r0, 8009222 <_fflush_r+0x1a>
 800921a:	6a03      	ldr	r3, [r0, #32]
 800921c:	b90b      	cbnz	r3, 8009222 <_fflush_r+0x1a>
 800921e:	f7fd fd7f 	bl	8006d20 <__sinit>
 8009222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f3      	beq.n	8009212 <_fflush_r+0xa>
 800922a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800922c:	07d0      	lsls	r0, r2, #31
 800922e:	d404      	bmi.n	800923a <_fflush_r+0x32>
 8009230:	0599      	lsls	r1, r3, #22
 8009232:	d402      	bmi.n	800923a <_fflush_r+0x32>
 8009234:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009236:	f7fd fe9c 	bl	8006f72 <__retarget_lock_acquire_recursive>
 800923a:	4628      	mov	r0, r5
 800923c:	4621      	mov	r1, r4
 800923e:	f7ff ff63 	bl	8009108 <__sflush_r>
 8009242:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009244:	4605      	mov	r5, r0
 8009246:	07da      	lsls	r2, r3, #31
 8009248:	d4e4      	bmi.n	8009214 <_fflush_r+0xc>
 800924a:	89a3      	ldrh	r3, [r4, #12]
 800924c:	059b      	lsls	r3, r3, #22
 800924e:	d4e1      	bmi.n	8009214 <_fflush_r+0xc>
 8009250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009252:	f7fd fe8f 	bl	8006f74 <__retarget_lock_release_recursive>
 8009256:	e7dd      	b.n	8009214 <_fflush_r+0xc>

08009258 <memmove>:
 8009258:	4288      	cmp	r0, r1
 800925a:	b510      	push	{r4, lr}
 800925c:	eb01 0402 	add.w	r4, r1, r2
 8009260:	d902      	bls.n	8009268 <memmove+0x10>
 8009262:	4284      	cmp	r4, r0
 8009264:	4623      	mov	r3, r4
 8009266:	d807      	bhi.n	8009278 <memmove+0x20>
 8009268:	1e43      	subs	r3, r0, #1
 800926a:	42a1      	cmp	r1, r4
 800926c:	d008      	beq.n	8009280 <memmove+0x28>
 800926e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009276:	e7f8      	b.n	800926a <memmove+0x12>
 8009278:	4601      	mov	r1, r0
 800927a:	4402      	add	r2, r0
 800927c:	428a      	cmp	r2, r1
 800927e:	d100      	bne.n	8009282 <memmove+0x2a>
 8009280:	bd10      	pop	{r4, pc}
 8009282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928a:	e7f7      	b.n	800927c <memmove+0x24>

0800928c <_sbrk_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	2300      	movs	r3, #0
 8009290:	4d05      	ldr	r5, [pc, #20]	@ (80092a8 <_sbrk_r+0x1c>)
 8009292:	4604      	mov	r4, r0
 8009294:	4608      	mov	r0, r1
 8009296:	602b      	str	r3, [r5, #0]
 8009298:	f7f9 fc0a 	bl	8002ab0 <_sbrk>
 800929c:	1c43      	adds	r3, r0, #1
 800929e:	d102      	bne.n	80092a6 <_sbrk_r+0x1a>
 80092a0:	682b      	ldr	r3, [r5, #0]
 80092a2:	b103      	cbz	r3, 80092a6 <_sbrk_r+0x1a>
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	bd38      	pop	{r3, r4, r5, pc}
 80092a8:	20000494 	.word	0x20000494

080092ac <__assert_func>:
 80092ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092ae:	4614      	mov	r4, r2
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b09      	ldr	r3, [pc, #36]	@ (80092d8 <__assert_func+0x2c>)
 80092b4:	4605      	mov	r5, r0
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68d8      	ldr	r0, [r3, #12]
 80092ba:	b954      	cbnz	r4, 80092d2 <__assert_func+0x26>
 80092bc:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <__assert_func+0x30>)
 80092be:	461c      	mov	r4, r3
 80092c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092c4:	9100      	str	r1, [sp, #0]
 80092c6:	462b      	mov	r3, r5
 80092c8:	4905      	ldr	r1, [pc, #20]	@ (80092e0 <__assert_func+0x34>)
 80092ca:	f000 f84f 	bl	800936c <fiprintf>
 80092ce:	f000 f85f 	bl	8009390 <abort>
 80092d2:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <__assert_func+0x38>)
 80092d4:	e7f4      	b.n	80092c0 <__assert_func+0x14>
 80092d6:	bf00      	nop
 80092d8:	2000018c 	.word	0x2000018c
 80092dc:	08009ef5 	.word	0x08009ef5
 80092e0:	08009ec7 	.word	0x08009ec7
 80092e4:	08009eba 	.word	0x08009eba

080092e8 <_calloc_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	fba1 5402 	umull	r5, r4, r1, r2
 80092ee:	b93c      	cbnz	r4, 8009300 <_calloc_r+0x18>
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7ff f861 	bl	80083b8 <_malloc_r>
 80092f6:	4606      	mov	r6, r0
 80092f8:	b928      	cbnz	r0, 8009306 <_calloc_r+0x1e>
 80092fa:	2600      	movs	r6, #0
 80092fc:	4630      	mov	r0, r6
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	220c      	movs	r2, #12
 8009302:	6002      	str	r2, [r0, #0]
 8009304:	e7f9      	b.n	80092fa <_calloc_r+0x12>
 8009306:	462a      	mov	r2, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7fd fda2 	bl	8006e52 <memset>
 800930e:	e7f5      	b.n	80092fc <_calloc_r+0x14>

08009310 <_realloc_r>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	4680      	mov	r8, r0
 8009316:	4615      	mov	r5, r2
 8009318:	460c      	mov	r4, r1
 800931a:	b921      	cbnz	r1, 8009326 <_realloc_r+0x16>
 800931c:	4611      	mov	r1, r2
 800931e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009322:	f7ff b849 	b.w	80083b8 <_malloc_r>
 8009326:	b92a      	cbnz	r2, 8009334 <_realloc_r+0x24>
 8009328:	f7fe fc9a 	bl	8007c60 <_free_r>
 800932c:	2400      	movs	r4, #0
 800932e:	4620      	mov	r0, r4
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	f000 f833 	bl	800939e <_malloc_usable_size_r>
 8009338:	4285      	cmp	r5, r0
 800933a:	4606      	mov	r6, r0
 800933c:	d802      	bhi.n	8009344 <_realloc_r+0x34>
 800933e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009342:	d8f4      	bhi.n	800932e <_realloc_r+0x1e>
 8009344:	4629      	mov	r1, r5
 8009346:	4640      	mov	r0, r8
 8009348:	f7ff f836 	bl	80083b8 <_malloc_r>
 800934c:	4607      	mov	r7, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	d0ec      	beq.n	800932c <_realloc_r+0x1c>
 8009352:	42b5      	cmp	r5, r6
 8009354:	462a      	mov	r2, r5
 8009356:	4621      	mov	r1, r4
 8009358:	bf28      	it	cs
 800935a:	4632      	movcs	r2, r6
 800935c:	f7fd fe19 	bl	8006f92 <memcpy>
 8009360:	4621      	mov	r1, r4
 8009362:	4640      	mov	r0, r8
 8009364:	f7fe fc7c 	bl	8007c60 <_free_r>
 8009368:	463c      	mov	r4, r7
 800936a:	e7e0      	b.n	800932e <_realloc_r+0x1e>

0800936c <fiprintf>:
 800936c:	b40e      	push	{r1, r2, r3}
 800936e:	b503      	push	{r0, r1, lr}
 8009370:	4601      	mov	r1, r0
 8009372:	ab03      	add	r3, sp, #12
 8009374:	4805      	ldr	r0, [pc, #20]	@ (800938c <fiprintf+0x20>)
 8009376:	f853 2b04 	ldr.w	r2, [r3], #4
 800937a:	6800      	ldr	r0, [r0, #0]
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	f000 f83d 	bl	80093fc <_vfiprintf_r>
 8009382:	b002      	add	sp, #8
 8009384:	f85d eb04 	ldr.w	lr, [sp], #4
 8009388:	b003      	add	sp, #12
 800938a:	4770      	bx	lr
 800938c:	2000018c 	.word	0x2000018c

08009390 <abort>:
 8009390:	2006      	movs	r0, #6
 8009392:	b508      	push	{r3, lr}
 8009394:	f000 fa06 	bl	80097a4 <raise>
 8009398:	2001      	movs	r0, #1
 800939a:	f7f9 fb14 	bl	80029c6 <_exit>

0800939e <_malloc_usable_size_r>:
 800939e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093a2:	1f18      	subs	r0, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfbc      	itt	lt
 80093a8:	580b      	ldrlt	r3, [r1, r0]
 80093aa:	18c0      	addlt	r0, r0, r3
 80093ac:	4770      	bx	lr

080093ae <__sfputc_r>:
 80093ae:	6893      	ldr	r3, [r2, #8]
 80093b0:	b410      	push	{r4}
 80093b2:	3b01      	subs	r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	6093      	str	r3, [r2, #8]
 80093b8:	da07      	bge.n	80093ca <__sfputc_r+0x1c>
 80093ba:	6994      	ldr	r4, [r2, #24]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	db01      	blt.n	80093c4 <__sfputc_r+0x16>
 80093c0:	290a      	cmp	r1, #10
 80093c2:	d102      	bne.n	80093ca <__sfputc_r+0x1c>
 80093c4:	bc10      	pop	{r4}
 80093c6:	f000 b931 	b.w	800962c <__swbuf_r>
 80093ca:	6813      	ldr	r3, [r2, #0]
 80093cc:	1c58      	adds	r0, r3, #1
 80093ce:	6010      	str	r0, [r2, #0]
 80093d0:	7019      	strb	r1, [r3, #0]
 80093d2:	4608      	mov	r0, r1
 80093d4:	bc10      	pop	{r4}
 80093d6:	4770      	bx	lr

080093d8 <__sfputs_r>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	4606      	mov	r6, r0
 80093dc:	460f      	mov	r7, r1
 80093de:	4614      	mov	r4, r2
 80093e0:	18d5      	adds	r5, r2, r3
 80093e2:	42ac      	cmp	r4, r5
 80093e4:	d101      	bne.n	80093ea <__sfputs_r+0x12>
 80093e6:	2000      	movs	r0, #0
 80093e8:	e007      	b.n	80093fa <__sfputs_r+0x22>
 80093ea:	463a      	mov	r2, r7
 80093ec:	4630      	mov	r0, r6
 80093ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f2:	f7ff ffdc 	bl	80093ae <__sfputc_r>
 80093f6:	1c43      	adds	r3, r0, #1
 80093f8:	d1f3      	bne.n	80093e2 <__sfputs_r+0xa>
 80093fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093fc <_vfiprintf_r>:
 80093fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009400:	460d      	mov	r5, r1
 8009402:	4614      	mov	r4, r2
 8009404:	4698      	mov	r8, r3
 8009406:	4606      	mov	r6, r0
 8009408:	b09d      	sub	sp, #116	@ 0x74
 800940a:	b118      	cbz	r0, 8009414 <_vfiprintf_r+0x18>
 800940c:	6a03      	ldr	r3, [r0, #32]
 800940e:	b90b      	cbnz	r3, 8009414 <_vfiprintf_r+0x18>
 8009410:	f7fd fc86 	bl	8006d20 <__sinit>
 8009414:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009416:	07d9      	lsls	r1, r3, #31
 8009418:	d405      	bmi.n	8009426 <_vfiprintf_r+0x2a>
 800941a:	89ab      	ldrh	r3, [r5, #12]
 800941c:	059a      	lsls	r2, r3, #22
 800941e:	d402      	bmi.n	8009426 <_vfiprintf_r+0x2a>
 8009420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009422:	f7fd fda6 	bl	8006f72 <__retarget_lock_acquire_recursive>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	071b      	lsls	r3, r3, #28
 800942a:	d501      	bpl.n	8009430 <_vfiprintf_r+0x34>
 800942c:	692b      	ldr	r3, [r5, #16]
 800942e:	b99b      	cbnz	r3, 8009458 <_vfiprintf_r+0x5c>
 8009430:	4629      	mov	r1, r5
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f938 	bl	80096a8 <__swsetup_r>
 8009438:	b170      	cbz	r0, 8009458 <_vfiprintf_r+0x5c>
 800943a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800943c:	07dc      	lsls	r4, r3, #31
 800943e:	d504      	bpl.n	800944a <_vfiprintf_r+0x4e>
 8009440:	f04f 30ff 	mov.w	r0, #4294967295
 8009444:	b01d      	add	sp, #116	@ 0x74
 8009446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800944a:	89ab      	ldrh	r3, [r5, #12]
 800944c:	0598      	lsls	r0, r3, #22
 800944e:	d4f7      	bmi.n	8009440 <_vfiprintf_r+0x44>
 8009450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009452:	f7fd fd8f 	bl	8006f74 <__retarget_lock_release_recursive>
 8009456:	e7f3      	b.n	8009440 <_vfiprintf_r+0x44>
 8009458:	2300      	movs	r3, #0
 800945a:	9309      	str	r3, [sp, #36]	@ 0x24
 800945c:	2320      	movs	r3, #32
 800945e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009462:	2330      	movs	r3, #48	@ 0x30
 8009464:	f04f 0901 	mov.w	r9, #1
 8009468:	f8cd 800c 	str.w	r8, [sp, #12]
 800946c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009618 <_vfiprintf_r+0x21c>
 8009470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009474:	4623      	mov	r3, r4
 8009476:	469a      	mov	sl, r3
 8009478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800947c:	b10a      	cbz	r2, 8009482 <_vfiprintf_r+0x86>
 800947e:	2a25      	cmp	r2, #37	@ 0x25
 8009480:	d1f9      	bne.n	8009476 <_vfiprintf_r+0x7a>
 8009482:	ebba 0b04 	subs.w	fp, sl, r4
 8009486:	d00b      	beq.n	80094a0 <_vfiprintf_r+0xa4>
 8009488:	465b      	mov	r3, fp
 800948a:	4622      	mov	r2, r4
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ffa2 	bl	80093d8 <__sfputs_r>
 8009494:	3001      	adds	r0, #1
 8009496:	f000 80a7 	beq.w	80095e8 <_vfiprintf_r+0x1ec>
 800949a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800949c:	445a      	add	r2, fp
 800949e:	9209      	str	r2, [sp, #36]	@ 0x24
 80094a0:	f89a 3000 	ldrb.w	r3, [sl]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 809f 	beq.w	80095e8 <_vfiprintf_r+0x1ec>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b4:	f10a 0a01 	add.w	sl, sl, #1
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80094c2:	4654      	mov	r4, sl
 80094c4:	2205      	movs	r2, #5
 80094c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ca:	4853      	ldr	r0, [pc, #332]	@ (8009618 <_vfiprintf_r+0x21c>)
 80094cc:	f7fd fd53 	bl	8006f76 <memchr>
 80094d0:	9a04      	ldr	r2, [sp, #16]
 80094d2:	b9d8      	cbnz	r0, 800950c <_vfiprintf_r+0x110>
 80094d4:	06d1      	lsls	r1, r2, #27
 80094d6:	bf44      	itt	mi
 80094d8:	2320      	movmi	r3, #32
 80094da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094de:	0713      	lsls	r3, r2, #28
 80094e0:	bf44      	itt	mi
 80094e2:	232b      	movmi	r3, #43	@ 0x2b
 80094e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094e8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ee:	d015      	beq.n	800951c <_vfiprintf_r+0x120>
 80094f0:	4654      	mov	r4, sl
 80094f2:	2000      	movs	r0, #0
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	9a07      	ldr	r2, [sp, #28]
 80094fa:	4621      	mov	r1, r4
 80094fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009500:	3b30      	subs	r3, #48	@ 0x30
 8009502:	2b09      	cmp	r3, #9
 8009504:	d94b      	bls.n	800959e <_vfiprintf_r+0x1a2>
 8009506:	b1b0      	cbz	r0, 8009536 <_vfiprintf_r+0x13a>
 8009508:	9207      	str	r2, [sp, #28]
 800950a:	e014      	b.n	8009536 <_vfiprintf_r+0x13a>
 800950c:	eba0 0308 	sub.w	r3, r0, r8
 8009510:	fa09 f303 	lsl.w	r3, r9, r3
 8009514:	4313      	orrs	r3, r2
 8009516:	46a2      	mov	sl, r4
 8009518:	9304      	str	r3, [sp, #16]
 800951a:	e7d2      	b.n	80094c2 <_vfiprintf_r+0xc6>
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	1d19      	adds	r1, r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	9103      	str	r1, [sp, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbb      	ittet	lt
 8009528:	425b      	neglt	r3, r3
 800952a:	f042 0202 	orrlt.w	r2, r2, #2
 800952e:	9307      	strge	r3, [sp, #28]
 8009530:	9307      	strlt	r3, [sp, #28]
 8009532:	bfb8      	it	lt
 8009534:	9204      	strlt	r2, [sp, #16]
 8009536:	7823      	ldrb	r3, [r4, #0]
 8009538:	2b2e      	cmp	r3, #46	@ 0x2e
 800953a:	d10a      	bne.n	8009552 <_vfiprintf_r+0x156>
 800953c:	7863      	ldrb	r3, [r4, #1]
 800953e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009540:	d132      	bne.n	80095a8 <_vfiprintf_r+0x1ac>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	3402      	adds	r4, #2
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9203      	str	r2, [sp, #12]
 800954c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009550:	9305      	str	r3, [sp, #20]
 8009552:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800961c <_vfiprintf_r+0x220>
 8009556:	2203      	movs	r2, #3
 8009558:	4650      	mov	r0, sl
 800955a:	7821      	ldrb	r1, [r4, #0]
 800955c:	f7fd fd0b 	bl	8006f76 <memchr>
 8009560:	b138      	cbz	r0, 8009572 <_vfiprintf_r+0x176>
 8009562:	2240      	movs	r2, #64	@ 0x40
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	eba0 000a 	sub.w	r0, r0, sl
 800956a:	4082      	lsls	r2, r0
 800956c:	4313      	orrs	r3, r2
 800956e:	3401      	adds	r4, #1
 8009570:	9304      	str	r3, [sp, #16]
 8009572:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009576:	2206      	movs	r2, #6
 8009578:	4829      	ldr	r0, [pc, #164]	@ (8009620 <_vfiprintf_r+0x224>)
 800957a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800957e:	f7fd fcfa 	bl	8006f76 <memchr>
 8009582:	2800      	cmp	r0, #0
 8009584:	d03f      	beq.n	8009606 <_vfiprintf_r+0x20a>
 8009586:	4b27      	ldr	r3, [pc, #156]	@ (8009624 <_vfiprintf_r+0x228>)
 8009588:	bb1b      	cbnz	r3, 80095d2 <_vfiprintf_r+0x1d6>
 800958a:	9b03      	ldr	r3, [sp, #12]
 800958c:	3307      	adds	r3, #7
 800958e:	f023 0307 	bic.w	r3, r3, #7
 8009592:	3308      	adds	r3, #8
 8009594:	9303      	str	r3, [sp, #12]
 8009596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009598:	443b      	add	r3, r7
 800959a:	9309      	str	r3, [sp, #36]	@ 0x24
 800959c:	e76a      	b.n	8009474 <_vfiprintf_r+0x78>
 800959e:	460c      	mov	r4, r1
 80095a0:	2001      	movs	r0, #1
 80095a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80095a6:	e7a8      	b.n	80094fa <_vfiprintf_r+0xfe>
 80095a8:	2300      	movs	r3, #0
 80095aa:	f04f 0c0a 	mov.w	ip, #10
 80095ae:	4619      	mov	r1, r3
 80095b0:	3401      	adds	r4, #1
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	4620      	mov	r0, r4
 80095b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ba:	3a30      	subs	r2, #48	@ 0x30
 80095bc:	2a09      	cmp	r2, #9
 80095be:	d903      	bls.n	80095c8 <_vfiprintf_r+0x1cc>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0c6      	beq.n	8009552 <_vfiprintf_r+0x156>
 80095c4:	9105      	str	r1, [sp, #20]
 80095c6:	e7c4      	b.n	8009552 <_vfiprintf_r+0x156>
 80095c8:	4604      	mov	r4, r0
 80095ca:	2301      	movs	r3, #1
 80095cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d0:	e7f0      	b.n	80095b4 <_vfiprintf_r+0x1b8>
 80095d2:	ab03      	add	r3, sp, #12
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	462a      	mov	r2, r5
 80095d8:	4630      	mov	r0, r6
 80095da:	4b13      	ldr	r3, [pc, #76]	@ (8009628 <_vfiprintf_r+0x22c>)
 80095dc:	a904      	add	r1, sp, #16
 80095de:	f7fc ff55 	bl	800648c <_printf_float>
 80095e2:	4607      	mov	r7, r0
 80095e4:	1c78      	adds	r0, r7, #1
 80095e6:	d1d6      	bne.n	8009596 <_vfiprintf_r+0x19a>
 80095e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095ea:	07d9      	lsls	r1, r3, #31
 80095ec:	d405      	bmi.n	80095fa <_vfiprintf_r+0x1fe>
 80095ee:	89ab      	ldrh	r3, [r5, #12]
 80095f0:	059a      	lsls	r2, r3, #22
 80095f2:	d402      	bmi.n	80095fa <_vfiprintf_r+0x1fe>
 80095f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095f6:	f7fd fcbd 	bl	8006f74 <__retarget_lock_release_recursive>
 80095fa:	89ab      	ldrh	r3, [r5, #12]
 80095fc:	065b      	lsls	r3, r3, #25
 80095fe:	f53f af1f 	bmi.w	8009440 <_vfiprintf_r+0x44>
 8009602:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009604:	e71e      	b.n	8009444 <_vfiprintf_r+0x48>
 8009606:	ab03      	add	r3, sp, #12
 8009608:	9300      	str	r3, [sp, #0]
 800960a:	462a      	mov	r2, r5
 800960c:	4630      	mov	r0, r6
 800960e:	4b06      	ldr	r3, [pc, #24]	@ (8009628 <_vfiprintf_r+0x22c>)
 8009610:	a904      	add	r1, sp, #16
 8009612:	f7fd f9d9 	bl	80069c8 <_printf_i>
 8009616:	e7e4      	b.n	80095e2 <_vfiprintf_r+0x1e6>
 8009618:	08009ea9 	.word	0x08009ea9
 800961c:	08009eaf 	.word	0x08009eaf
 8009620:	08009eb3 	.word	0x08009eb3
 8009624:	0800648d 	.word	0x0800648d
 8009628:	080093d9 	.word	0x080093d9

0800962c <__swbuf_r>:
 800962c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962e:	460e      	mov	r6, r1
 8009630:	4614      	mov	r4, r2
 8009632:	4605      	mov	r5, r0
 8009634:	b118      	cbz	r0, 800963e <__swbuf_r+0x12>
 8009636:	6a03      	ldr	r3, [r0, #32]
 8009638:	b90b      	cbnz	r3, 800963e <__swbuf_r+0x12>
 800963a:	f7fd fb71 	bl	8006d20 <__sinit>
 800963e:	69a3      	ldr	r3, [r4, #24]
 8009640:	60a3      	str	r3, [r4, #8]
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	071a      	lsls	r2, r3, #28
 8009646:	d501      	bpl.n	800964c <__swbuf_r+0x20>
 8009648:	6923      	ldr	r3, [r4, #16]
 800964a:	b943      	cbnz	r3, 800965e <__swbuf_r+0x32>
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f82a 	bl	80096a8 <__swsetup_r>
 8009654:	b118      	cbz	r0, 800965e <__swbuf_r+0x32>
 8009656:	f04f 37ff 	mov.w	r7, #4294967295
 800965a:	4638      	mov	r0, r7
 800965c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	6922      	ldr	r2, [r4, #16]
 8009662:	b2f6      	uxtb	r6, r6
 8009664:	1a98      	subs	r0, r3, r2
 8009666:	6963      	ldr	r3, [r4, #20]
 8009668:	4637      	mov	r7, r6
 800966a:	4283      	cmp	r3, r0
 800966c:	dc05      	bgt.n	800967a <__swbuf_r+0x4e>
 800966e:	4621      	mov	r1, r4
 8009670:	4628      	mov	r0, r5
 8009672:	f7ff fdc9 	bl	8009208 <_fflush_r>
 8009676:	2800      	cmp	r0, #0
 8009678:	d1ed      	bne.n	8009656 <__swbuf_r+0x2a>
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	701e      	strb	r6, [r3, #0]
 8009688:	6962      	ldr	r2, [r4, #20]
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	429a      	cmp	r2, r3
 800968e:	d004      	beq.n	800969a <__swbuf_r+0x6e>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	07db      	lsls	r3, r3, #31
 8009694:	d5e1      	bpl.n	800965a <__swbuf_r+0x2e>
 8009696:	2e0a      	cmp	r6, #10
 8009698:	d1df      	bne.n	800965a <__swbuf_r+0x2e>
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff fdb3 	bl	8009208 <_fflush_r>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d0d9      	beq.n	800965a <__swbuf_r+0x2e>
 80096a6:	e7d6      	b.n	8009656 <__swbuf_r+0x2a>

080096a8 <__swsetup_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4b29      	ldr	r3, [pc, #164]	@ (8009750 <__swsetup_r+0xa8>)
 80096ac:	4605      	mov	r5, r0
 80096ae:	6818      	ldr	r0, [r3, #0]
 80096b0:	460c      	mov	r4, r1
 80096b2:	b118      	cbz	r0, 80096bc <__swsetup_r+0x14>
 80096b4:	6a03      	ldr	r3, [r0, #32]
 80096b6:	b90b      	cbnz	r3, 80096bc <__swsetup_r+0x14>
 80096b8:	f7fd fb32 	bl	8006d20 <__sinit>
 80096bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c0:	0719      	lsls	r1, r3, #28
 80096c2:	d422      	bmi.n	800970a <__swsetup_r+0x62>
 80096c4:	06da      	lsls	r2, r3, #27
 80096c6:	d407      	bmi.n	80096d8 <__swsetup_r+0x30>
 80096c8:	2209      	movs	r2, #9
 80096ca:	602a      	str	r2, [r5, #0]
 80096cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096d0:	f04f 30ff 	mov.w	r0, #4294967295
 80096d4:	81a3      	strh	r3, [r4, #12]
 80096d6:	e033      	b.n	8009740 <__swsetup_r+0x98>
 80096d8:	0758      	lsls	r0, r3, #29
 80096da:	d512      	bpl.n	8009702 <__swsetup_r+0x5a>
 80096dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096de:	b141      	cbz	r1, 80096f2 <__swsetup_r+0x4a>
 80096e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096e4:	4299      	cmp	r1, r3
 80096e6:	d002      	beq.n	80096ee <__swsetup_r+0x46>
 80096e8:	4628      	mov	r0, r5
 80096ea:	f7fe fab9 	bl	8007c60 <_free_r>
 80096ee:	2300      	movs	r3, #0
 80096f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f2:	89a3      	ldrh	r3, [r4, #12]
 80096f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	2300      	movs	r3, #0
 80096fc:	6063      	str	r3, [r4, #4]
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f043 0308 	orr.w	r3, r3, #8
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	6923      	ldr	r3, [r4, #16]
 800970c:	b94b      	cbnz	r3, 8009722 <__swsetup_r+0x7a>
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009718:	d003      	beq.n	8009722 <__swsetup_r+0x7a>
 800971a:	4621      	mov	r1, r4
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f882 	bl	8009826 <__smakebuf_r>
 8009722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009726:	f013 0201 	ands.w	r2, r3, #1
 800972a:	d00a      	beq.n	8009742 <__swsetup_r+0x9a>
 800972c:	2200      	movs	r2, #0
 800972e:	60a2      	str	r2, [r4, #8]
 8009730:	6962      	ldr	r2, [r4, #20]
 8009732:	4252      	negs	r2, r2
 8009734:	61a2      	str	r2, [r4, #24]
 8009736:	6922      	ldr	r2, [r4, #16]
 8009738:	b942      	cbnz	r2, 800974c <__swsetup_r+0xa4>
 800973a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800973e:	d1c5      	bne.n	80096cc <__swsetup_r+0x24>
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	0799      	lsls	r1, r3, #30
 8009744:	bf58      	it	pl
 8009746:	6962      	ldrpl	r2, [r4, #20]
 8009748:	60a2      	str	r2, [r4, #8]
 800974a:	e7f4      	b.n	8009736 <__swsetup_r+0x8e>
 800974c:	2000      	movs	r0, #0
 800974e:	e7f7      	b.n	8009740 <__swsetup_r+0x98>
 8009750:	2000018c 	.word	0x2000018c

08009754 <_raise_r>:
 8009754:	291f      	cmp	r1, #31
 8009756:	b538      	push	{r3, r4, r5, lr}
 8009758:	4605      	mov	r5, r0
 800975a:	460c      	mov	r4, r1
 800975c:	d904      	bls.n	8009768 <_raise_r+0x14>
 800975e:	2316      	movs	r3, #22
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800976a:	b112      	cbz	r2, 8009772 <_raise_r+0x1e>
 800976c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009770:	b94b      	cbnz	r3, 8009786 <_raise_r+0x32>
 8009772:	4628      	mov	r0, r5
 8009774:	f000 f830 	bl	80097d8 <_getpid_r>
 8009778:	4622      	mov	r2, r4
 800977a:	4601      	mov	r1, r0
 800977c:	4628      	mov	r0, r5
 800977e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009782:	f000 b817 	b.w	80097b4 <_kill_r>
 8009786:	2b01      	cmp	r3, #1
 8009788:	d00a      	beq.n	80097a0 <_raise_r+0x4c>
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	d103      	bne.n	8009796 <_raise_r+0x42>
 800978e:	2316      	movs	r3, #22
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	2001      	movs	r0, #1
 8009794:	e7e7      	b.n	8009766 <_raise_r+0x12>
 8009796:	2100      	movs	r1, #0
 8009798:	4620      	mov	r0, r4
 800979a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800979e:	4798      	blx	r3
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7e0      	b.n	8009766 <_raise_r+0x12>

080097a4 <raise>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	@ (80097b0 <raise+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f7ff bfd3 	b.w	8009754 <_raise_r>
 80097ae:	bf00      	nop
 80097b0:	2000018c 	.word	0x2000018c

080097b4 <_kill_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	2300      	movs	r3, #0
 80097b8:	4d06      	ldr	r5, [pc, #24]	@ (80097d4 <_kill_r+0x20>)
 80097ba:	4604      	mov	r4, r0
 80097bc:	4608      	mov	r0, r1
 80097be:	4611      	mov	r1, r2
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	f7f9 f8f0 	bl	80029a6 <_kill>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d102      	bne.n	80097d0 <_kill_r+0x1c>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	b103      	cbz	r3, 80097d0 <_kill_r+0x1c>
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	bf00      	nop
 80097d4:	20000494 	.word	0x20000494

080097d8 <_getpid_r>:
 80097d8:	f7f9 b8de 	b.w	8002998 <_getpid>

080097dc <__swhatbuf_r>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	460c      	mov	r4, r1
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	4615      	mov	r5, r2
 80097e6:	2900      	cmp	r1, #0
 80097e8:	461e      	mov	r6, r3
 80097ea:	b096      	sub	sp, #88	@ 0x58
 80097ec:	da0c      	bge.n	8009808 <__swhatbuf_r+0x2c>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	2100      	movs	r1, #0
 80097f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097f6:	bf14      	ite	ne
 80097f8:	2340      	movne	r3, #64	@ 0x40
 80097fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097fe:	2000      	movs	r0, #0
 8009800:	6031      	str	r1, [r6, #0]
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	b016      	add	sp, #88	@ 0x58
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	466a      	mov	r2, sp
 800980a:	f000 f849 	bl	80098a0 <_fstat_r>
 800980e:	2800      	cmp	r0, #0
 8009810:	dbed      	blt.n	80097ee <__swhatbuf_r+0x12>
 8009812:	9901      	ldr	r1, [sp, #4]
 8009814:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009818:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800981c:	4259      	negs	r1, r3
 800981e:	4159      	adcs	r1, r3
 8009820:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009824:	e7eb      	b.n	80097fe <__swhatbuf_r+0x22>

08009826 <__smakebuf_r>:
 8009826:	898b      	ldrh	r3, [r1, #12]
 8009828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982a:	079d      	lsls	r5, r3, #30
 800982c:	4606      	mov	r6, r0
 800982e:	460c      	mov	r4, r1
 8009830:	d507      	bpl.n	8009842 <__smakebuf_r+0x1c>
 8009832:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	2301      	movs	r3, #1
 800983c:	6163      	str	r3, [r4, #20]
 800983e:	b003      	add	sp, #12
 8009840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009842:	466a      	mov	r2, sp
 8009844:	ab01      	add	r3, sp, #4
 8009846:	f7ff ffc9 	bl	80097dc <__swhatbuf_r>
 800984a:	9f00      	ldr	r7, [sp, #0]
 800984c:	4605      	mov	r5, r0
 800984e:	4639      	mov	r1, r7
 8009850:	4630      	mov	r0, r6
 8009852:	f7fe fdb1 	bl	80083b8 <_malloc_r>
 8009856:	b948      	cbnz	r0, 800986c <__smakebuf_r+0x46>
 8009858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985c:	059a      	lsls	r2, r3, #22
 800985e:	d4ee      	bmi.n	800983e <__smakebuf_r+0x18>
 8009860:	f023 0303 	bic.w	r3, r3, #3
 8009864:	f043 0302 	orr.w	r3, r3, #2
 8009868:	81a3      	strh	r3, [r4, #12]
 800986a:	e7e2      	b.n	8009832 <__smakebuf_r+0xc>
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009876:	81a3      	strh	r3, [r4, #12]
 8009878:	9b01      	ldr	r3, [sp, #4]
 800987a:	6020      	str	r0, [r4, #0]
 800987c:	b15b      	cbz	r3, 8009896 <__smakebuf_r+0x70>
 800987e:	4630      	mov	r0, r6
 8009880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009884:	f000 f81e 	bl	80098c4 <_isatty_r>
 8009888:	b128      	cbz	r0, 8009896 <__smakebuf_r+0x70>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	431d      	orrs	r5, r3
 800989a:	81a5      	strh	r5, [r4, #12]
 800989c:	e7cf      	b.n	800983e <__smakebuf_r+0x18>
	...

080098a0 <_fstat_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d06      	ldr	r5, [pc, #24]	@ (80098c0 <_fstat_r+0x20>)
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f7f9 f8d9 	bl	8002a64 <_fstat>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	d102      	bne.n	80098bc <_fstat_r+0x1c>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b103      	cbz	r3, 80098bc <_fstat_r+0x1c>
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	20000494 	.word	0x20000494

080098c4 <_isatty_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	2300      	movs	r3, #0
 80098c8:	4d05      	ldr	r5, [pc, #20]	@ (80098e0 <_isatty_r+0x1c>)
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	f7f9 f8d7 	bl	8002a82 <_isatty>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_isatty_r+0x1a>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_isatty_r+0x1a>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	20000494 	.word	0x20000494

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
