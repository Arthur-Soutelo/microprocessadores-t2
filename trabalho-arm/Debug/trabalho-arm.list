
trabalho-arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006fd8  08006fd8  00007fd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c8  080073c8  000091d8  2**0
                  CONTENTS
  4 .ARM          00000008  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073d0  080073d0  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073d0  080073d0  000083d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073d4  080073d4  000083d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080073d8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d8  080075b0  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  080075b0  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b075  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  00014276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00016608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098c  00000000  00000000  00017288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197ab  00000000  00000000  00017c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3e0  00000000  00000000  000313bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f153  00000000  00000000  0004079f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf8f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004450  00000000  00000000  000cf938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d3d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fbc 	.word	0x08006fbc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006fbc 	.word	0x08006fbc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <Read_Temperature>:
#include "ambient.h"

// Temperature read function using floating-point calculation
float Read_Temperature(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]

    adcValue = read_adc_value(ADC_CHANNEL_TEMPSENSOR);
 8000ff2:	2010      	movs	r0, #16
 8000ff4:	f000 f83e 	bl	8001074 <read_adc_value>
 8000ff8:	60f8      	str	r0, [r7, #12]

    // Convert ADC value to voltage
	float adcVoltage = (adcValue / 4095.0) * 3.3; // Assuming 12-bit resolution and 3.3V reference
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff f9f2 	bl	80003e4 <__aeabi_ui2d>
 8001000:	a315      	add	r3, pc, #84	@ (adr r3, 8001058 <Read_Temperature+0x70>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	f7ff fb91 	bl	800072c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	a313      	add	r3, pc, #76	@ (adr r3, 8001060 <Read_Temperature+0x78>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	f7ff fa5e 	bl	80004d8 <__aeabi_dmul>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd30 	bl	8000a88 <__aeabi_d2f>
 8001028:	4603      	mov	r3, r0
 800102a:	60bb      	str	r3, [r7, #8]

	// Temperature calculation
	// Temperature = (Vadc - V25) / Slope + T25
	// T25 = 25°C (reference temperature)

	float temperature = ((adcVoltage - VOLTAGE_AT_25C) / AVG_SLOPE) + 25;
 800102c:	490e      	ldr	r1, [pc, #56]	@ (8001068 <Read_Temperature+0x80>)
 800102e:	68b8      	ldr	r0, [r7, #8]
 8001030:	f7ff fd7e 	bl	8000b30 <__aeabi_fsub>
 8001034:	4603      	mov	r3, r0
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <Read_Temperature+0x84>)
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff37 	bl	8000eac <__aeabi_fdiv>
 800103e:	4603      	mov	r3, r0
 8001040:	490b      	ldr	r1, [pc, #44]	@ (8001070 <Read_Temperature+0x88>)
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fd76 	bl	8000b34 <__addsf3>
 8001048:	4603      	mov	r3, r0
 800104a:	607b      	str	r3, [r7, #4]

    return temperature;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	40affe00 	.word	0x40affe00
 8001060:	66666666 	.word	0x66666666
 8001064:	400a6666 	.word	0x400a6666
 8001068:	3fb70a3d 	.word	0x3fb70a3d
 800106c:	4089999a 	.word	0x4089999a
 8001070:	41c80000 	.word	0x41c80000

08001074 <read_adc_value>:


uint32_t read_adc_value(uint32_t channel) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
    uint32_t adcValue = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

    // Configure the ADC channel
    sConfig.Channel = channel;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;  // Adjust as needed
 8001094:	2305      	movs	r3, #5
 8001096:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001098:	f107 0308 	add.w	r3, r7, #8
 800109c:	4619      	mov	r1, r3
 800109e:	4810      	ldr	r0, [pc, #64]	@ (80010e0 <read_adc_value+0x6c>)
 80010a0:	f001 fa06 	bl	80024b0 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <read_adc_value+0x3c>
        // Handle error
        return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295
 80010ae:	e012      	b.n	80010d6 <read_adc_value+0x62>
    }

    // Start the ADC conversion
    HAL_ADC_Start(&hadc1);
 80010b0:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <read_adc_value+0x6c>)
 80010b2:	f001 f811 	bl	80020d8 <HAL_ADC_Start>

    // Poll for conversion completion
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 80010b6:	f04f 31ff 	mov.w	r1, #4294967295
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <read_adc_value+0x6c>)
 80010bc:	f001 f8e6 	bl	800228c <HAL_ADC_PollForConversion>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d103      	bne.n	80010ce <read_adc_value+0x5a>
        // Get the ADC value
        adcValue = HAL_ADC_GetValue(&hadc1);
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <read_adc_value+0x6c>)
 80010c8:	f001 f9e6 	bl	8002498 <HAL_ADC_GetValue>
 80010cc:	6178      	str	r0, [r7, #20]
    }

    // Stop the ADC
    HAL_ADC_Stop(&hadc1);
 80010ce:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <read_adc_value+0x6c>)
 80010d0:	f001 f8b0 	bl	8002234 <HAL_ADC_Stop>

    return adcValue;
 80010d4:	697b      	ldr	r3, [r7, #20]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200001f4 	.word	0x200001f4

080010e4 <debounce>:
#include "main.h"
#include "keypad.h"

// Debounce function to check the key press stability
static unsigned char debounce(unsigned char row, unsigned char col) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71bb      	strb	r3, [r7, #6]
    unsigned char count = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75fb      	strb	r3, [r7, #23]
    unsigned char keylast = 1;  // Assume key is not pressed initially
 80010f8:	2301      	movs	r3, #1
 80010fa:	75bb      	strb	r3, [r7, #22]
    unsigned char keynow = 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	757b      	strb	r3, [r7, #21]
    GPIO_TypeDef* row_port;
    uint16_t row_pin;

    // Map row to its GPIO port and pin
    switch(row) {
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b03      	cmp	r3, #3
 8001104:	d822      	bhi.n	800114c <debounce+0x68>
 8001106:	a201      	add	r2, pc, #4	@ (adr r2, 800110c <debounce+0x28>)
 8001108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110c:	0800111d 	.word	0x0800111d
 8001110:	08001129 	.word	0x08001129
 8001114:	08001135 	.word	0x08001135
 8001118:	08001141 	.word	0x08001141
        case 0:
            row_port = KEYPAD_ROW1_GPIO_Port;
 800111c:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <debounce+0xac>)
 800111e:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW1_Pin;
 8001120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001124:	81fb      	strh	r3, [r7, #14]
            break;
 8001126:	e013      	b.n	8001150 <debounce+0x6c>
        case 1:
            row_port = KEYPAD_ROW2_GPIO_Port;
 8001128:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <debounce+0xac>)
 800112a:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW2_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	81fb      	strh	r3, [r7, #14]
            break;
 8001132:	e00d      	b.n	8001150 <debounce+0x6c>
        case 2:
            row_port = KEYPAD_ROW3_GPIO_Port;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <debounce+0xac>)
 8001136:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW3_Pin;
 8001138:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800113c:	81fb      	strh	r3, [r7, #14]
            break;
 800113e:	e007      	b.n	8001150 <debounce+0x6c>
        case 3:
            row_port = KEYPAD_ROW4_GPIO_Port;
 8001140:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <debounce+0xac>)
 8001142:	613b      	str	r3, [r7, #16]
            row_pin = KEYPAD_ROW4_Pin;
 8001144:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001148:	81fb      	strh	r3, [r7, #14]
            break;
 800114a:	e001      	b.n	8001150 <debounce+0x6c>
        default:
            return 1;  // Return '1' if invalid row
 800114c:	2301      	movs	r3, #1
 800114e:	e01a      	b.n	8001186 <debounce+0xa2>
    }

    while (count < 7) {
 8001150:	e015      	b.n	800117e <debounce+0x9a>
        HAL_Delay(1);  // Debounce delay
 8001152:	2001      	movs	r0, #1
 8001154:	f000 fec4 	bl	8001ee0 <HAL_Delay>
        keynow = HAL_GPIO_ReadPin(row_port, row_pin);
 8001158:	89fb      	ldrh	r3, [r7, #14]
 800115a:	4619      	mov	r1, r3
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f001 ff2d 	bl	8002fbc <HAL_GPIO_ReadPin>
 8001162:	4603      	mov	r3, r0
 8001164:	757b      	strb	r3, [r7, #21]

        if (keynow == keylast) {
 8001166:	7d7a      	ldrb	r2, [r7, #21]
 8001168:	7dbb      	ldrb	r3, [r7, #22]
 800116a:	429a      	cmp	r2, r3
 800116c:	d103      	bne.n	8001176 <debounce+0x92>
            count++;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	3301      	adds	r3, #1
 8001172:	75fb      	strb	r3, [r7, #23]
 8001174:	e001      	b.n	800117a <debounce+0x96>
        } else {
            count = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	75fb      	strb	r3, [r7, #23]
        }
        keylast = keynow;
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	75bb      	strb	r3, [r7, #22]
    while (count < 7) {
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	2b06      	cmp	r3, #6
 8001182:	d9e6      	bls.n	8001152 <debounce+0x6e>
    }
    return keynow;  // Return '0' if key is pressed, '1' if not pressed
 8001184:	7d7b      	ldrb	r3, [r7, #21]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40010c00 	.word	0x40010c00

08001194 <keypad_getkey>:
    HAL_GPIO_WritePin(KEYPAD_COL2_GPIO_Port, KEYPAD_COL2_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL3_GPIO_Port, KEYPAD_COL3_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(KEYPAD_COL4_GPIO_Port, KEYPAD_COL4_Pin, GPIO_PIN_SET);
}

char keypad_getkey(void) {
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
    unsigned char row, col;
    const char keys[4][4] = {
 800119a:	4b35      	ldr	r3, [pc, #212]	@ (8001270 <keypad_getkey+0xdc>)
 800119c:	1d3c      	adds	r4, r7, #4
 800119e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    for (col = 0; col < 4; col++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	77bb      	strb	r3, [r7, #30]
 80011a8:	e059      	b.n	800125e <keypad_getkey+0xca>
        GPIO_TypeDef* col_port;
        uint16_t col_pin;

        // Set the current column to low
        switch (col) {
 80011aa:	7fbb      	ldrb	r3, [r7, #30]
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d821      	bhi.n	80011f4 <keypad_getkey+0x60>
 80011b0:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <keypad_getkey+0x24>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011c9 	.word	0x080011c9
 80011bc:	080011d3 	.word	0x080011d3
 80011c0:	080011dd 	.word	0x080011dd
 80011c4:	080011e9 	.word	0x080011e9
            case 0:
                col_port = KEYPAD_COL1_GPIO_Port;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <keypad_getkey+0xe0>)
 80011ca:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL1_Pin;
 80011cc:	2301      	movs	r3, #1
 80011ce:	82fb      	strh	r3, [r7, #22]
                break;
 80011d0:	e015      	b.n	80011fe <keypad_getkey+0x6a>
            case 1:
                col_port = KEYPAD_COL2_GPIO_Port;
 80011d2:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <keypad_getkey+0xe0>)
 80011d4:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL2_Pin;
 80011d6:	2302      	movs	r3, #2
 80011d8:	82fb      	strh	r3, [r7, #22]
                break;
 80011da:	e010      	b.n	80011fe <keypad_getkey+0x6a>
            case 2:
                col_port = KEYPAD_COL3_GPIO_Port;
 80011dc:	4b25      	ldr	r3, [pc, #148]	@ (8001274 <keypad_getkey+0xe0>)
 80011de:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL3_Pin;
 80011e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011e4:	82fb      	strh	r3, [r7, #22]
                break;
 80011e6:	e00a      	b.n	80011fe <keypad_getkey+0x6a>
            case 3:
                col_port = KEYPAD_COL4_GPIO_Port;
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <keypad_getkey+0xe0>)
 80011ea:	61bb      	str	r3, [r7, #24]
                col_pin = KEYPAD_COL4_Pin;
 80011ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011f0:	82fb      	strh	r3, [r7, #22]
                break;
 80011f2:	e004      	b.n	80011fe <keypad_getkey+0x6a>
            default:
                col_port = NULL;  // Invalid column
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
                col_pin = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	82fb      	strh	r3, [r7, #22]
                break;
 80011fc:	bf00      	nop
        }

        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_RESET);
 80011fe:	8afb      	ldrh	r3, [r7, #22]
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	69b8      	ldr	r0, [r7, #24]
 8001206:	f001 fef0 	bl	8002fea <HAL_GPIO_WritePin>

        for (row = 0; row < 4; row++) {
 800120a:	2300      	movs	r3, #0
 800120c:	77fb      	strb	r3, [r7, #31]
 800120e:	e01a      	b.n	8001246 <keypad_getkey+0xb2>

            if (!debounce(row, col)) {
 8001210:	7fba      	ldrb	r2, [r7, #30]
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff64 	bl	80010e4 <debounce>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10e      	bne.n	8001240 <keypad_getkey+0xac>
                // Reset the column to high
                HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 8001222:	8afb      	ldrh	r3, [r7, #22]
 8001224:	2201      	movs	r2, #1
 8001226:	4619      	mov	r1, r3
 8001228:	69b8      	ldr	r0, [r7, #24]
 800122a:	f001 fede 	bl	8002fea <HAL_GPIO_WritePin>
                return keys[row][col]; // Return the pressed key
 800122e:	7ffa      	ldrb	r2, [r7, #31]
 8001230:	7fbb      	ldrb	r3, [r7, #30]
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	3220      	adds	r2, #32
 8001236:	443a      	add	r2, r7
 8001238:	4413      	add	r3, r2
 800123a:	3b1c      	subs	r3, #28
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	e012      	b.n	8001266 <keypad_getkey+0xd2>
        for (row = 0; row < 4; row++) {
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	3301      	adds	r3, #1
 8001244:	77fb      	strb	r3, [r7, #31]
 8001246:	7ffb      	ldrb	r3, [r7, #31]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d9e1      	bls.n	8001210 <keypad_getkey+0x7c>
            }
        }

        // Reset the column to high
        HAL_GPIO_WritePin(col_port, col_pin, GPIO_PIN_SET);
 800124c:	8afb      	ldrh	r3, [r7, #22]
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	69b8      	ldr	r0, [r7, #24]
 8001254:	f001 fec9 	bl	8002fea <HAL_GPIO_WritePin>
    for (col = 0; col < 4; col++) {
 8001258:	7fbb      	ldrb	r3, [r7, #30]
 800125a:	3301      	adds	r3, #1
 800125c:	77bb      	strb	r3, [r7, #30]
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d9a2      	bls.n	80011aa <keypad_getkey+0x16>
    }

    return 0; // Return 0 if no key is pressed
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	bf00      	nop
 8001270:	08006fd8 	.word	0x08006fd8
 8001274:	40010c00 	.word	0x40010c00

08001278 <write_command_LCD>:
#include "main.h"
#include "lcd.h"
#include "keypad.h"

// Function to send a command to the LCD
void write_command_LCD(uint8_t command) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	2108      	movs	r1, #8
 8001286:	4841      	ldr	r0, [pc, #260]	@ (800138c <write_command_LCD+0x114>)
 8001288:	f001 feaf 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800128c:	2201      	movs	r2, #1
 800128e:	2110      	movs	r1, #16
 8001290:	483e      	ldr	r0, [pc, #248]	@ (800138c <write_command_LCD+0x114>)
 8001292:	f001 feaa 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	111b      	asrs	r3, r3, #4
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	4839      	ldr	r0, [pc, #228]	@ (8001390 <write_command_LCD+0x118>)
 80012aa:	f001 fe9e 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	115b      	asrs	r3, r3, #5
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	461a      	mov	r2, r3
 80012bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012c0:	4833      	ldr	r0, [pc, #204]	@ (8001390 <write_command_LCD+0x118>)
 80012c2:	f001 fe92 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	119b      	asrs	r3, r3, #6
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	461a      	mov	r2, r3
 80012d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012d8:	482d      	ldr	r0, [pc, #180]	@ (8001390 <write_command_LCD+0x118>)
 80012da:	f001 fe86 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	09db      	lsrs	r3, r3, #7
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012ea:	4829      	ldr	r0, [pc, #164]	@ (8001390 <write_command_LCD+0x118>)
 80012ec:	f001 fe7d 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80012f0:	200a      	movs	r0, #10
 80012f2:	f000 fdf5 	bl	8001ee0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2110      	movs	r1, #16
 80012fa:	4824      	ldr	r0, [pc, #144]	@ (800138c <write_command_LCD+0x114>)
 80012fc:	f001 fe75 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001300:	2014      	movs	r0, #20
 8001302:	f000 fded 	bl	8001ee0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2110      	movs	r1, #16
 800130a:	4820      	ldr	r0, [pc, #128]	@ (800138c <write_command_LCD+0x114>)
 800130c:	f001 fe6d 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (command & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800131e:	481c      	ldr	r0, [pc, #112]	@ (8001390 <write_command_LCD+0x118>)
 8001320:	f001 fe63 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (command & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	105b      	asrs	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001336:	4816      	ldr	r0, [pc, #88]	@ (8001390 <write_command_LCD+0x118>)
 8001338:	f001 fe57 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (command & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	109b      	asrs	r3, r3, #2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <write_command_LCD+0x118>)
 8001350:	f001 fe4b 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (command & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	10db      	asrs	r3, r3, #3
 8001358:	b2db      	uxtb	r3, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	b2db      	uxtb	r3, r3
 8001360:	461a      	mov	r2, r3
 8001362:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001366:	480a      	ldr	r0, [pc, #40]	@ (8001390 <write_command_LCD+0x118>)
 8001368:	f001 fe3f 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800136c:	200a      	movs	r0, #10
 800136e:	f000 fdb7 	bl	8001ee0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2110      	movs	r1, #16
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <write_command_LCD+0x114>)
 8001378:	f001 fe37 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800137c:	2014      	movs	r0, #20
 800137e:	f000 fdaf 	bl	8001ee0 <HAL_Delay>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40010c00 	.word	0x40010c00
 8001390:	40010800 	.word	0x40010800

08001394 <write_data_LCD>:

// Function to send data to the LCD
void write_data_LCD(uint8_t data) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
    // Send the higher nibble
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2108      	movs	r1, #8
 80013a2:	4841      	ldr	r0, [pc, #260]	@ (80014a8 <write_data_LCD+0x114>)
 80013a4:	f001 fe21 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2110      	movs	r1, #16
 80013ac:	483e      	ldr	r0, [pc, #248]	@ (80014a8 <write_data_LCD+0x114>)
 80013ae:	f001 fe1c 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	111b      	asrs	r3, r3, #4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	461a      	mov	r2, r3
 80013c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013c4:	4839      	ldr	r0, [pc, #228]	@ (80014ac <write_data_LCD+0x118>)
 80013c6:	f001 fe10 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	115b      	asrs	r3, r3, #5
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <write_data_LCD+0x118>)
 80013de:	f001 fe04 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	119b      	asrs	r3, r3, #6
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	461a      	mov	r2, r3
 80013f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013f4:	482d      	ldr	r0, [pc, #180]	@ (80014ac <write_data_LCD+0x118>)
 80013f6:	f001 fdf8 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	09db      	lsrs	r3, r3, #7
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001406:	4829      	ldr	r0, [pc, #164]	@ (80014ac <write_data_LCD+0x118>)
 8001408:	f001 fdef 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800140c:	200a      	movs	r0, #10
 800140e:	f000 fd67 	bl	8001ee0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2110      	movs	r1, #16
 8001416:	4824      	ldr	r0, [pc, #144]	@ (80014a8 <write_data_LCD+0x114>)
 8001418:	f001 fde7 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800141c:	2014      	movs	r0, #20
 800141e:	f000 fd5f 	bl	8001ee0 <HAL_Delay>

    // Send the lower nibble
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	2110      	movs	r1, #16
 8001426:	4820      	ldr	r0, [pc, #128]	@ (80014a8 <write_data_LCD+0x114>)
 8001428:	f001 fddf 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143a:	481c      	ldr	r0, [pc, #112]	@ (80014ac <write_data_LCD+0x118>)
 800143c:	f001 fdd5 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	105b      	asrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001452:	4816      	ldr	r0, [pc, #88]	@ (80014ac <write_data_LCD+0x118>)
 8001454:	f001 fdc9 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	109b      	asrs	r3, r3, #2
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	461a      	mov	r2, r3
 8001466:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800146a:	4810      	ldr	r0, [pc, #64]	@ (80014ac <write_data_LCD+0x118>)
 800146c:	f001 fdbd 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	10db      	asrs	r3, r3, #3
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001482:	480a      	ldr	r0, [pc, #40]	@ (80014ac <write_data_LCD+0x118>)
 8001484:	f001 fdb1 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001488:	200a      	movs	r0, #10
 800148a:	f000 fd29 	bl	8001ee0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <write_data_LCD+0x114>)
 8001494:	f001 fda9 	bl	8002fea <HAL_GPIO_WritePin>
    HAL_Delay(20);
 8001498:	2014      	movs	r0, #20
 800149a:	f000 fd21 	bl	8001ee0 <HAL_Delay>
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40010800 	.word	0x40010800

080014b0 <init_LCD>:

// Function to initialize the LCD
void init_LCD(void) {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
    // Initialize the LCD
    HAL_Delay(50);
 80014b4:	2032      	movs	r0, #50	@ 0x32
 80014b6:	f000 fd13 	bl	8001ee0 <HAL_Delay>
    write_command_LCD(0x33);
 80014ba:	2033      	movs	r0, #51	@ 0x33
 80014bc:	f7ff fedc 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x32);
 80014c0:	2032      	movs	r0, #50	@ 0x32
 80014c2:	f7ff fed9 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x28);
 80014c6:	2028      	movs	r0, #40	@ 0x28
 80014c8:	f7ff fed6 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x0C);
 80014cc:	200c      	movs	r0, #12
 80014ce:	f7ff fed3 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x06);
 80014d2:	2006      	movs	r0, #6
 80014d4:	f7ff fed0 	bl	8001278 <write_command_LCD>
    write_command_LCD(0x01);
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fecd 	bl	8001278 <write_command_LCD>
    HAL_Delay(2);
 80014de:	2002      	movs	r0, #2
 80014e0:	f000 fcfe 	bl	8001ee0 <HAL_Delay>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <write_string_LCD>:

// Function to write a string to the LCD
void write_string_LCD(const char *text) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    while (*text) {
 80014f0:	e006      	b.n	8001500 <write_string_LCD+0x18>
        write_data_LCD(*text++);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff4a 	bl	8001394 <write_data_LCD>
    while (*text) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1f4      	bne.n	80014f2 <write_string_LCD+0xa>
    }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <write_string_line>:

void write_string_line(char line, const char *text) {
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	6039      	str	r1, [r7, #0]
 800151c:	71fb      	strb	r3, [r7, #7]
    if (line == 1) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d103      	bne.n	800152c <write_string_line+0x1a>
        write_command_LCD(0x80); // Set cursor to start of line 1
 8001524:	2080      	movs	r0, #128	@ 0x80
 8001526:	f7ff fea7 	bl	8001278 <write_command_LCD>
 800152a:	e005      	b.n	8001538 <write_string_line+0x26>
    } else if (line == 2) {
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d102      	bne.n	8001538 <write_string_line+0x26>
        write_command_LCD(0xC0); // Set cursor to start of line 2
 8001532:	20c0      	movs	r0, #192	@ 0xc0
 8001534:	f7ff fea0 	bl	8001278 <write_command_LCD>
    }
    write_string_LCD(text);
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	f7ff ffd5 	bl	80014e8 <write_string_LCD>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <clear_display>:

void clear_display(void) {
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
    write_command_LCD(0x01); // Clear display
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fe94 	bl	8001278 <write_command_LCD>
    HAL_Delay(2);
 8001550:	2002      	movs	r0, #2
 8001552:	f000 fcc5 	bl	8001ee0 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Interrupt handler for TIM2 Channel 1 and Channel 2

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x90>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d139      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
    {
    	elapsed_time++;
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	3301      	adds	r3, #1
 8001574:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001576:	6013      	str	r3, [r2, #0]
    	if(elapsed_time >= tempo_irrigacao && flag_irrigacao_em_andamento == 1){
 8001578:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	4293      	cmp	r3, r2
 8001582:	d30c      	bcc.n	800159e <HAL_TIM_PeriodElapsedCallback+0x42>
 8001584:	4b1c      	ldr	r3, [pc, #112]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <HAL_TIM_PeriodElapsedCallback+0x42>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	2108      	movs	r1, #8
 8001590:	481a      	ldr	r0, [pc, #104]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001592:	f001 fd2a 	bl	8002fea <HAL_GPIO_WritePin>
    		flag_irrigacao_em_andamento=0;
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
 800159c:	e021      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
    	}
    	else if(elapsed_time < tempo_irrigacao && flag_irrigacao_em_andamento == 0){
 800159e:	4b14      	ldr	r3, [pc, #80]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d20f      	bcs.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x6e>
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10b      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x6e>
    		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	2108      	movs	r1, #8
 80015b6:	4811      	ldr	r0, [pc, #68]	@ (80015fc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015b8:	f001 fd17 	bl	8002fea <HAL_GPIO_WritePin>
    		elapsed_time=0;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
    		flag_irrigacao_em_andamento=1;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e00b      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
    	}
    	else if(elapsed_time >= 60 && flag_irrigacao_em_andamento == 0){
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80015d0:	d907      	bls.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d103      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
			elapsed_time=0;
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
		}

    }
}
 80015e0:	e7ff      	b.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x86>
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40000400 	.word	0x40000400
 80015f0:	200002b0 	.word	0x200002b0
 80015f4:	20000000 	.word	0x20000000
 80015f8:	200002b4 	.word	0x200002b4
 80015fc:	40010800 	.word	0x40010800

08001600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001606:	f000 fc09 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800160a:	f000 f86d 	bl	80016e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160e:	f000 f971 	bl	80018f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001612:	f000 f951 	bl	80018b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001616:	f000 f8c3 	bl	80017a0 <MX_ADC1_Init>
  MX_TIM3_Init();
 800161a:	f000 f8ff 	bl	800181c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
//  HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_2);

  /* Enable interrupt by timer 3*/
  HAL_TIM_Base_Start_IT(&htim3);
 800161e:	482a      	ldr	r0, [pc, #168]	@ (80016c8 <main+0xc8>)
 8001620:	f002 facc 	bl	8003bbc <HAL_TIM_Base_Start_IT>

  init_LCD();
 8001624:	f7ff ff44 	bl	80014b0 <init_LCD>
  //keypad_init();

  clear_display();
 8001628:	f7ff ff8d 	bl	8001546 <clear_display>
  write_string_line(1,"   Smart-fARM");
 800162c:	4927      	ldr	r1, [pc, #156]	@ (80016cc <main+0xcc>)
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff ff6f 	bl	8001512 <write_string_line>
  write_string_line(2,"");
 8001634:	4926      	ldr	r1, [pc, #152]	@ (80016d0 <main+0xd0>)
 8001636:	2002      	movs	r0, #2
 8001638:	f7ff ff6b 	bl	8001512 <write_string_line>
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);// Desliga o Led
 800163c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001640:	4824      	ldr	r0, [pc, #144]	@ (80016d4 <main+0xd4>)
 8001642:	f001 fcea 	bl	800301a <HAL_GPIO_TogglePin>

//	clear_display();
//	write_string_line(1,"   Smart-fARM");
//	HAL_Delay(2000);

	 char key = keypad_getkey();
 8001646:	f7ff fda5 	bl	8001194 <keypad_getkey>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
	 if(key != 0){
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <main+0x84>
		 clear_display();
 8001654:	f7ff ff77 	bl	8001546 <clear_display>
		 write_string_line(1,"GOT KEY: ");
 8001658:	491f      	ldr	r1, [pc, #124]	@ (80016d8 <main+0xd8>)
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff ff59 	bl	8001512 <write_string_line>
		 write_data_LCD(key);
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fe96 	bl	8001394 <write_data_LCD>
		 HAL_Delay(2000);
 8001668:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800166c:	f000 fc38 	bl	8001ee0 <HAL_Delay>
		 clear_display();
 8001670:	f7ff ff69 	bl	8001546 <clear_display>
		 write_string_line(1,"   Smart-fARM");
 8001674:	4915      	ldr	r1, [pc, #84]	@ (80016cc <main+0xcc>)
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff ff4b 	bl	8001512 <write_string_line>
		 write_string_line(2,"");
 800167c:	4914      	ldr	r1, [pc, #80]	@ (80016d0 <main+0xd0>)
 800167e:	2002      	movs	r0, #2
 8001680:	f7ff ff47 	bl	8001512 <write_string_line>
//	 itoa(ldr2_value,buffer,10);
//	 write_string_line(2,buffer);

	 float temperature;
	 char buffer [16];
	 temperature = Read_Temperature();
 8001684:	f7ff fcb0 	bl	8000fe8 <Read_Temperature>
 8001688:	6138      	str	r0, [r7, #16]
	 sprintf(buffer, "%.2f", temperature);  // Convert float to string with 2 decimal places
 800168a:	6938      	ldr	r0, [r7, #16]
 800168c:	f7fe fecc 	bl	8000428 <__aeabi_f2d>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4638      	mov	r0, r7
 8001696:	4911      	ldr	r1, [pc, #68]	@ (80016dc <main+0xdc>)
 8001698:	f003 fb5c 	bl	8004d54 <siprintf>
	 clear_display();
 800169c:	f7ff ff53 	bl	8001546 <clear_display>
	 write_string_line(1,"   Smart-fARM");
 80016a0:	490a      	ldr	r1, [pc, #40]	@ (80016cc <main+0xcc>)
 80016a2:	2001      	movs	r0, #1
 80016a4:	f7ff ff35 	bl	8001512 <write_string_line>
	 write_string_line(2,"    ");
 80016a8:	490d      	ldr	r1, [pc, #52]	@ (80016e0 <main+0xe0>)
 80016aa:	2002      	movs	r0, #2
 80016ac:	f7ff ff31 	bl	8001512 <write_string_line>
	 write_string_LCD(buffer);
 80016b0:	463b      	mov	r3, r7
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff18 	bl	80014e8 <write_string_LCD>
	 write_string_LCD("\xDF" "C");
 80016b8:	480a      	ldr	r0, [pc, #40]	@ (80016e4 <main+0xe4>)
 80016ba:	f7ff ff15 	bl	80014e8 <write_string_LCD>
	 HAL_Delay(2000);
 80016be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016c2:	f000 fc0d 	bl	8001ee0 <HAL_Delay>
  {
 80016c6:	e7be      	b.n	8001646 <main+0x46>
 80016c8:	20000268 	.word	0x20000268
 80016cc:	08006fe8 	.word	0x08006fe8
 80016d0:	08006ff8 	.word	0x08006ff8
 80016d4:	40011000 	.word	0x40011000
 80016d8:	08006ffc 	.word	0x08006ffc
 80016dc:	08007008 	.word	0x08007008
 80016e0:	08007010 	.word	0x08007010
 80016e4:	08007018 	.word	0x08007018

080016e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b094      	sub	sp, #80	@ 0x50
 80016ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f2:	2228      	movs	r2, #40	@ 0x28
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f003 fb8f 	bl	8004e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001726:	2301      	movs	r3, #1
 8001728:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172a:	2302      	movs	r3, #2
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800172e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001734:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fc84 	bl	800304c <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800174a:	f000 f973 	bl	8001a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800174e:	230f      	movs	r3, #15
 8001750:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800175a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800175e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2102      	movs	r1, #2
 800176a:	4618      	mov	r0, r3
 800176c:	f001 fef0 	bl	8003550 <HAL_RCC_ClockConfig>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001776:	f000 f95d 	bl	8001a34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800177a:	2302      	movs	r3, #2
 800177c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800177e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001782:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	4618      	mov	r0, r3
 8001788:	f002 f85c 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001792:	f000 f94f 	bl	8001a34 <Error_Handler>
  }
}
 8001796:	bf00      	nop
 8001798:	3750      	adds	r7, #80	@ 0x50
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017b2:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <MX_ADC1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017be:	2201      	movs	r2, #1
 80017c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80017ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d0:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017d8:	2201      	movs	r2, #1
 80017da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017de:	f000 fba3 	bl	8001f28 <HAL_ADC_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 f924 	bl	8001a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017ec:	2310      	movs	r3, #16
 80017ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80017f4:	2305      	movs	r3, #5
 80017f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_ADC1_Init+0x74>)
 80017fe:	f000 fe57 	bl	80024b0 <HAL_ADC_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001808:	f000 f914 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200001f4 	.word	0x200001f4
 8001818:	40012400 	.word	0x40012400

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001838:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800183a:	4a1e      	ldr	r2, [pc, #120]	@ (80018b4 <MX_TIM3_Init+0x98>)
 800183c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 800183e:	4b1c      	ldr	r3, [pc, #112]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001840:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001844:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001848:	2210      	movs	r2, #16
 800184a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800184e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001852:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800185c:	2280      	movs	r2, #128	@ 0x80
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001860:	4813      	ldr	r0, [pc, #76]	@ (80018b0 <MX_TIM3_Init+0x94>)
 8001862:	f002 f95b 	bl	8003b1c <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800186c:	f000 f8e2 	bl	8001a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001874:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0308 	add.w	r3, r7, #8
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800187e:	f002 faf7 	bl	8003e70 <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001888:	f000 f8d4 	bl	8001a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_TIM3_Init+0x94>)
 800189a:	f002 fccd 	bl	8004238 <HAL_TIMEx_MasterConfigSynchronization>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018a4:	f000 f8c6 	bl	8001a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000268 	.word	0x20000268
 80018b4:	40000400 	.word	0x40000400

080018b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_DMA_Init+0x38>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <MX_DMA_Init+0x38>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <MX_DMA_Init+0x38>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	200b      	movs	r0, #11
 80018dc:	f001 f853 	bl	8002986 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018e0:	200b      	movs	r0, #11
 80018e2:	f001 f86c 	bl	80029be <HAL_NVIC_EnableIRQ>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0310 	add.w	r3, r7, #16
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b46      	ldr	r3, [pc, #280]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	4a45      	ldr	r2, [pc, #276]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800190e:	f043 0310 	orr.w	r3, r3, #16
 8001912:	6193      	str	r3, [r2, #24]
 8001914:	4b43      	ldr	r3, [pc, #268]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b40      	ldr	r3, [pc, #256]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	4a3f      	ldr	r2, [pc, #252]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001926:	f043 0320 	orr.w	r3, r3, #32
 800192a:	6193      	str	r3, [r2, #24]
 800192c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f003 0320 	and.w	r3, r3, #32
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a39      	ldr	r2, [pc, #228]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001950:	4b34      	ldr	r3, [pc, #208]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a33      	ldr	r2, [pc, #204]	@ (8001a24 <MX_GPIO_Init+0x130>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b31      	ldr	r3, [pc, #196]	@ (8001a24 <MX_GPIO_Init+0x130>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	603b      	str	r3, [r7, #0]
 8001966:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800196e:	482e      	ldr	r0, [pc, #184]	@ (8001a28 <MX_GPIO_Init+0x134>)
 8001970:	f001 fb3b 	bl	8002fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001974:	2200      	movs	r2, #0
 8001976:	f641 6108 	movw	r1, #7688	@ 0x1e08
 800197a:	482c      	ldr	r0, [pc, #176]	@ (8001a2c <MX_GPIO_Init+0x138>)
 800197c:	f001 fb35 	bl	8002fea <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 8001980:	2200      	movs	r2, #0
 8001982:	f640 411b 	movw	r1, #3099	@ 0xc1b
 8001986:	482a      	ldr	r0, [pc, #168]	@ (8001a30 <MX_GPIO_Init+0x13c>)
 8001988:	f001 fb2f 	bl	8002fea <HAL_GPIO_WritePin>
                          |LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800198c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	4820      	ldr	r0, [pc, #128]	@ (8001a28 <MX_GPIO_Init+0x134>)
 80019a6:	f001 f985 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IRRIGACAO_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = IRRIGACAO_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80019aa:	f641 6308 	movw	r3, #7688	@ 0x1e08
 80019ae:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	4619      	mov	r1, r3
 80019c2:	481a      	ldr	r0, [pc, #104]	@ (8001a2c <MX_GPIO_Init+0x138>)
 80019c4:	f001 f976 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_COL1_Pin KEYPAD_COL2_Pin KEYPAD_COL3_Pin KEYPAD_COL4_Pin
                           LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = KEYPAD_COL1_Pin|KEYPAD_COL2_Pin|KEYPAD_COL3_Pin|KEYPAD_COL4_Pin
 80019c8:	f640 431b 	movw	r3, #3099	@ 0xc1b
 80019cc:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin|LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d6:	2303      	movs	r3, #3
 80019d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0310 	add.w	r3, r7, #16
 80019de:	4619      	mov	r1, r3
 80019e0:	4813      	ldr	r0, [pc, #76]	@ (8001a30 <MX_GPIO_Init+0x13c>)
 80019e2:	f001 f967 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYPAD_ROW1_Pin KEYPAD_ROW2_Pin KEYPAD_ROW3_Pin KEYPAD_ROW4_Pin */
  GPIO_InitStruct.Pin = KEYPAD_ROW1_Pin|KEYPAD_ROW2_Pin|KEYPAD_ROW3_Pin|KEYPAD_ROW4_Pin;
 80019e6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	4619      	mov	r1, r3
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <MX_GPIO_Init+0x13c>)
 80019fc:	f001 f95a 	bl	8002cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4806      	ldr	r0, [pc, #24]	@ (8001a30 <MX_GPIO_Init+0x13c>)
 8001a16:	f001 f94d 	bl	8002cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40010800 	.word	0x40010800
 8001a30:	40010c00 	.word	0x40010c00

08001a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a38:	b672      	cpsid	i
}
 8001a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <Error_Handler+0x8>

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4a14      	ldr	r2, [pc, #80]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6193      	str	r3, [r2, #24]
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a0e      	ldr	r2, [pc, #56]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_MspInit+0x5c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a76:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <HAL_MspInit+0x60>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <HAL_MspInit+0x60>)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000

08001aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a28      	ldr	r2, [pc, #160]	@ (8001b60 <HAL_ADC_MspInit+0xbc>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d149      	bne.n	8001b58 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ac4:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ace:	6193      	str	r3, [r2, #24]
 8001ad0:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001adc:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	4a20      	ldr	r2, [pc, #128]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6193      	str	r3, [r2, #24]
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_ADC_MspInit+0xc0>)
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = LDR_1_Pin|LDR_2_Pin;
 8001af4:	2303      	movs	r3, #3
 8001af6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af8:	2303      	movs	r3, #3
 8001afa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	4619      	mov	r1, r3
 8001b02:	4819      	ldr	r0, [pc, #100]	@ (8001b68 <HAL_ADC_MspInit+0xc4>)
 8001b04:	f001 f8d6 	bl	8002cb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b08:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b0a:	4a19      	ldr	r2, [pc, #100]	@ (8001b70 <HAL_ADC_MspInit+0xcc>)
 8001b0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b14:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b28:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b3c:	480b      	ldr	r0, [pc, #44]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b3e:	f000 ff59 	bl	80029f4 <HAL_DMA_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001b48:	f7ff ff74 	bl	8001a34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b50:	621a      	str	r2, [r3, #32]
 8001b52:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <HAL_ADC_MspInit+0xc8>)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b58:	bf00      	nop
 8001b5a:	3720      	adds	r7, #32
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40012400 	.word	0x40012400
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	20000224 	.word	0x20000224
 8001b70:	40020008 	.word	0x40020008

08001b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x44>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d113      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b86:	4b0d      	ldr	r3, [pc, #52]	@ (8001bbc <HAL_TIM_Base_MspInit+0x48>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bbc <HAL_TIM_Base_MspInit+0x48>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_TIM_Base_MspInit+0x48>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	201d      	movs	r0, #29
 8001ba4:	f000 feef 	bl	8002986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ba8:	201d      	movs	r0, #29
 8001baa:	f000 ff08 	bl	80029be <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40000400 	.word	0x40000400
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <NMI_Handler+0x4>

08001bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f94a 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA1_Channel1_IRQHandler+0x10>)
 8001c1e:	f000 ff43 	bl	8002aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000224 	.word	0x20000224

08001c2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <TIM3_IRQHandler+0x10>)
 8001c32:	f002 f815 	bl	8003c60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000268 	.word	0x20000268

08001c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return 1;
 8001c44:	2301      	movs	r3, #1
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr

08001c4e <_kill>:

int _kill(int pid, int sig)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c58:	f003 f932 	bl	8004ec0 <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2216      	movs	r2, #22
 8001c60:	601a      	str	r2, [r3, #0]
  return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_exit>:

void _exit (int status)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c76:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffe7 	bl	8001c4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <_exit+0x12>

08001c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e00a      	b.n	8001cac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c96:	f3af 8000 	nop.w
 8001c9a:	4601      	mov	r1, r0
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	60ba      	str	r2, [r7, #8]
 8001ca2:	b2ca      	uxtb	r2, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	dbf0      	blt.n	8001c96 <_read+0x12>
  }

  return len;
 8001cb4:	687b      	ldr	r3, [r7, #4]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	60f8      	str	r0, [r7, #12]
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	e009      	b.n	8001ce4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	60ba      	str	r2, [r7, #8]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	dbf1      	blt.n	8001cd0 <_write+0x12>
  }
  return len;
 8001cec:	687b      	ldr	r3, [r7, #4]
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_close>:

int _close(int file)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bc80      	pop	{r7}
 8001d0a:	4770      	bx	lr

08001d0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d60:	4a14      	ldr	r2, [pc, #80]	@ (8001db4 <_sbrk+0x5c>)
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <_sbrk+0x60>)
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d6c:	4b13      	ldr	r3, [pc, #76]	@ (8001dbc <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d74:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <_sbrk+0x64>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <_sbrk+0x68>)
 8001d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7a:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d207      	bcs.n	8001d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d88:	f003 f89a 	bl	8004ec0 <__errno>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	220c      	movs	r2, #12
 8001d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	e009      	b.n	8001dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d9e:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <_sbrk+0x64>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4413      	add	r3, r2
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <_sbrk+0x64>)
 8001da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20005000 	.word	0x20005000
 8001db8:	00000400 	.word	0x00000400
 8001dbc:	200002b8 	.word	0x200002b8
 8001dc0:	20000410 	.word	0x20000410

08001dc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd0:	f7ff fff8 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd4:	480b      	ldr	r0, [pc, #44]	@ (8001e04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dd6:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001e0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ddc:	e002      	b.n	8001de4 <LoopCopyDataInit>

08001dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de2:	3304      	adds	r3, #4

08001de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de8:	d3f9      	bcc.n	8001dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dea:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dec:	4c09      	ldr	r4, [pc, #36]	@ (8001e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df0:	e001      	b.n	8001df6 <LoopFillZerobss>

08001df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df4:	3204      	adds	r2, #4

08001df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df8:	d3fb      	bcc.n	8001df2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f003 f867 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfe:	f7ff fbff 	bl	8001600 <main>
  bx lr
 8001e02:	4770      	bx	lr
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e0c:	080073d8 	.word	0x080073d8
  ldr r2, =_sbss
 8001e10:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e14:	2000040c 	.word	0x2000040c

08001e18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC1_2_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_Init+0x28>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	@ (8001e44 <HAL_Init+0x28>)
 8001e26:	f043 0310 	orr.w	r3, r3, #16
 8001e2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 fd9f 	bl	8002970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	200f      	movs	r0, #15
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fe02 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40022000 	.word	0x40022000

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	@ (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 fdb7 	bl	80029da <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 fd7f 	bl	8002986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	@ (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	2000000c 	.word	0x2000000c
 8001ea4:	20000008 	.word	0x20000008

08001ea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_IncTick+0x1c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b05      	ldr	r3, [pc, #20]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <HAL_IncTick+0x20>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	200002bc 	.word	0x200002bc

08001ecc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b02      	ldr	r3, [pc, #8]	@ (8001edc <HAL_GetTick+0x10>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	200002bc 	.word	0x200002bc

08001ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff fff0 	bl	8001ecc <HAL_GetTick>
 8001eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef8:	d005      	beq.n	8001f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efa:	4b0a      	ldr	r3, [pc, #40]	@ (8001f24 <HAL_Delay+0x44>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f06:	bf00      	nop
 8001f08:	f7ff ffe0 	bl	8001ecc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d8f7      	bhi.n	8001f08 <HAL_Delay+0x28>
  {
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	2000000c 	.word	0x2000000c

08001f28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0be      	b.n	80020c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fd9c 	bl	8001aa4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fbf1 	bl	8002754 <ADC_ConversionStop_Disable>
 8001f72:	4603      	mov	r3, r0
 8001f74:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 8099 	bne.w	80020b6 <HAL_ADC_Init+0x18e>
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8095 	bne.w	80020b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f94:	f023 0302 	bic.w	r3, r3, #2
 8001f98:	f043 0202 	orr.w	r2, r3, #2
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fa8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7b1b      	ldrb	r3, [r3, #12]
 8001fae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001fb0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fc0:	d003      	beq.n	8001fca <HAL_ADC_Init+0xa2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_ADC_Init+0xa8>
 8001fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fce:	e000      	b.n	8001fd2 <HAL_ADC_Init+0xaa>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7d1b      	ldrb	r3, [r3, #20]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d119      	bne.n	8002014 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7b1b      	ldrb	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	035a      	lsls	r2, r3, #13
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ff8:	613b      	str	r3, [r7, #16]
 8001ffa:	e00b      	b.n	8002014 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_ADC_Init+0x1a8>)
 8002030:	4013      	ands	r3, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	68b9      	ldr	r1, [r7, #8]
 8002038:	430b      	orrs	r3, r1
 800203a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002044:	d003      	beq.n	800204e <HAL_ADC_Init+0x126>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d104      	bne.n	8002058 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	3b01      	subs	r3, #1
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800205e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	430a      	orrs	r2, r1
 800206a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	4b18      	ldr	r3, [pc, #96]	@ (80020d4 <HAL_ADC_Init+0x1ac>)
 8002074:	4013      	ands	r3, r2
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	429a      	cmp	r2, r3
 800207a:	d10b      	bne.n	8002094 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	f023 0303 	bic.w	r3, r3, #3
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002092:	e018      	b.n	80020c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f023 0312 	bic.w	r3, r3, #18
 800209c:	f043 0210 	orr.w	r2, r3, #16
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80020b4:	e007      	b.n	80020c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	f043 0210 	orr.w	r2, r3, #16
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	ffe1f7fd 	.word	0xffe1f7fd
 80020d4:	ff1f0efe 	.word	0xff1f0efe

080020d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Start+0x1a>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e098      	b.n	8002224 <HAL_ADC_Start+0x14c>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fad0 	bl	80026a0 <ADC_Enable>
 8002100:	4603      	mov	r3, r0
 8002102:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 8087 	bne.w	800221a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a41      	ldr	r2, [pc, #260]	@ (800222c <HAL_ADC_Start+0x154>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d105      	bne.n	8002136 <HAL_ADC_Start+0x5e>
 800212a:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_ADC_Start+0x158>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214c:	2b00      	cmp	r3, #0
 800214e:	d026      	beq.n	800219e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002154:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002158:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002160:	e01d      	b.n	800219e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2f      	ldr	r2, [pc, #188]	@ (8002230 <HAL_ADC_Start+0x158>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Start+0xaa>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2b      	ldr	r2, [pc, #172]	@ (800222c <HAL_ADC_Start+0x154>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <HAL_ADC_Start+0xc6>
 8002182:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <HAL_ADC_Start+0x158>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002192:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002196:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d006      	beq.n	80021b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	f023 0206 	bic.w	r2, r3, #6
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021b6:	e002      	b.n	80021be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0202 	mvn.w	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021de:	d113      	bne.n	8002208 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_ADC_Start+0x154>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d105      	bne.n	80021f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80021ea:	4b11      	ldr	r3, [pc, #68]	@ (8002230 <HAL_ADC_Start+0x158>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d108      	bne.n	8002208 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	e00c      	b.n	8002222 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	e003      	b.n	8002222 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40012800 	.word	0x40012800
 8002230:	40012400 	.word	0x40012400

08002234 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADC_Stop+0x1a>
 800224a:	2302      	movs	r3, #2
 800224c:	e01a      	b.n	8002284 <HAL_ADC_Stop+0x50>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa7c 	bl	8002754 <ADC_ConversionStop_Disable>
 800225c:	4603      	mov	r3, r0
 800225e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80022a2:	f7ff fe13 	bl	8001ecc <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00b      	beq.n	80022ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	f043 0220 	orr.w	r2, r3, #32
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0d3      	b.n	8002476 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d131      	bne.n	8002340 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d12a      	bne.n	8002340 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80022ea:	e021      	b.n	8002330 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f2:	d01d      	beq.n	8002330 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d007      	beq.n	800230a <HAL_ADC_PollForConversion+0x7e>
 80022fa:	f7ff fde7 	bl	8001ecc <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d212      	bcs.n	8002330 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e0a2      	b.n	8002476 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0d6      	beq.n	80022ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800233e:	e070      	b.n	8002422 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002340:	4b4f      	ldr	r3, [pc, #316]	@ (8002480 <HAL_ADC_PollForConversion+0x1f4>)
 8002342:	681c      	ldr	r4, [r3, #0]
 8002344:	2002      	movs	r0, #2
 8002346:	f001 fb33 	bl	80039b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800234a:	4603      	mov	r3, r0
 800234c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	4b4b      	ldr	r3, [pc, #300]	@ (8002484 <HAL_ADC_PollForConversion+0x1f8>)
 8002358:	400b      	ands	r3, r1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_ADC_PollForConversion+0x104>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68d9      	ldr	r1, [r3, #12]
 8002364:	4b48      	ldr	r3, [pc, #288]	@ (8002488 <HAL_ADC_PollForConversion+0x1fc>)
 8002366:	400b      	ands	r3, r1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d111      	bne.n	8002390 <HAL_ADC_PollForConversion+0x104>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	4b46      	ldr	r3, [pc, #280]	@ (800248c <HAL_ADC_PollForConversion+0x200>)
 8002374:	400b      	ands	r3, r1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <HAL_ADC_PollForConversion+0x100>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	4b43      	ldr	r3, [pc, #268]	@ (8002490 <HAL_ADC_PollForConversion+0x204>)
 8002382:	400b      	ands	r3, r1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_ADC_PollForConversion+0x100>
 8002388:	2314      	movs	r3, #20
 800238a:	e020      	b.n	80023ce <HAL_ADC_PollForConversion+0x142>
 800238c:	2329      	movs	r3, #41	@ 0x29
 800238e:	e01e      	b.n	80023ce <HAL_ADC_PollForConversion+0x142>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <HAL_ADC_PollForConversion+0x200>)
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_ADC_PollForConversion+0x120>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002490 <HAL_ADC_PollForConversion+0x204>)
 80023a6:	400b      	ands	r3, r1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_ADC_PollForConversion+0x13c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6919      	ldr	r1, [r3, #16]
 80023b2:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <HAL_ADC_PollForConversion+0x208>)
 80023b4:	400b      	ands	r3, r1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_ADC_PollForConversion+0x140>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68d9      	ldr	r1, [r3, #12]
 80023c0:	4b34      	ldr	r3, [pc, #208]	@ (8002494 <HAL_ADC_PollForConversion+0x208>)
 80023c2:	400b      	ands	r3, r1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_PollForConversion+0x140>
 80023c8:	2354      	movs	r3, #84	@ 0x54
 80023ca:	e000      	b.n	80023ce <HAL_ADC_PollForConversion+0x142>
 80023cc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023d4:	e021      	b.n	800241a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d01a      	beq.n	8002414 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x168>
 80023e4:	f7ff fd72 	bl	8001ecc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d20f      	bcs.n	8002414 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d90b      	bls.n	8002414 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e030      	b.n	8002476 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3301      	adds	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	429a      	cmp	r2, r3
 8002420:	d8d9      	bhi.n	80023d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f06f 0212 	mvn.w	r2, #18
 800242a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002430:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002442:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002446:	d115      	bne.n	8002474 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800244c:	2b00      	cmp	r3, #0
 800244e:	d111      	bne.n	8002474 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002454:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002460:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d105      	bne.n	8002474 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246c:	f043 0201 	orr.w	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bd90      	pop	{r4, r7, pc}
 800247e:	bf00      	nop
 8002480:	20000004 	.word	0x20000004
 8002484:	24924924 	.word	0x24924924
 8002488:	00924924 	.word	0x00924924
 800248c:	12492492 	.word	0x12492492
 8002490:	00492492 	.word	0x00492492
 8002494:	00249249 	.word	0x00249249

08002498 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x20>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0dc      	b.n	800268a <HAL_ADC_ConfigChannel+0x1da>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d81c      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b05      	subs	r3, #5
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
 8002518:	e03c      	b.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d81c      	bhi.n	800255c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b23      	subs	r3, #35	@ 0x23
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	4019      	ands	r1, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b23      	subs	r3, #35	@ 0x23
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
 800255a:	e01b      	b.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b41      	subs	r3, #65	@ 0x41
 800256e:	221f      	movs	r2, #31
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b41      	subs	r3, #65	@ 0x41
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b09      	cmp	r3, #9
 800259a:	d91c      	bls.n	80025d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	3b1e      	subs	r3, #30
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	e019      	b.n	800260a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4019      	ands	r1, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6898      	ldr	r0, [r3, #8]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d003      	beq.n	800261a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002616:	2b11      	cmp	r3, #17
 8002618:	d132      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1d      	ldr	r2, [pc, #116]	@ (8002694 <HAL_ADC_ConfigChannel+0x1e4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d125      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d126      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002640:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b10      	cmp	r3, #16
 8002648:	d11a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264a:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <HAL_ADC_ConfigChannel+0x1e8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a13      	ldr	r2, [pc, #76]	@ (800269c <HAL_ADC_ConfigChannel+0x1ec>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x1b2>
 800266e:	e007      	b.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40012400 	.word	0x40012400
 8002698:	20000004 	.word	0x20000004
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d040      	beq.n	8002740 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ce:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <ADC_Enable+0xac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <ADC_Enable+0xb0>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026dc:	e002      	b.n	80026e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ea:	f7ff fbef 	bl	8001ecc <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	e01f      	b.n	8002732 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f2:	f7ff fbeb 	bl	8001ecc <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d918      	bls.n	8002732 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d011      	beq.n	8002732 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d1d8      	bne.n	80026f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000004 	.word	0x20000004
 8002750:	431bde83 	.word	0x431bde83

08002754 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d12e      	bne.n	80027cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277e:	f7ff fba5 	bl	8001ecc <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002784:	e01b      	b.n	80027be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002786:	f7ff fba1 	bl	8001ecc <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10d      	bne.n	80027be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d0dc      	beq.n	8002786 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e8:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <__NVIC_SetPriorityGrouping+0x44>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027f4:	4013      	ands	r3, r2
 80027f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002800:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002804:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800280a:	4a04      	ldr	r2, [pc, #16]	@ (800281c <__NVIC_SetPriorityGrouping+0x44>)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	60d3      	str	r3, [r2, #12]
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002824:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <__NVIC_GetPriorityGrouping+0x18>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	f003 0307 	and.w	r3, r3, #7
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284a:	2b00      	cmp	r3, #0
 800284c:	db0b      	blt.n	8002866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	4906      	ldr	r1, [pc, #24]	@ (8002870 <__NVIC_EnableIRQ+0x34>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	2001      	movs	r0, #1
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	e000e100 	.word	0xe000e100

08002874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	6039      	str	r1, [r7, #0]
 800287e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	2b00      	cmp	r3, #0
 8002886:	db0a      	blt.n	800289e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	b2da      	uxtb	r2, r3
 800288c:	490c      	ldr	r1, [pc, #48]	@ (80028c0 <__NVIC_SetPriority+0x4c>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	0112      	lsls	r2, r2, #4
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	440b      	add	r3, r1
 8002898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800289c:	e00a      	b.n	80028b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4908      	ldr	r1, [pc, #32]	@ (80028c4 <__NVIC_SetPriority+0x50>)
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	3b04      	subs	r3, #4
 80028ac:	0112      	lsls	r2, r2, #4
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	440b      	add	r3, r1
 80028b2:	761a      	strb	r2, [r3, #24]
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000e100 	.word	0xe000e100
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	@ 0x24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f1c3 0307 	rsb	r3, r3, #7
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	bf28      	it	cs
 80028e6:	2304      	movcs	r3, #4
 80028e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3304      	adds	r3, #4
 80028ee:	2b06      	cmp	r3, #6
 80028f0:	d902      	bls.n	80028f8 <NVIC_EncodePriority+0x30>
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	e000      	b.n	80028fa <NVIC_EncodePriority+0x32>
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	401a      	ands	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	43d9      	mvns	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002920:	4313      	orrs	r3, r2
         );
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800293c:	d301      	bcc.n	8002942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293e:	2301      	movs	r3, #1
 8002940:	e00f      	b.n	8002962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002942:	4a0a      	ldr	r2, [pc, #40]	@ (800296c <SysTick_Config+0x40>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800294a:	210f      	movs	r1, #15
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	f7ff ff90 	bl	8002874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <SysTick_Config+0x40>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800295a:	4b04      	ldr	r3, [pc, #16]	@ (800296c <SysTick_Config+0x40>)
 800295c:	2207      	movs	r2, #7
 800295e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	e000e010 	.word	0xe000e010

08002970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff2d 	bl	80027d8 <__NVIC_SetPriorityGrouping>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b086      	sub	sp, #24
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002998:	f7ff ff42 	bl	8002820 <__NVIC_GetPriorityGrouping>
 800299c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	6978      	ldr	r0, [r7, #20]
 80029a4:	f7ff ff90 	bl	80028c8 <NVIC_EncodePriority>
 80029a8:	4602      	mov	r2, r0
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff5f 	bl	8002874 <__NVIC_SetPriority>
}
 80029b6:	bf00      	nop
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff35 	bl	800283c <__NVIC_EnableIRQ>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffa2 	bl	800292c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e043      	b.n	8002a92 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_DMA_Init+0xa8>)
 8002a12:	4413      	add	r3, r2
 8002a14:	4a22      	ldr	r2, [pc, #136]	@ (8002aa0 <HAL_DMA_Init+0xac>)
 8002a16:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1a:	091b      	lsrs	r3, r3, #4
 8002a1c:	009a      	lsls	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa4 <HAL_DMA_Init+0xb0>)
 8002a26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a3e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	bffdfff8 	.word	0xbffdfff8
 8002aa0:	cccccccd 	.word	0xcccccccd
 8002aa4:	40020000 	.word	0x40020000

08002aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d04f      	beq.n	8002b70 <HAL_DMA_IRQHandler+0xc8>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d107      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0204 	bic.w	r2, r2, #4
 8002af6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a66      	ldr	r2, [pc, #408]	@ (8002c98 <HAL_DMA_IRQHandler+0x1f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d029      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xae>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0xaa>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a63      	ldr	r2, [pc, #396]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1f8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0xa4>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a62      	ldr	r2, [pc, #392]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1fc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x9e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a60      	ldr	r2, [pc, #384]	@ (8002ca8 <HAL_DMA_IRQHandler+0x200>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x98>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cac <HAL_DMA_IRQHandler+0x204>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x92>
 8002b34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b38:	e00e      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b3a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b3e:	e00b      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b44:	e008      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b4a:	e005      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b50:	e002      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b52:	2340      	movs	r3, #64	@ 0x40
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_IRQHandler+0xb0>
 8002b56:	2304      	movs	r3, #4
 8002b58:	4a55      	ldr	r2, [pc, #340]	@ (8002cb0 <HAL_DMA_IRQHandler+0x208>)
 8002b5a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 8094 	beq.w	8002c8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002b6e:	e08e      	b.n	8002c8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	2202      	movs	r2, #2
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d056      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x186>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d051      	beq.n	8002c2e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020a 	bic.w	r2, r2, #10
 8002ba6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a38      	ldr	r2, [pc, #224]	@ (8002c98 <HAL_DMA_IRQHandler+0x1f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d029      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x166>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a37      	ldr	r2, [pc, #220]	@ (8002c9c <HAL_DMA_IRQHandler+0x1f4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d022      	beq.n	8002c0a <HAL_DMA_IRQHandler+0x162>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a35      	ldr	r2, [pc, #212]	@ (8002ca0 <HAL_DMA_IRQHandler+0x1f8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x15c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a34      	ldr	r2, [pc, #208]	@ (8002ca4 <HAL_DMA_IRQHandler+0x1fc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0x156>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a32      	ldr	r2, [pc, #200]	@ (8002ca8 <HAL_DMA_IRQHandler+0x200>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00a      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x150>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a31      	ldr	r2, [pc, #196]	@ (8002cac <HAL_DMA_IRQHandler+0x204>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d102      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x14a>
 8002bec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002bf0:	e00e      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002bf2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bf6:	e00b      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bfc:	e008      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002bfe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c02:	e005      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c08:	e002      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002c0a:	2320      	movs	r3, #32
 8002c0c:	e000      	b.n	8002c10 <HAL_DMA_IRQHandler+0x168>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_DMA_IRQHandler+0x208>)
 8002c12:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d034      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c2c:	e02f      	b.n	8002c8e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	2208      	movs	r2, #8
 8002c34:	409a      	lsls	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d028      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x1e8>
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 020e 	bic.w	r2, r2, #14
 8002c56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
    }
  }
  return;
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
}
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40020008 	.word	0x40020008
 8002c9c:	4002001c 	.word	0x4002001c
 8002ca0:	40020030 	.word	0x40020030
 8002ca4:	40020044 	.word	0x40020044
 8002ca8:	40020058 	.word	0x40020058
 8002cac:	4002006c 	.word	0x4002006c
 8002cb0:	40020000 	.word	0x40020000

08002cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b08b      	sub	sp, #44	@ 0x2c
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cc6:	e169      	b.n	8002f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	f040 8158 	bne.w	8002f96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a9a      	ldr	r2, [pc, #616]	@ (8002f54 <HAL_GPIO_Init+0x2a0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d05e      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002cf0:	4a98      	ldr	r2, [pc, #608]	@ (8002f54 <HAL_GPIO_Init+0x2a0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d875      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002cf6:	4a98      	ldr	r2, [pc, #608]	@ (8002f58 <HAL_GPIO_Init+0x2a4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d058      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002cfc:	4a96      	ldr	r2, [pc, #600]	@ (8002f58 <HAL_GPIO_Init+0x2a4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d86f      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d02:	4a96      	ldr	r2, [pc, #600]	@ (8002f5c <HAL_GPIO_Init+0x2a8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d052      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d08:	4a94      	ldr	r2, [pc, #592]	@ (8002f5c <HAL_GPIO_Init+0x2a8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d869      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d0e:	4a94      	ldr	r2, [pc, #592]	@ (8002f60 <HAL_GPIO_Init+0x2ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d04c      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d14:	4a92      	ldr	r2, [pc, #584]	@ (8002f60 <HAL_GPIO_Init+0x2ac>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d863      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d1a:	4a92      	ldr	r2, [pc, #584]	@ (8002f64 <HAL_GPIO_Init+0x2b0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d046      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
 8002d20:	4a90      	ldr	r2, [pc, #576]	@ (8002f64 <HAL_GPIO_Init+0x2b0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d85d      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d26:	2b12      	cmp	r3, #18
 8002d28:	d82a      	bhi.n	8002d80 <HAL_GPIO_Init+0xcc>
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d859      	bhi.n	8002de2 <HAL_GPIO_Init+0x12e>
 8002d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <HAL_GPIO_Init+0x80>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002daf 	.word	0x08002daf
 8002d38:	08002d89 	.word	0x08002d89
 8002d3c:	08002d9b 	.word	0x08002d9b
 8002d40:	08002ddd 	.word	0x08002ddd
 8002d44:	08002de3 	.word	0x08002de3
 8002d48:	08002de3 	.word	0x08002de3
 8002d4c:	08002de3 	.word	0x08002de3
 8002d50:	08002de3 	.word	0x08002de3
 8002d54:	08002de3 	.word	0x08002de3
 8002d58:	08002de3 	.word	0x08002de3
 8002d5c:	08002de3 	.word	0x08002de3
 8002d60:	08002de3 	.word	0x08002de3
 8002d64:	08002de3 	.word	0x08002de3
 8002d68:	08002de3 	.word	0x08002de3
 8002d6c:	08002de3 	.word	0x08002de3
 8002d70:	08002de3 	.word	0x08002de3
 8002d74:	08002de3 	.word	0x08002de3
 8002d78:	08002d91 	.word	0x08002d91
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	4a79      	ldr	r2, [pc, #484]	@ (8002f68 <HAL_GPIO_Init+0x2b4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d86:	e02c      	b.n	8002de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	623b      	str	r3, [r7, #32]
          break;
 8002d8e:	e029      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	3304      	adds	r3, #4
 8002d96:	623b      	str	r3, [r7, #32]
          break;
 8002d98:	e024      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	3308      	adds	r3, #8
 8002da0:	623b      	str	r3, [r7, #32]
          break;
 8002da2:	e01f      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	330c      	adds	r3, #12
 8002daa:	623b      	str	r3, [r7, #32]
          break;
 8002dac:	e01a      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002db6:	2304      	movs	r3, #4
 8002db8:	623b      	str	r3, [r7, #32]
          break;
 8002dba:	e013      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	611a      	str	r2, [r3, #16]
          break;
 8002dce:	e009      	b.n	8002de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002dd0:	2308      	movs	r3, #8
 8002dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	615a      	str	r2, [r3, #20]
          break;
 8002dda:	e003      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
          break;
 8002de0:	e000      	b.n	8002de4 <HAL_GPIO_Init+0x130>
          break;
 8002de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2bff      	cmp	r3, #255	@ 0xff
 8002de8:	d801      	bhi.n	8002dee <HAL_GPIO_Init+0x13a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	e001      	b.n	8002df2 <HAL_GPIO_Init+0x13e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3304      	adds	r3, #4
 8002df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2bff      	cmp	r3, #255	@ 0xff
 8002df8:	d802      	bhi.n	8002e00 <HAL_GPIO_Init+0x14c>
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	e002      	b.n	8002e06 <HAL_GPIO_Init+0x152>
 8002e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e02:	3b08      	subs	r3, #8
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	6a39      	ldr	r1, [r7, #32]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	431a      	orrs	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80b1 	beq.w	8002f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e34:	4b4d      	ldr	r3, [pc, #308]	@ (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	@ (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e3a:	f043 0301 	orr.w	r3, r3, #1
 8002e3e:	6193      	str	r3, [r2, #24]
 8002e40:	4b4a      	ldr	r3, [pc, #296]	@ (8002f6c <HAL_GPIO_Init+0x2b8>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e4c:	4a48      	ldr	r2, [pc, #288]	@ (8002f70 <HAL_GPIO_Init+0x2bc>)
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	3302      	adds	r3, #2
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	220f      	movs	r2, #15
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a40      	ldr	r2, [pc, #256]	@ (8002f74 <HAL_GPIO_Init+0x2c0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d013      	beq.n	8002ea0 <HAL_GPIO_Init+0x1ec>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f78 <HAL_GPIO_Init+0x2c4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00d      	beq.n	8002e9c <HAL_GPIO_Init+0x1e8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a3e      	ldr	r2, [pc, #248]	@ (8002f7c <HAL_GPIO_Init+0x2c8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d007      	beq.n	8002e98 <HAL_GPIO_Init+0x1e4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f80 <HAL_GPIO_Init+0x2cc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_GPIO_Init+0x1e0>
 8002e90:	2303      	movs	r3, #3
 8002e92:	e006      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e94:	2304      	movs	r3, #4
 8002e96:	e004      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_GPIO_Init+0x1ee>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4093      	lsls	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002eb2:	492f      	ldr	r1, [pc, #188]	@ (8002f70 <HAL_GPIO_Init+0x2bc>)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	492c      	ldr	r1, [pc, #176]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eda:	4b2a      	ldr	r3, [pc, #168]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4928      	ldr	r1, [pc, #160]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ef4:	4b23      	ldr	r3, [pc, #140]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	4922      	ldr	r1, [pc, #136]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60cb      	str	r3, [r1, #12]
 8002f00:	e006      	b.n	8002f10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f02:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	491e      	ldr	r1, [pc, #120]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d006      	beq.n	8002f2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4918      	ldr	r1, [pc, #96]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
 8002f28:	e006      	b.n	8002f38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f2a:	4b16      	ldr	r3, [pc, #88]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	4914      	ldr	r1, [pc, #80]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d021      	beq.n	8002f88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f44:	4b0f      	ldr	r3, [pc, #60]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	490e      	ldr	r1, [pc, #56]	@ (8002f84 <HAL_GPIO_Init+0x2d0>)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e021      	b.n	8002f96 <HAL_GPIO_Init+0x2e2>
 8002f52:	bf00      	nop
 8002f54:	10320000 	.word	0x10320000
 8002f58:	10310000 	.word	0x10310000
 8002f5c:	10220000 	.word	0x10220000
 8002f60:	10210000 	.word	0x10210000
 8002f64:	10120000 	.word	0x10120000
 8002f68:	10110000 	.word	0x10110000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	40010000 	.word	0x40010000
 8002f74:	40010800 	.word	0x40010800
 8002f78:	40010c00 	.word	0x40010c00
 8002f7c:	40011000 	.word	0x40011000
 8002f80:	40011400 	.word	0x40011400
 8002f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f88:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	4909      	ldr	r1, [pc, #36]	@ (8002fb8 <HAL_GPIO_Init+0x304>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f98:	3301      	adds	r3, #1
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f47f ae8e 	bne.w	8002cc8 <HAL_GPIO_Init+0x14>
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	372c      	adds	r7, #44	@ 0x2c
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40010400 	.word	0x40010400

08002fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	887b      	ldrh	r3, [r7, #2]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e001      	b.n	8002fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	807b      	strh	r3, [r7, #2]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ffa:	787b      	ldrb	r3, [r7, #1]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003000:	887a      	ldrh	r2, [r7, #2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003006:	e003      	b.n	8003010 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003008:	887b      	ldrh	r3, [r7, #2]
 800300a:	041a      	lsls	r2, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	611a      	str	r2, [r3, #16]
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800302c:	887a      	ldrh	r2, [r7, #2]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4013      	ands	r3, r2
 8003032:	041a      	lsls	r2, r3, #16
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	43d9      	mvns	r1, r3
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	400b      	ands	r3, r1
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	611a      	str	r2, [r3, #16]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e272      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 8087 	beq.w	800317a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800306c:	4b92      	ldr	r3, [pc, #584]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b04      	cmp	r3, #4
 8003076:	d00c      	beq.n	8003092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003078:	4b8f      	ldr	r3, [pc, #572]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b08      	cmp	r3, #8
 8003082:	d112      	bne.n	80030aa <HAL_RCC_OscConfig+0x5e>
 8003084:	4b8c      	ldr	r3, [pc, #560]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003090:	d10b      	bne.n	80030aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003092:	4b89      	ldr	r3, [pc, #548]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d06c      	beq.n	8003178 <HAL_RCC_OscConfig+0x12c>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d168      	bne.n	8003178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e24c      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b2:	d106      	bne.n	80030c2 <HAL_RCC_OscConfig+0x76>
 80030b4:	4b80      	ldr	r3, [pc, #512]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a7f      	ldr	r2, [pc, #508]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e02e      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCC_OscConfig+0x98>
 80030ca:	4b7b      	ldr	r3, [pc, #492]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7a      	ldr	r2, [pc, #488]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b78      	ldr	r3, [pc, #480]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a77      	ldr	r2, [pc, #476]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	e01d      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0xbc>
 80030ee:	4b72      	ldr	r3, [pc, #456]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a71      	ldr	r2, [pc, #452]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b6f      	ldr	r3, [pc, #444]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a6e      	ldr	r2, [pc, #440]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e00b      	b.n	8003120 <HAL_RCC_OscConfig+0xd4>
 8003108:	4b6b      	ldr	r3, [pc, #428]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6a      	ldr	r2, [pc, #424]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	4b68      	ldr	r3, [pc, #416]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a67      	ldr	r2, [pc, #412]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d013      	beq.n	8003150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fed0 	bl	8001ecc <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fecc 	bl	8001ecc <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e200      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b5d      	ldr	r3, [pc, #372]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0xe4>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7fe febc 	bl	8001ecc <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7fe feb8 	bl	8001ecc <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e1ec      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	4b53      	ldr	r3, [pc, #332]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x10c>
 8003176:	e000      	b.n	800317a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d063      	beq.n	800324e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003186:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003192:	4b49      	ldr	r3, [pc, #292]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d11c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x18c>
 800319e:	4b46      	ldr	r3, [pc, #280]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d116      	bne.n	80031d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_RCC_OscConfig+0x176>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1c0      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c2:	4b3d      	ldr	r3, [pc, #244]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4939      	ldr	r1, [pc, #228]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	e03a      	b.n	800324e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d020      	beq.n	8003222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e0:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_RCC_OscConfig+0x270>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fe71 	bl	8001ecc <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fe6d 	bl	8001ecc <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e1a1      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320c:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	4927      	ldr	r1, [pc, #156]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
 8003220:	e015      	b.n	800324e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003222:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_RCC_OscConfig+0x270>)
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003228:	f7fe fe50 	bl	8001ecc <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe fe4c 	bl	8001ecc <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e180      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d03a      	beq.n	80032d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d019      	beq.n	8003296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	4b17      	ldr	r3, [pc, #92]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003268:	f7fe fe30 	bl	8001ecc <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe fe2c 	bl	8001ecc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e160      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003282:	4b0d      	ldr	r3, [pc, #52]	@ (80032b8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800328e:	2001      	movs	r0, #1
 8003290:	f000 faba 	bl	8003808 <RCC_Delay>
 8003294:	e01c      	b.n	80032d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_RCC_OscConfig+0x274>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fe fe16 	bl	8001ecc <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a2:	e00f      	b.n	80032c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe fe12 	bl	8001ecc <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d908      	bls.n	80032c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e146      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	42420000 	.word	0x42420000
 80032c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	4b92      	ldr	r3, [pc, #584]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e9      	bne.n	80032a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a6 	beq.w	800342a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032e2:	4b8b      	ldr	r3, [pc, #556]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10d      	bne.n	800330a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	4b88      	ldr	r3, [pc, #544]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	4a87      	ldr	r2, [pc, #540]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	61d3      	str	r3, [r2, #28]
 80032fa:	4b85      	ldr	r3, [pc, #532]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003306:	2301      	movs	r3, #1
 8003308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <HAL_RCC_OscConfig+0x4c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d118      	bne.n	8003348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003316:	4b7f      	ldr	r3, [pc, #508]	@ (8003514 <HAL_RCC_OscConfig+0x4c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7e      	ldr	r2, [pc, #504]	@ (8003514 <HAL_RCC_OscConfig+0x4c8>)
 800331c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003322:	f7fe fdd3 	bl	8001ecc <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800332a:	f7fe fdcf 	bl	8001ecc <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b64      	cmp	r3, #100	@ 0x64
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e103      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333c:	4b75      	ldr	r3, [pc, #468]	@ (8003514 <HAL_RCC_OscConfig+0x4c8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d106      	bne.n	800335e <HAL_RCC_OscConfig+0x312>
 8003350:	4b6f      	ldr	r3, [pc, #444]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a6e      	ldr	r2, [pc, #440]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	e02d      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x334>
 8003366:	4b6a      	ldr	r3, [pc, #424]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a69      	ldr	r2, [pc, #420]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	6213      	str	r3, [r2, #32]
 8003372:	4b67      	ldr	r3, [pc, #412]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a66      	ldr	r2, [pc, #408]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	f023 0304 	bic.w	r3, r3, #4
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	e01c      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d10c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x356>
 8003388:	4b61      	ldr	r3, [pc, #388]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a60      	ldr	r2, [pc, #384]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	4b5e      	ldr	r3, [pc, #376]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a5d      	ldr	r2, [pc, #372]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	e00b      	b.n	80033ba <HAL_RCC_OscConfig+0x36e>
 80033a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6213      	str	r3, [r2, #32]
 80033ae:	4b58      	ldr	r3, [pc, #352]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a57      	ldr	r2, [pc, #348]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f023 0304 	bic.w	r3, r3, #4
 80033b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d015      	beq.n	80033ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7fe fd83 	bl	8001ecc <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7fe fd7f 	bl	8001ecc <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e0b1      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0ee      	beq.n	80033ca <HAL_RCC_OscConfig+0x37e>
 80033ec:	e014      	b.n	8003418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7fe fd6d 	bl	8001ecc <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f4:	e00a      	b.n	800340c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f6:	f7fe fd69 	bl	8001ecc <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003404:	4293      	cmp	r3, r2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e09b      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	4b40      	ldr	r3, [pc, #256]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ee      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d105      	bne.n	800342a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341e:	4b3c      	ldr	r3, [pc, #240]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a3b      	ldr	r2, [pc, #236]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8087 	beq.w	8003542 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003434:	4b36      	ldr	r3, [pc, #216]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d061      	beq.n	8003504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d146      	bne.n	80034d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003448:	4b33      	ldr	r3, [pc, #204]	@ (8003518 <HAL_RCC_OscConfig+0x4cc>)
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fe fd3d 	bl	8001ecc <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fd39 	bl	8001ecc <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e06d      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003468:	4b29      	ldr	r3, [pc, #164]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d108      	bne.n	8003490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800347e:	4b24      	ldr	r3, [pc, #144]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4921      	ldr	r1, [pc, #132]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003490:	4b1f      	ldr	r3, [pc, #124]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a19      	ldr	r1, [r3, #32]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	430b      	orrs	r3, r1
 80034a2:	491b      	ldr	r1, [pc, #108]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <HAL_RCC_OscConfig+0x4cc>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ae:	f7fe fd0d 	bl	8001ecc <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fe fd09 	bl	8001ecc <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e03d      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0f0      	beq.n	80034b6 <HAL_RCC_OscConfig+0x46a>
 80034d4:	e035      	b.n	8003542 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d6:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <HAL_RCC_OscConfig+0x4cc>)
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034dc:	f7fe fcf6 	bl	8001ecc <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e4:	f7fe fcf2 	bl	8001ecc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e026      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_RCC_OscConfig+0x4c4>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x498>
 8003502:	e01e      	b.n	8003542 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e019      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
 8003510:	40021000 	.word	0x40021000
 8003514:	40007000 	.word	0x40007000
 8003518:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800351c:	4b0b      	ldr	r3, [pc, #44]	@ (800354c <HAL_RCC_OscConfig+0x500>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0d0      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003564:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d910      	bls.n	8003594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003572:	4b67      	ldr	r3, [pc, #412]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	4965      	ldr	r1, [pc, #404]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	4313      	orrs	r3, r2
 8003580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a58      	ldr	r2, [pc, #352]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80035b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80035ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d040      	beq.n	8003670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d115      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e073      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361e:	4b3d      	ldr	r3, [pc, #244]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e06b      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b39      	ldr	r3, [pc, #228]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4936      	ldr	r1, [pc, #216]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003640:	f7fe fc44 	bl	8001ecc <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fe fc40 	bl	8001ecc <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e053      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b2d      	ldr	r3, [pc, #180]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003670:	4b27      	ldr	r3, [pc, #156]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d210      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 0207 	bic.w	r2, r3, #7
 8003686:	4922      	ldr	r1, [pc, #136]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_ClockConfig+0x1c4>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	@ (8003718 <HAL_RCC_ClockConfig+0x1c8>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	@ (800371c <HAL_RCC_ClockConfig+0x1cc>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_ClockConfig+0x1d0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe fba2 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40022000 	.word	0x40022000
 8003714:	40021000 	.word	0x40021000
 8003718:	0800701c 	.word	0x0800701c
 800371c:	20000004 	.word	0x20000004
 8003720:	20000008 	.word	0x20000008

08003724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800373e:	4b1e      	ldr	r3, [pc, #120]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 030c 	and.w	r3, r3, #12
 800374a:	2b04      	cmp	r3, #4
 800374c:	d002      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0x30>
 800374e:	2b08      	cmp	r3, #8
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0x36>
 8003752:	e027      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003754:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003756:	613b      	str	r3, [r7, #16]
      break;
 8003758:	e027      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	0c9b      	lsrs	r3, r3, #18
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	4a17      	ldr	r2, [pc, #92]	@ (80037c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003764:	5cd3      	ldrb	r3, [r2, r3]
 8003766:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003772:	4b11      	ldr	r3, [pc, #68]	@ (80037b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0c5b      	lsrs	r3, r3, #17
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	4a11      	ldr	r2, [pc, #68]	@ (80037c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003786:	fb03 f202 	mul.w	r2, r3, r2
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	e004      	b.n	800379e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a0c      	ldr	r2, [pc, #48]	@ (80037c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003798:	fb02 f303 	mul.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	613b      	str	r3, [r7, #16]
      break;
 80037a2:	e002      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037a4:	4b05      	ldr	r3, [pc, #20]	@ (80037bc <HAL_RCC_GetSysClockFreq+0x98>)
 80037a6:	613b      	str	r3, [r7, #16]
      break;
 80037a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037aa:	693b      	ldr	r3, [r7, #16]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bc80      	pop	{r7}
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000
 80037bc:	007a1200 	.word	0x007a1200
 80037c0:	08007034 	.word	0x08007034
 80037c4:	08007044 	.word	0x08007044
 80037c8:	003d0900 	.word	0x003d0900

080037cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b02      	ldr	r3, [pc, #8]	@ (80037dc <HAL_RCC_GetHCLKFreq+0x10>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e4:	f7ff fff2 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	@ (8003800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	@ (8003804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	0800702c 	.word	0x0800702c

08003808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003810:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <RCC_Delay+0x34>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	@ (8003840 <RCC_Delay+0x38>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0a5b      	lsrs	r3, r3, #9
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003824:	bf00      	nop
  }
  while (Delay --);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1e5a      	subs	r2, r3, #1
 800382a:	60fa      	str	r2, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <RCC_Delay+0x1c>
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000004 	.word	0x20000004
 8003840:	10624dd3 	.word	0x10624dd3

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d07d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003864:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10d      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003870:	4b4c      	ldr	r3, [pc, #304]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	4a4b      	ldr	r2, [pc, #300]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387a:	61d3      	str	r3, [r2, #28]
 800387c:	4b49      	ldr	r3, [pc, #292]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003888:	2301      	movs	r3, #1
 800388a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	4b46      	ldr	r3, [pc, #280]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d118      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003898:	4b43      	ldr	r3, [pc, #268]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a42      	ldr	r2, [pc, #264]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800389e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a4:	f7fe fb12 	bl	8001ecc <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	e008      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ac:	f7fe fb0e 	bl	8001ecc <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b64      	cmp	r3, #100	@ 0x64
 80038b8:	d901      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e06d      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b3a      	ldr	r3, [pc, #232]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f0      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038ca:	4b36      	ldr	r3, [pc, #216]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d02e      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d027      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e8:	4b2e      	ldr	r3, [pc, #184]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038f2:	4b2e      	ldr	r3, [pc, #184]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f8:	4b2c      	ldr	r3, [pc, #176]	@ (80039ac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038fe:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d014      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390e:	f7fe fadd 	bl	8001ecc <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003914:	e00a      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fe fad9 	bl	8001ecc <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003924:	4293      	cmp	r3, r2
 8003926:	d901      	bls.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e036      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ee      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003938:	4b1a      	ldr	r3, [pc, #104]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	4917      	ldr	r1, [pc, #92]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	4313      	orrs	r3, r2
 8003948:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d105      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	4a13      	ldr	r2, [pc, #76]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003968:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	490b      	ldr	r1, [pc, #44]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	4313      	orrs	r3, r2
 8003978:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0310 	and.w	r3, r3, #16
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	4313      	orrs	r3, r2
 8003996:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42420440 	.word	0x42420440

080039b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	2300      	movs	r3, #0
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	2300      	movs	r3, #0
 80039ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b10      	cmp	r3, #16
 80039d0:	d00a      	beq.n	80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	f200 808a 	bhi.w	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d045      	beq.n	8003a6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d075      	beq.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80039e6:	e082      	b.n	8003aee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80039e8:	4b46      	ldr	r3, [pc, #280]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80039ee:	4b45      	ldr	r3, [pc, #276]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d07b      	beq.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	0c9b      	lsrs	r3, r3, #18
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	4a41      	ldr	r2, [pc, #260]	@ (8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a12:	4b3c      	ldr	r3, [pc, #240]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	0c5b      	lsrs	r3, r3, #17
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003a1e:	5cd3      	ldrb	r3, [r2, r3]
 8003a20:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00d      	beq.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003a2c:	4a38      	ldr	r2, [pc, #224]	@ (8003b10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4a34      	ldr	r2, [pc, #208]	@ (8003b14 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003a48:	4b2e      	ldr	r3, [pc, #184]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a54:	d102      	bne.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	61bb      	str	r3, [r7, #24]
      break;
 8003a5a:	e04a      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
      break;
 8003a6a:	e042      	b.n	8003af2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003a6c:	4b25      	ldr	r3, [pc, #148]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7c:	d108      	bne.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e01f      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003a9c:	4b19      	ldr	r3, [pc, #100]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003aa8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e00f      	b.n	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aba:	d11c      	bne.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003abc:	4b11      	ldr	r3, [pc, #68]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d016      	beq.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003ac8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003acc:	61bb      	str	r3, [r7, #24]
      break;
 8003ace:	e012      	b.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003ad0:	e011      	b.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003ad2:	f7ff fe85 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	0b9b      	lsrs	r3, r3, #14
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	61bb      	str	r3, [r7, #24]
      break;
 8003aec:	e004      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003af6:	bf00      	nop
    }
  }
  return (frequency);
 8003af8:	69bb      	ldr	r3, [r7, #24]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000
 8003b08:	08007048 	.word	0x08007048
 8003b0c:	08007058 	.word	0x08007058
 8003b10:	007a1200 	.word	0x007a1200
 8003b14:	003d0900 	.word	0x003d0900
 8003b18:	aaaaaaab 	.word	0xaaaaaaab

08003b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe f816 	bl	8001b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fa74 	bl	8004048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d001      	beq.n	8003bd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e03a      	b.n	8003c4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <HAL_TIM_Base_Start_IT+0x98>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00e      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bfe:	d009      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a14      	ldr	r2, [pc, #80]	@ (8003c58 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d004      	beq.n	8003c14 <HAL_TIM_Base_Start_IT+0x58>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <HAL_TIM_Base_Start_IT+0xa0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d111      	bne.n	8003c38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b06      	cmp	r3, #6
 8003c24:	d010      	beq.n	8003c48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c36:	e007      	b.n	8003c48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bc80      	pop	{r7}
 8003c52:	4770      	bx	lr
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	40000400 	.word	0x40000400
 8003c5c:	40000800 	.word	0x40000800

08003c60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0202 	mvn.w	r2, #2
 8003c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f9b4 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9a7 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f9b6 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0204 	mvn.w	r2, #4
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f98a 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f97d 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f98c 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0208 	mvn.w	r2, #8
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2204      	movs	r2, #4
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f960 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f953 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f962 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b10      	cmp	r3, #16
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0210 	mvn.w	r2, #16
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f936 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f929 	bl	8003ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f938 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d10e      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d107      	bne.n	8003de4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0201 	mvn.w	r2, #1
 8003ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fd fbbc 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d10e      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dfc:	2b80      	cmp	r3, #128	@ 0x80
 8003dfe:	d107      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 fa7b 	bl	8004306 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1a:	2b40      	cmp	r3, #64	@ 0x40
 8003e1c:	d10e      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b40      	cmp	r3, #64	@ 0x40
 8003e2a:	d107      	bne.n	8003e3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f8fc 	bl	8004034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b20      	cmp	r3, #32
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d107      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0220 	mvn.w	r2, #32
 8003e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 fa46 	bl	80042f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0b4      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x186>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec4:	d03e      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	f200 8087 	bhi.w	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed2:	f000 8086 	beq.w	8003fe2 <HAL_TIM_ConfigClockSource+0x172>
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d87f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b70      	cmp	r3, #112	@ 0x70
 8003ede:	d01a      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ee0:	2b70      	cmp	r3, #112	@ 0x70
 8003ee2:	d87b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d050      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ee8:	2b60      	cmp	r3, #96	@ 0x60
 8003eea:	d877      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b50      	cmp	r3, #80	@ 0x50
 8003eee:	d03c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xfa>
 8003ef0:	2b50      	cmp	r3, #80	@ 0x50
 8003ef2:	d873      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d058      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x13a>
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d86f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b30      	cmp	r3, #48	@ 0x30
 8003efe:	d064      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b30      	cmp	r3, #48	@ 0x30
 8003f02:	d86b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d060      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d867      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05c      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d05a      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	e062      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f26:	f000 f968 	bl	80041fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]
      break;
 8003f42:	e04f      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f54:	f000 f951 	bl	80041fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f66:	609a      	str	r2, [r3, #8]
      break;
 8003f68:	e03c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 f8c8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2150      	movs	r1, #80	@ 0x50
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 f91f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003f88:	e02c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 f8e6 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2160      	movs	r1, #96	@ 0x60
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 f90f 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e01c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 f8a8 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2140      	movs	r1, #64	@ 0x40
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f8ff 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e00c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 f8f6 	bl	80041c6 <TIM_ITRx_SetConfig>
      break;
 8003fda:	e003      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr
	...

08004048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00b      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004066:	d007      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a26      	ldr	r2, [pc, #152]	@ (8004104 <TIM_Base_SetConfig+0xbc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d003      	beq.n	8004078 <TIM_Base_SetConfig+0x30>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a25      	ldr	r2, [pc, #148]	@ (8004108 <TIM_Base_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800407e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00b      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004098:	d007      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a19      	ldr	r2, [pc, #100]	@ (8004104 <TIM_Base_SetConfig+0xbc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d003      	beq.n	80040aa <TIM_Base_SetConfig+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a18      	ldr	r2, [pc, #96]	@ (8004108 <TIM_Base_SetConfig+0xc0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d108      	bne.n	80040bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a07      	ldr	r2, [pc, #28]	@ (8004100 <TIM_Base_SetConfig+0xb8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d103      	bne.n	80040f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	691a      	ldr	r2, [r3, #16]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	615a      	str	r2, [r3, #20]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	f023 0210 	bic.w	r2, r3, #16
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	621a      	str	r2, [r3, #32]
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr

080041c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f043 0307 	orr.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b087      	sub	sp, #28
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
 8004206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004214:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	021a      	lsls	r2, r3, #8
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4313      	orrs	r3, r2
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	4313      	orrs	r3, r2
 8004226:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800424c:	2302      	movs	r3, #2
 800424e:	e046      	b.n	80042de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a16      	ldr	r2, [pc, #88]	@ (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800429c:	d009      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a12      	ldr	r2, [pc, #72]	@ (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d004      	beq.n	80042b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a10      	ldr	r2, [pc, #64]	@ (80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d10c      	bne.n	80042cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40000400 	.word	0x40000400
 80042f0:	40000800 	.word	0x40000800

080042f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <__cvt>:
 8004318:	2b00      	cmp	r3, #0
 800431a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800431e:	461d      	mov	r5, r3
 8004320:	bfbb      	ittet	lt
 8004322:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004326:	461d      	movlt	r5, r3
 8004328:	2300      	movge	r3, #0
 800432a:	232d      	movlt	r3, #45	@ 0x2d
 800432c:	b088      	sub	sp, #32
 800432e:	4614      	mov	r4, r2
 8004330:	bfb8      	it	lt
 8004332:	4614      	movlt	r4, r2
 8004334:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004336:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004338:	7013      	strb	r3, [r2, #0]
 800433a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800433c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004340:	f023 0820 	bic.w	r8, r3, #32
 8004344:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004348:	d005      	beq.n	8004356 <__cvt+0x3e>
 800434a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800434e:	d100      	bne.n	8004352 <__cvt+0x3a>
 8004350:	3601      	adds	r6, #1
 8004352:	2302      	movs	r3, #2
 8004354:	e000      	b.n	8004358 <__cvt+0x40>
 8004356:	2303      	movs	r3, #3
 8004358:	aa07      	add	r2, sp, #28
 800435a:	9204      	str	r2, [sp, #16]
 800435c:	aa06      	add	r2, sp, #24
 800435e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004362:	e9cd 3600 	strd	r3, r6, [sp]
 8004366:	4622      	mov	r2, r4
 8004368:	462b      	mov	r3, r5
 800436a:	f000 fe6d 	bl	8005048 <_dtoa_r>
 800436e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004372:	4607      	mov	r7, r0
 8004374:	d119      	bne.n	80043aa <__cvt+0x92>
 8004376:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004378:	07db      	lsls	r3, r3, #31
 800437a:	d50e      	bpl.n	800439a <__cvt+0x82>
 800437c:	eb00 0906 	add.w	r9, r0, r6
 8004380:	2200      	movs	r2, #0
 8004382:	2300      	movs	r3, #0
 8004384:	4620      	mov	r0, r4
 8004386:	4629      	mov	r1, r5
 8004388:	f7fc fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800438c:	b108      	cbz	r0, 8004392 <__cvt+0x7a>
 800438e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004392:	2230      	movs	r2, #48	@ 0x30
 8004394:	9b07      	ldr	r3, [sp, #28]
 8004396:	454b      	cmp	r3, r9
 8004398:	d31e      	bcc.n	80043d8 <__cvt+0xc0>
 800439a:	4638      	mov	r0, r7
 800439c:	9b07      	ldr	r3, [sp, #28]
 800439e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80043a0:	1bdb      	subs	r3, r3, r7
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	b008      	add	sp, #32
 80043a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80043ae:	eb00 0906 	add.w	r9, r0, r6
 80043b2:	d1e5      	bne.n	8004380 <__cvt+0x68>
 80043b4:	7803      	ldrb	r3, [r0, #0]
 80043b6:	2b30      	cmp	r3, #48	@ 0x30
 80043b8:	d10a      	bne.n	80043d0 <__cvt+0xb8>
 80043ba:	2200      	movs	r2, #0
 80043bc:	2300      	movs	r3, #0
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f7fc faf1 	bl	80009a8 <__aeabi_dcmpeq>
 80043c6:	b918      	cbnz	r0, 80043d0 <__cvt+0xb8>
 80043c8:	f1c6 0601 	rsb	r6, r6, #1
 80043cc:	f8ca 6000 	str.w	r6, [sl]
 80043d0:	f8da 3000 	ldr.w	r3, [sl]
 80043d4:	4499      	add	r9, r3
 80043d6:	e7d3      	b.n	8004380 <__cvt+0x68>
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	9107      	str	r1, [sp, #28]
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e7d9      	b.n	8004394 <__cvt+0x7c>

080043e0 <__exponent>:
 80043e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043e2:	2900      	cmp	r1, #0
 80043e4:	bfb6      	itet	lt
 80043e6:	232d      	movlt	r3, #45	@ 0x2d
 80043e8:	232b      	movge	r3, #43	@ 0x2b
 80043ea:	4249      	neglt	r1, r1
 80043ec:	2909      	cmp	r1, #9
 80043ee:	7002      	strb	r2, [r0, #0]
 80043f0:	7043      	strb	r3, [r0, #1]
 80043f2:	dd29      	ble.n	8004448 <__exponent+0x68>
 80043f4:	f10d 0307 	add.w	r3, sp, #7
 80043f8:	461d      	mov	r5, r3
 80043fa:	270a      	movs	r7, #10
 80043fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8004400:	461a      	mov	r2, r3
 8004402:	fb07 1416 	mls	r4, r7, r6, r1
 8004406:	3430      	adds	r4, #48	@ 0x30
 8004408:	f802 4c01 	strb.w	r4, [r2, #-1]
 800440c:	460c      	mov	r4, r1
 800440e:	2c63      	cmp	r4, #99	@ 0x63
 8004410:	4631      	mov	r1, r6
 8004412:	f103 33ff 	add.w	r3, r3, #4294967295
 8004416:	dcf1      	bgt.n	80043fc <__exponent+0x1c>
 8004418:	3130      	adds	r1, #48	@ 0x30
 800441a:	1e94      	subs	r4, r2, #2
 800441c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004420:	4623      	mov	r3, r4
 8004422:	1c41      	adds	r1, r0, #1
 8004424:	42ab      	cmp	r3, r5
 8004426:	d30a      	bcc.n	800443e <__exponent+0x5e>
 8004428:	f10d 0309 	add.w	r3, sp, #9
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	42ac      	cmp	r4, r5
 8004430:	bf88      	it	hi
 8004432:	2300      	movhi	r3, #0
 8004434:	3302      	adds	r3, #2
 8004436:	4403      	add	r3, r0
 8004438:	1a18      	subs	r0, r3, r0
 800443a:	b003      	add	sp, #12
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004442:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004446:	e7ed      	b.n	8004424 <__exponent+0x44>
 8004448:	2330      	movs	r3, #48	@ 0x30
 800444a:	3130      	adds	r1, #48	@ 0x30
 800444c:	7083      	strb	r3, [r0, #2]
 800444e:	70c1      	strb	r1, [r0, #3]
 8004450:	1d03      	adds	r3, r0, #4
 8004452:	e7f1      	b.n	8004438 <__exponent+0x58>

08004454 <_printf_float>:
 8004454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	b091      	sub	sp, #68	@ 0x44
 800445a:	460c      	mov	r4, r1
 800445c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004460:	4616      	mov	r6, r2
 8004462:	461f      	mov	r7, r3
 8004464:	4605      	mov	r5, r0
 8004466:	f000 fce1 	bl	8004e2c <_localeconv_r>
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	9308      	str	r3, [sp, #32]
 8004470:	f7fb fe6e 	bl	8000150 <strlen>
 8004474:	2300      	movs	r3, #0
 8004476:	930e      	str	r3, [sp, #56]	@ 0x38
 8004478:	f8d8 3000 	ldr.w	r3, [r8]
 800447c:	9009      	str	r0, [sp, #36]	@ 0x24
 800447e:	3307      	adds	r3, #7
 8004480:	f023 0307 	bic.w	r3, r3, #7
 8004484:	f103 0208 	add.w	r2, r3, #8
 8004488:	f894 a018 	ldrb.w	sl, [r4, #24]
 800448c:	f8d4 b000 	ldr.w	fp, [r4]
 8004490:	f8c8 2000 	str.w	r2, [r8]
 8004494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004498:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800449c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800449e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80044ae:	4b9c      	ldr	r3, [pc, #624]	@ (8004720 <_printf_float+0x2cc>)
 80044b0:	f7fc faac 	bl	8000a0c <__aeabi_dcmpun>
 80044b4:	bb70      	cbnz	r0, 8004514 <_printf_float+0xc0>
 80044b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295
 80044be:	4b98      	ldr	r3, [pc, #608]	@ (8004720 <_printf_float+0x2cc>)
 80044c0:	f7fc fa86 	bl	80009d0 <__aeabi_dcmple>
 80044c4:	bb30      	cbnz	r0, 8004514 <_printf_float+0xc0>
 80044c6:	2200      	movs	r2, #0
 80044c8:	2300      	movs	r3, #0
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fc fa75 	bl	80009bc <__aeabi_dcmplt>
 80044d2:	b110      	cbz	r0, 80044da <_printf_float+0x86>
 80044d4:	232d      	movs	r3, #45	@ 0x2d
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044da:	4a92      	ldr	r2, [pc, #584]	@ (8004724 <_printf_float+0x2d0>)
 80044dc:	4b92      	ldr	r3, [pc, #584]	@ (8004728 <_printf_float+0x2d4>)
 80044de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80044e2:	bf94      	ite	ls
 80044e4:	4690      	movls	r8, r2
 80044e6:	4698      	movhi	r8, r3
 80044e8:	2303      	movs	r3, #3
 80044ea:	f04f 0900 	mov.w	r9, #0
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	f02b 0304 	bic.w	r3, fp, #4
 80044f4:	6023      	str	r3, [r4, #0]
 80044f6:	4633      	mov	r3, r6
 80044f8:	4621      	mov	r1, r4
 80044fa:	4628      	mov	r0, r5
 80044fc:	9700      	str	r7, [sp, #0]
 80044fe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004500:	f000 f9d4 	bl	80048ac <_printf_common>
 8004504:	3001      	adds	r0, #1
 8004506:	f040 8090 	bne.w	800462a <_printf_float+0x1d6>
 800450a:	f04f 30ff 	mov.w	r0, #4294967295
 800450e:	b011      	add	sp, #68	@ 0x44
 8004510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004514:	4642      	mov	r2, r8
 8004516:	464b      	mov	r3, r9
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fc fa76 	bl	8000a0c <__aeabi_dcmpun>
 8004520:	b148      	cbz	r0, 8004536 <_printf_float+0xe2>
 8004522:	464b      	mov	r3, r9
 8004524:	2b00      	cmp	r3, #0
 8004526:	bfb8      	it	lt
 8004528:	232d      	movlt	r3, #45	@ 0x2d
 800452a:	4a80      	ldr	r2, [pc, #512]	@ (800472c <_printf_float+0x2d8>)
 800452c:	bfb8      	it	lt
 800452e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004532:	4b7f      	ldr	r3, [pc, #508]	@ (8004730 <_printf_float+0x2dc>)
 8004534:	e7d3      	b.n	80044de <_printf_float+0x8a>
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	d13f      	bne.n	80045c0 <_printf_float+0x16c>
 8004540:	2306      	movs	r3, #6
 8004542:	6063      	str	r3, [r4, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	9206      	str	r2, [sp, #24]
 800454e:	aa0e      	add	r2, sp, #56	@ 0x38
 8004550:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004554:	aa0d      	add	r2, sp, #52	@ 0x34
 8004556:	9203      	str	r2, [sp, #12]
 8004558:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800455c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	4642      	mov	r2, r8
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	4628      	mov	r0, r5
 8004568:	464b      	mov	r3, r9
 800456a:	910a      	str	r1, [sp, #40]	@ 0x28
 800456c:	f7ff fed4 	bl	8004318 <__cvt>
 8004570:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004572:	4680      	mov	r8, r0
 8004574:	2947      	cmp	r1, #71	@ 0x47
 8004576:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004578:	d128      	bne.n	80045cc <_printf_float+0x178>
 800457a:	1cc8      	adds	r0, r1, #3
 800457c:	db02      	blt.n	8004584 <_printf_float+0x130>
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	4299      	cmp	r1, r3
 8004582:	dd40      	ble.n	8004606 <_printf_float+0x1b2>
 8004584:	f1aa 0a02 	sub.w	sl, sl, #2
 8004588:	fa5f fa8a 	uxtb.w	sl, sl
 800458c:	4652      	mov	r2, sl
 800458e:	3901      	subs	r1, #1
 8004590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004594:	910d      	str	r1, [sp, #52]	@ 0x34
 8004596:	f7ff ff23 	bl	80043e0 <__exponent>
 800459a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800459c:	4681      	mov	r9, r0
 800459e:	1813      	adds	r3, r2, r0
 80045a0:	2a01      	cmp	r2, #1
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	dc02      	bgt.n	80045ac <_printf_float+0x158>
 80045a6:	6822      	ldr	r2, [r4, #0]
 80045a8:	07d2      	lsls	r2, r2, #31
 80045aa:	d501      	bpl.n	80045b0 <_printf_float+0x15c>
 80045ac:	3301      	adds	r3, #1
 80045ae:	6123      	str	r3, [r4, #16]
 80045b0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d09e      	beq.n	80044f6 <_printf_float+0xa2>
 80045b8:	232d      	movs	r3, #45	@ 0x2d
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045be:	e79a      	b.n	80044f6 <_printf_float+0xa2>
 80045c0:	2947      	cmp	r1, #71	@ 0x47
 80045c2:	d1bf      	bne.n	8004544 <_printf_float+0xf0>
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1bd      	bne.n	8004544 <_printf_float+0xf0>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e7ba      	b.n	8004542 <_printf_float+0xee>
 80045cc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80045d0:	d9dc      	bls.n	800458c <_printf_float+0x138>
 80045d2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80045d6:	d118      	bne.n	800460a <_printf_float+0x1b6>
 80045d8:	2900      	cmp	r1, #0
 80045da:	6863      	ldr	r3, [r4, #4]
 80045dc:	dd0b      	ble.n	80045f6 <_printf_float+0x1a2>
 80045de:	6121      	str	r1, [r4, #16]
 80045e0:	b913      	cbnz	r3, 80045e8 <_printf_float+0x194>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	07d0      	lsls	r0, r2, #31
 80045e6:	d502      	bpl.n	80045ee <_printf_float+0x19a>
 80045e8:	3301      	adds	r3, #1
 80045ea:	440b      	add	r3, r1
 80045ec:	6123      	str	r3, [r4, #16]
 80045ee:	f04f 0900 	mov.w	r9, #0
 80045f2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80045f4:	e7dc      	b.n	80045b0 <_printf_float+0x15c>
 80045f6:	b913      	cbnz	r3, 80045fe <_printf_float+0x1aa>
 80045f8:	6822      	ldr	r2, [r4, #0]
 80045fa:	07d2      	lsls	r2, r2, #31
 80045fc:	d501      	bpl.n	8004602 <_printf_float+0x1ae>
 80045fe:	3302      	adds	r3, #2
 8004600:	e7f4      	b.n	80045ec <_printf_float+0x198>
 8004602:	2301      	movs	r3, #1
 8004604:	e7f2      	b.n	80045ec <_printf_float+0x198>
 8004606:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800460a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800460c:	4299      	cmp	r1, r3
 800460e:	db05      	blt.n	800461c <_printf_float+0x1c8>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	6121      	str	r1, [r4, #16]
 8004614:	07d8      	lsls	r0, r3, #31
 8004616:	d5ea      	bpl.n	80045ee <_printf_float+0x19a>
 8004618:	1c4b      	adds	r3, r1, #1
 800461a:	e7e7      	b.n	80045ec <_printf_float+0x198>
 800461c:	2900      	cmp	r1, #0
 800461e:	bfcc      	ite	gt
 8004620:	2201      	movgt	r2, #1
 8004622:	f1c1 0202 	rsble	r2, r1, #2
 8004626:	4413      	add	r3, r2
 8004628:	e7e0      	b.n	80045ec <_printf_float+0x198>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	055a      	lsls	r2, r3, #21
 800462e:	d407      	bmi.n	8004640 <_printf_float+0x1ec>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	4642      	mov	r2, r8
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	d12b      	bne.n	8004696 <_printf_float+0x242>
 800463e:	e764      	b.n	800450a <_printf_float+0xb6>
 8004640:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004644:	f240 80dc 	bls.w	8004800 <_printf_float+0x3ac>
 8004648:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800464c:	2200      	movs	r2, #0
 800464e:	2300      	movs	r3, #0
 8004650:	f7fc f9aa 	bl	80009a8 <__aeabi_dcmpeq>
 8004654:	2800      	cmp	r0, #0
 8004656:	d033      	beq.n	80046c0 <_printf_float+0x26c>
 8004658:	2301      	movs	r3, #1
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	4a35      	ldr	r2, [pc, #212]	@ (8004734 <_printf_float+0x2e0>)
 8004660:	47b8      	blx	r7
 8004662:	3001      	adds	r0, #1
 8004664:	f43f af51 	beq.w	800450a <_printf_float+0xb6>
 8004668:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800466c:	4543      	cmp	r3, r8
 800466e:	db02      	blt.n	8004676 <_printf_float+0x222>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07d8      	lsls	r0, r3, #31
 8004674:	d50f      	bpl.n	8004696 <_printf_float+0x242>
 8004676:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800467a:	4631      	mov	r1, r6
 800467c:	4628      	mov	r0, r5
 800467e:	47b8      	blx	r7
 8004680:	3001      	adds	r0, #1
 8004682:	f43f af42 	beq.w	800450a <_printf_float+0xb6>
 8004686:	f04f 0900 	mov.w	r9, #0
 800468a:	f108 38ff 	add.w	r8, r8, #4294967295
 800468e:	f104 0a1a 	add.w	sl, r4, #26
 8004692:	45c8      	cmp	r8, r9
 8004694:	dc09      	bgt.n	80046aa <_printf_float+0x256>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	079b      	lsls	r3, r3, #30
 800469a:	f100 8102 	bmi.w	80048a2 <_printf_float+0x44e>
 800469e:	68e0      	ldr	r0, [r4, #12]
 80046a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80046a2:	4298      	cmp	r0, r3
 80046a4:	bfb8      	it	lt
 80046a6:	4618      	movlt	r0, r3
 80046a8:	e731      	b.n	800450e <_printf_float+0xba>
 80046aa:	2301      	movs	r3, #1
 80046ac:	4652      	mov	r2, sl
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f af28 	beq.w	800450a <_printf_float+0xb6>
 80046ba:	f109 0901 	add.w	r9, r9, #1
 80046be:	e7e8      	b.n	8004692 <_printf_float+0x23e>
 80046c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	dc38      	bgt.n	8004738 <_printf_float+0x2e4>
 80046c6:	2301      	movs	r3, #1
 80046c8:	4631      	mov	r1, r6
 80046ca:	4628      	mov	r0, r5
 80046cc:	4a19      	ldr	r2, [pc, #100]	@ (8004734 <_printf_float+0x2e0>)
 80046ce:	47b8      	blx	r7
 80046d0:	3001      	adds	r0, #1
 80046d2:	f43f af1a 	beq.w	800450a <_printf_float+0xb6>
 80046d6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80046da:	ea59 0303 	orrs.w	r3, r9, r3
 80046de:	d102      	bne.n	80046e6 <_printf_float+0x292>
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	07d9      	lsls	r1, r3, #31
 80046e4:	d5d7      	bpl.n	8004696 <_printf_float+0x242>
 80046e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046ea:	4631      	mov	r1, r6
 80046ec:	4628      	mov	r0, r5
 80046ee:	47b8      	blx	r7
 80046f0:	3001      	adds	r0, #1
 80046f2:	f43f af0a 	beq.w	800450a <_printf_float+0xb6>
 80046f6:	f04f 0a00 	mov.w	sl, #0
 80046fa:	f104 0b1a 	add.w	fp, r4, #26
 80046fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004700:	425b      	negs	r3, r3
 8004702:	4553      	cmp	r3, sl
 8004704:	dc01      	bgt.n	800470a <_printf_float+0x2b6>
 8004706:	464b      	mov	r3, r9
 8004708:	e793      	b.n	8004632 <_printf_float+0x1de>
 800470a:	2301      	movs	r3, #1
 800470c:	465a      	mov	r2, fp
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	f43f aef8 	beq.w	800450a <_printf_float+0xb6>
 800471a:	f10a 0a01 	add.w	sl, sl, #1
 800471e:	e7ee      	b.n	80046fe <_printf_float+0x2aa>
 8004720:	7fefffff 	.word	0x7fefffff
 8004724:	0800705a 	.word	0x0800705a
 8004728:	0800705e 	.word	0x0800705e
 800472c:	08007062 	.word	0x08007062
 8004730:	08007066 	.word	0x08007066
 8004734:	0800706a 	.word	0x0800706a
 8004738:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800473a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800473e:	4553      	cmp	r3, sl
 8004740:	bfa8      	it	ge
 8004742:	4653      	movge	r3, sl
 8004744:	2b00      	cmp	r3, #0
 8004746:	4699      	mov	r9, r3
 8004748:	dc36      	bgt.n	80047b8 <_printf_float+0x364>
 800474a:	f04f 0b00 	mov.w	fp, #0
 800474e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004752:	f104 021a 	add.w	r2, r4, #26
 8004756:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004758:	930a      	str	r3, [sp, #40]	@ 0x28
 800475a:	eba3 0309 	sub.w	r3, r3, r9
 800475e:	455b      	cmp	r3, fp
 8004760:	dc31      	bgt.n	80047c6 <_printf_float+0x372>
 8004762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004764:	459a      	cmp	sl, r3
 8004766:	dc3a      	bgt.n	80047de <_printf_float+0x38a>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	07da      	lsls	r2, r3, #31
 800476c:	d437      	bmi.n	80047de <_printf_float+0x38a>
 800476e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004770:	ebaa 0903 	sub.w	r9, sl, r3
 8004774:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004776:	ebaa 0303 	sub.w	r3, sl, r3
 800477a:	4599      	cmp	r9, r3
 800477c:	bfa8      	it	ge
 800477e:	4699      	movge	r9, r3
 8004780:	f1b9 0f00 	cmp.w	r9, #0
 8004784:	dc33      	bgt.n	80047ee <_printf_float+0x39a>
 8004786:	f04f 0800 	mov.w	r8, #0
 800478a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800478e:	f104 0b1a 	add.w	fp, r4, #26
 8004792:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004794:	ebaa 0303 	sub.w	r3, sl, r3
 8004798:	eba3 0309 	sub.w	r3, r3, r9
 800479c:	4543      	cmp	r3, r8
 800479e:	f77f af7a 	ble.w	8004696 <_printf_float+0x242>
 80047a2:	2301      	movs	r3, #1
 80047a4:	465a      	mov	r2, fp
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f aeac 	beq.w	800450a <_printf_float+0xb6>
 80047b2:	f108 0801 	add.w	r8, r8, #1
 80047b6:	e7ec      	b.n	8004792 <_printf_float+0x33e>
 80047b8:	4642      	mov	r2, r8
 80047ba:	4631      	mov	r1, r6
 80047bc:	4628      	mov	r0, r5
 80047be:	47b8      	blx	r7
 80047c0:	3001      	adds	r0, #1
 80047c2:	d1c2      	bne.n	800474a <_printf_float+0x2f6>
 80047c4:	e6a1      	b.n	800450a <_printf_float+0xb6>
 80047c6:	2301      	movs	r3, #1
 80047c8:	4631      	mov	r1, r6
 80047ca:	4628      	mov	r0, r5
 80047cc:	920a      	str	r2, [sp, #40]	@ 0x28
 80047ce:	47b8      	blx	r7
 80047d0:	3001      	adds	r0, #1
 80047d2:	f43f ae9a 	beq.w	800450a <_printf_float+0xb6>
 80047d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047d8:	f10b 0b01 	add.w	fp, fp, #1
 80047dc:	e7bb      	b.n	8004756 <_printf_float+0x302>
 80047de:	4631      	mov	r1, r6
 80047e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1c0      	bne.n	800476e <_printf_float+0x31a>
 80047ec:	e68d      	b.n	800450a <_printf_float+0xb6>
 80047ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80047f0:	464b      	mov	r3, r9
 80047f2:	4631      	mov	r1, r6
 80047f4:	4628      	mov	r0, r5
 80047f6:	4442      	add	r2, r8
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	d1c3      	bne.n	8004786 <_printf_float+0x332>
 80047fe:	e684      	b.n	800450a <_printf_float+0xb6>
 8004800:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004804:	f1ba 0f01 	cmp.w	sl, #1
 8004808:	dc01      	bgt.n	800480e <_printf_float+0x3ba>
 800480a:	07db      	lsls	r3, r3, #31
 800480c:	d536      	bpl.n	800487c <_printf_float+0x428>
 800480e:	2301      	movs	r3, #1
 8004810:	4642      	mov	r2, r8
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	f43f ae76 	beq.w	800450a <_printf_float+0xb6>
 800481e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae6e 	beq.w	800450a <_printf_float+0xb6>
 800482e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004832:	2200      	movs	r2, #0
 8004834:	2300      	movs	r3, #0
 8004836:	f10a 3aff 	add.w	sl, sl, #4294967295
 800483a:	f7fc f8b5 	bl	80009a8 <__aeabi_dcmpeq>
 800483e:	b9c0      	cbnz	r0, 8004872 <_printf_float+0x41e>
 8004840:	4653      	mov	r3, sl
 8004842:	f108 0201 	add.w	r2, r8, #1
 8004846:	4631      	mov	r1, r6
 8004848:	4628      	mov	r0, r5
 800484a:	47b8      	blx	r7
 800484c:	3001      	adds	r0, #1
 800484e:	d10c      	bne.n	800486a <_printf_float+0x416>
 8004850:	e65b      	b.n	800450a <_printf_float+0xb6>
 8004852:	2301      	movs	r3, #1
 8004854:	465a      	mov	r2, fp
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f ae54 	beq.w	800450a <_printf_float+0xb6>
 8004862:	f108 0801 	add.w	r8, r8, #1
 8004866:	45d0      	cmp	r8, sl
 8004868:	dbf3      	blt.n	8004852 <_printf_float+0x3fe>
 800486a:	464b      	mov	r3, r9
 800486c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004870:	e6e0      	b.n	8004634 <_printf_float+0x1e0>
 8004872:	f04f 0800 	mov.w	r8, #0
 8004876:	f104 0b1a 	add.w	fp, r4, #26
 800487a:	e7f4      	b.n	8004866 <_printf_float+0x412>
 800487c:	2301      	movs	r3, #1
 800487e:	4642      	mov	r2, r8
 8004880:	e7e1      	b.n	8004846 <_printf_float+0x3f2>
 8004882:	2301      	movs	r3, #1
 8004884:	464a      	mov	r2, r9
 8004886:	4631      	mov	r1, r6
 8004888:	4628      	mov	r0, r5
 800488a:	47b8      	blx	r7
 800488c:	3001      	adds	r0, #1
 800488e:	f43f ae3c 	beq.w	800450a <_printf_float+0xb6>
 8004892:	f108 0801 	add.w	r8, r8, #1
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800489a:	1a5b      	subs	r3, r3, r1
 800489c:	4543      	cmp	r3, r8
 800489e:	dcf0      	bgt.n	8004882 <_printf_float+0x42e>
 80048a0:	e6fd      	b.n	800469e <_printf_float+0x24a>
 80048a2:	f04f 0800 	mov.w	r8, #0
 80048a6:	f104 0919 	add.w	r9, r4, #25
 80048aa:	e7f4      	b.n	8004896 <_printf_float+0x442>

080048ac <_printf_common>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	4616      	mov	r6, r2
 80048b2:	4698      	mov	r8, r3
 80048b4:	688a      	ldr	r2, [r1, #8]
 80048b6:	690b      	ldr	r3, [r1, #16]
 80048b8:	4607      	mov	r7, r0
 80048ba:	4293      	cmp	r3, r2
 80048bc:	bfb8      	it	lt
 80048be:	4613      	movlt	r3, r2
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048c6:	460c      	mov	r4, r1
 80048c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048cc:	b10a      	cbz	r2, 80048d2 <_printf_common+0x26>
 80048ce:	3301      	adds	r3, #1
 80048d0:	6033      	str	r3, [r6, #0]
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	0699      	lsls	r1, r3, #26
 80048d6:	bf42      	ittt	mi
 80048d8:	6833      	ldrmi	r3, [r6, #0]
 80048da:	3302      	addmi	r3, #2
 80048dc:	6033      	strmi	r3, [r6, #0]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	f015 0506 	ands.w	r5, r5, #6
 80048e4:	d106      	bne.n	80048f4 <_printf_common+0x48>
 80048e6:	f104 0a19 	add.w	sl, r4, #25
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	6832      	ldr	r2, [r6, #0]
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	42ab      	cmp	r3, r5
 80048f2:	dc2b      	bgt.n	800494c <_printf_common+0xa0>
 80048f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048f8:	6822      	ldr	r2, [r4, #0]
 80048fa:	3b00      	subs	r3, #0
 80048fc:	bf18      	it	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	0692      	lsls	r2, r2, #26
 8004902:	d430      	bmi.n	8004966 <_printf_common+0xba>
 8004904:	4641      	mov	r1, r8
 8004906:	4638      	mov	r0, r7
 8004908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800490c:	47c8      	blx	r9
 800490e:	3001      	adds	r0, #1
 8004910:	d023      	beq.n	800495a <_printf_common+0xae>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	6922      	ldr	r2, [r4, #16]
 8004916:	f003 0306 	and.w	r3, r3, #6
 800491a:	2b04      	cmp	r3, #4
 800491c:	bf14      	ite	ne
 800491e:	2500      	movne	r5, #0
 8004920:	6833      	ldreq	r3, [r6, #0]
 8004922:	f04f 0600 	mov.w	r6, #0
 8004926:	bf08      	it	eq
 8004928:	68e5      	ldreq	r5, [r4, #12]
 800492a:	f104 041a 	add.w	r4, r4, #26
 800492e:	bf08      	it	eq
 8004930:	1aed      	subeq	r5, r5, r3
 8004932:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004936:	bf08      	it	eq
 8004938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800493c:	4293      	cmp	r3, r2
 800493e:	bfc4      	itt	gt
 8004940:	1a9b      	subgt	r3, r3, r2
 8004942:	18ed      	addgt	r5, r5, r3
 8004944:	42b5      	cmp	r5, r6
 8004946:	d11a      	bne.n	800497e <_printf_common+0xd2>
 8004948:	2000      	movs	r0, #0
 800494a:	e008      	b.n	800495e <_printf_common+0xb2>
 800494c:	2301      	movs	r3, #1
 800494e:	4652      	mov	r2, sl
 8004950:	4641      	mov	r1, r8
 8004952:	4638      	mov	r0, r7
 8004954:	47c8      	blx	r9
 8004956:	3001      	adds	r0, #1
 8004958:	d103      	bne.n	8004962 <_printf_common+0xb6>
 800495a:	f04f 30ff 	mov.w	r0, #4294967295
 800495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004962:	3501      	adds	r5, #1
 8004964:	e7c1      	b.n	80048ea <_printf_common+0x3e>
 8004966:	2030      	movs	r0, #48	@ 0x30
 8004968:	18e1      	adds	r1, r4, r3
 800496a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004974:	4422      	add	r2, r4
 8004976:	3302      	adds	r3, #2
 8004978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800497c:	e7c2      	b.n	8004904 <_printf_common+0x58>
 800497e:	2301      	movs	r3, #1
 8004980:	4622      	mov	r2, r4
 8004982:	4641      	mov	r1, r8
 8004984:	4638      	mov	r0, r7
 8004986:	47c8      	blx	r9
 8004988:	3001      	adds	r0, #1
 800498a:	d0e6      	beq.n	800495a <_printf_common+0xae>
 800498c:	3601      	adds	r6, #1
 800498e:	e7d9      	b.n	8004944 <_printf_common+0x98>

08004990 <_printf_i>:
 8004990:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	7e0f      	ldrb	r7, [r1, #24]
 8004996:	4691      	mov	r9, r2
 8004998:	2f78      	cmp	r7, #120	@ 0x78
 800499a:	4680      	mov	r8, r0
 800499c:	460c      	mov	r4, r1
 800499e:	469a      	mov	sl, r3
 80049a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049a6:	d807      	bhi.n	80049b8 <_printf_i+0x28>
 80049a8:	2f62      	cmp	r7, #98	@ 0x62
 80049aa:	d80a      	bhi.n	80049c2 <_printf_i+0x32>
 80049ac:	2f00      	cmp	r7, #0
 80049ae:	f000 80d3 	beq.w	8004b58 <_printf_i+0x1c8>
 80049b2:	2f58      	cmp	r7, #88	@ 0x58
 80049b4:	f000 80ba 	beq.w	8004b2c <_printf_i+0x19c>
 80049b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049c0:	e03a      	b.n	8004a38 <_printf_i+0xa8>
 80049c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049c6:	2b15      	cmp	r3, #21
 80049c8:	d8f6      	bhi.n	80049b8 <_printf_i+0x28>
 80049ca:	a101      	add	r1, pc, #4	@ (adr r1, 80049d0 <_printf_i+0x40>)
 80049cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049d0:	08004a29 	.word	0x08004a29
 80049d4:	08004a3d 	.word	0x08004a3d
 80049d8:	080049b9 	.word	0x080049b9
 80049dc:	080049b9 	.word	0x080049b9
 80049e0:	080049b9 	.word	0x080049b9
 80049e4:	080049b9 	.word	0x080049b9
 80049e8:	08004a3d 	.word	0x08004a3d
 80049ec:	080049b9 	.word	0x080049b9
 80049f0:	080049b9 	.word	0x080049b9
 80049f4:	080049b9 	.word	0x080049b9
 80049f8:	080049b9 	.word	0x080049b9
 80049fc:	08004b3f 	.word	0x08004b3f
 8004a00:	08004a67 	.word	0x08004a67
 8004a04:	08004af9 	.word	0x08004af9
 8004a08:	080049b9 	.word	0x080049b9
 8004a0c:	080049b9 	.word	0x080049b9
 8004a10:	08004b61 	.word	0x08004b61
 8004a14:	080049b9 	.word	0x080049b9
 8004a18:	08004a67 	.word	0x08004a67
 8004a1c:	080049b9 	.word	0x080049b9
 8004a20:	080049b9 	.word	0x080049b9
 8004a24:	08004b01 	.word	0x08004b01
 8004a28:	6833      	ldr	r3, [r6, #0]
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6032      	str	r2, [r6, #0]
 8004a30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e09e      	b.n	8004b7a <_printf_i+0x1ea>
 8004a3c:	6833      	ldr	r3, [r6, #0]
 8004a3e:	6820      	ldr	r0, [r4, #0]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	6031      	str	r1, [r6, #0]
 8004a44:	0606      	lsls	r6, r0, #24
 8004a46:	d501      	bpl.n	8004a4c <_printf_i+0xbc>
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	e003      	b.n	8004a54 <_printf_i+0xc4>
 8004a4c:	0645      	lsls	r5, r0, #25
 8004a4e:	d5fb      	bpl.n	8004a48 <_printf_i+0xb8>
 8004a50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a54:	2d00      	cmp	r5, #0
 8004a56:	da03      	bge.n	8004a60 <_printf_i+0xd0>
 8004a58:	232d      	movs	r3, #45	@ 0x2d
 8004a5a:	426d      	negs	r5, r5
 8004a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a60:	230a      	movs	r3, #10
 8004a62:	4859      	ldr	r0, [pc, #356]	@ (8004bc8 <_printf_i+0x238>)
 8004a64:	e011      	b.n	8004a8a <_printf_i+0xfa>
 8004a66:	6821      	ldr	r1, [r4, #0]
 8004a68:	6833      	ldr	r3, [r6, #0]
 8004a6a:	0608      	lsls	r0, r1, #24
 8004a6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a70:	d402      	bmi.n	8004a78 <_printf_i+0xe8>
 8004a72:	0649      	lsls	r1, r1, #25
 8004a74:	bf48      	it	mi
 8004a76:	b2ad      	uxthmi	r5, r5
 8004a78:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a7a:	6033      	str	r3, [r6, #0]
 8004a7c:	bf14      	ite	ne
 8004a7e:	230a      	movne	r3, #10
 8004a80:	2308      	moveq	r3, #8
 8004a82:	4851      	ldr	r0, [pc, #324]	@ (8004bc8 <_printf_i+0x238>)
 8004a84:	2100      	movs	r1, #0
 8004a86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a8a:	6866      	ldr	r6, [r4, #4]
 8004a8c:	2e00      	cmp	r6, #0
 8004a8e:	bfa8      	it	ge
 8004a90:	6821      	ldrge	r1, [r4, #0]
 8004a92:	60a6      	str	r6, [r4, #8]
 8004a94:	bfa4      	itt	ge
 8004a96:	f021 0104 	bicge.w	r1, r1, #4
 8004a9a:	6021      	strge	r1, [r4, #0]
 8004a9c:	b90d      	cbnz	r5, 8004aa2 <_printf_i+0x112>
 8004a9e:	2e00      	cmp	r6, #0
 8004aa0:	d04b      	beq.n	8004b3a <_printf_i+0x1aa>
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004aa8:	fb03 5711 	mls	r7, r3, r1, r5
 8004aac:	5dc7      	ldrb	r7, [r0, r7]
 8004aae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ab2:	462f      	mov	r7, r5
 8004ab4:	42bb      	cmp	r3, r7
 8004ab6:	460d      	mov	r5, r1
 8004ab8:	d9f4      	bls.n	8004aa4 <_printf_i+0x114>
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d10b      	bne.n	8004ad6 <_printf_i+0x146>
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	07df      	lsls	r7, r3, #31
 8004ac2:	d508      	bpl.n	8004ad6 <_printf_i+0x146>
 8004ac4:	6923      	ldr	r3, [r4, #16]
 8004ac6:	6861      	ldr	r1, [r4, #4]
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	bfde      	ittt	le
 8004acc:	2330      	movle	r3, #48	@ 0x30
 8004ace:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ad2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ad6:	1b92      	subs	r2, r2, r6
 8004ad8:	6122      	str	r2, [r4, #16]
 8004ada:	464b      	mov	r3, r9
 8004adc:	4621      	mov	r1, r4
 8004ade:	4640      	mov	r0, r8
 8004ae0:	f8cd a000 	str.w	sl, [sp]
 8004ae4:	aa03      	add	r2, sp, #12
 8004ae6:	f7ff fee1 	bl	80048ac <_printf_common>
 8004aea:	3001      	adds	r0, #1
 8004aec:	d14a      	bne.n	8004b84 <_printf_i+0x1f4>
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295
 8004af2:	b004      	add	sp, #16
 8004af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	f043 0320 	orr.w	r3, r3, #32
 8004afe:	6023      	str	r3, [r4, #0]
 8004b00:	2778      	movs	r7, #120	@ 0x78
 8004b02:	4832      	ldr	r0, [pc, #200]	@ (8004bcc <_printf_i+0x23c>)
 8004b04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	6831      	ldr	r1, [r6, #0]
 8004b0c:	061f      	lsls	r7, r3, #24
 8004b0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b12:	d402      	bmi.n	8004b1a <_printf_i+0x18a>
 8004b14:	065f      	lsls	r7, r3, #25
 8004b16:	bf48      	it	mi
 8004b18:	b2ad      	uxthmi	r5, r5
 8004b1a:	6031      	str	r1, [r6, #0]
 8004b1c:	07d9      	lsls	r1, r3, #31
 8004b1e:	bf44      	itt	mi
 8004b20:	f043 0320 	orrmi.w	r3, r3, #32
 8004b24:	6023      	strmi	r3, [r4, #0]
 8004b26:	b11d      	cbz	r5, 8004b30 <_printf_i+0x1a0>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	e7ab      	b.n	8004a84 <_printf_i+0xf4>
 8004b2c:	4826      	ldr	r0, [pc, #152]	@ (8004bc8 <_printf_i+0x238>)
 8004b2e:	e7e9      	b.n	8004b04 <_printf_i+0x174>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	f023 0320 	bic.w	r3, r3, #32
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	e7f6      	b.n	8004b28 <_printf_i+0x198>
 8004b3a:	4616      	mov	r6, r2
 8004b3c:	e7bd      	b.n	8004aba <_printf_i+0x12a>
 8004b3e:	6833      	ldr	r3, [r6, #0]
 8004b40:	6825      	ldr	r5, [r4, #0]
 8004b42:	1d18      	adds	r0, r3, #4
 8004b44:	6961      	ldr	r1, [r4, #20]
 8004b46:	6030      	str	r0, [r6, #0]
 8004b48:	062e      	lsls	r6, r5, #24
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	d501      	bpl.n	8004b52 <_printf_i+0x1c2>
 8004b4e:	6019      	str	r1, [r3, #0]
 8004b50:	e002      	b.n	8004b58 <_printf_i+0x1c8>
 8004b52:	0668      	lsls	r0, r5, #25
 8004b54:	d5fb      	bpl.n	8004b4e <_printf_i+0x1be>
 8004b56:	8019      	strh	r1, [r3, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	4616      	mov	r6, r2
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	e7bc      	b.n	8004ada <_printf_i+0x14a>
 8004b60:	6833      	ldr	r3, [r6, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	1d1a      	adds	r2, r3, #4
 8004b66:	6032      	str	r2, [r6, #0]
 8004b68:	681e      	ldr	r6, [r3, #0]
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	f000 f9d4 	bl	8004f1a <memchr>
 8004b72:	b108      	cbz	r0, 8004b78 <_printf_i+0x1e8>
 8004b74:	1b80      	subs	r0, r0, r6
 8004b76:	6060      	str	r0, [r4, #4]
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	6123      	str	r3, [r4, #16]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b82:	e7aa      	b.n	8004ada <_printf_i+0x14a>
 8004b84:	4632      	mov	r2, r6
 8004b86:	4649      	mov	r1, r9
 8004b88:	4640      	mov	r0, r8
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	47d0      	blx	sl
 8004b8e:	3001      	adds	r0, #1
 8004b90:	d0ad      	beq.n	8004aee <_printf_i+0x15e>
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	079b      	lsls	r3, r3, #30
 8004b96:	d413      	bmi.n	8004bc0 <_printf_i+0x230>
 8004b98:	68e0      	ldr	r0, [r4, #12]
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	4298      	cmp	r0, r3
 8004b9e:	bfb8      	it	lt
 8004ba0:	4618      	movlt	r0, r3
 8004ba2:	e7a6      	b.n	8004af2 <_printf_i+0x162>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	4632      	mov	r2, r6
 8004ba8:	4649      	mov	r1, r9
 8004baa:	4640      	mov	r0, r8
 8004bac:	47d0      	blx	sl
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d09d      	beq.n	8004aee <_printf_i+0x15e>
 8004bb2:	3501      	adds	r5, #1
 8004bb4:	68e3      	ldr	r3, [r4, #12]
 8004bb6:	9903      	ldr	r1, [sp, #12]
 8004bb8:	1a5b      	subs	r3, r3, r1
 8004bba:	42ab      	cmp	r3, r5
 8004bbc:	dcf2      	bgt.n	8004ba4 <_printf_i+0x214>
 8004bbe:	e7eb      	b.n	8004b98 <_printf_i+0x208>
 8004bc0:	2500      	movs	r5, #0
 8004bc2:	f104 0619 	add.w	r6, r4, #25
 8004bc6:	e7f5      	b.n	8004bb4 <_printf_i+0x224>
 8004bc8:	0800706c 	.word	0x0800706c
 8004bcc:	0800707d 	.word	0x0800707d

08004bd0 <std>:
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	b510      	push	{r4, lr}
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bde:	6083      	str	r3, [r0, #8]
 8004be0:	8181      	strh	r1, [r0, #12]
 8004be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004be4:	81c2      	strh	r2, [r0, #14]
 8004be6:	6183      	str	r3, [r0, #24]
 8004be8:	4619      	mov	r1, r3
 8004bea:	2208      	movs	r2, #8
 8004bec:	305c      	adds	r0, #92	@ 0x5c
 8004bee:	f000 f914 	bl	8004e1a <memset>
 8004bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8004c28 <std+0x58>)
 8004bf4:	6224      	str	r4, [r4, #32]
 8004bf6:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8004c2c <std+0x5c>)
 8004bfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8004c30 <std+0x60>)
 8004bfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c00:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <std+0x64>)
 8004c02:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <std+0x68>)
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d006      	beq.n	8004c18 <std+0x48>
 8004c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c0e:	4294      	cmp	r4, r2
 8004c10:	d002      	beq.n	8004c18 <std+0x48>
 8004c12:	33d0      	adds	r3, #208	@ 0xd0
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d105      	bne.n	8004c24 <std+0x54>
 8004c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c20:	f000 b978 	b.w	8004f14 <__retarget_lock_init_recursive>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	bf00      	nop
 8004c28:	08004d95 	.word	0x08004d95
 8004c2c:	08004db7 	.word	0x08004db7
 8004c30:	08004def 	.word	0x08004def
 8004c34:	08004e13 	.word	0x08004e13
 8004c38:	200002c0 	.word	0x200002c0

08004c3c <stdio_exit_handler>:
 8004c3c:	4a02      	ldr	r2, [pc, #8]	@ (8004c48 <stdio_exit_handler+0xc>)
 8004c3e:	4903      	ldr	r1, [pc, #12]	@ (8004c4c <stdio_exit_handler+0x10>)
 8004c40:	4803      	ldr	r0, [pc, #12]	@ (8004c50 <stdio_exit_handler+0x14>)
 8004c42:	f000 b869 	b.w	8004d18 <_fwalk_sglue>
 8004c46:	bf00      	nop
 8004c48:	20000010 	.word	0x20000010
 8004c4c:	08006885 	.word	0x08006885
 8004c50:	20000020 	.word	0x20000020

08004c54 <cleanup_stdio>:
 8004c54:	6841      	ldr	r1, [r0, #4]
 8004c56:	4b0c      	ldr	r3, [pc, #48]	@ (8004c88 <cleanup_stdio+0x34>)
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	d001      	beq.n	8004c64 <cleanup_stdio+0x10>
 8004c60:	f001 fe10 	bl	8006884 <_fflush_r>
 8004c64:	68a1      	ldr	r1, [r4, #8]
 8004c66:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <cleanup_stdio+0x38>)
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	d002      	beq.n	8004c72 <cleanup_stdio+0x1e>
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f001 fe09 	bl	8006884 <_fflush_r>
 8004c72:	68e1      	ldr	r1, [r4, #12]
 8004c74:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <cleanup_stdio+0x3c>)
 8004c76:	4299      	cmp	r1, r3
 8004c78:	d004      	beq.n	8004c84 <cleanup_stdio+0x30>
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c80:	f001 be00 	b.w	8006884 <_fflush_r>
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	bf00      	nop
 8004c88:	200002c0 	.word	0x200002c0
 8004c8c:	20000328 	.word	0x20000328
 8004c90:	20000390 	.word	0x20000390

08004c94 <global_stdio_init.part.0>:
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <global_stdio_init.part.0+0x30>)
 8004c98:	4c0b      	ldr	r4, [pc, #44]	@ (8004cc8 <global_stdio_init.part.0+0x34>)
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8004ccc <global_stdio_init.part.0+0x38>)
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	2104      	movs	r1, #4
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f7ff ff94 	bl	8004bd0 <std>
 8004ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cac:	2201      	movs	r2, #1
 8004cae:	2109      	movs	r1, #9
 8004cb0:	f7ff ff8e 	bl	8004bd0 <std>
 8004cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cb8:	2202      	movs	r2, #2
 8004cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbe:	2112      	movs	r1, #18
 8004cc0:	f7ff bf86 	b.w	8004bd0 <std>
 8004cc4:	200003f8 	.word	0x200003f8
 8004cc8:	200002c0 	.word	0x200002c0
 8004ccc:	08004c3d 	.word	0x08004c3d

08004cd0 <__sfp_lock_acquire>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	@ (8004cd8 <__sfp_lock_acquire+0x8>)
 8004cd2:	f000 b920 	b.w	8004f16 <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000401 	.word	0x20000401

08004cdc <__sfp_lock_release>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	@ (8004ce4 <__sfp_lock_release+0x8>)
 8004cde:	f000 b91b 	b.w	8004f18 <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	20000401 	.word	0x20000401

08004ce8 <__sinit>:
 8004ce8:	b510      	push	{r4, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	f7ff fff0 	bl	8004cd0 <__sfp_lock_acquire>
 8004cf0:	6a23      	ldr	r3, [r4, #32]
 8004cf2:	b11b      	cbz	r3, 8004cfc <__sinit+0x14>
 8004cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cf8:	f7ff bff0 	b.w	8004cdc <__sfp_lock_release>
 8004cfc:	4b04      	ldr	r3, [pc, #16]	@ (8004d10 <__sinit+0x28>)
 8004cfe:	6223      	str	r3, [r4, #32]
 8004d00:	4b04      	ldr	r3, [pc, #16]	@ (8004d14 <__sinit+0x2c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f5      	bne.n	8004cf4 <__sinit+0xc>
 8004d08:	f7ff ffc4 	bl	8004c94 <global_stdio_init.part.0>
 8004d0c:	e7f2      	b.n	8004cf4 <__sinit+0xc>
 8004d0e:	bf00      	nop
 8004d10:	08004c55 	.word	0x08004c55
 8004d14:	200003f8 	.word	0x200003f8

08004d18 <_fwalk_sglue>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	4607      	mov	r7, r0
 8004d1e:	4688      	mov	r8, r1
 8004d20:	4614      	mov	r4, r2
 8004d22:	2600      	movs	r6, #0
 8004d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d28:	f1b9 0901 	subs.w	r9, r9, #1
 8004d2c:	d505      	bpl.n	8004d3a <_fwalk_sglue+0x22>
 8004d2e:	6824      	ldr	r4, [r4, #0]
 8004d30:	2c00      	cmp	r4, #0
 8004d32:	d1f7      	bne.n	8004d24 <_fwalk_sglue+0xc>
 8004d34:	4630      	mov	r0, r6
 8004d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d907      	bls.n	8004d50 <_fwalk_sglue+0x38>
 8004d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d44:	3301      	adds	r3, #1
 8004d46:	d003      	beq.n	8004d50 <_fwalk_sglue+0x38>
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	47c0      	blx	r8
 8004d4e:	4306      	orrs	r6, r0
 8004d50:	3568      	adds	r5, #104	@ 0x68
 8004d52:	e7e9      	b.n	8004d28 <_fwalk_sglue+0x10>

08004d54 <siprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d5a:	b500      	push	{lr}
 8004d5c:	b09c      	sub	sp, #112	@ 0x70
 8004d5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d60:	9002      	str	r0, [sp, #8]
 8004d62:	9006      	str	r0, [sp, #24]
 8004d64:	9107      	str	r1, [sp, #28]
 8004d66:	9104      	str	r1, [sp, #16]
 8004d68:	4808      	ldr	r0, [pc, #32]	@ (8004d8c <siprintf+0x38>)
 8004d6a:	4909      	ldr	r1, [pc, #36]	@ (8004d90 <siprintf+0x3c>)
 8004d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	6800      	ldr	r0, [r0, #0]
 8004d74:	a902      	add	r1, sp, #8
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	f001 fc08 	bl	800658c <_svfiprintf_r>
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	9b02      	ldr	r3, [sp, #8]
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	b01c      	add	sp, #112	@ 0x70
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b003      	add	sp, #12
 8004d8a:	4770      	bx	lr
 8004d8c:	2000001c 	.word	0x2000001c
 8004d90:	ffff0208 	.word	0xffff0208

08004d94 <__sread>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	460c      	mov	r4, r1
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	f000 f86c 	bl	8004e78 <_read_r>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	bfab      	itete	ge
 8004da4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004da6:	89a3      	ldrhlt	r3, [r4, #12]
 8004da8:	181b      	addge	r3, r3, r0
 8004daa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dae:	bfac      	ite	ge
 8004db0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004db2:	81a3      	strhlt	r3, [r4, #12]
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <__swrite>:
 8004db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	461f      	mov	r7, r3
 8004dbc:	898b      	ldrh	r3, [r1, #12]
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	05db      	lsls	r3, r3, #23
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4616      	mov	r6, r2
 8004dc6:	d505      	bpl.n	8004dd4 <__swrite+0x1e>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd0:	f000 f840 	bl	8004e54 <_lseek_r>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	4632      	mov	r2, r6
 8004dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	4628      	mov	r0, r5
 8004de0:	463b      	mov	r3, r7
 8004de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dea:	f000 b857 	b.w	8004e9c <_write_r>

08004dee <__sseek>:
 8004dee:	b510      	push	{r4, lr}
 8004df0:	460c      	mov	r4, r1
 8004df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df6:	f000 f82d 	bl	8004e54 <_lseek_r>
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	bf15      	itete	ne
 8004e00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e0a:	81a3      	strheq	r3, [r4, #12]
 8004e0c:	bf18      	it	ne
 8004e0e:	81a3      	strhne	r3, [r4, #12]
 8004e10:	bd10      	pop	{r4, pc}

08004e12 <__sclose>:
 8004e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e16:	f000 b80d 	b.w	8004e34 <_close_r>

08004e1a <memset>:
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d100      	bne.n	8004e24 <memset+0xa>
 8004e22:	4770      	bx	lr
 8004e24:	f803 1b01 	strb.w	r1, [r3], #1
 8004e28:	e7f9      	b.n	8004e1e <memset+0x4>
	...

08004e2c <_localeconv_r>:
 8004e2c:	4800      	ldr	r0, [pc, #0]	@ (8004e30 <_localeconv_r+0x4>)
 8004e2e:	4770      	bx	lr
 8004e30:	2000015c 	.word	0x2000015c

08004e34 <_close_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	2300      	movs	r3, #0
 8004e38:	4d05      	ldr	r5, [pc, #20]	@ (8004e50 <_close_r+0x1c>)
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fc ff59 	bl	8001cf6 <_close>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_close_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_close_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	200003fc 	.word	0x200003fc

08004e54 <_lseek_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	4d05      	ldr	r5, [pc, #20]	@ (8004e74 <_lseek_r+0x20>)
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fc ff6b 	bl	8001d3e <_lseek>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_lseek_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_lseek_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	200003fc 	.word	0x200003fc

08004e78 <_read_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	2200      	movs	r2, #0
 8004e82:	4d05      	ldr	r5, [pc, #20]	@ (8004e98 <_read_r+0x20>)
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fc fefc 	bl	8001c84 <_read>
 8004e8c:	1c43      	adds	r3, r0, #1
 8004e8e:	d102      	bne.n	8004e96 <_read_r+0x1e>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	b103      	cbz	r3, 8004e96 <_read_r+0x1e>
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	bd38      	pop	{r3, r4, r5, pc}
 8004e98:	200003fc 	.word	0x200003fc

08004e9c <_write_r>:
 8004e9c:	b538      	push	{r3, r4, r5, lr}
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	4d05      	ldr	r5, [pc, #20]	@ (8004ebc <_write_r+0x20>)
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f7fc ff07 	bl	8001cbe <_write>
 8004eb0:	1c43      	adds	r3, r0, #1
 8004eb2:	d102      	bne.n	8004eba <_write_r+0x1e>
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b103      	cbz	r3, 8004eba <_write_r+0x1e>
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	bd38      	pop	{r3, r4, r5, pc}
 8004ebc:	200003fc 	.word	0x200003fc

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	@ (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000001c 	.word	0x2000001c

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	2600      	movs	r6, #0
 8004ed0:	4d0c      	ldr	r5, [pc, #48]	@ (8004f04 <__libc_init_array+0x38>)
 8004ed2:	4c0d      	ldr	r4, [pc, #52]	@ (8004f08 <__libc_init_array+0x3c>)
 8004ed4:	1b64      	subs	r4, r4, r5
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	42a6      	cmp	r6, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	f002 f86e 	bl	8006fbc <_init>
 8004ee0:	2600      	movs	r6, #0
 8004ee2:	4d0a      	ldr	r5, [pc, #40]	@ (8004f0c <__libc_init_array+0x40>)
 8004ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8004f10 <__libc_init_array+0x44>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	42a6      	cmp	r6, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ef4:	4798      	blx	r3
 8004ef6:	3601      	adds	r6, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004efe:	4798      	blx	r3
 8004f00:	3601      	adds	r6, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	080073d0 	.word	0x080073d0
 8004f08:	080073d0 	.word	0x080073d0
 8004f0c:	080073d0 	.word	0x080073d0
 8004f10:	080073d4 	.word	0x080073d4

08004f14 <__retarget_lock_init_recursive>:
 8004f14:	4770      	bx	lr

08004f16 <__retarget_lock_acquire_recursive>:
 8004f16:	4770      	bx	lr

08004f18 <__retarget_lock_release_recursive>:
 8004f18:	4770      	bx	lr

08004f1a <memchr>:
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	b2c9      	uxtb	r1, r1
 8004f20:	4402      	add	r2, r0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	d101      	bne.n	8004f2c <memchr+0x12>
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e003      	b.n	8004f34 <memchr+0x1a>
 8004f2c:	7804      	ldrb	r4, [r0, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	428c      	cmp	r4, r1
 8004f32:	d1f6      	bne.n	8004f22 <memchr+0x8>
 8004f34:	bd10      	pop	{r4, pc}

08004f36 <quorem>:
 8004f36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	6903      	ldr	r3, [r0, #16]
 8004f3c:	690c      	ldr	r4, [r1, #16]
 8004f3e:	4607      	mov	r7, r0
 8004f40:	42a3      	cmp	r3, r4
 8004f42:	db7e      	blt.n	8005042 <quorem+0x10c>
 8004f44:	3c01      	subs	r4, #1
 8004f46:	00a3      	lsls	r3, r4, #2
 8004f48:	f100 0514 	add.w	r5, r0, #20
 8004f4c:	f101 0814 	add.w	r8, r1, #20
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f56:	9301      	str	r3, [sp, #4]
 8004f58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f60:	3301      	adds	r3, #1
 8004f62:	429a      	cmp	r2, r3
 8004f64:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f6c:	d32e      	bcc.n	8004fcc <quorem+0x96>
 8004f6e:	f04f 0a00 	mov.w	sl, #0
 8004f72:	46c4      	mov	ip, r8
 8004f74:	46ae      	mov	lr, r5
 8004f76:	46d3      	mov	fp, sl
 8004f78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f7c:	b298      	uxth	r0, r3
 8004f7e:	fb06 a000 	mla	r0, r6, r0, sl
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	0c02      	lsrs	r2, r0, #16
 8004f86:	fb06 2303 	mla	r3, r6, r3, r2
 8004f8a:	f8de 2000 	ldr.w	r2, [lr]
 8004f8e:	b280      	uxth	r0, r0
 8004f90:	b292      	uxth	r2, r2
 8004f92:	1a12      	subs	r2, r2, r0
 8004f94:	445a      	add	r2, fp
 8004f96:	f8de 0000 	ldr.w	r0, [lr]
 8004f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004fa4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004fa8:	b292      	uxth	r2, r2
 8004faa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004fae:	45e1      	cmp	r9, ip
 8004fb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004fb4:	f84e 2b04 	str.w	r2, [lr], #4
 8004fb8:	d2de      	bcs.n	8004f78 <quorem+0x42>
 8004fba:	9b00      	ldr	r3, [sp, #0]
 8004fbc:	58eb      	ldr	r3, [r5, r3]
 8004fbe:	b92b      	cbnz	r3, 8004fcc <quorem+0x96>
 8004fc0:	9b01      	ldr	r3, [sp, #4]
 8004fc2:	3b04      	subs	r3, #4
 8004fc4:	429d      	cmp	r5, r3
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	d32f      	bcc.n	800502a <quorem+0xf4>
 8004fca:	613c      	str	r4, [r7, #16]
 8004fcc:	4638      	mov	r0, r7
 8004fce:	f001 f979 	bl	80062c4 <__mcmp>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	db25      	blt.n	8005022 <quorem+0xec>
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fde:	f8d1 c000 	ldr.w	ip, [r1]
 8004fe2:	fa1f fe82 	uxth.w	lr, r2
 8004fe6:	fa1f f38c 	uxth.w	r3, ip
 8004fea:	eba3 030e 	sub.w	r3, r3, lr
 8004fee:	4403      	add	r3, r0
 8004ff0:	0c12      	lsrs	r2, r2, #16
 8004ff2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ff6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005000:	45c1      	cmp	r9, r8
 8005002:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005006:	f841 3b04 	str.w	r3, [r1], #4
 800500a:	d2e6      	bcs.n	8004fda <quorem+0xa4>
 800500c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005014:	b922      	cbnz	r2, 8005020 <quorem+0xea>
 8005016:	3b04      	subs	r3, #4
 8005018:	429d      	cmp	r5, r3
 800501a:	461a      	mov	r2, r3
 800501c:	d30b      	bcc.n	8005036 <quorem+0x100>
 800501e:	613c      	str	r4, [r7, #16]
 8005020:	3601      	adds	r6, #1
 8005022:	4630      	mov	r0, r6
 8005024:	b003      	add	sp, #12
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	3b04      	subs	r3, #4
 800502e:	2a00      	cmp	r2, #0
 8005030:	d1cb      	bne.n	8004fca <quorem+0x94>
 8005032:	3c01      	subs	r4, #1
 8005034:	e7c6      	b.n	8004fc4 <quorem+0x8e>
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	3b04      	subs	r3, #4
 800503a:	2a00      	cmp	r2, #0
 800503c:	d1ef      	bne.n	800501e <quorem+0xe8>
 800503e:	3c01      	subs	r4, #1
 8005040:	e7ea      	b.n	8005018 <quorem+0xe2>
 8005042:	2000      	movs	r0, #0
 8005044:	e7ee      	b.n	8005024 <quorem+0xee>
	...

08005048 <_dtoa_r>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	4614      	mov	r4, r2
 800504e:	461d      	mov	r5, r3
 8005050:	69c7      	ldr	r7, [r0, #28]
 8005052:	b097      	sub	sp, #92	@ 0x5c
 8005054:	4683      	mov	fp, r0
 8005056:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800505a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800505c:	b97f      	cbnz	r7, 800507e <_dtoa_r+0x36>
 800505e:	2010      	movs	r0, #16
 8005060:	f000 fe02 	bl	8005c68 <malloc>
 8005064:	4602      	mov	r2, r0
 8005066:	f8cb 001c 	str.w	r0, [fp, #28]
 800506a:	b920      	cbnz	r0, 8005076 <_dtoa_r+0x2e>
 800506c:	21ef      	movs	r1, #239	@ 0xef
 800506e:	4ba8      	ldr	r3, [pc, #672]	@ (8005310 <_dtoa_r+0x2c8>)
 8005070:	48a8      	ldr	r0, [pc, #672]	@ (8005314 <_dtoa_r+0x2cc>)
 8005072:	f001 fc67 	bl	8006944 <__assert_func>
 8005076:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800507a:	6007      	str	r7, [r0, #0]
 800507c:	60c7      	str	r7, [r0, #12]
 800507e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	b159      	cbz	r1, 800509e <_dtoa_r+0x56>
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	2301      	movs	r3, #1
 800508a:	4093      	lsls	r3, r2
 800508c:	604a      	str	r2, [r1, #4]
 800508e:	608b      	str	r3, [r1, #8]
 8005090:	4658      	mov	r0, fp
 8005092:	f000 fedf 	bl	8005e54 <_Bfree>
 8005096:	2200      	movs	r2, #0
 8005098:	f8db 301c 	ldr.w	r3, [fp, #28]
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	1e2b      	subs	r3, r5, #0
 80050a0:	bfaf      	iteee	ge
 80050a2:	2300      	movge	r3, #0
 80050a4:	2201      	movlt	r2, #1
 80050a6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80050aa:	9303      	strlt	r3, [sp, #12]
 80050ac:	bfa8      	it	ge
 80050ae:	6033      	strge	r3, [r6, #0]
 80050b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80050b4:	4b98      	ldr	r3, [pc, #608]	@ (8005318 <_dtoa_r+0x2d0>)
 80050b6:	bfb8      	it	lt
 80050b8:	6032      	strlt	r2, [r6, #0]
 80050ba:	ea33 0308 	bics.w	r3, r3, r8
 80050be:	d112      	bne.n	80050e6 <_dtoa_r+0x9e>
 80050c0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80050c4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80050cc:	4323      	orrs	r3, r4
 80050ce:	f000 8550 	beq.w	8005b72 <_dtoa_r+0xb2a>
 80050d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80050d4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800531c <_dtoa_r+0x2d4>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8552 	beq.w	8005b82 <_dtoa_r+0xb3a>
 80050de:	f10a 0303 	add.w	r3, sl, #3
 80050e2:	f000 bd4c 	b.w	8005b7e <_dtoa_r+0xb36>
 80050e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80050ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	2300      	movs	r3, #0
 80050f6:	f7fb fc57 	bl	80009a8 <__aeabi_dcmpeq>
 80050fa:	4607      	mov	r7, r0
 80050fc:	b158      	cbz	r0, 8005116 <_dtoa_r+0xce>
 80050fe:	2301      	movs	r3, #1
 8005100:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005106:	b113      	cbz	r3, 800510e <_dtoa_r+0xc6>
 8005108:	4b85      	ldr	r3, [pc, #532]	@ (8005320 <_dtoa_r+0x2d8>)
 800510a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005324 <_dtoa_r+0x2dc>
 8005112:	f000 bd36 	b.w	8005b82 <_dtoa_r+0xb3a>
 8005116:	ab14      	add	r3, sp, #80	@ 0x50
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	ab15      	add	r3, sp, #84	@ 0x54
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	4658      	mov	r0, fp
 8005120:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005124:	f001 f97e 	bl	8006424 <__d2b>
 8005128:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800512c:	4681      	mov	r9, r0
 800512e:	2e00      	cmp	r6, #0
 8005130:	d077      	beq.n	8005222 <_dtoa_r+0x1da>
 8005132:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005138:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800513c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005140:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005144:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005148:	9712      	str	r7, [sp, #72]	@ 0x48
 800514a:	4619      	mov	r1, r3
 800514c:	2200      	movs	r2, #0
 800514e:	4b76      	ldr	r3, [pc, #472]	@ (8005328 <_dtoa_r+0x2e0>)
 8005150:	f7fb f80a 	bl	8000168 <__aeabi_dsub>
 8005154:	a368      	add	r3, pc, #416	@ (adr r3, 80052f8 <_dtoa_r+0x2b0>)
 8005156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515a:	f7fb f9bd 	bl	80004d8 <__aeabi_dmul>
 800515e:	a368      	add	r3, pc, #416	@ (adr r3, 8005300 <_dtoa_r+0x2b8>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7fb f802 	bl	800016c <__adddf3>
 8005168:	4604      	mov	r4, r0
 800516a:	4630      	mov	r0, r6
 800516c:	460d      	mov	r5, r1
 800516e:	f7fb f949 	bl	8000404 <__aeabi_i2d>
 8005172:	a365      	add	r3, pc, #404	@ (adr r3, 8005308 <_dtoa_r+0x2c0>)
 8005174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005178:	f7fb f9ae 	bl	80004d8 <__aeabi_dmul>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4620      	mov	r0, r4
 8005182:	4629      	mov	r1, r5
 8005184:	f7fa fff2 	bl	800016c <__adddf3>
 8005188:	4604      	mov	r4, r0
 800518a:	460d      	mov	r5, r1
 800518c:	f7fb fc54 	bl	8000a38 <__aeabi_d2iz>
 8005190:	2200      	movs	r2, #0
 8005192:	4607      	mov	r7, r0
 8005194:	2300      	movs	r3, #0
 8005196:	4620      	mov	r0, r4
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb fc0f 	bl	80009bc <__aeabi_dcmplt>
 800519e:	b140      	cbz	r0, 80051b2 <_dtoa_r+0x16a>
 80051a0:	4638      	mov	r0, r7
 80051a2:	f7fb f92f 	bl	8000404 <__aeabi_i2d>
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	f7fb fbfd 	bl	80009a8 <__aeabi_dcmpeq>
 80051ae:	b900      	cbnz	r0, 80051b2 <_dtoa_r+0x16a>
 80051b0:	3f01      	subs	r7, #1
 80051b2:	2f16      	cmp	r7, #22
 80051b4:	d853      	bhi.n	800525e <_dtoa_r+0x216>
 80051b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051ba:	4b5c      	ldr	r3, [pc, #368]	@ (800532c <_dtoa_r+0x2e4>)
 80051bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb fbfa 	bl	80009bc <__aeabi_dcmplt>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d04a      	beq.n	8005262 <_dtoa_r+0x21a>
 80051cc:	2300      	movs	r3, #0
 80051ce:	3f01      	subs	r7, #1
 80051d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80051d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051d4:	1b9b      	subs	r3, r3, r6
 80051d6:	1e5a      	subs	r2, r3, #1
 80051d8:	bf46      	itte	mi
 80051da:	f1c3 0801 	rsbmi	r8, r3, #1
 80051de:	2300      	movmi	r3, #0
 80051e0:	f04f 0800 	movpl.w	r8, #0
 80051e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051e6:	bf48      	it	mi
 80051e8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	db3b      	blt.n	8005266 <_dtoa_r+0x21e>
 80051ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f0:	970e      	str	r7, [sp, #56]	@ 0x38
 80051f2:	443b      	add	r3, r7
 80051f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f6:	2300      	movs	r3, #0
 80051f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80051fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051fc:	2b09      	cmp	r3, #9
 80051fe:	d866      	bhi.n	80052ce <_dtoa_r+0x286>
 8005200:	2b05      	cmp	r3, #5
 8005202:	bfc4      	itt	gt
 8005204:	3b04      	subgt	r3, #4
 8005206:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005208:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800520a:	bfc8      	it	gt
 800520c:	2400      	movgt	r4, #0
 800520e:	f1a3 0302 	sub.w	r3, r3, #2
 8005212:	bfd8      	it	le
 8005214:	2401      	movle	r4, #1
 8005216:	2b03      	cmp	r3, #3
 8005218:	d864      	bhi.n	80052e4 <_dtoa_r+0x29c>
 800521a:	e8df f003 	tbb	[pc, r3]
 800521e:	382b      	.short	0x382b
 8005220:	5636      	.short	0x5636
 8005222:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005226:	441e      	add	r6, r3
 8005228:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800522c:	2b20      	cmp	r3, #32
 800522e:	bfc1      	itttt	gt
 8005230:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005234:	fa08 f803 	lslgt.w	r8, r8, r3
 8005238:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800523c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005240:	bfd6      	itet	le
 8005242:	f1c3 0320 	rsble	r3, r3, #32
 8005246:	ea48 0003 	orrgt.w	r0, r8, r3
 800524a:	fa04 f003 	lslle.w	r0, r4, r3
 800524e:	f7fb f8c9 	bl	80003e4 <__aeabi_ui2d>
 8005252:	2201      	movs	r2, #1
 8005254:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005258:	3e01      	subs	r6, #1
 800525a:	9212      	str	r2, [sp, #72]	@ 0x48
 800525c:	e775      	b.n	800514a <_dtoa_r+0x102>
 800525e:	2301      	movs	r3, #1
 8005260:	e7b6      	b.n	80051d0 <_dtoa_r+0x188>
 8005262:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005264:	e7b5      	b.n	80051d2 <_dtoa_r+0x18a>
 8005266:	427b      	negs	r3, r7
 8005268:	930a      	str	r3, [sp, #40]	@ 0x28
 800526a:	2300      	movs	r3, #0
 800526c:	eba8 0807 	sub.w	r8, r8, r7
 8005270:	930e      	str	r3, [sp, #56]	@ 0x38
 8005272:	e7c2      	b.n	80051fa <_dtoa_r+0x1b2>
 8005274:	2300      	movs	r3, #0
 8005276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005278:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800527a:	2b00      	cmp	r3, #0
 800527c:	dc35      	bgt.n	80052ea <_dtoa_r+0x2a2>
 800527e:	2301      	movs	r3, #1
 8005280:	461a      	mov	r2, r3
 8005282:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005286:	9221      	str	r2, [sp, #132]	@ 0x84
 8005288:	e00b      	b.n	80052a2 <_dtoa_r+0x25a>
 800528a:	2301      	movs	r3, #1
 800528c:	e7f3      	b.n	8005276 <_dtoa_r+0x22e>
 800528e:	2300      	movs	r3, #0
 8005290:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005292:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005294:	18fb      	adds	r3, r7, r3
 8005296:	9308      	str	r3, [sp, #32]
 8005298:	3301      	adds	r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	bfb8      	it	lt
 80052a0:	2301      	movlt	r3, #1
 80052a2:	2100      	movs	r1, #0
 80052a4:	2204      	movs	r2, #4
 80052a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80052aa:	f102 0514 	add.w	r5, r2, #20
 80052ae:	429d      	cmp	r5, r3
 80052b0:	d91f      	bls.n	80052f2 <_dtoa_r+0x2aa>
 80052b2:	6041      	str	r1, [r0, #4]
 80052b4:	4658      	mov	r0, fp
 80052b6:	f000 fd8d 	bl	8005dd4 <_Balloc>
 80052ba:	4682      	mov	sl, r0
 80052bc:	2800      	cmp	r0, #0
 80052be:	d139      	bne.n	8005334 <_dtoa_r+0x2ec>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <_dtoa_r+0x2e8>)
 80052c8:	e6d2      	b.n	8005070 <_dtoa_r+0x28>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e7e0      	b.n	8005290 <_dtoa_r+0x248>
 80052ce:	2401      	movs	r4, #1
 80052d0:	2300      	movs	r3, #0
 80052d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80052d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80052d6:	f04f 33ff 	mov.w	r3, #4294967295
 80052da:	2200      	movs	r2, #0
 80052dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052e0:	2312      	movs	r3, #18
 80052e2:	e7d0      	b.n	8005286 <_dtoa_r+0x23e>
 80052e4:	2301      	movs	r3, #1
 80052e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052e8:	e7f5      	b.n	80052d6 <_dtoa_r+0x28e>
 80052ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80052f0:	e7d7      	b.n	80052a2 <_dtoa_r+0x25a>
 80052f2:	3101      	adds	r1, #1
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	e7d8      	b.n	80052aa <_dtoa_r+0x262>
 80052f8:	636f4361 	.word	0x636f4361
 80052fc:	3fd287a7 	.word	0x3fd287a7
 8005300:	8b60c8b3 	.word	0x8b60c8b3
 8005304:	3fc68a28 	.word	0x3fc68a28
 8005308:	509f79fb 	.word	0x509f79fb
 800530c:	3fd34413 	.word	0x3fd34413
 8005310:	0800709b 	.word	0x0800709b
 8005314:	080070b2 	.word	0x080070b2
 8005318:	7ff00000 	.word	0x7ff00000
 800531c:	08007097 	.word	0x08007097
 8005320:	0800706b 	.word	0x0800706b
 8005324:	0800706a 	.word	0x0800706a
 8005328:	3ff80000 	.word	0x3ff80000
 800532c:	080071a8 	.word	0x080071a8
 8005330:	0800710a 	.word	0x0800710a
 8005334:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005338:	6018      	str	r0, [r3, #0]
 800533a:	9b07      	ldr	r3, [sp, #28]
 800533c:	2b0e      	cmp	r3, #14
 800533e:	f200 80a4 	bhi.w	800548a <_dtoa_r+0x442>
 8005342:	2c00      	cmp	r4, #0
 8005344:	f000 80a1 	beq.w	800548a <_dtoa_r+0x442>
 8005348:	2f00      	cmp	r7, #0
 800534a:	dd33      	ble.n	80053b4 <_dtoa_r+0x36c>
 800534c:	4b86      	ldr	r3, [pc, #536]	@ (8005568 <_dtoa_r+0x520>)
 800534e:	f007 020f 	and.w	r2, r7, #15
 8005352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005356:	05f8      	lsls	r0, r7, #23
 8005358:	e9d3 3400 	ldrd	r3, r4, [r3]
 800535c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005360:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005364:	d516      	bpl.n	8005394 <_dtoa_r+0x34c>
 8005366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800536a:	4b80      	ldr	r3, [pc, #512]	@ (800556c <_dtoa_r+0x524>)
 800536c:	2603      	movs	r6, #3
 800536e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005372:	f7fb f9db 	bl	800072c <__aeabi_ddiv>
 8005376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800537a:	f004 040f 	and.w	r4, r4, #15
 800537e:	4d7b      	ldr	r5, [pc, #492]	@ (800556c <_dtoa_r+0x524>)
 8005380:	b954      	cbnz	r4, 8005398 <_dtoa_r+0x350>
 8005382:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800538a:	f7fb f9cf 	bl	800072c <__aeabi_ddiv>
 800538e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005392:	e028      	b.n	80053e6 <_dtoa_r+0x39e>
 8005394:	2602      	movs	r6, #2
 8005396:	e7f2      	b.n	800537e <_dtoa_r+0x336>
 8005398:	07e1      	lsls	r1, r4, #31
 800539a:	d508      	bpl.n	80053ae <_dtoa_r+0x366>
 800539c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80053a4:	f7fb f898 	bl	80004d8 <__aeabi_dmul>
 80053a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ac:	3601      	adds	r6, #1
 80053ae:	1064      	asrs	r4, r4, #1
 80053b0:	3508      	adds	r5, #8
 80053b2:	e7e5      	b.n	8005380 <_dtoa_r+0x338>
 80053b4:	f000 80d2 	beq.w	800555c <_dtoa_r+0x514>
 80053b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80053bc:	427c      	negs	r4, r7
 80053be:	4b6a      	ldr	r3, [pc, #424]	@ (8005568 <_dtoa_r+0x520>)
 80053c0:	f004 020f 	and.w	r2, r4, #15
 80053c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f7fb f884 	bl	80004d8 <__aeabi_dmul>
 80053d0:	2602      	movs	r6, #2
 80053d2:	2300      	movs	r3, #0
 80053d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d8:	4d64      	ldr	r5, [pc, #400]	@ (800556c <_dtoa_r+0x524>)
 80053da:	1124      	asrs	r4, r4, #4
 80053dc:	2c00      	cmp	r4, #0
 80053de:	f040 80b2 	bne.w	8005546 <_dtoa_r+0x4fe>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1d3      	bne.n	800538e <_dtoa_r+0x346>
 80053e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80053ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80b7 	beq.w	8005560 <_dtoa_r+0x518>
 80053f2:	2200      	movs	r2, #0
 80053f4:	4620      	mov	r0, r4
 80053f6:	4629      	mov	r1, r5
 80053f8:	4b5d      	ldr	r3, [pc, #372]	@ (8005570 <_dtoa_r+0x528>)
 80053fa:	f7fb fadf 	bl	80009bc <__aeabi_dcmplt>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f000 80ae 	beq.w	8005560 <_dtoa_r+0x518>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 80aa 	beq.w	8005560 <_dtoa_r+0x518>
 800540c:	9b08      	ldr	r3, [sp, #32]
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd37      	ble.n	8005482 <_dtoa_r+0x43a>
 8005412:	1e7b      	subs	r3, r7, #1
 8005414:	4620      	mov	r0, r4
 8005416:	9304      	str	r3, [sp, #16]
 8005418:	2200      	movs	r2, #0
 800541a:	4629      	mov	r1, r5
 800541c:	4b55      	ldr	r3, [pc, #340]	@ (8005574 <_dtoa_r+0x52c>)
 800541e:	f7fb f85b 	bl	80004d8 <__aeabi_dmul>
 8005422:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005426:	9c08      	ldr	r4, [sp, #32]
 8005428:	3601      	adds	r6, #1
 800542a:	4630      	mov	r0, r6
 800542c:	f7fa ffea 	bl	8000404 <__aeabi_i2d>
 8005430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005434:	f7fb f850 	bl	80004d8 <__aeabi_dmul>
 8005438:	2200      	movs	r2, #0
 800543a:	4b4f      	ldr	r3, [pc, #316]	@ (8005578 <_dtoa_r+0x530>)
 800543c:	f7fa fe96 	bl	800016c <__adddf3>
 8005440:	4605      	mov	r5, r0
 8005442:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005446:	2c00      	cmp	r4, #0
 8005448:	f040 809a 	bne.w	8005580 <_dtoa_r+0x538>
 800544c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	4b4a      	ldr	r3, [pc, #296]	@ (800557c <_dtoa_r+0x534>)
 8005454:	f7fa fe88 	bl	8000168 <__aeabi_dsub>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005460:	462a      	mov	r2, r5
 8005462:	4633      	mov	r3, r6
 8005464:	f7fb fac8 	bl	80009f8 <__aeabi_dcmpgt>
 8005468:	2800      	cmp	r0, #0
 800546a:	f040 828e 	bne.w	800598a <_dtoa_r+0x942>
 800546e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005472:	462a      	mov	r2, r5
 8005474:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005478:	f7fb faa0 	bl	80009bc <__aeabi_dcmplt>
 800547c:	2800      	cmp	r0, #0
 800547e:	f040 8127 	bne.w	80056d0 <_dtoa_r+0x688>
 8005482:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005486:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800548a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800548c:	2b00      	cmp	r3, #0
 800548e:	f2c0 8163 	blt.w	8005758 <_dtoa_r+0x710>
 8005492:	2f0e      	cmp	r7, #14
 8005494:	f300 8160 	bgt.w	8005758 <_dtoa_r+0x710>
 8005498:	4b33      	ldr	r3, [pc, #204]	@ (8005568 <_dtoa_r+0x520>)
 800549a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800549e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	da03      	bge.n	80054b4 <_dtoa_r+0x46c>
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f340 8100 	ble.w	80056b4 <_dtoa_r+0x66c>
 80054b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054b8:	4656      	mov	r6, sl
 80054ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054be:	4620      	mov	r0, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb f933 	bl	800072c <__aeabi_ddiv>
 80054c6:	f7fb fab7 	bl	8000a38 <__aeabi_d2iz>
 80054ca:	4680      	mov	r8, r0
 80054cc:	f7fa ff9a 	bl	8000404 <__aeabi_i2d>
 80054d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4620      	mov	r0, r4
 80054de:	4629      	mov	r1, r5
 80054e0:	f7fa fe42 	bl	8000168 <__aeabi_dsub>
 80054e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80054e8:	9d07      	ldr	r5, [sp, #28]
 80054ea:	f806 4b01 	strb.w	r4, [r6], #1
 80054ee:	eba6 040a 	sub.w	r4, r6, sl
 80054f2:	42a5      	cmp	r5, r4
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	f040 8116 	bne.w	8005728 <_dtoa_r+0x6e0>
 80054fc:	f7fa fe36 	bl	800016c <__adddf3>
 8005500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005504:	4604      	mov	r4, r0
 8005506:	460d      	mov	r5, r1
 8005508:	f7fb fa76 	bl	80009f8 <__aeabi_dcmpgt>
 800550c:	2800      	cmp	r0, #0
 800550e:	f040 80f8 	bne.w	8005702 <_dtoa_r+0x6ba>
 8005512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005516:	4620      	mov	r0, r4
 8005518:	4629      	mov	r1, r5
 800551a:	f7fb fa45 	bl	80009a8 <__aeabi_dcmpeq>
 800551e:	b118      	cbz	r0, 8005528 <_dtoa_r+0x4e0>
 8005520:	f018 0f01 	tst.w	r8, #1
 8005524:	f040 80ed 	bne.w	8005702 <_dtoa_r+0x6ba>
 8005528:	4649      	mov	r1, r9
 800552a:	4658      	mov	r0, fp
 800552c:	f000 fc92 	bl	8005e54 <_Bfree>
 8005530:	2300      	movs	r3, #0
 8005532:	7033      	strb	r3, [r6, #0]
 8005534:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005536:	3701      	adds	r7, #1
 8005538:	601f      	str	r7, [r3, #0]
 800553a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800553c:	2b00      	cmp	r3, #0
 800553e:	f000 8320 	beq.w	8005b82 <_dtoa_r+0xb3a>
 8005542:	601e      	str	r6, [r3, #0]
 8005544:	e31d      	b.n	8005b82 <_dtoa_r+0xb3a>
 8005546:	07e2      	lsls	r2, r4, #31
 8005548:	d505      	bpl.n	8005556 <_dtoa_r+0x50e>
 800554a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800554e:	f7fa ffc3 	bl	80004d8 <__aeabi_dmul>
 8005552:	2301      	movs	r3, #1
 8005554:	3601      	adds	r6, #1
 8005556:	1064      	asrs	r4, r4, #1
 8005558:	3508      	adds	r5, #8
 800555a:	e73f      	b.n	80053dc <_dtoa_r+0x394>
 800555c:	2602      	movs	r6, #2
 800555e:	e742      	b.n	80053e6 <_dtoa_r+0x39e>
 8005560:	9c07      	ldr	r4, [sp, #28]
 8005562:	9704      	str	r7, [sp, #16]
 8005564:	e761      	b.n	800542a <_dtoa_r+0x3e2>
 8005566:	bf00      	nop
 8005568:	080071a8 	.word	0x080071a8
 800556c:	08007180 	.word	0x08007180
 8005570:	3ff00000 	.word	0x3ff00000
 8005574:	40240000 	.word	0x40240000
 8005578:	401c0000 	.word	0x401c0000
 800557c:	40140000 	.word	0x40140000
 8005580:	4b70      	ldr	r3, [pc, #448]	@ (8005744 <_dtoa_r+0x6fc>)
 8005582:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005584:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800558c:	4454      	add	r4, sl
 800558e:	2900      	cmp	r1, #0
 8005590:	d045      	beq.n	800561e <_dtoa_r+0x5d6>
 8005592:	2000      	movs	r0, #0
 8005594:	496c      	ldr	r1, [pc, #432]	@ (8005748 <_dtoa_r+0x700>)
 8005596:	f7fb f8c9 	bl	800072c <__aeabi_ddiv>
 800559a:	4633      	mov	r3, r6
 800559c:	462a      	mov	r2, r5
 800559e:	f7fa fde3 	bl	8000168 <__aeabi_dsub>
 80055a2:	4656      	mov	r6, sl
 80055a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80055a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055ac:	f7fb fa44 	bl	8000a38 <__aeabi_d2iz>
 80055b0:	4605      	mov	r5, r0
 80055b2:	f7fa ff27 	bl	8000404 <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055be:	f7fa fdd3 	bl	8000168 <__aeabi_dsub>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	3530      	adds	r5, #48	@ 0x30
 80055c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055d0:	f806 5b01 	strb.w	r5, [r6], #1
 80055d4:	f7fb f9f2 	bl	80009bc <__aeabi_dcmplt>
 80055d8:	2800      	cmp	r0, #0
 80055da:	d163      	bne.n	80056a4 <_dtoa_r+0x65c>
 80055dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055e0:	2000      	movs	r0, #0
 80055e2:	495a      	ldr	r1, [pc, #360]	@ (800574c <_dtoa_r+0x704>)
 80055e4:	f7fa fdc0 	bl	8000168 <__aeabi_dsub>
 80055e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80055ec:	f7fb f9e6 	bl	80009bc <__aeabi_dcmplt>
 80055f0:	2800      	cmp	r0, #0
 80055f2:	f040 8087 	bne.w	8005704 <_dtoa_r+0x6bc>
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	f43f af43 	beq.w	8005482 <_dtoa_r+0x43a>
 80055fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005600:	2200      	movs	r2, #0
 8005602:	4b53      	ldr	r3, [pc, #332]	@ (8005750 <_dtoa_r+0x708>)
 8005604:	f7fa ff68 	bl	80004d8 <__aeabi_dmul>
 8005608:	2200      	movs	r2, #0
 800560a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800560e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005612:	4b4f      	ldr	r3, [pc, #316]	@ (8005750 <_dtoa_r+0x708>)
 8005614:	f7fa ff60 	bl	80004d8 <__aeabi_dmul>
 8005618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800561c:	e7c4      	b.n	80055a8 <_dtoa_r+0x560>
 800561e:	4631      	mov	r1, r6
 8005620:	4628      	mov	r0, r5
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	4656      	mov	r6, sl
 8005628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800562c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800562e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005632:	f7fb fa01 	bl	8000a38 <__aeabi_d2iz>
 8005636:	4605      	mov	r5, r0
 8005638:	f7fa fee4 	bl	8000404 <__aeabi_i2d>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005644:	f7fa fd90 	bl	8000168 <__aeabi_dsub>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	3530      	adds	r5, #48	@ 0x30
 800564e:	f806 5b01 	strb.w	r5, [r6], #1
 8005652:	42a6      	cmp	r6, r4
 8005654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	d124      	bne.n	80056a8 <_dtoa_r+0x660>
 800565e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005662:	4b39      	ldr	r3, [pc, #228]	@ (8005748 <_dtoa_r+0x700>)
 8005664:	f7fa fd82 	bl	800016c <__adddf3>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005670:	f7fb f9c2 	bl	80009f8 <__aeabi_dcmpgt>
 8005674:	2800      	cmp	r0, #0
 8005676:	d145      	bne.n	8005704 <_dtoa_r+0x6bc>
 8005678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800567c:	2000      	movs	r0, #0
 800567e:	4932      	ldr	r1, [pc, #200]	@ (8005748 <_dtoa_r+0x700>)
 8005680:	f7fa fd72 	bl	8000168 <__aeabi_dsub>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800568c:	f7fb f996 	bl	80009bc <__aeabi_dcmplt>
 8005690:	2800      	cmp	r0, #0
 8005692:	f43f aef6 	beq.w	8005482 <_dtoa_r+0x43a>
 8005696:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005698:	1e73      	subs	r3, r6, #1
 800569a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800569c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80056a0:	2b30      	cmp	r3, #48	@ 0x30
 80056a2:	d0f8      	beq.n	8005696 <_dtoa_r+0x64e>
 80056a4:	9f04      	ldr	r7, [sp, #16]
 80056a6:	e73f      	b.n	8005528 <_dtoa_r+0x4e0>
 80056a8:	4b29      	ldr	r3, [pc, #164]	@ (8005750 <_dtoa_r+0x708>)
 80056aa:	f7fa ff15 	bl	80004d8 <__aeabi_dmul>
 80056ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b2:	e7bc      	b.n	800562e <_dtoa_r+0x5e6>
 80056b4:	d10c      	bne.n	80056d0 <_dtoa_r+0x688>
 80056b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ba:	2200      	movs	r2, #0
 80056bc:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <_dtoa_r+0x70c>)
 80056be:	f7fa ff0b 	bl	80004d8 <__aeabi_dmul>
 80056c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056c6:	f7fb f98d 	bl	80009e4 <__aeabi_dcmpge>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f000 815b 	beq.w	8005986 <_dtoa_r+0x93e>
 80056d0:	2400      	movs	r4, #0
 80056d2:	4625      	mov	r5, r4
 80056d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056d6:	4656      	mov	r6, sl
 80056d8:	43db      	mvns	r3, r3
 80056da:	9304      	str	r3, [sp, #16]
 80056dc:	2700      	movs	r7, #0
 80056de:	4621      	mov	r1, r4
 80056e0:	4658      	mov	r0, fp
 80056e2:	f000 fbb7 	bl	8005e54 <_Bfree>
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	d0dc      	beq.n	80056a4 <_dtoa_r+0x65c>
 80056ea:	b12f      	cbz	r7, 80056f8 <_dtoa_r+0x6b0>
 80056ec:	42af      	cmp	r7, r5
 80056ee:	d003      	beq.n	80056f8 <_dtoa_r+0x6b0>
 80056f0:	4639      	mov	r1, r7
 80056f2:	4658      	mov	r0, fp
 80056f4:	f000 fbae 	bl	8005e54 <_Bfree>
 80056f8:	4629      	mov	r1, r5
 80056fa:	4658      	mov	r0, fp
 80056fc:	f000 fbaa 	bl	8005e54 <_Bfree>
 8005700:	e7d0      	b.n	80056a4 <_dtoa_r+0x65c>
 8005702:	9704      	str	r7, [sp, #16]
 8005704:	4633      	mov	r3, r6
 8005706:	461e      	mov	r6, r3
 8005708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800570c:	2a39      	cmp	r2, #57	@ 0x39
 800570e:	d107      	bne.n	8005720 <_dtoa_r+0x6d8>
 8005710:	459a      	cmp	sl, r3
 8005712:	d1f8      	bne.n	8005706 <_dtoa_r+0x6be>
 8005714:	9a04      	ldr	r2, [sp, #16]
 8005716:	3201      	adds	r2, #1
 8005718:	9204      	str	r2, [sp, #16]
 800571a:	2230      	movs	r2, #48	@ 0x30
 800571c:	f88a 2000 	strb.w	r2, [sl]
 8005720:	781a      	ldrb	r2, [r3, #0]
 8005722:	3201      	adds	r2, #1
 8005724:	701a      	strb	r2, [r3, #0]
 8005726:	e7bd      	b.n	80056a4 <_dtoa_r+0x65c>
 8005728:	2200      	movs	r2, #0
 800572a:	4b09      	ldr	r3, [pc, #36]	@ (8005750 <_dtoa_r+0x708>)
 800572c:	f7fa fed4 	bl	80004d8 <__aeabi_dmul>
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	4604      	mov	r4, r0
 8005736:	460d      	mov	r5, r1
 8005738:	f7fb f936 	bl	80009a8 <__aeabi_dcmpeq>
 800573c:	2800      	cmp	r0, #0
 800573e:	f43f aebc 	beq.w	80054ba <_dtoa_r+0x472>
 8005742:	e6f1      	b.n	8005528 <_dtoa_r+0x4e0>
 8005744:	080071a8 	.word	0x080071a8
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	3ff00000 	.word	0x3ff00000
 8005750:	40240000 	.word	0x40240000
 8005754:	40140000 	.word	0x40140000
 8005758:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800575a:	2a00      	cmp	r2, #0
 800575c:	f000 80db 	beq.w	8005916 <_dtoa_r+0x8ce>
 8005760:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005762:	2a01      	cmp	r2, #1
 8005764:	f300 80bf 	bgt.w	80058e6 <_dtoa_r+0x89e>
 8005768:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800576a:	2a00      	cmp	r2, #0
 800576c:	f000 80b7 	beq.w	80058de <_dtoa_r+0x896>
 8005770:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005774:	4646      	mov	r6, r8
 8005776:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800577a:	2101      	movs	r1, #1
 800577c:	441a      	add	r2, r3
 800577e:	4658      	mov	r0, fp
 8005780:	4498      	add	r8, r3
 8005782:	9209      	str	r2, [sp, #36]	@ 0x24
 8005784:	f000 fc1a 	bl	8005fbc <__i2b>
 8005788:	4605      	mov	r5, r0
 800578a:	b15e      	cbz	r6, 80057a4 <_dtoa_r+0x75c>
 800578c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	dd08      	ble.n	80057a4 <_dtoa_r+0x75c>
 8005792:	42b3      	cmp	r3, r6
 8005794:	bfa8      	it	ge
 8005796:	4633      	movge	r3, r6
 8005798:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800579a:	eba8 0803 	sub.w	r8, r8, r3
 800579e:	1af6      	subs	r6, r6, r3
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80057a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057a6:	b1f3      	cbz	r3, 80057e6 <_dtoa_r+0x79e>
 80057a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80b7 	beq.w	800591e <_dtoa_r+0x8d6>
 80057b0:	b18c      	cbz	r4, 80057d6 <_dtoa_r+0x78e>
 80057b2:	4629      	mov	r1, r5
 80057b4:	4622      	mov	r2, r4
 80057b6:	4658      	mov	r0, fp
 80057b8:	f000 fcbe 	bl	8006138 <__pow5mult>
 80057bc:	464a      	mov	r2, r9
 80057be:	4601      	mov	r1, r0
 80057c0:	4605      	mov	r5, r0
 80057c2:	4658      	mov	r0, fp
 80057c4:	f000 fc10 	bl	8005fe8 <__multiply>
 80057c8:	4649      	mov	r1, r9
 80057ca:	9004      	str	r0, [sp, #16]
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 fb41 	bl	8005e54 <_Bfree>
 80057d2:	9b04      	ldr	r3, [sp, #16]
 80057d4:	4699      	mov	r9, r3
 80057d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057d8:	1b1a      	subs	r2, r3, r4
 80057da:	d004      	beq.n	80057e6 <_dtoa_r+0x79e>
 80057dc:	4649      	mov	r1, r9
 80057de:	4658      	mov	r0, fp
 80057e0:	f000 fcaa 	bl	8006138 <__pow5mult>
 80057e4:	4681      	mov	r9, r0
 80057e6:	2101      	movs	r1, #1
 80057e8:	4658      	mov	r0, fp
 80057ea:	f000 fbe7 	bl	8005fbc <__i2b>
 80057ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057f0:	4604      	mov	r4, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 81c9 	beq.w	8005b8a <_dtoa_r+0xb42>
 80057f8:	461a      	mov	r2, r3
 80057fa:	4601      	mov	r1, r0
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fc9b 	bl	8006138 <__pow5mult>
 8005802:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005804:	4604      	mov	r4, r0
 8005806:	2b01      	cmp	r3, #1
 8005808:	f300 808f 	bgt.w	800592a <_dtoa_r+0x8e2>
 800580c:	9b02      	ldr	r3, [sp, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 8087 	bne.w	8005922 <_dtoa_r+0x8da>
 8005814:	9b03      	ldr	r3, [sp, #12]
 8005816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 8083 	bne.w	8005926 <_dtoa_r+0x8de>
 8005820:	9b03      	ldr	r3, [sp, #12]
 8005822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005826:	0d1b      	lsrs	r3, r3, #20
 8005828:	051b      	lsls	r3, r3, #20
 800582a:	b12b      	cbz	r3, 8005838 <_dtoa_r+0x7f0>
 800582c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800582e:	f108 0801 	add.w	r8, r8, #1
 8005832:	3301      	adds	r3, #1
 8005834:	9309      	str	r3, [sp, #36]	@ 0x24
 8005836:	2301      	movs	r3, #1
 8005838:	930a      	str	r3, [sp, #40]	@ 0x28
 800583a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 81aa 	beq.w	8005b96 <_dtoa_r+0xb4e>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005848:	6918      	ldr	r0, [r3, #16]
 800584a:	f000 fb6b 	bl	8005f24 <__hi0bits>
 800584e:	f1c0 0020 	rsb	r0, r0, #32
 8005852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005854:	4418      	add	r0, r3
 8005856:	f010 001f 	ands.w	r0, r0, #31
 800585a:	d071      	beq.n	8005940 <_dtoa_r+0x8f8>
 800585c:	f1c0 0320 	rsb	r3, r0, #32
 8005860:	2b04      	cmp	r3, #4
 8005862:	dd65      	ble.n	8005930 <_dtoa_r+0x8e8>
 8005864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005866:	f1c0 001c 	rsb	r0, r0, #28
 800586a:	4403      	add	r3, r0
 800586c:	4480      	add	r8, r0
 800586e:	4406      	add	r6, r0
 8005870:	9309      	str	r3, [sp, #36]	@ 0x24
 8005872:	f1b8 0f00 	cmp.w	r8, #0
 8005876:	dd05      	ble.n	8005884 <_dtoa_r+0x83c>
 8005878:	4649      	mov	r1, r9
 800587a:	4642      	mov	r2, r8
 800587c:	4658      	mov	r0, fp
 800587e:	f000 fcb5 	bl	80061ec <__lshift>
 8005882:	4681      	mov	r9, r0
 8005884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	dd05      	ble.n	8005896 <_dtoa_r+0x84e>
 800588a:	4621      	mov	r1, r4
 800588c:	461a      	mov	r2, r3
 800588e:	4658      	mov	r0, fp
 8005890:	f000 fcac 	bl	80061ec <__lshift>
 8005894:	4604      	mov	r4, r0
 8005896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d053      	beq.n	8005944 <_dtoa_r+0x8fc>
 800589c:	4621      	mov	r1, r4
 800589e:	4648      	mov	r0, r9
 80058a0:	f000 fd10 	bl	80062c4 <__mcmp>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	da4d      	bge.n	8005944 <_dtoa_r+0x8fc>
 80058a8:	1e7b      	subs	r3, r7, #1
 80058aa:	4649      	mov	r1, r9
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	220a      	movs	r2, #10
 80058b0:	2300      	movs	r3, #0
 80058b2:	4658      	mov	r0, fp
 80058b4:	f000 faf0 	bl	8005e98 <__multadd>
 80058b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058ba:	4681      	mov	r9, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 816c 	beq.w	8005b9a <_dtoa_r+0xb52>
 80058c2:	2300      	movs	r3, #0
 80058c4:	4629      	mov	r1, r5
 80058c6:	220a      	movs	r2, #10
 80058c8:	4658      	mov	r0, fp
 80058ca:	f000 fae5 	bl	8005e98 <__multadd>
 80058ce:	9b08      	ldr	r3, [sp, #32]
 80058d0:	4605      	mov	r5, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dc61      	bgt.n	800599a <_dtoa_r+0x952>
 80058d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80058d8:	2b02      	cmp	r3, #2
 80058da:	dc3b      	bgt.n	8005954 <_dtoa_r+0x90c>
 80058dc:	e05d      	b.n	800599a <_dtoa_r+0x952>
 80058de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058e4:	e746      	b.n	8005774 <_dtoa_r+0x72c>
 80058e6:	9b07      	ldr	r3, [sp, #28]
 80058e8:	1e5c      	subs	r4, r3, #1
 80058ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	bfbf      	itttt	lt
 80058f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80058f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80058f4:	1ae3      	sublt	r3, r4, r3
 80058f6:	18d2      	addlt	r2, r2, r3
 80058f8:	bfa8      	it	ge
 80058fa:	1b1c      	subge	r4, r3, r4
 80058fc:	9b07      	ldr	r3, [sp, #28]
 80058fe:	bfbe      	ittt	lt
 8005900:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005902:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005904:	2400      	movlt	r4, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb5      	itete	lt
 800590a:	eba8 0603 	sublt.w	r6, r8, r3
 800590e:	4646      	movge	r6, r8
 8005910:	2300      	movlt	r3, #0
 8005912:	9b07      	ldrge	r3, [sp, #28]
 8005914:	e730      	b.n	8005778 <_dtoa_r+0x730>
 8005916:	4646      	mov	r6, r8
 8005918:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800591a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800591c:	e735      	b.n	800578a <_dtoa_r+0x742>
 800591e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005920:	e75c      	b.n	80057dc <_dtoa_r+0x794>
 8005922:	2300      	movs	r3, #0
 8005924:	e788      	b.n	8005838 <_dtoa_r+0x7f0>
 8005926:	9b02      	ldr	r3, [sp, #8]
 8005928:	e786      	b.n	8005838 <_dtoa_r+0x7f0>
 800592a:	2300      	movs	r3, #0
 800592c:	930a      	str	r3, [sp, #40]	@ 0x28
 800592e:	e788      	b.n	8005842 <_dtoa_r+0x7fa>
 8005930:	d09f      	beq.n	8005872 <_dtoa_r+0x82a>
 8005932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005934:	331c      	adds	r3, #28
 8005936:	441a      	add	r2, r3
 8005938:	4498      	add	r8, r3
 800593a:	441e      	add	r6, r3
 800593c:	9209      	str	r2, [sp, #36]	@ 0x24
 800593e:	e798      	b.n	8005872 <_dtoa_r+0x82a>
 8005940:	4603      	mov	r3, r0
 8005942:	e7f6      	b.n	8005932 <_dtoa_r+0x8ea>
 8005944:	9b07      	ldr	r3, [sp, #28]
 8005946:	9704      	str	r7, [sp, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc20      	bgt.n	800598e <_dtoa_r+0x946>
 800594c:	9308      	str	r3, [sp, #32]
 800594e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005950:	2b02      	cmp	r3, #2
 8005952:	dd1e      	ble.n	8005992 <_dtoa_r+0x94a>
 8005954:	9b08      	ldr	r3, [sp, #32]
 8005956:	2b00      	cmp	r3, #0
 8005958:	f47f aebc 	bne.w	80056d4 <_dtoa_r+0x68c>
 800595c:	4621      	mov	r1, r4
 800595e:	2205      	movs	r2, #5
 8005960:	4658      	mov	r0, fp
 8005962:	f000 fa99 	bl	8005e98 <__multadd>
 8005966:	4601      	mov	r1, r0
 8005968:	4604      	mov	r4, r0
 800596a:	4648      	mov	r0, r9
 800596c:	f000 fcaa 	bl	80062c4 <__mcmp>
 8005970:	2800      	cmp	r0, #0
 8005972:	f77f aeaf 	ble.w	80056d4 <_dtoa_r+0x68c>
 8005976:	2331      	movs	r3, #49	@ 0x31
 8005978:	4656      	mov	r6, sl
 800597a:	f806 3b01 	strb.w	r3, [r6], #1
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	3301      	adds	r3, #1
 8005982:	9304      	str	r3, [sp, #16]
 8005984:	e6aa      	b.n	80056dc <_dtoa_r+0x694>
 8005986:	9c07      	ldr	r4, [sp, #28]
 8005988:	9704      	str	r7, [sp, #16]
 800598a:	4625      	mov	r5, r4
 800598c:	e7f3      	b.n	8005976 <_dtoa_r+0x92e>
 800598e:	9b07      	ldr	r3, [sp, #28]
 8005990:	9308      	str	r3, [sp, #32]
 8005992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8104 	beq.w	8005ba2 <_dtoa_r+0xb5a>
 800599a:	2e00      	cmp	r6, #0
 800599c:	dd05      	ble.n	80059aa <_dtoa_r+0x962>
 800599e:	4629      	mov	r1, r5
 80059a0:	4632      	mov	r2, r6
 80059a2:	4658      	mov	r0, fp
 80059a4:	f000 fc22 	bl	80061ec <__lshift>
 80059a8:	4605      	mov	r5, r0
 80059aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d05a      	beq.n	8005a66 <_dtoa_r+0xa1e>
 80059b0:	4658      	mov	r0, fp
 80059b2:	6869      	ldr	r1, [r5, #4]
 80059b4:	f000 fa0e 	bl	8005dd4 <_Balloc>
 80059b8:	4606      	mov	r6, r0
 80059ba:	b928      	cbnz	r0, 80059c8 <_dtoa_r+0x980>
 80059bc:	4602      	mov	r2, r0
 80059be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80059c2:	4b83      	ldr	r3, [pc, #524]	@ (8005bd0 <_dtoa_r+0xb88>)
 80059c4:	f7ff bb54 	b.w	8005070 <_dtoa_r+0x28>
 80059c8:	692a      	ldr	r2, [r5, #16]
 80059ca:	f105 010c 	add.w	r1, r5, #12
 80059ce:	3202      	adds	r2, #2
 80059d0:	0092      	lsls	r2, r2, #2
 80059d2:	300c      	adds	r0, #12
 80059d4:	f000 ffa8 	bl	8006928 <memcpy>
 80059d8:	2201      	movs	r2, #1
 80059da:	4631      	mov	r1, r6
 80059dc:	4658      	mov	r0, fp
 80059de:	f000 fc05 	bl	80061ec <__lshift>
 80059e2:	462f      	mov	r7, r5
 80059e4:	4605      	mov	r5, r0
 80059e6:	f10a 0301 	add.w	r3, sl, #1
 80059ea:	9307      	str	r3, [sp, #28]
 80059ec:	9b08      	ldr	r3, [sp, #32]
 80059ee:	4453      	add	r3, sl
 80059f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059f2:	9b02      	ldr	r3, [sp, #8]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059fa:	9b07      	ldr	r3, [sp, #28]
 80059fc:	4621      	mov	r1, r4
 80059fe:	3b01      	subs	r3, #1
 8005a00:	4648      	mov	r0, r9
 8005a02:	9302      	str	r3, [sp, #8]
 8005a04:	f7ff fa97 	bl	8004f36 <quorem>
 8005a08:	4639      	mov	r1, r7
 8005a0a:	9008      	str	r0, [sp, #32]
 8005a0c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005a10:	4648      	mov	r0, r9
 8005a12:	f000 fc57 	bl	80062c4 <__mcmp>
 8005a16:	462a      	mov	r2, r5
 8005a18:	9009      	str	r0, [sp, #36]	@ 0x24
 8005a1a:	4621      	mov	r1, r4
 8005a1c:	4658      	mov	r0, fp
 8005a1e:	f000 fc6d 	bl	80062fc <__mdiff>
 8005a22:	68c2      	ldr	r2, [r0, #12]
 8005a24:	4606      	mov	r6, r0
 8005a26:	bb02      	cbnz	r2, 8005a6a <_dtoa_r+0xa22>
 8005a28:	4601      	mov	r1, r0
 8005a2a:	4648      	mov	r0, r9
 8005a2c:	f000 fc4a 	bl	80062c4 <__mcmp>
 8005a30:	4602      	mov	r2, r0
 8005a32:	4631      	mov	r1, r6
 8005a34:	4658      	mov	r0, fp
 8005a36:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a38:	f000 fa0c 	bl	8005e54 <_Bfree>
 8005a3c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a40:	9e07      	ldr	r6, [sp, #28]
 8005a42:	ea43 0102 	orr.w	r1, r3, r2
 8005a46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a48:	4319      	orrs	r1, r3
 8005a4a:	d110      	bne.n	8005a6e <_dtoa_r+0xa26>
 8005a4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005a50:	d029      	beq.n	8005aa6 <_dtoa_r+0xa5e>
 8005a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dd02      	ble.n	8005a5e <_dtoa_r+0xa16>
 8005a58:	9b08      	ldr	r3, [sp, #32]
 8005a5a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005a5e:	9b02      	ldr	r3, [sp, #8]
 8005a60:	f883 8000 	strb.w	r8, [r3]
 8005a64:	e63b      	b.n	80056de <_dtoa_r+0x696>
 8005a66:	4628      	mov	r0, r5
 8005a68:	e7bb      	b.n	80059e2 <_dtoa_r+0x99a>
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	e7e1      	b.n	8005a32 <_dtoa_r+0x9ea>
 8005a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	db04      	blt.n	8005a7e <_dtoa_r+0xa36>
 8005a74:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005a76:	430b      	orrs	r3, r1
 8005a78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	d120      	bne.n	8005ac0 <_dtoa_r+0xa78>
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	dded      	ble.n	8005a5e <_dtoa_r+0xa16>
 8005a82:	4649      	mov	r1, r9
 8005a84:	2201      	movs	r2, #1
 8005a86:	4658      	mov	r0, fp
 8005a88:	f000 fbb0 	bl	80061ec <__lshift>
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4681      	mov	r9, r0
 8005a90:	f000 fc18 	bl	80062c4 <__mcmp>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	dc03      	bgt.n	8005aa0 <_dtoa_r+0xa58>
 8005a98:	d1e1      	bne.n	8005a5e <_dtoa_r+0xa16>
 8005a9a:	f018 0f01 	tst.w	r8, #1
 8005a9e:	d0de      	beq.n	8005a5e <_dtoa_r+0xa16>
 8005aa0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005aa4:	d1d8      	bne.n	8005a58 <_dtoa_r+0xa10>
 8005aa6:	2339      	movs	r3, #57	@ 0x39
 8005aa8:	9a02      	ldr	r2, [sp, #8]
 8005aaa:	7013      	strb	r3, [r2, #0]
 8005aac:	4633      	mov	r3, r6
 8005aae:	461e      	mov	r6, r3
 8005ab0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	2a39      	cmp	r2, #57	@ 0x39
 8005ab8:	d052      	beq.n	8005b60 <_dtoa_r+0xb18>
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e60e      	b.n	80056de <_dtoa_r+0x696>
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	dd07      	ble.n	8005ad4 <_dtoa_r+0xa8c>
 8005ac4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ac8:	d0ed      	beq.n	8005aa6 <_dtoa_r+0xa5e>
 8005aca:	9a02      	ldr	r2, [sp, #8]
 8005acc:	f108 0301 	add.w	r3, r8, #1
 8005ad0:	7013      	strb	r3, [r2, #0]
 8005ad2:	e604      	b.n	80056de <_dtoa_r+0x696>
 8005ad4:	9b07      	ldr	r3, [sp, #28]
 8005ad6:	9a07      	ldr	r2, [sp, #28]
 8005ad8:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d028      	beq.n	8005b34 <_dtoa_r+0xaec>
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	220a      	movs	r2, #10
 8005ae8:	4658      	mov	r0, fp
 8005aea:	f000 f9d5 	bl	8005e98 <__multadd>
 8005aee:	42af      	cmp	r7, r5
 8005af0:	4681      	mov	r9, r0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	f04f 020a 	mov.w	r2, #10
 8005afa:	4639      	mov	r1, r7
 8005afc:	4658      	mov	r0, fp
 8005afe:	d107      	bne.n	8005b10 <_dtoa_r+0xac8>
 8005b00:	f000 f9ca 	bl	8005e98 <__multadd>
 8005b04:	4607      	mov	r7, r0
 8005b06:	4605      	mov	r5, r0
 8005b08:	9b07      	ldr	r3, [sp, #28]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	9307      	str	r3, [sp, #28]
 8005b0e:	e774      	b.n	80059fa <_dtoa_r+0x9b2>
 8005b10:	f000 f9c2 	bl	8005e98 <__multadd>
 8005b14:	4629      	mov	r1, r5
 8005b16:	4607      	mov	r7, r0
 8005b18:	2300      	movs	r3, #0
 8005b1a:	220a      	movs	r2, #10
 8005b1c:	4658      	mov	r0, fp
 8005b1e:	f000 f9bb 	bl	8005e98 <__multadd>
 8005b22:	4605      	mov	r5, r0
 8005b24:	e7f0      	b.n	8005b08 <_dtoa_r+0xac0>
 8005b26:	9b08      	ldr	r3, [sp, #32]
 8005b28:	2700      	movs	r7, #0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bfcc      	ite	gt
 8005b2e:	461e      	movgt	r6, r3
 8005b30:	2601      	movle	r6, #1
 8005b32:	4456      	add	r6, sl
 8005b34:	4649      	mov	r1, r9
 8005b36:	2201      	movs	r2, #1
 8005b38:	4658      	mov	r0, fp
 8005b3a:	f000 fb57 	bl	80061ec <__lshift>
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4681      	mov	r9, r0
 8005b42:	f000 fbbf 	bl	80062c4 <__mcmp>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	dcb0      	bgt.n	8005aac <_dtoa_r+0xa64>
 8005b4a:	d102      	bne.n	8005b52 <_dtoa_r+0xb0a>
 8005b4c:	f018 0f01 	tst.w	r8, #1
 8005b50:	d1ac      	bne.n	8005aac <_dtoa_r+0xa64>
 8005b52:	4633      	mov	r3, r6
 8005b54:	461e      	mov	r6, r3
 8005b56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b5a:	2a30      	cmp	r2, #48	@ 0x30
 8005b5c:	d0fa      	beq.n	8005b54 <_dtoa_r+0xb0c>
 8005b5e:	e5be      	b.n	80056de <_dtoa_r+0x696>
 8005b60:	459a      	cmp	sl, r3
 8005b62:	d1a4      	bne.n	8005aae <_dtoa_r+0xa66>
 8005b64:	9b04      	ldr	r3, [sp, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	9304      	str	r3, [sp, #16]
 8005b6a:	2331      	movs	r3, #49	@ 0x31
 8005b6c:	f88a 3000 	strb.w	r3, [sl]
 8005b70:	e5b5      	b.n	80056de <_dtoa_r+0x696>
 8005b72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b74:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005bd4 <_dtoa_r+0xb8c>
 8005b78:	b11b      	cbz	r3, 8005b82 <_dtoa_r+0xb3a>
 8005b7a:	f10a 0308 	add.w	r3, sl, #8
 8005b7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	4650      	mov	r0, sl
 8005b84:	b017      	add	sp, #92	@ 0x5c
 8005b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	f77f ae3d 	ble.w	800580c <_dtoa_r+0x7c4>
 8005b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b96:	2001      	movs	r0, #1
 8005b98:	e65b      	b.n	8005852 <_dtoa_r+0x80a>
 8005b9a:	9b08      	ldr	r3, [sp, #32]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f77f aed6 	ble.w	800594e <_dtoa_r+0x906>
 8005ba2:	4656      	mov	r6, sl
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	f7ff f9c5 	bl	8004f36 <quorem>
 8005bac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005bb0:	9b08      	ldr	r3, [sp, #32]
 8005bb2:	f806 8b01 	strb.w	r8, [r6], #1
 8005bb6:	eba6 020a 	sub.w	r2, r6, sl
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	ddb3      	ble.n	8005b26 <_dtoa_r+0xade>
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	220a      	movs	r2, #10
 8005bc4:	4658      	mov	r0, fp
 8005bc6:	f000 f967 	bl	8005e98 <__multadd>
 8005bca:	4681      	mov	r9, r0
 8005bcc:	e7ea      	b.n	8005ba4 <_dtoa_r+0xb5c>
 8005bce:	bf00      	nop
 8005bd0:	0800710a 	.word	0x0800710a
 8005bd4:	0800708e 	.word	0x0800708e

08005bd8 <_free_r>:
 8005bd8:	b538      	push	{r3, r4, r5, lr}
 8005bda:	4605      	mov	r5, r0
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d040      	beq.n	8005c62 <_free_r+0x8a>
 8005be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be4:	1f0c      	subs	r4, r1, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bfb8      	it	lt
 8005bea:	18e4      	addlt	r4, r4, r3
 8005bec:	f000 f8e6 	bl	8005dbc <__malloc_lock>
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c64 <_free_r+0x8c>)
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	b933      	cbnz	r3, 8005c04 <_free_r+0x2c>
 8005bf6:	6063      	str	r3, [r4, #4]
 8005bf8:	6014      	str	r4, [r2, #0]
 8005bfa:	4628      	mov	r0, r5
 8005bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c00:	f000 b8e2 	b.w	8005dc8 <__malloc_unlock>
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	d908      	bls.n	8005c1a <_free_r+0x42>
 8005c08:	6820      	ldr	r0, [r4, #0]
 8005c0a:	1821      	adds	r1, r4, r0
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	bf01      	itttt	eq
 8005c10:	6819      	ldreq	r1, [r3, #0]
 8005c12:	685b      	ldreq	r3, [r3, #4]
 8005c14:	1809      	addeq	r1, r1, r0
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	e7ed      	b.n	8005bf6 <_free_r+0x1e>
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	b10b      	cbz	r3, 8005c24 <_free_r+0x4c>
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d9fa      	bls.n	8005c1a <_free_r+0x42>
 8005c24:	6811      	ldr	r1, [r2, #0]
 8005c26:	1850      	adds	r0, r2, r1
 8005c28:	42a0      	cmp	r0, r4
 8005c2a:	d10b      	bne.n	8005c44 <_free_r+0x6c>
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	4401      	add	r1, r0
 8005c30:	1850      	adds	r0, r2, r1
 8005c32:	4283      	cmp	r3, r0
 8005c34:	6011      	str	r1, [r2, #0]
 8005c36:	d1e0      	bne.n	8005bfa <_free_r+0x22>
 8005c38:	6818      	ldr	r0, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	4408      	add	r0, r1
 8005c3e:	6010      	str	r0, [r2, #0]
 8005c40:	6053      	str	r3, [r2, #4]
 8005c42:	e7da      	b.n	8005bfa <_free_r+0x22>
 8005c44:	d902      	bls.n	8005c4c <_free_r+0x74>
 8005c46:	230c      	movs	r3, #12
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	e7d6      	b.n	8005bfa <_free_r+0x22>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	1821      	adds	r1, r4, r0
 8005c50:	428b      	cmp	r3, r1
 8005c52:	bf01      	itttt	eq
 8005c54:	6819      	ldreq	r1, [r3, #0]
 8005c56:	685b      	ldreq	r3, [r3, #4]
 8005c58:	1809      	addeq	r1, r1, r0
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	6063      	str	r3, [r4, #4]
 8005c5e:	6054      	str	r4, [r2, #4]
 8005c60:	e7cb      	b.n	8005bfa <_free_r+0x22>
 8005c62:	bd38      	pop	{r3, r4, r5, pc}
 8005c64:	20000408 	.word	0x20000408

08005c68 <malloc>:
 8005c68:	4b02      	ldr	r3, [pc, #8]	@ (8005c74 <malloc+0xc>)
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	f000 b825 	b.w	8005cbc <_malloc_r>
 8005c72:	bf00      	nop
 8005c74:	2000001c 	.word	0x2000001c

08005c78 <sbrk_aligned>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005cb8 <sbrk_aligned+0x40>)
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	4605      	mov	r5, r0
 8005c82:	b911      	cbnz	r1, 8005c8a <sbrk_aligned+0x12>
 8005c84:	f000 fe40 	bl	8006908 <_sbrk_r>
 8005c88:	6030      	str	r0, [r6, #0]
 8005c8a:	4621      	mov	r1, r4
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 fe3b 	bl	8006908 <_sbrk_r>
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d103      	bne.n	8005c9e <sbrk_aligned+0x26>
 8005c96:	f04f 34ff 	mov.w	r4, #4294967295
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	bd70      	pop	{r4, r5, r6, pc}
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d0f8      	beq.n	8005c9a <sbrk_aligned+0x22>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4628      	mov	r0, r5
 8005cac:	f000 fe2c 	bl	8006908 <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d1f2      	bne.n	8005c9a <sbrk_aligned+0x22>
 8005cb4:	e7ef      	b.n	8005c96 <sbrk_aligned+0x1e>
 8005cb6:	bf00      	nop
 8005cb8:	20000404 	.word	0x20000404

08005cbc <_malloc_r>:
 8005cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	1ccd      	adds	r5, r1, #3
 8005cc2:	f025 0503 	bic.w	r5, r5, #3
 8005cc6:	3508      	adds	r5, #8
 8005cc8:	2d0c      	cmp	r5, #12
 8005cca:	bf38      	it	cc
 8005ccc:	250c      	movcc	r5, #12
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	db01      	blt.n	8005cd8 <_malloc_r+0x1c>
 8005cd4:	42a9      	cmp	r1, r5
 8005cd6:	d904      	bls.n	8005ce2 <_malloc_r+0x26>
 8005cd8:	230c      	movs	r3, #12
 8005cda:	6033      	str	r3, [r6, #0]
 8005cdc:	2000      	movs	r0, #0
 8005cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005db8 <_malloc_r+0xfc>
 8005ce6:	f000 f869 	bl	8005dbc <__malloc_lock>
 8005cea:	f8d8 3000 	ldr.w	r3, [r8]
 8005cee:	461c      	mov	r4, r3
 8005cf0:	bb44      	cbnz	r4, 8005d44 <_malloc_r+0x88>
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	f7ff ffbf 	bl	8005c78 <sbrk_aligned>
 8005cfa:	1c43      	adds	r3, r0, #1
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	d158      	bne.n	8005db2 <_malloc_r+0xf6>
 8005d00:	f8d8 4000 	ldr.w	r4, [r8]
 8005d04:	4627      	mov	r7, r4
 8005d06:	2f00      	cmp	r7, #0
 8005d08:	d143      	bne.n	8005d92 <_malloc_r+0xd6>
 8005d0a:	2c00      	cmp	r4, #0
 8005d0c:	d04b      	beq.n	8005da6 <_malloc_r+0xea>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	4639      	mov	r1, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	eb04 0903 	add.w	r9, r4, r3
 8005d18:	f000 fdf6 	bl	8006908 <_sbrk_r>
 8005d1c:	4581      	cmp	r9, r0
 8005d1e:	d142      	bne.n	8005da6 <_malloc_r+0xea>
 8005d20:	6821      	ldr	r1, [r4, #0]
 8005d22:	4630      	mov	r0, r6
 8005d24:	1a6d      	subs	r5, r5, r1
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7ff ffa6 	bl	8005c78 <sbrk_aligned>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d03a      	beq.n	8005da6 <_malloc_r+0xea>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	442b      	add	r3, r5
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	f8d8 3000 	ldr.w	r3, [r8]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	bb62      	cbnz	r2, 8005d98 <_malloc_r+0xdc>
 8005d3e:	f8c8 7000 	str.w	r7, [r8]
 8005d42:	e00f      	b.n	8005d64 <_malloc_r+0xa8>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	1b52      	subs	r2, r2, r5
 8005d48:	d420      	bmi.n	8005d8c <_malloc_r+0xd0>
 8005d4a:	2a0b      	cmp	r2, #11
 8005d4c:	d917      	bls.n	8005d7e <_malloc_r+0xc2>
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	6025      	str	r5, [r4, #0]
 8005d54:	bf18      	it	ne
 8005d56:	6059      	strne	r1, [r3, #4]
 8005d58:	6863      	ldr	r3, [r4, #4]
 8005d5a:	bf08      	it	eq
 8005d5c:	f8c8 1000 	streq.w	r1, [r8]
 8005d60:	5162      	str	r2, [r4, r5]
 8005d62:	604b      	str	r3, [r1, #4]
 8005d64:	4630      	mov	r0, r6
 8005d66:	f000 f82f 	bl	8005dc8 <__malloc_unlock>
 8005d6a:	f104 000b 	add.w	r0, r4, #11
 8005d6e:	1d23      	adds	r3, r4, #4
 8005d70:	f020 0007 	bic.w	r0, r0, #7
 8005d74:	1ac2      	subs	r2, r0, r3
 8005d76:	bf1c      	itt	ne
 8005d78:	1a1b      	subne	r3, r3, r0
 8005d7a:	50a3      	strne	r3, [r4, r2]
 8005d7c:	e7af      	b.n	8005cde <_malloc_r+0x22>
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	bf0c      	ite	eq
 8005d84:	f8c8 2000 	streq.w	r2, [r8]
 8005d88:	605a      	strne	r2, [r3, #4]
 8005d8a:	e7eb      	b.n	8005d64 <_malloc_r+0xa8>
 8005d8c:	4623      	mov	r3, r4
 8005d8e:	6864      	ldr	r4, [r4, #4]
 8005d90:	e7ae      	b.n	8005cf0 <_malloc_r+0x34>
 8005d92:	463c      	mov	r4, r7
 8005d94:	687f      	ldr	r7, [r7, #4]
 8005d96:	e7b6      	b.n	8005d06 <_malloc_r+0x4a>
 8005d98:	461a      	mov	r2, r3
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	d1fb      	bne.n	8005d98 <_malloc_r+0xdc>
 8005da0:	2300      	movs	r3, #0
 8005da2:	6053      	str	r3, [r2, #4]
 8005da4:	e7de      	b.n	8005d64 <_malloc_r+0xa8>
 8005da6:	230c      	movs	r3, #12
 8005da8:	4630      	mov	r0, r6
 8005daa:	6033      	str	r3, [r6, #0]
 8005dac:	f000 f80c 	bl	8005dc8 <__malloc_unlock>
 8005db0:	e794      	b.n	8005cdc <_malloc_r+0x20>
 8005db2:	6005      	str	r5, [r0, #0]
 8005db4:	e7d6      	b.n	8005d64 <_malloc_r+0xa8>
 8005db6:	bf00      	nop
 8005db8:	20000408 	.word	0x20000408

08005dbc <__malloc_lock>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	@ (8005dc4 <__malloc_lock+0x8>)
 8005dbe:	f7ff b8aa 	b.w	8004f16 <__retarget_lock_acquire_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20000400 	.word	0x20000400

08005dc8 <__malloc_unlock>:
 8005dc8:	4801      	ldr	r0, [pc, #4]	@ (8005dd0 <__malloc_unlock+0x8>)
 8005dca:	f7ff b8a5 	b.w	8004f18 <__retarget_lock_release_recursive>
 8005dce:	bf00      	nop
 8005dd0:	20000400 	.word	0x20000400

08005dd4 <_Balloc>:
 8005dd4:	b570      	push	{r4, r5, r6, lr}
 8005dd6:	69c6      	ldr	r6, [r0, #28]
 8005dd8:	4604      	mov	r4, r0
 8005dda:	460d      	mov	r5, r1
 8005ddc:	b976      	cbnz	r6, 8005dfc <_Balloc+0x28>
 8005dde:	2010      	movs	r0, #16
 8005de0:	f7ff ff42 	bl	8005c68 <malloc>
 8005de4:	4602      	mov	r2, r0
 8005de6:	61e0      	str	r0, [r4, #28]
 8005de8:	b920      	cbnz	r0, 8005df4 <_Balloc+0x20>
 8005dea:	216b      	movs	r1, #107	@ 0x6b
 8005dec:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <_Balloc+0x78>)
 8005dee:	4818      	ldr	r0, [pc, #96]	@ (8005e50 <_Balloc+0x7c>)
 8005df0:	f000 fda8 	bl	8006944 <__assert_func>
 8005df4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005df8:	6006      	str	r6, [r0, #0]
 8005dfa:	60c6      	str	r6, [r0, #12]
 8005dfc:	69e6      	ldr	r6, [r4, #28]
 8005dfe:	68f3      	ldr	r3, [r6, #12]
 8005e00:	b183      	cbz	r3, 8005e24 <_Balloc+0x50>
 8005e02:	69e3      	ldr	r3, [r4, #28]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e0a:	b9b8      	cbnz	r0, 8005e3c <_Balloc+0x68>
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f605 	lsl.w	r6, r1, r5
 8005e12:	1d72      	adds	r2, r6, #5
 8005e14:	4620      	mov	r0, r4
 8005e16:	0092      	lsls	r2, r2, #2
 8005e18:	f000 fdb2 	bl	8006980 <_calloc_r>
 8005e1c:	b160      	cbz	r0, 8005e38 <_Balloc+0x64>
 8005e1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e22:	e00e      	b.n	8005e42 <_Balloc+0x6e>
 8005e24:	2221      	movs	r2, #33	@ 0x21
 8005e26:	2104      	movs	r1, #4
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fda9 	bl	8006980 <_calloc_r>
 8005e2e:	69e3      	ldr	r3, [r4, #28]
 8005e30:	60f0      	str	r0, [r6, #12]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e4      	bne.n	8005e02 <_Balloc+0x2e>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}
 8005e3c:	6802      	ldr	r2, [r0, #0]
 8005e3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e42:	2300      	movs	r3, #0
 8005e44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e48:	e7f7      	b.n	8005e3a <_Balloc+0x66>
 8005e4a:	bf00      	nop
 8005e4c:	0800709b 	.word	0x0800709b
 8005e50:	0800711b 	.word	0x0800711b

08005e54 <_Bfree>:
 8005e54:	b570      	push	{r4, r5, r6, lr}
 8005e56:	69c6      	ldr	r6, [r0, #28]
 8005e58:	4605      	mov	r5, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	b976      	cbnz	r6, 8005e7c <_Bfree+0x28>
 8005e5e:	2010      	movs	r0, #16
 8005e60:	f7ff ff02 	bl	8005c68 <malloc>
 8005e64:	4602      	mov	r2, r0
 8005e66:	61e8      	str	r0, [r5, #28]
 8005e68:	b920      	cbnz	r0, 8005e74 <_Bfree+0x20>
 8005e6a:	218f      	movs	r1, #143	@ 0x8f
 8005e6c:	4b08      	ldr	r3, [pc, #32]	@ (8005e90 <_Bfree+0x3c>)
 8005e6e:	4809      	ldr	r0, [pc, #36]	@ (8005e94 <_Bfree+0x40>)
 8005e70:	f000 fd68 	bl	8006944 <__assert_func>
 8005e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e78:	6006      	str	r6, [r0, #0]
 8005e7a:	60c6      	str	r6, [r0, #12]
 8005e7c:	b13c      	cbz	r4, 8005e8e <_Bfree+0x3a>
 8005e7e:	69eb      	ldr	r3, [r5, #28]
 8005e80:	6862      	ldr	r2, [r4, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e88:	6021      	str	r1, [r4, #0]
 8005e8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	0800709b 	.word	0x0800709b
 8005e94:	0800711b 	.word	0x0800711b

08005e98 <__multadd>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	461e      	mov	r6, r3
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	690d      	ldr	r5, [r1, #16]
 8005ea6:	f101 0c14 	add.w	ip, r1, #20
 8005eaa:	f8dc 3000 	ldr.w	r3, [ip]
 8005eae:	3001      	adds	r0, #1
 8005eb0:	b299      	uxth	r1, r3
 8005eb2:	fb02 6101 	mla	r1, r2, r1, r6
 8005eb6:	0c1e      	lsrs	r6, r3, #16
 8005eb8:	0c0b      	lsrs	r3, r1, #16
 8005eba:	fb02 3306 	mla	r3, r2, r6, r3
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ec4:	4285      	cmp	r5, r0
 8005ec6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005eca:	f84c 1b04 	str.w	r1, [ip], #4
 8005ece:	dcec      	bgt.n	8005eaa <__multadd+0x12>
 8005ed0:	b30e      	cbz	r6, 8005f16 <__multadd+0x7e>
 8005ed2:	68a3      	ldr	r3, [r4, #8]
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc19      	bgt.n	8005f0c <__multadd+0x74>
 8005ed8:	6861      	ldr	r1, [r4, #4]
 8005eda:	4638      	mov	r0, r7
 8005edc:	3101      	adds	r1, #1
 8005ede:	f7ff ff79 	bl	8005dd4 <_Balloc>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	b928      	cbnz	r0, 8005ef2 <__multadd+0x5a>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	21ba      	movs	r1, #186	@ 0xba
 8005eea:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <__multadd+0x84>)
 8005eec:	480c      	ldr	r0, [pc, #48]	@ (8005f20 <__multadd+0x88>)
 8005eee:	f000 fd29 	bl	8006944 <__assert_func>
 8005ef2:	6922      	ldr	r2, [r4, #16]
 8005ef4:	f104 010c 	add.w	r1, r4, #12
 8005ef8:	3202      	adds	r2, #2
 8005efa:	0092      	lsls	r2, r2, #2
 8005efc:	300c      	adds	r0, #12
 8005efe:	f000 fd13 	bl	8006928 <memcpy>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4638      	mov	r0, r7
 8005f06:	f7ff ffa5 	bl	8005e54 <_Bfree>
 8005f0a:	4644      	mov	r4, r8
 8005f0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f10:	3501      	adds	r5, #1
 8005f12:	615e      	str	r6, [r3, #20]
 8005f14:	6125      	str	r5, [r4, #16]
 8005f16:	4620      	mov	r0, r4
 8005f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f1c:	0800710a 	.word	0x0800710a
 8005f20:	0800711b 	.word	0x0800711b

08005f24 <__hi0bits>:
 8005f24:	4603      	mov	r3, r0
 8005f26:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f2a:	bf3a      	itte	cc
 8005f2c:	0403      	lslcc	r3, r0, #16
 8005f2e:	2010      	movcc	r0, #16
 8005f30:	2000      	movcs	r0, #0
 8005f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f36:	bf3c      	itt	cc
 8005f38:	021b      	lslcc	r3, r3, #8
 8005f3a:	3008      	addcc	r0, #8
 8005f3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f40:	bf3c      	itt	cc
 8005f42:	011b      	lslcc	r3, r3, #4
 8005f44:	3004      	addcc	r0, #4
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f4a:	bf3c      	itt	cc
 8005f4c:	009b      	lslcc	r3, r3, #2
 8005f4e:	3002      	addcc	r0, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	db05      	blt.n	8005f60 <__hi0bits+0x3c>
 8005f54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f58:	f100 0001 	add.w	r0, r0, #1
 8005f5c:	bf08      	it	eq
 8005f5e:	2020      	moveq	r0, #32
 8005f60:	4770      	bx	lr

08005f62 <__lo0bits>:
 8005f62:	6803      	ldr	r3, [r0, #0]
 8005f64:	4602      	mov	r2, r0
 8005f66:	f013 0007 	ands.w	r0, r3, #7
 8005f6a:	d00b      	beq.n	8005f84 <__lo0bits+0x22>
 8005f6c:	07d9      	lsls	r1, r3, #31
 8005f6e:	d421      	bmi.n	8005fb4 <__lo0bits+0x52>
 8005f70:	0798      	lsls	r0, r3, #30
 8005f72:	bf49      	itett	mi
 8005f74:	085b      	lsrmi	r3, r3, #1
 8005f76:	089b      	lsrpl	r3, r3, #2
 8005f78:	2001      	movmi	r0, #1
 8005f7a:	6013      	strmi	r3, [r2, #0]
 8005f7c:	bf5c      	itt	pl
 8005f7e:	2002      	movpl	r0, #2
 8005f80:	6013      	strpl	r3, [r2, #0]
 8005f82:	4770      	bx	lr
 8005f84:	b299      	uxth	r1, r3
 8005f86:	b909      	cbnz	r1, 8005f8c <__lo0bits+0x2a>
 8005f88:	2010      	movs	r0, #16
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	b2d9      	uxtb	r1, r3
 8005f8e:	b909      	cbnz	r1, 8005f94 <__lo0bits+0x32>
 8005f90:	3008      	adds	r0, #8
 8005f92:	0a1b      	lsrs	r3, r3, #8
 8005f94:	0719      	lsls	r1, r3, #28
 8005f96:	bf04      	itt	eq
 8005f98:	091b      	lsreq	r3, r3, #4
 8005f9a:	3004      	addeq	r0, #4
 8005f9c:	0799      	lsls	r1, r3, #30
 8005f9e:	bf04      	itt	eq
 8005fa0:	089b      	lsreq	r3, r3, #2
 8005fa2:	3002      	addeq	r0, #2
 8005fa4:	07d9      	lsls	r1, r3, #31
 8005fa6:	d403      	bmi.n	8005fb0 <__lo0bits+0x4e>
 8005fa8:	085b      	lsrs	r3, r3, #1
 8005faa:	f100 0001 	add.w	r0, r0, #1
 8005fae:	d003      	beq.n	8005fb8 <__lo0bits+0x56>
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	4770      	bx	lr
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	4770      	bx	lr
 8005fb8:	2020      	movs	r0, #32
 8005fba:	4770      	bx	lr

08005fbc <__i2b>:
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	f7ff ff07 	bl	8005dd4 <_Balloc>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	b928      	cbnz	r0, 8005fd6 <__i2b+0x1a>
 8005fca:	f240 1145 	movw	r1, #325	@ 0x145
 8005fce:	4b04      	ldr	r3, [pc, #16]	@ (8005fe0 <__i2b+0x24>)
 8005fd0:	4804      	ldr	r0, [pc, #16]	@ (8005fe4 <__i2b+0x28>)
 8005fd2:	f000 fcb7 	bl	8006944 <__assert_func>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	6144      	str	r4, [r0, #20]
 8005fda:	6103      	str	r3, [r0, #16]
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	bf00      	nop
 8005fe0:	0800710a 	.word	0x0800710a
 8005fe4:	0800711b 	.word	0x0800711b

08005fe8 <__multiply>:
 8005fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fec:	4614      	mov	r4, r2
 8005fee:	690a      	ldr	r2, [r1, #16]
 8005ff0:	6923      	ldr	r3, [r4, #16]
 8005ff2:	460f      	mov	r7, r1
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	bfa2      	ittt	ge
 8005ff8:	4623      	movge	r3, r4
 8005ffa:	460c      	movge	r4, r1
 8005ffc:	461f      	movge	r7, r3
 8005ffe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006002:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006006:	68a3      	ldr	r3, [r4, #8]
 8006008:	6861      	ldr	r1, [r4, #4]
 800600a:	eb0a 0609 	add.w	r6, sl, r9
 800600e:	42b3      	cmp	r3, r6
 8006010:	b085      	sub	sp, #20
 8006012:	bfb8      	it	lt
 8006014:	3101      	addlt	r1, #1
 8006016:	f7ff fedd 	bl	8005dd4 <_Balloc>
 800601a:	b930      	cbnz	r0, 800602a <__multiply+0x42>
 800601c:	4602      	mov	r2, r0
 800601e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006022:	4b43      	ldr	r3, [pc, #268]	@ (8006130 <__multiply+0x148>)
 8006024:	4843      	ldr	r0, [pc, #268]	@ (8006134 <__multiply+0x14c>)
 8006026:	f000 fc8d 	bl	8006944 <__assert_func>
 800602a:	f100 0514 	add.w	r5, r0, #20
 800602e:	462b      	mov	r3, r5
 8006030:	2200      	movs	r2, #0
 8006032:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006036:	4543      	cmp	r3, r8
 8006038:	d321      	bcc.n	800607e <__multiply+0x96>
 800603a:	f107 0114 	add.w	r1, r7, #20
 800603e:	f104 0214 	add.w	r2, r4, #20
 8006042:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006046:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800604a:	9302      	str	r3, [sp, #8]
 800604c:	1b13      	subs	r3, r2, r4
 800604e:	3b15      	subs	r3, #21
 8006050:	f023 0303 	bic.w	r3, r3, #3
 8006054:	3304      	adds	r3, #4
 8006056:	f104 0715 	add.w	r7, r4, #21
 800605a:	42ba      	cmp	r2, r7
 800605c:	bf38      	it	cc
 800605e:	2304      	movcc	r3, #4
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	9b02      	ldr	r3, [sp, #8]
 8006064:	9103      	str	r1, [sp, #12]
 8006066:	428b      	cmp	r3, r1
 8006068:	d80c      	bhi.n	8006084 <__multiply+0x9c>
 800606a:	2e00      	cmp	r6, #0
 800606c:	dd03      	ble.n	8006076 <__multiply+0x8e>
 800606e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006072:	2b00      	cmp	r3, #0
 8006074:	d05a      	beq.n	800612c <__multiply+0x144>
 8006076:	6106      	str	r6, [r0, #16]
 8006078:	b005      	add	sp, #20
 800607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800607e:	f843 2b04 	str.w	r2, [r3], #4
 8006082:	e7d8      	b.n	8006036 <__multiply+0x4e>
 8006084:	f8b1 a000 	ldrh.w	sl, [r1]
 8006088:	f1ba 0f00 	cmp.w	sl, #0
 800608c:	d023      	beq.n	80060d6 <__multiply+0xee>
 800608e:	46a9      	mov	r9, r5
 8006090:	f04f 0c00 	mov.w	ip, #0
 8006094:	f104 0e14 	add.w	lr, r4, #20
 8006098:	f85e 7b04 	ldr.w	r7, [lr], #4
 800609c:	f8d9 3000 	ldr.w	r3, [r9]
 80060a0:	fa1f fb87 	uxth.w	fp, r7
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	fb0a 330b 	mla	r3, sl, fp, r3
 80060aa:	4463      	add	r3, ip
 80060ac:	f8d9 c000 	ldr.w	ip, [r9]
 80060b0:	0c3f      	lsrs	r7, r7, #16
 80060b2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060b6:	fb0a c707 	mla	r7, sl, r7, ip
 80060ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80060c4:	4572      	cmp	r2, lr
 80060c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80060ca:	f849 3b04 	str.w	r3, [r9], #4
 80060ce:	d8e3      	bhi.n	8006098 <__multiply+0xb0>
 80060d0:	9b01      	ldr	r3, [sp, #4]
 80060d2:	f845 c003 	str.w	ip, [r5, r3]
 80060d6:	9b03      	ldr	r3, [sp, #12]
 80060d8:	3104      	adds	r1, #4
 80060da:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80060de:	f1b9 0f00 	cmp.w	r9, #0
 80060e2:	d021      	beq.n	8006128 <__multiply+0x140>
 80060e4:	46ae      	mov	lr, r5
 80060e6:	f04f 0a00 	mov.w	sl, #0
 80060ea:	682b      	ldr	r3, [r5, #0]
 80060ec:	f104 0c14 	add.w	ip, r4, #20
 80060f0:	f8bc b000 	ldrh.w	fp, [ip]
 80060f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	fb09 770b 	mla	r7, r9, fp, r7
 80060fe:	4457      	add	r7, sl
 8006100:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006104:	f84e 3b04 	str.w	r3, [lr], #4
 8006108:	f85c 3b04 	ldr.w	r3, [ip], #4
 800610c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006110:	f8be 3000 	ldrh.w	r3, [lr]
 8006114:	4562      	cmp	r2, ip
 8006116:	fb09 330a 	mla	r3, r9, sl, r3
 800611a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800611e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006122:	d8e5      	bhi.n	80060f0 <__multiply+0x108>
 8006124:	9f01      	ldr	r7, [sp, #4]
 8006126:	51eb      	str	r3, [r5, r7]
 8006128:	3504      	adds	r5, #4
 800612a:	e79a      	b.n	8006062 <__multiply+0x7a>
 800612c:	3e01      	subs	r6, #1
 800612e:	e79c      	b.n	800606a <__multiply+0x82>
 8006130:	0800710a 	.word	0x0800710a
 8006134:	0800711b 	.word	0x0800711b

08006138 <__pow5mult>:
 8006138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800613c:	4615      	mov	r5, r2
 800613e:	f012 0203 	ands.w	r2, r2, #3
 8006142:	4607      	mov	r7, r0
 8006144:	460e      	mov	r6, r1
 8006146:	d007      	beq.n	8006158 <__pow5mult+0x20>
 8006148:	4c25      	ldr	r4, [pc, #148]	@ (80061e0 <__pow5mult+0xa8>)
 800614a:	3a01      	subs	r2, #1
 800614c:	2300      	movs	r3, #0
 800614e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006152:	f7ff fea1 	bl	8005e98 <__multadd>
 8006156:	4606      	mov	r6, r0
 8006158:	10ad      	asrs	r5, r5, #2
 800615a:	d03d      	beq.n	80061d8 <__pow5mult+0xa0>
 800615c:	69fc      	ldr	r4, [r7, #28]
 800615e:	b97c      	cbnz	r4, 8006180 <__pow5mult+0x48>
 8006160:	2010      	movs	r0, #16
 8006162:	f7ff fd81 	bl	8005c68 <malloc>
 8006166:	4602      	mov	r2, r0
 8006168:	61f8      	str	r0, [r7, #28]
 800616a:	b928      	cbnz	r0, 8006178 <__pow5mult+0x40>
 800616c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006170:	4b1c      	ldr	r3, [pc, #112]	@ (80061e4 <__pow5mult+0xac>)
 8006172:	481d      	ldr	r0, [pc, #116]	@ (80061e8 <__pow5mult+0xb0>)
 8006174:	f000 fbe6 	bl	8006944 <__assert_func>
 8006178:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800617c:	6004      	str	r4, [r0, #0]
 800617e:	60c4      	str	r4, [r0, #12]
 8006180:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006184:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006188:	b94c      	cbnz	r4, 800619e <__pow5mult+0x66>
 800618a:	f240 2171 	movw	r1, #625	@ 0x271
 800618e:	4638      	mov	r0, r7
 8006190:	f7ff ff14 	bl	8005fbc <__i2b>
 8006194:	2300      	movs	r3, #0
 8006196:	4604      	mov	r4, r0
 8006198:	f8c8 0008 	str.w	r0, [r8, #8]
 800619c:	6003      	str	r3, [r0, #0]
 800619e:	f04f 0900 	mov.w	r9, #0
 80061a2:	07eb      	lsls	r3, r5, #31
 80061a4:	d50a      	bpl.n	80061bc <__pow5mult+0x84>
 80061a6:	4631      	mov	r1, r6
 80061a8:	4622      	mov	r2, r4
 80061aa:	4638      	mov	r0, r7
 80061ac:	f7ff ff1c 	bl	8005fe8 <__multiply>
 80061b0:	4680      	mov	r8, r0
 80061b2:	4631      	mov	r1, r6
 80061b4:	4638      	mov	r0, r7
 80061b6:	f7ff fe4d 	bl	8005e54 <_Bfree>
 80061ba:	4646      	mov	r6, r8
 80061bc:	106d      	asrs	r5, r5, #1
 80061be:	d00b      	beq.n	80061d8 <__pow5mult+0xa0>
 80061c0:	6820      	ldr	r0, [r4, #0]
 80061c2:	b938      	cbnz	r0, 80061d4 <__pow5mult+0x9c>
 80061c4:	4622      	mov	r2, r4
 80061c6:	4621      	mov	r1, r4
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7ff ff0d 	bl	8005fe8 <__multiply>
 80061ce:	6020      	str	r0, [r4, #0]
 80061d0:	f8c0 9000 	str.w	r9, [r0]
 80061d4:	4604      	mov	r4, r0
 80061d6:	e7e4      	b.n	80061a2 <__pow5mult+0x6a>
 80061d8:	4630      	mov	r0, r6
 80061da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061de:	bf00      	nop
 80061e0:	08007174 	.word	0x08007174
 80061e4:	0800709b 	.word	0x0800709b
 80061e8:	0800711b 	.word	0x0800711b

080061ec <__lshift>:
 80061ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	460c      	mov	r4, r1
 80061f2:	4607      	mov	r7, r0
 80061f4:	4691      	mov	r9, r2
 80061f6:	6923      	ldr	r3, [r4, #16]
 80061f8:	6849      	ldr	r1, [r1, #4]
 80061fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061fe:	68a3      	ldr	r3, [r4, #8]
 8006200:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006204:	f108 0601 	add.w	r6, r8, #1
 8006208:	42b3      	cmp	r3, r6
 800620a:	db0b      	blt.n	8006224 <__lshift+0x38>
 800620c:	4638      	mov	r0, r7
 800620e:	f7ff fde1 	bl	8005dd4 <_Balloc>
 8006212:	4605      	mov	r5, r0
 8006214:	b948      	cbnz	r0, 800622a <__lshift+0x3e>
 8006216:	4602      	mov	r2, r0
 8006218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800621c:	4b27      	ldr	r3, [pc, #156]	@ (80062bc <__lshift+0xd0>)
 800621e:	4828      	ldr	r0, [pc, #160]	@ (80062c0 <__lshift+0xd4>)
 8006220:	f000 fb90 	bl	8006944 <__assert_func>
 8006224:	3101      	adds	r1, #1
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	e7ee      	b.n	8006208 <__lshift+0x1c>
 800622a:	2300      	movs	r3, #0
 800622c:	f100 0114 	add.w	r1, r0, #20
 8006230:	f100 0210 	add.w	r2, r0, #16
 8006234:	4618      	mov	r0, r3
 8006236:	4553      	cmp	r3, sl
 8006238:	db33      	blt.n	80062a2 <__lshift+0xb6>
 800623a:	6920      	ldr	r0, [r4, #16]
 800623c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006240:	f104 0314 	add.w	r3, r4, #20
 8006244:	f019 091f 	ands.w	r9, r9, #31
 8006248:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800624c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006250:	d02b      	beq.n	80062aa <__lshift+0xbe>
 8006252:	468a      	mov	sl, r1
 8006254:	2200      	movs	r2, #0
 8006256:	f1c9 0e20 	rsb	lr, r9, #32
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	fa00 f009 	lsl.w	r0, r0, r9
 8006260:	4310      	orrs	r0, r2
 8006262:	f84a 0b04 	str.w	r0, [sl], #4
 8006266:	f853 2b04 	ldr.w	r2, [r3], #4
 800626a:	459c      	cmp	ip, r3
 800626c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006270:	d8f3      	bhi.n	800625a <__lshift+0x6e>
 8006272:	ebac 0304 	sub.w	r3, ip, r4
 8006276:	3b15      	subs	r3, #21
 8006278:	f023 0303 	bic.w	r3, r3, #3
 800627c:	3304      	adds	r3, #4
 800627e:	f104 0015 	add.w	r0, r4, #21
 8006282:	4584      	cmp	ip, r0
 8006284:	bf38      	it	cc
 8006286:	2304      	movcc	r3, #4
 8006288:	50ca      	str	r2, [r1, r3]
 800628a:	b10a      	cbz	r2, 8006290 <__lshift+0xa4>
 800628c:	f108 0602 	add.w	r6, r8, #2
 8006290:	3e01      	subs	r6, #1
 8006292:	4638      	mov	r0, r7
 8006294:	4621      	mov	r1, r4
 8006296:	612e      	str	r6, [r5, #16]
 8006298:	f7ff fddc 	bl	8005e54 <_Bfree>
 800629c:	4628      	mov	r0, r5
 800629e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80062a6:	3301      	adds	r3, #1
 80062a8:	e7c5      	b.n	8006236 <__lshift+0x4a>
 80062aa:	3904      	subs	r1, #4
 80062ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80062b0:	459c      	cmp	ip, r3
 80062b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80062b6:	d8f9      	bhi.n	80062ac <__lshift+0xc0>
 80062b8:	e7ea      	b.n	8006290 <__lshift+0xa4>
 80062ba:	bf00      	nop
 80062bc:	0800710a 	.word	0x0800710a
 80062c0:	0800711b 	.word	0x0800711b

080062c4 <__mcmp>:
 80062c4:	4603      	mov	r3, r0
 80062c6:	690a      	ldr	r2, [r1, #16]
 80062c8:	6900      	ldr	r0, [r0, #16]
 80062ca:	b530      	push	{r4, r5, lr}
 80062cc:	1a80      	subs	r0, r0, r2
 80062ce:	d10e      	bne.n	80062ee <__mcmp+0x2a>
 80062d0:	3314      	adds	r3, #20
 80062d2:	3114      	adds	r1, #20
 80062d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062e4:	4295      	cmp	r5, r2
 80062e6:	d003      	beq.n	80062f0 <__mcmp+0x2c>
 80062e8:	d205      	bcs.n	80062f6 <__mcmp+0x32>
 80062ea:	f04f 30ff 	mov.w	r0, #4294967295
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	d3f3      	bcc.n	80062dc <__mcmp+0x18>
 80062f4:	e7fb      	b.n	80062ee <__mcmp+0x2a>
 80062f6:	2001      	movs	r0, #1
 80062f8:	e7f9      	b.n	80062ee <__mcmp+0x2a>
	...

080062fc <__mdiff>:
 80062fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006300:	4689      	mov	r9, r1
 8006302:	4606      	mov	r6, r0
 8006304:	4611      	mov	r1, r2
 8006306:	4648      	mov	r0, r9
 8006308:	4614      	mov	r4, r2
 800630a:	f7ff ffdb 	bl	80062c4 <__mcmp>
 800630e:	1e05      	subs	r5, r0, #0
 8006310:	d112      	bne.n	8006338 <__mdiff+0x3c>
 8006312:	4629      	mov	r1, r5
 8006314:	4630      	mov	r0, r6
 8006316:	f7ff fd5d 	bl	8005dd4 <_Balloc>
 800631a:	4602      	mov	r2, r0
 800631c:	b928      	cbnz	r0, 800632a <__mdiff+0x2e>
 800631e:	f240 2137 	movw	r1, #567	@ 0x237
 8006322:	4b3e      	ldr	r3, [pc, #248]	@ (800641c <__mdiff+0x120>)
 8006324:	483e      	ldr	r0, [pc, #248]	@ (8006420 <__mdiff+0x124>)
 8006326:	f000 fb0d 	bl	8006944 <__assert_func>
 800632a:	2301      	movs	r3, #1
 800632c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006330:	4610      	mov	r0, r2
 8006332:	b003      	add	sp, #12
 8006334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006338:	bfbc      	itt	lt
 800633a:	464b      	movlt	r3, r9
 800633c:	46a1      	movlt	r9, r4
 800633e:	4630      	mov	r0, r6
 8006340:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006344:	bfba      	itte	lt
 8006346:	461c      	movlt	r4, r3
 8006348:	2501      	movlt	r5, #1
 800634a:	2500      	movge	r5, #0
 800634c:	f7ff fd42 	bl	8005dd4 <_Balloc>
 8006350:	4602      	mov	r2, r0
 8006352:	b918      	cbnz	r0, 800635c <__mdiff+0x60>
 8006354:	f240 2145 	movw	r1, #581	@ 0x245
 8006358:	4b30      	ldr	r3, [pc, #192]	@ (800641c <__mdiff+0x120>)
 800635a:	e7e3      	b.n	8006324 <__mdiff+0x28>
 800635c:	f100 0b14 	add.w	fp, r0, #20
 8006360:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006364:	f109 0310 	add.w	r3, r9, #16
 8006368:	60c5      	str	r5, [r0, #12]
 800636a:	f04f 0c00 	mov.w	ip, #0
 800636e:	f109 0514 	add.w	r5, r9, #20
 8006372:	46d9      	mov	r9, fp
 8006374:	6926      	ldr	r6, [r4, #16]
 8006376:	f104 0e14 	add.w	lr, r4, #20
 800637a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800637e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	9b01      	ldr	r3, [sp, #4]
 8006386:	f85e 0b04 	ldr.w	r0, [lr], #4
 800638a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800638e:	b281      	uxth	r1, r0
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	fa1f f38a 	uxth.w	r3, sl
 8006396:	1a5b      	subs	r3, r3, r1
 8006398:	0c00      	lsrs	r0, r0, #16
 800639a:	4463      	add	r3, ip
 800639c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80063a0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80063aa:	4576      	cmp	r6, lr
 80063ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063b0:	f849 3b04 	str.w	r3, [r9], #4
 80063b4:	d8e6      	bhi.n	8006384 <__mdiff+0x88>
 80063b6:	1b33      	subs	r3, r6, r4
 80063b8:	3b15      	subs	r3, #21
 80063ba:	f023 0303 	bic.w	r3, r3, #3
 80063be:	3415      	adds	r4, #21
 80063c0:	3304      	adds	r3, #4
 80063c2:	42a6      	cmp	r6, r4
 80063c4:	bf38      	it	cc
 80063c6:	2304      	movcc	r3, #4
 80063c8:	441d      	add	r5, r3
 80063ca:	445b      	add	r3, fp
 80063cc:	461e      	mov	r6, r3
 80063ce:	462c      	mov	r4, r5
 80063d0:	4544      	cmp	r4, r8
 80063d2:	d30e      	bcc.n	80063f2 <__mdiff+0xf6>
 80063d4:	f108 0103 	add.w	r1, r8, #3
 80063d8:	1b49      	subs	r1, r1, r5
 80063da:	f021 0103 	bic.w	r1, r1, #3
 80063de:	3d03      	subs	r5, #3
 80063e0:	45a8      	cmp	r8, r5
 80063e2:	bf38      	it	cc
 80063e4:	2100      	movcc	r1, #0
 80063e6:	440b      	add	r3, r1
 80063e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80063ec:	b199      	cbz	r1, 8006416 <__mdiff+0x11a>
 80063ee:	6117      	str	r7, [r2, #16]
 80063f0:	e79e      	b.n	8006330 <__mdiff+0x34>
 80063f2:	46e6      	mov	lr, ip
 80063f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80063f8:	fa1f fc81 	uxth.w	ip, r1
 80063fc:	44f4      	add	ip, lr
 80063fe:	0c08      	lsrs	r0, r1, #16
 8006400:	4471      	add	r1, lr
 8006402:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006406:	b289      	uxth	r1, r1
 8006408:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800640c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006410:	f846 1b04 	str.w	r1, [r6], #4
 8006414:	e7dc      	b.n	80063d0 <__mdiff+0xd4>
 8006416:	3f01      	subs	r7, #1
 8006418:	e7e6      	b.n	80063e8 <__mdiff+0xec>
 800641a:	bf00      	nop
 800641c:	0800710a 	.word	0x0800710a
 8006420:	0800711b 	.word	0x0800711b

08006424 <__d2b>:
 8006424:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006428:	2101      	movs	r1, #1
 800642a:	4690      	mov	r8, r2
 800642c:	4699      	mov	r9, r3
 800642e:	9e08      	ldr	r6, [sp, #32]
 8006430:	f7ff fcd0 	bl	8005dd4 <_Balloc>
 8006434:	4604      	mov	r4, r0
 8006436:	b930      	cbnz	r0, 8006446 <__d2b+0x22>
 8006438:	4602      	mov	r2, r0
 800643a:	f240 310f 	movw	r1, #783	@ 0x30f
 800643e:	4b23      	ldr	r3, [pc, #140]	@ (80064cc <__d2b+0xa8>)
 8006440:	4823      	ldr	r0, [pc, #140]	@ (80064d0 <__d2b+0xac>)
 8006442:	f000 fa7f 	bl	8006944 <__assert_func>
 8006446:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800644a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800644e:	b10d      	cbz	r5, 8006454 <__d2b+0x30>
 8006450:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	f1b8 0300 	subs.w	r3, r8, #0
 800645a:	d024      	beq.n	80064a6 <__d2b+0x82>
 800645c:	4668      	mov	r0, sp
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	f7ff fd7f 	bl	8005f62 <__lo0bits>
 8006464:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006468:	b1d8      	cbz	r0, 80064a2 <__d2b+0x7e>
 800646a:	f1c0 0320 	rsb	r3, r0, #32
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	430b      	orrs	r3, r1
 8006474:	40c2      	lsrs	r2, r0
 8006476:	6163      	str	r3, [r4, #20]
 8006478:	9201      	str	r2, [sp, #4]
 800647a:	9b01      	ldr	r3, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2201      	moveq	r2, #1
 8006482:	2202      	movne	r2, #2
 8006484:	61a3      	str	r3, [r4, #24]
 8006486:	6122      	str	r2, [r4, #16]
 8006488:	b1ad      	cbz	r5, 80064b6 <__d2b+0x92>
 800648a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800648e:	4405      	add	r5, r0
 8006490:	6035      	str	r5, [r6, #0]
 8006492:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006498:	6018      	str	r0, [r3, #0]
 800649a:	4620      	mov	r0, r4
 800649c:	b002      	add	sp, #8
 800649e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80064a2:	6161      	str	r1, [r4, #20]
 80064a4:	e7e9      	b.n	800647a <__d2b+0x56>
 80064a6:	a801      	add	r0, sp, #4
 80064a8:	f7ff fd5b 	bl	8005f62 <__lo0bits>
 80064ac:	9b01      	ldr	r3, [sp, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	6163      	str	r3, [r4, #20]
 80064b2:	3020      	adds	r0, #32
 80064b4:	e7e7      	b.n	8006486 <__d2b+0x62>
 80064b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80064ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80064be:	6030      	str	r0, [r6, #0]
 80064c0:	6918      	ldr	r0, [r3, #16]
 80064c2:	f7ff fd2f 	bl	8005f24 <__hi0bits>
 80064c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80064ca:	e7e4      	b.n	8006496 <__d2b+0x72>
 80064cc:	0800710a 	.word	0x0800710a
 80064d0:	0800711b 	.word	0x0800711b

080064d4 <__ssputs_r>:
 80064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	461f      	mov	r7, r3
 80064da:	688e      	ldr	r6, [r1, #8]
 80064dc:	4682      	mov	sl, r0
 80064de:	42be      	cmp	r6, r7
 80064e0:	460c      	mov	r4, r1
 80064e2:	4690      	mov	r8, r2
 80064e4:	680b      	ldr	r3, [r1, #0]
 80064e6:	d82d      	bhi.n	8006544 <__ssputs_r+0x70>
 80064e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064f0:	d026      	beq.n	8006540 <__ssputs_r+0x6c>
 80064f2:	6965      	ldr	r5, [r4, #20]
 80064f4:	6909      	ldr	r1, [r1, #16]
 80064f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064fa:	eba3 0901 	sub.w	r9, r3, r1
 80064fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006502:	1c7b      	adds	r3, r7, #1
 8006504:	444b      	add	r3, r9
 8006506:	106d      	asrs	r5, r5, #1
 8006508:	429d      	cmp	r5, r3
 800650a:	bf38      	it	cc
 800650c:	461d      	movcc	r5, r3
 800650e:	0553      	lsls	r3, r2, #21
 8006510:	d527      	bpl.n	8006562 <__ssputs_r+0x8e>
 8006512:	4629      	mov	r1, r5
 8006514:	f7ff fbd2 	bl	8005cbc <_malloc_r>
 8006518:	4606      	mov	r6, r0
 800651a:	b360      	cbz	r0, 8006576 <__ssputs_r+0xa2>
 800651c:	464a      	mov	r2, r9
 800651e:	6921      	ldr	r1, [r4, #16]
 8006520:	f000 fa02 	bl	8006928 <memcpy>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800652a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	6126      	str	r6, [r4, #16]
 8006532:	444e      	add	r6, r9
 8006534:	6026      	str	r6, [r4, #0]
 8006536:	463e      	mov	r6, r7
 8006538:	6165      	str	r5, [r4, #20]
 800653a:	eba5 0509 	sub.w	r5, r5, r9
 800653e:	60a5      	str	r5, [r4, #8]
 8006540:	42be      	cmp	r6, r7
 8006542:	d900      	bls.n	8006546 <__ssputs_r+0x72>
 8006544:	463e      	mov	r6, r7
 8006546:	4632      	mov	r2, r6
 8006548:	4641      	mov	r1, r8
 800654a:	6820      	ldr	r0, [r4, #0]
 800654c:	f000 f9c2 	bl	80068d4 <memmove>
 8006550:	2000      	movs	r0, #0
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	1b9b      	subs	r3, r3, r6
 8006556:	60a3      	str	r3, [r4, #8]
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	4433      	add	r3, r6
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006562:	462a      	mov	r2, r5
 8006564:	f000 fa32 	bl	80069cc <_realloc_r>
 8006568:	4606      	mov	r6, r0
 800656a:	2800      	cmp	r0, #0
 800656c:	d1e0      	bne.n	8006530 <__ssputs_r+0x5c>
 800656e:	4650      	mov	r0, sl
 8006570:	6921      	ldr	r1, [r4, #16]
 8006572:	f7ff fb31 	bl	8005bd8 <_free_r>
 8006576:	230c      	movs	r3, #12
 8006578:	f8ca 3000 	str.w	r3, [sl]
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f04f 30ff 	mov.w	r0, #4294967295
 8006582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	e7e9      	b.n	800655e <__ssputs_r+0x8a>
	...

0800658c <_svfiprintf_r>:
 800658c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006590:	4698      	mov	r8, r3
 8006592:	898b      	ldrh	r3, [r1, #12]
 8006594:	4607      	mov	r7, r0
 8006596:	061b      	lsls	r3, r3, #24
 8006598:	460d      	mov	r5, r1
 800659a:	4614      	mov	r4, r2
 800659c:	b09d      	sub	sp, #116	@ 0x74
 800659e:	d510      	bpl.n	80065c2 <_svfiprintf_r+0x36>
 80065a0:	690b      	ldr	r3, [r1, #16]
 80065a2:	b973      	cbnz	r3, 80065c2 <_svfiprintf_r+0x36>
 80065a4:	2140      	movs	r1, #64	@ 0x40
 80065a6:	f7ff fb89 	bl	8005cbc <_malloc_r>
 80065aa:	6028      	str	r0, [r5, #0]
 80065ac:	6128      	str	r0, [r5, #16]
 80065ae:	b930      	cbnz	r0, 80065be <_svfiprintf_r+0x32>
 80065b0:	230c      	movs	r3, #12
 80065b2:	603b      	str	r3, [r7, #0]
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b01d      	add	sp, #116	@ 0x74
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	2340      	movs	r3, #64	@ 0x40
 80065c0:	616b      	str	r3, [r5, #20]
 80065c2:	2300      	movs	r3, #0
 80065c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c6:	2320      	movs	r3, #32
 80065c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065cc:	2330      	movs	r3, #48	@ 0x30
 80065ce:	f04f 0901 	mov.w	r9, #1
 80065d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80065d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006770 <_svfiprintf_r+0x1e4>
 80065da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065de:	4623      	mov	r3, r4
 80065e0:	469a      	mov	sl, r3
 80065e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065e6:	b10a      	cbz	r2, 80065ec <_svfiprintf_r+0x60>
 80065e8:	2a25      	cmp	r2, #37	@ 0x25
 80065ea:	d1f9      	bne.n	80065e0 <_svfiprintf_r+0x54>
 80065ec:	ebba 0b04 	subs.w	fp, sl, r4
 80065f0:	d00b      	beq.n	800660a <_svfiprintf_r+0x7e>
 80065f2:	465b      	mov	r3, fp
 80065f4:	4622      	mov	r2, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	4638      	mov	r0, r7
 80065fa:	f7ff ff6b 	bl	80064d4 <__ssputs_r>
 80065fe:	3001      	adds	r0, #1
 8006600:	f000 80a7 	beq.w	8006752 <_svfiprintf_r+0x1c6>
 8006604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006606:	445a      	add	r2, fp
 8006608:	9209      	str	r2, [sp, #36]	@ 0x24
 800660a:	f89a 3000 	ldrb.w	r3, [sl]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 809f 	beq.w	8006752 <_svfiprintf_r+0x1c6>
 8006614:	2300      	movs	r3, #0
 8006616:	f04f 32ff 	mov.w	r2, #4294967295
 800661a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800661e:	f10a 0a01 	add.w	sl, sl, #1
 8006622:	9304      	str	r3, [sp, #16]
 8006624:	9307      	str	r3, [sp, #28]
 8006626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800662a:	931a      	str	r3, [sp, #104]	@ 0x68
 800662c:	4654      	mov	r4, sl
 800662e:	2205      	movs	r2, #5
 8006630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006634:	484e      	ldr	r0, [pc, #312]	@ (8006770 <_svfiprintf_r+0x1e4>)
 8006636:	f7fe fc70 	bl	8004f1a <memchr>
 800663a:	9a04      	ldr	r2, [sp, #16]
 800663c:	b9d8      	cbnz	r0, 8006676 <_svfiprintf_r+0xea>
 800663e:	06d0      	lsls	r0, r2, #27
 8006640:	bf44      	itt	mi
 8006642:	2320      	movmi	r3, #32
 8006644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006648:	0711      	lsls	r1, r2, #28
 800664a:	bf44      	itt	mi
 800664c:	232b      	movmi	r3, #43	@ 0x2b
 800664e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006652:	f89a 3000 	ldrb.w	r3, [sl]
 8006656:	2b2a      	cmp	r3, #42	@ 0x2a
 8006658:	d015      	beq.n	8006686 <_svfiprintf_r+0xfa>
 800665a:	4654      	mov	r4, sl
 800665c:	2000      	movs	r0, #0
 800665e:	f04f 0c0a 	mov.w	ip, #10
 8006662:	9a07      	ldr	r2, [sp, #28]
 8006664:	4621      	mov	r1, r4
 8006666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800666a:	3b30      	subs	r3, #48	@ 0x30
 800666c:	2b09      	cmp	r3, #9
 800666e:	d94b      	bls.n	8006708 <_svfiprintf_r+0x17c>
 8006670:	b1b0      	cbz	r0, 80066a0 <_svfiprintf_r+0x114>
 8006672:	9207      	str	r2, [sp, #28]
 8006674:	e014      	b.n	80066a0 <_svfiprintf_r+0x114>
 8006676:	eba0 0308 	sub.w	r3, r0, r8
 800667a:	fa09 f303 	lsl.w	r3, r9, r3
 800667e:	4313      	orrs	r3, r2
 8006680:	46a2      	mov	sl, r4
 8006682:	9304      	str	r3, [sp, #16]
 8006684:	e7d2      	b.n	800662c <_svfiprintf_r+0xa0>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	1d19      	adds	r1, r3, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	9103      	str	r1, [sp, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	bfbb      	ittet	lt
 8006692:	425b      	neglt	r3, r3
 8006694:	f042 0202 	orrlt.w	r2, r2, #2
 8006698:	9307      	strge	r3, [sp, #28]
 800669a:	9307      	strlt	r3, [sp, #28]
 800669c:	bfb8      	it	lt
 800669e:	9204      	strlt	r2, [sp, #16]
 80066a0:	7823      	ldrb	r3, [r4, #0]
 80066a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066a4:	d10a      	bne.n	80066bc <_svfiprintf_r+0x130>
 80066a6:	7863      	ldrb	r3, [r4, #1]
 80066a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066aa:	d132      	bne.n	8006712 <_svfiprintf_r+0x186>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	3402      	adds	r4, #2
 80066b0:	1d1a      	adds	r2, r3, #4
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	9203      	str	r2, [sp, #12]
 80066b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066ba:	9305      	str	r3, [sp, #20]
 80066bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006774 <_svfiprintf_r+0x1e8>
 80066c0:	2203      	movs	r2, #3
 80066c2:	4650      	mov	r0, sl
 80066c4:	7821      	ldrb	r1, [r4, #0]
 80066c6:	f7fe fc28 	bl	8004f1a <memchr>
 80066ca:	b138      	cbz	r0, 80066dc <_svfiprintf_r+0x150>
 80066cc:	2240      	movs	r2, #64	@ 0x40
 80066ce:	9b04      	ldr	r3, [sp, #16]
 80066d0:	eba0 000a 	sub.w	r0, r0, sl
 80066d4:	4082      	lsls	r2, r0
 80066d6:	4313      	orrs	r3, r2
 80066d8:	3401      	adds	r4, #1
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e0:	2206      	movs	r2, #6
 80066e2:	4825      	ldr	r0, [pc, #148]	@ (8006778 <_svfiprintf_r+0x1ec>)
 80066e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066e8:	f7fe fc17 	bl	8004f1a <memchr>
 80066ec:	2800      	cmp	r0, #0
 80066ee:	d036      	beq.n	800675e <_svfiprintf_r+0x1d2>
 80066f0:	4b22      	ldr	r3, [pc, #136]	@ (800677c <_svfiprintf_r+0x1f0>)
 80066f2:	bb1b      	cbnz	r3, 800673c <_svfiprintf_r+0x1b0>
 80066f4:	9b03      	ldr	r3, [sp, #12]
 80066f6:	3307      	adds	r3, #7
 80066f8:	f023 0307 	bic.w	r3, r3, #7
 80066fc:	3308      	adds	r3, #8
 80066fe:	9303      	str	r3, [sp, #12]
 8006700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006702:	4433      	add	r3, r6
 8006704:	9309      	str	r3, [sp, #36]	@ 0x24
 8006706:	e76a      	b.n	80065de <_svfiprintf_r+0x52>
 8006708:	460c      	mov	r4, r1
 800670a:	2001      	movs	r0, #1
 800670c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006710:	e7a8      	b.n	8006664 <_svfiprintf_r+0xd8>
 8006712:	2300      	movs	r3, #0
 8006714:	f04f 0c0a 	mov.w	ip, #10
 8006718:	4619      	mov	r1, r3
 800671a:	3401      	adds	r4, #1
 800671c:	9305      	str	r3, [sp, #20]
 800671e:	4620      	mov	r0, r4
 8006720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006724:	3a30      	subs	r2, #48	@ 0x30
 8006726:	2a09      	cmp	r2, #9
 8006728:	d903      	bls.n	8006732 <_svfiprintf_r+0x1a6>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0c6      	beq.n	80066bc <_svfiprintf_r+0x130>
 800672e:	9105      	str	r1, [sp, #20]
 8006730:	e7c4      	b.n	80066bc <_svfiprintf_r+0x130>
 8006732:	4604      	mov	r4, r0
 8006734:	2301      	movs	r3, #1
 8006736:	fb0c 2101 	mla	r1, ip, r1, r2
 800673a:	e7f0      	b.n	800671e <_svfiprintf_r+0x192>
 800673c:	ab03      	add	r3, sp, #12
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	462a      	mov	r2, r5
 8006742:	4638      	mov	r0, r7
 8006744:	4b0e      	ldr	r3, [pc, #56]	@ (8006780 <_svfiprintf_r+0x1f4>)
 8006746:	a904      	add	r1, sp, #16
 8006748:	f7fd fe84 	bl	8004454 <_printf_float>
 800674c:	1c42      	adds	r2, r0, #1
 800674e:	4606      	mov	r6, r0
 8006750:	d1d6      	bne.n	8006700 <_svfiprintf_r+0x174>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	065b      	lsls	r3, r3, #25
 8006756:	f53f af2d 	bmi.w	80065b4 <_svfiprintf_r+0x28>
 800675a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800675c:	e72c      	b.n	80065b8 <_svfiprintf_r+0x2c>
 800675e:	ab03      	add	r3, sp, #12
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	462a      	mov	r2, r5
 8006764:	4638      	mov	r0, r7
 8006766:	4b06      	ldr	r3, [pc, #24]	@ (8006780 <_svfiprintf_r+0x1f4>)
 8006768:	a904      	add	r1, sp, #16
 800676a:	f7fe f911 	bl	8004990 <_printf_i>
 800676e:	e7ed      	b.n	800674c <_svfiprintf_r+0x1c0>
 8006770:	08007270 	.word	0x08007270
 8006774:	08007276 	.word	0x08007276
 8006778:	0800727a 	.word	0x0800727a
 800677c:	08004455 	.word	0x08004455
 8006780:	080064d5 	.word	0x080064d5

08006784 <__sflush_r>:
 8006784:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	0716      	lsls	r6, r2, #28
 800678c:	4605      	mov	r5, r0
 800678e:	460c      	mov	r4, r1
 8006790:	d454      	bmi.n	800683c <__sflush_r+0xb8>
 8006792:	684b      	ldr	r3, [r1, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc02      	bgt.n	800679e <__sflush_r+0x1a>
 8006798:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	dd48      	ble.n	8006830 <__sflush_r+0xac>
 800679e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067a0:	2e00      	cmp	r6, #0
 80067a2:	d045      	beq.n	8006830 <__sflush_r+0xac>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067aa:	682f      	ldr	r7, [r5, #0]
 80067ac:	6a21      	ldr	r1, [r4, #32]
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	d030      	beq.n	8006814 <__sflush_r+0x90>
 80067b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067b4:	89a3      	ldrh	r3, [r4, #12]
 80067b6:	0759      	lsls	r1, r3, #29
 80067b8:	d505      	bpl.n	80067c6 <__sflush_r+0x42>
 80067ba:	6863      	ldr	r3, [r4, #4]
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067c0:	b10b      	cbz	r3, 80067c6 <__sflush_r+0x42>
 80067c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	4628      	mov	r0, r5
 80067ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067cc:	6a21      	ldr	r1, [r4, #32]
 80067ce:	47b0      	blx	r6
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	89a3      	ldrh	r3, [r4, #12]
 80067d4:	d106      	bne.n	80067e4 <__sflush_r+0x60>
 80067d6:	6829      	ldr	r1, [r5, #0]
 80067d8:	291d      	cmp	r1, #29
 80067da:	d82b      	bhi.n	8006834 <__sflush_r+0xb0>
 80067dc:	4a28      	ldr	r2, [pc, #160]	@ (8006880 <__sflush_r+0xfc>)
 80067de:	410a      	asrs	r2, r1
 80067e0:	07d6      	lsls	r6, r2, #31
 80067e2:	d427      	bmi.n	8006834 <__sflush_r+0xb0>
 80067e4:	2200      	movs	r2, #0
 80067e6:	6062      	str	r2, [r4, #4]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	04d9      	lsls	r1, r3, #19
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	d504      	bpl.n	80067fa <__sflush_r+0x76>
 80067f0:	1c42      	adds	r2, r0, #1
 80067f2:	d101      	bne.n	80067f8 <__sflush_r+0x74>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b903      	cbnz	r3, 80067fa <__sflush_r+0x76>
 80067f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80067fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067fc:	602f      	str	r7, [r5, #0]
 80067fe:	b1b9      	cbz	r1, 8006830 <__sflush_r+0xac>
 8006800:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006804:	4299      	cmp	r1, r3
 8006806:	d002      	beq.n	800680e <__sflush_r+0x8a>
 8006808:	4628      	mov	r0, r5
 800680a:	f7ff f9e5 	bl	8005bd8 <_free_r>
 800680e:	2300      	movs	r3, #0
 8006810:	6363      	str	r3, [r4, #52]	@ 0x34
 8006812:	e00d      	b.n	8006830 <__sflush_r+0xac>
 8006814:	2301      	movs	r3, #1
 8006816:	4628      	mov	r0, r5
 8006818:	47b0      	blx	r6
 800681a:	4602      	mov	r2, r0
 800681c:	1c50      	adds	r0, r2, #1
 800681e:	d1c9      	bne.n	80067b4 <__sflush_r+0x30>
 8006820:	682b      	ldr	r3, [r5, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0c6      	beq.n	80067b4 <__sflush_r+0x30>
 8006826:	2b1d      	cmp	r3, #29
 8006828:	d001      	beq.n	800682e <__sflush_r+0xaa>
 800682a:	2b16      	cmp	r3, #22
 800682c:	d11d      	bne.n	800686a <__sflush_r+0xe6>
 800682e:	602f      	str	r7, [r5, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e021      	b.n	8006878 <__sflush_r+0xf4>
 8006834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006838:	b21b      	sxth	r3, r3
 800683a:	e01a      	b.n	8006872 <__sflush_r+0xee>
 800683c:	690f      	ldr	r7, [r1, #16]
 800683e:	2f00      	cmp	r7, #0
 8006840:	d0f6      	beq.n	8006830 <__sflush_r+0xac>
 8006842:	0793      	lsls	r3, r2, #30
 8006844:	bf18      	it	ne
 8006846:	2300      	movne	r3, #0
 8006848:	680e      	ldr	r6, [r1, #0]
 800684a:	bf08      	it	eq
 800684c:	694b      	ldreq	r3, [r1, #20]
 800684e:	1bf6      	subs	r6, r6, r7
 8006850:	600f      	str	r7, [r1, #0]
 8006852:	608b      	str	r3, [r1, #8]
 8006854:	2e00      	cmp	r6, #0
 8006856:	ddeb      	ble.n	8006830 <__sflush_r+0xac>
 8006858:	4633      	mov	r3, r6
 800685a:	463a      	mov	r2, r7
 800685c:	4628      	mov	r0, r5
 800685e:	6a21      	ldr	r1, [r4, #32]
 8006860:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006864:	47e0      	blx	ip
 8006866:	2800      	cmp	r0, #0
 8006868:	dc07      	bgt.n	800687a <__sflush_r+0xf6>
 800686a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006872:	f04f 30ff 	mov.w	r0, #4294967295
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800687a:	4407      	add	r7, r0
 800687c:	1a36      	subs	r6, r6, r0
 800687e:	e7e9      	b.n	8006854 <__sflush_r+0xd0>
 8006880:	dfbffffe 	.word	0xdfbffffe

08006884 <_fflush_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	690b      	ldr	r3, [r1, #16]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b913      	cbnz	r3, 8006894 <_fflush_r+0x10>
 800688e:	2500      	movs	r5, #0
 8006890:	4628      	mov	r0, r5
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	b118      	cbz	r0, 800689e <_fflush_r+0x1a>
 8006896:	6a03      	ldr	r3, [r0, #32]
 8006898:	b90b      	cbnz	r3, 800689e <_fflush_r+0x1a>
 800689a:	f7fe fa25 	bl	8004ce8 <__sinit>
 800689e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f3      	beq.n	800688e <_fflush_r+0xa>
 80068a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068a8:	07d0      	lsls	r0, r2, #31
 80068aa:	d404      	bmi.n	80068b6 <_fflush_r+0x32>
 80068ac:	0599      	lsls	r1, r3, #22
 80068ae:	d402      	bmi.n	80068b6 <_fflush_r+0x32>
 80068b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068b2:	f7fe fb30 	bl	8004f16 <__retarget_lock_acquire_recursive>
 80068b6:	4628      	mov	r0, r5
 80068b8:	4621      	mov	r1, r4
 80068ba:	f7ff ff63 	bl	8006784 <__sflush_r>
 80068be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068c0:	4605      	mov	r5, r0
 80068c2:	07da      	lsls	r2, r3, #31
 80068c4:	d4e4      	bmi.n	8006890 <_fflush_r+0xc>
 80068c6:	89a3      	ldrh	r3, [r4, #12]
 80068c8:	059b      	lsls	r3, r3, #22
 80068ca:	d4e1      	bmi.n	8006890 <_fflush_r+0xc>
 80068cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068ce:	f7fe fb23 	bl	8004f18 <__retarget_lock_release_recursive>
 80068d2:	e7dd      	b.n	8006890 <_fflush_r+0xc>

080068d4 <memmove>:
 80068d4:	4288      	cmp	r0, r1
 80068d6:	b510      	push	{r4, lr}
 80068d8:	eb01 0402 	add.w	r4, r1, r2
 80068dc:	d902      	bls.n	80068e4 <memmove+0x10>
 80068de:	4284      	cmp	r4, r0
 80068e0:	4623      	mov	r3, r4
 80068e2:	d807      	bhi.n	80068f4 <memmove+0x20>
 80068e4:	1e43      	subs	r3, r0, #1
 80068e6:	42a1      	cmp	r1, r4
 80068e8:	d008      	beq.n	80068fc <memmove+0x28>
 80068ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068f2:	e7f8      	b.n	80068e6 <memmove+0x12>
 80068f4:	4601      	mov	r1, r0
 80068f6:	4402      	add	r2, r0
 80068f8:	428a      	cmp	r2, r1
 80068fa:	d100      	bne.n	80068fe <memmove+0x2a>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006906:	e7f7      	b.n	80068f8 <memmove+0x24>

08006908 <_sbrk_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	2300      	movs	r3, #0
 800690c:	4d05      	ldr	r5, [pc, #20]	@ (8006924 <_sbrk_r+0x1c>)
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fb fa20 	bl	8001d58 <_sbrk>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_sbrk_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_sbrk_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200003fc 	.word	0x200003fc

08006928 <memcpy>:
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006930:	d100      	bne.n	8006934 <memcpy+0xc>
 8006932:	4770      	bx	lr
 8006934:	b510      	push	{r4, lr}
 8006936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800693a:	4291      	cmp	r1, r2
 800693c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006940:	d1f9      	bne.n	8006936 <memcpy+0xe>
 8006942:	bd10      	pop	{r4, pc}

08006944 <__assert_func>:
 8006944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006946:	4614      	mov	r4, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4b09      	ldr	r3, [pc, #36]	@ (8006970 <__assert_func+0x2c>)
 800694c:	4605      	mov	r5, r0
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68d8      	ldr	r0, [r3, #12]
 8006952:	b954      	cbnz	r4, 800696a <__assert_func+0x26>
 8006954:	4b07      	ldr	r3, [pc, #28]	@ (8006974 <__assert_func+0x30>)
 8006956:	461c      	mov	r4, r3
 8006958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800695c:	9100      	str	r1, [sp, #0]
 800695e:	462b      	mov	r3, r5
 8006960:	4905      	ldr	r1, [pc, #20]	@ (8006978 <__assert_func+0x34>)
 8006962:	f000 f86f 	bl	8006a44 <fiprintf>
 8006966:	f000 f87f 	bl	8006a68 <abort>
 800696a:	4b04      	ldr	r3, [pc, #16]	@ (800697c <__assert_func+0x38>)
 800696c:	e7f4      	b.n	8006958 <__assert_func+0x14>
 800696e:	bf00      	nop
 8006970:	2000001c 	.word	0x2000001c
 8006974:	080072c6 	.word	0x080072c6
 8006978:	08007298 	.word	0x08007298
 800697c:	0800728b 	.word	0x0800728b

08006980 <_calloc_r>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	fba1 5402 	umull	r5, r4, r1, r2
 8006986:	b93c      	cbnz	r4, 8006998 <_calloc_r+0x18>
 8006988:	4629      	mov	r1, r5
 800698a:	f7ff f997 	bl	8005cbc <_malloc_r>
 800698e:	4606      	mov	r6, r0
 8006990:	b928      	cbnz	r0, 800699e <_calloc_r+0x1e>
 8006992:	2600      	movs	r6, #0
 8006994:	4630      	mov	r0, r6
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	220c      	movs	r2, #12
 800699a:	6002      	str	r2, [r0, #0]
 800699c:	e7f9      	b.n	8006992 <_calloc_r+0x12>
 800699e:	462a      	mov	r2, r5
 80069a0:	4621      	mov	r1, r4
 80069a2:	f7fe fa3a 	bl	8004e1a <memset>
 80069a6:	e7f5      	b.n	8006994 <_calloc_r+0x14>

080069a8 <__ascii_mbtowc>:
 80069a8:	b082      	sub	sp, #8
 80069aa:	b901      	cbnz	r1, 80069ae <__ascii_mbtowc+0x6>
 80069ac:	a901      	add	r1, sp, #4
 80069ae:	b142      	cbz	r2, 80069c2 <__ascii_mbtowc+0x1a>
 80069b0:	b14b      	cbz	r3, 80069c6 <__ascii_mbtowc+0x1e>
 80069b2:	7813      	ldrb	r3, [r2, #0]
 80069b4:	600b      	str	r3, [r1, #0]
 80069b6:	7812      	ldrb	r2, [r2, #0]
 80069b8:	1e10      	subs	r0, r2, #0
 80069ba:	bf18      	it	ne
 80069bc:	2001      	movne	r0, #1
 80069be:	b002      	add	sp, #8
 80069c0:	4770      	bx	lr
 80069c2:	4610      	mov	r0, r2
 80069c4:	e7fb      	b.n	80069be <__ascii_mbtowc+0x16>
 80069c6:	f06f 0001 	mvn.w	r0, #1
 80069ca:	e7f8      	b.n	80069be <__ascii_mbtowc+0x16>

080069cc <_realloc_r>:
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	4680      	mov	r8, r0
 80069d2:	4615      	mov	r5, r2
 80069d4:	460c      	mov	r4, r1
 80069d6:	b921      	cbnz	r1, 80069e2 <_realloc_r+0x16>
 80069d8:	4611      	mov	r1, r2
 80069da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	f7ff b96d 	b.w	8005cbc <_malloc_r>
 80069e2:	b92a      	cbnz	r2, 80069f0 <_realloc_r+0x24>
 80069e4:	f7ff f8f8 	bl	8005bd8 <_free_r>
 80069e8:	2400      	movs	r4, #0
 80069ea:	4620      	mov	r0, r4
 80069ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f0:	f000 f841 	bl	8006a76 <_malloc_usable_size_r>
 80069f4:	4285      	cmp	r5, r0
 80069f6:	4606      	mov	r6, r0
 80069f8:	d802      	bhi.n	8006a00 <_realloc_r+0x34>
 80069fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80069fe:	d8f4      	bhi.n	80069ea <_realloc_r+0x1e>
 8006a00:	4629      	mov	r1, r5
 8006a02:	4640      	mov	r0, r8
 8006a04:	f7ff f95a 	bl	8005cbc <_malloc_r>
 8006a08:	4607      	mov	r7, r0
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d0ec      	beq.n	80069e8 <_realloc_r+0x1c>
 8006a0e:	42b5      	cmp	r5, r6
 8006a10:	462a      	mov	r2, r5
 8006a12:	4621      	mov	r1, r4
 8006a14:	bf28      	it	cs
 8006a16:	4632      	movcs	r2, r6
 8006a18:	f7ff ff86 	bl	8006928 <memcpy>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f7ff f8da 	bl	8005bd8 <_free_r>
 8006a24:	463c      	mov	r4, r7
 8006a26:	e7e0      	b.n	80069ea <_realloc_r+0x1e>

08006a28 <__ascii_wctomb>:
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4608      	mov	r0, r1
 8006a2c:	b141      	cbz	r1, 8006a40 <__ascii_wctomb+0x18>
 8006a2e:	2aff      	cmp	r2, #255	@ 0xff
 8006a30:	d904      	bls.n	8006a3c <__ascii_wctomb+0x14>
 8006a32:	228a      	movs	r2, #138	@ 0x8a
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	4770      	bx	lr
 8006a3c:	2001      	movs	r0, #1
 8006a3e:	700a      	strb	r2, [r1, #0]
 8006a40:	4770      	bx	lr
	...

08006a44 <fiprintf>:
 8006a44:	b40e      	push	{r1, r2, r3}
 8006a46:	b503      	push	{r0, r1, lr}
 8006a48:	4601      	mov	r1, r0
 8006a4a:	ab03      	add	r3, sp, #12
 8006a4c:	4805      	ldr	r0, [pc, #20]	@ (8006a64 <fiprintf+0x20>)
 8006a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a52:	6800      	ldr	r0, [r0, #0]
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f000 f83d 	bl	8006ad4 <_vfiprintf_r>
 8006a5a:	b002      	add	sp, #8
 8006a5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a60:	b003      	add	sp, #12
 8006a62:	4770      	bx	lr
 8006a64:	2000001c 	.word	0x2000001c

08006a68 <abort>:
 8006a68:	2006      	movs	r0, #6
 8006a6a:	b508      	push	{r3, lr}
 8006a6c:	f000 fa06 	bl	8006e7c <raise>
 8006a70:	2001      	movs	r0, #1
 8006a72:	f7fb f8fc 	bl	8001c6e <_exit>

08006a76 <_malloc_usable_size_r>:
 8006a76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7a:	1f18      	subs	r0, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bfbc      	itt	lt
 8006a80:	580b      	ldrlt	r3, [r1, r0]
 8006a82:	18c0      	addlt	r0, r0, r3
 8006a84:	4770      	bx	lr

08006a86 <__sfputc_r>:
 8006a86:	6893      	ldr	r3, [r2, #8]
 8006a88:	b410      	push	{r4}
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	6093      	str	r3, [r2, #8]
 8006a90:	da07      	bge.n	8006aa2 <__sfputc_r+0x1c>
 8006a92:	6994      	ldr	r4, [r2, #24]
 8006a94:	42a3      	cmp	r3, r4
 8006a96:	db01      	blt.n	8006a9c <__sfputc_r+0x16>
 8006a98:	290a      	cmp	r1, #10
 8006a9a:	d102      	bne.n	8006aa2 <__sfputc_r+0x1c>
 8006a9c:	bc10      	pop	{r4}
 8006a9e:	f000 b931 	b.w	8006d04 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	bc10      	pop	{r4}
 8006aae:	4770      	bx	lr

08006ab0 <__sfputs_r>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	4606      	mov	r6, r0
 8006ab4:	460f      	mov	r7, r1
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	18d5      	adds	r5, r2, r3
 8006aba:	42ac      	cmp	r4, r5
 8006abc:	d101      	bne.n	8006ac2 <__sfputs_r+0x12>
 8006abe:	2000      	movs	r0, #0
 8006ac0:	e007      	b.n	8006ad2 <__sfputs_r+0x22>
 8006ac2:	463a      	mov	r2, r7
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	f7ff ffdc 	bl	8006a86 <__sfputc_r>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d1f3      	bne.n	8006aba <__sfputs_r+0xa>
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ad4 <_vfiprintf_r>:
 8006ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad8:	460d      	mov	r5, r1
 8006ada:	4614      	mov	r4, r2
 8006adc:	4698      	mov	r8, r3
 8006ade:	4606      	mov	r6, r0
 8006ae0:	b09d      	sub	sp, #116	@ 0x74
 8006ae2:	b118      	cbz	r0, 8006aec <_vfiprintf_r+0x18>
 8006ae4:	6a03      	ldr	r3, [r0, #32]
 8006ae6:	b90b      	cbnz	r3, 8006aec <_vfiprintf_r+0x18>
 8006ae8:	f7fe f8fe 	bl	8004ce8 <__sinit>
 8006aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006aee:	07d9      	lsls	r1, r3, #31
 8006af0:	d405      	bmi.n	8006afe <_vfiprintf_r+0x2a>
 8006af2:	89ab      	ldrh	r3, [r5, #12]
 8006af4:	059a      	lsls	r2, r3, #22
 8006af6:	d402      	bmi.n	8006afe <_vfiprintf_r+0x2a>
 8006af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006afa:	f7fe fa0c 	bl	8004f16 <__retarget_lock_acquire_recursive>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	071b      	lsls	r3, r3, #28
 8006b02:	d501      	bpl.n	8006b08 <_vfiprintf_r+0x34>
 8006b04:	692b      	ldr	r3, [r5, #16]
 8006b06:	b99b      	cbnz	r3, 8006b30 <_vfiprintf_r+0x5c>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f000 f938 	bl	8006d80 <__swsetup_r>
 8006b10:	b170      	cbz	r0, 8006b30 <_vfiprintf_r+0x5c>
 8006b12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b14:	07dc      	lsls	r4, r3, #31
 8006b16:	d504      	bpl.n	8006b22 <_vfiprintf_r+0x4e>
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1c:	b01d      	add	sp, #116	@ 0x74
 8006b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b22:	89ab      	ldrh	r3, [r5, #12]
 8006b24:	0598      	lsls	r0, r3, #22
 8006b26:	d4f7      	bmi.n	8006b18 <_vfiprintf_r+0x44>
 8006b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b2a:	f7fe f9f5 	bl	8004f18 <__retarget_lock_release_recursive>
 8006b2e:	e7f3      	b.n	8006b18 <_vfiprintf_r+0x44>
 8006b30:	2300      	movs	r3, #0
 8006b32:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b34:	2320      	movs	r3, #32
 8006b36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b3a:	2330      	movs	r3, #48	@ 0x30
 8006b3c:	f04f 0901 	mov.w	r9, #1
 8006b40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b44:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006cf0 <_vfiprintf_r+0x21c>
 8006b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b4c:	4623      	mov	r3, r4
 8006b4e:	469a      	mov	sl, r3
 8006b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b54:	b10a      	cbz	r2, 8006b5a <_vfiprintf_r+0x86>
 8006b56:	2a25      	cmp	r2, #37	@ 0x25
 8006b58:	d1f9      	bne.n	8006b4e <_vfiprintf_r+0x7a>
 8006b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b5e:	d00b      	beq.n	8006b78 <_vfiprintf_r+0xa4>
 8006b60:	465b      	mov	r3, fp
 8006b62:	4622      	mov	r2, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	4630      	mov	r0, r6
 8006b68:	f7ff ffa2 	bl	8006ab0 <__sfputs_r>
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	f000 80a7 	beq.w	8006cc0 <_vfiprintf_r+0x1ec>
 8006b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b74:	445a      	add	r2, fp
 8006b76:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b78:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 809f 	beq.w	8006cc0 <_vfiprintf_r+0x1ec>
 8006b82:	2300      	movs	r3, #0
 8006b84:	f04f 32ff 	mov.w	r2, #4294967295
 8006b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b8c:	f10a 0a01 	add.w	sl, sl, #1
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	9307      	str	r3, [sp, #28]
 8006b94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b9a:	4654      	mov	r4, sl
 8006b9c:	2205      	movs	r2, #5
 8006b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ba2:	4853      	ldr	r0, [pc, #332]	@ (8006cf0 <_vfiprintf_r+0x21c>)
 8006ba4:	f7fe f9b9 	bl	8004f1a <memchr>
 8006ba8:	9a04      	ldr	r2, [sp, #16]
 8006baa:	b9d8      	cbnz	r0, 8006be4 <_vfiprintf_r+0x110>
 8006bac:	06d1      	lsls	r1, r2, #27
 8006bae:	bf44      	itt	mi
 8006bb0:	2320      	movmi	r3, #32
 8006bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bb6:	0713      	lsls	r3, r2, #28
 8006bb8:	bf44      	itt	mi
 8006bba:	232b      	movmi	r3, #43	@ 0x2b
 8006bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc6:	d015      	beq.n	8006bf4 <_vfiprintf_r+0x120>
 8006bc8:	4654      	mov	r4, sl
 8006bca:	2000      	movs	r0, #0
 8006bcc:	f04f 0c0a 	mov.w	ip, #10
 8006bd0:	9a07      	ldr	r2, [sp, #28]
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bd8:	3b30      	subs	r3, #48	@ 0x30
 8006bda:	2b09      	cmp	r3, #9
 8006bdc:	d94b      	bls.n	8006c76 <_vfiprintf_r+0x1a2>
 8006bde:	b1b0      	cbz	r0, 8006c0e <_vfiprintf_r+0x13a>
 8006be0:	9207      	str	r2, [sp, #28]
 8006be2:	e014      	b.n	8006c0e <_vfiprintf_r+0x13a>
 8006be4:	eba0 0308 	sub.w	r3, r0, r8
 8006be8:	fa09 f303 	lsl.w	r3, r9, r3
 8006bec:	4313      	orrs	r3, r2
 8006bee:	46a2      	mov	sl, r4
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	e7d2      	b.n	8006b9a <_vfiprintf_r+0xc6>
 8006bf4:	9b03      	ldr	r3, [sp, #12]
 8006bf6:	1d19      	adds	r1, r3, #4
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	9103      	str	r1, [sp, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	bfbb      	ittet	lt
 8006c00:	425b      	neglt	r3, r3
 8006c02:	f042 0202 	orrlt.w	r2, r2, #2
 8006c06:	9307      	strge	r3, [sp, #28]
 8006c08:	9307      	strlt	r3, [sp, #28]
 8006c0a:	bfb8      	it	lt
 8006c0c:	9204      	strlt	r2, [sp, #16]
 8006c0e:	7823      	ldrb	r3, [r4, #0]
 8006c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c12:	d10a      	bne.n	8006c2a <_vfiprintf_r+0x156>
 8006c14:	7863      	ldrb	r3, [r4, #1]
 8006c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c18:	d132      	bne.n	8006c80 <_vfiprintf_r+0x1ac>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	3402      	adds	r4, #2
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	9203      	str	r2, [sp, #12]
 8006c24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c28:	9305      	str	r3, [sp, #20]
 8006c2a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006cf4 <_vfiprintf_r+0x220>
 8006c2e:	2203      	movs	r2, #3
 8006c30:	4650      	mov	r0, sl
 8006c32:	7821      	ldrb	r1, [r4, #0]
 8006c34:	f7fe f971 	bl	8004f1a <memchr>
 8006c38:	b138      	cbz	r0, 8006c4a <_vfiprintf_r+0x176>
 8006c3a:	2240      	movs	r2, #64	@ 0x40
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	eba0 000a 	sub.w	r0, r0, sl
 8006c42:	4082      	lsls	r2, r0
 8006c44:	4313      	orrs	r3, r2
 8006c46:	3401      	adds	r4, #1
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c4e:	2206      	movs	r2, #6
 8006c50:	4829      	ldr	r0, [pc, #164]	@ (8006cf8 <_vfiprintf_r+0x224>)
 8006c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c56:	f7fe f960 	bl	8004f1a <memchr>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d03f      	beq.n	8006cde <_vfiprintf_r+0x20a>
 8006c5e:	4b27      	ldr	r3, [pc, #156]	@ (8006cfc <_vfiprintf_r+0x228>)
 8006c60:	bb1b      	cbnz	r3, 8006caa <_vfiprintf_r+0x1d6>
 8006c62:	9b03      	ldr	r3, [sp, #12]
 8006c64:	3307      	adds	r3, #7
 8006c66:	f023 0307 	bic.w	r3, r3, #7
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c70:	443b      	add	r3, r7
 8006c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c74:	e76a      	b.n	8006b4c <_vfiprintf_r+0x78>
 8006c76:	460c      	mov	r4, r1
 8006c78:	2001      	movs	r0, #1
 8006c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c7e:	e7a8      	b.n	8006bd2 <_vfiprintf_r+0xfe>
 8006c80:	2300      	movs	r3, #0
 8006c82:	f04f 0c0a 	mov.w	ip, #10
 8006c86:	4619      	mov	r1, r3
 8006c88:	3401      	adds	r4, #1
 8006c8a:	9305      	str	r3, [sp, #20]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c92:	3a30      	subs	r2, #48	@ 0x30
 8006c94:	2a09      	cmp	r2, #9
 8006c96:	d903      	bls.n	8006ca0 <_vfiprintf_r+0x1cc>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0c6      	beq.n	8006c2a <_vfiprintf_r+0x156>
 8006c9c:	9105      	str	r1, [sp, #20]
 8006c9e:	e7c4      	b.n	8006c2a <_vfiprintf_r+0x156>
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ca8:	e7f0      	b.n	8006c8c <_vfiprintf_r+0x1b8>
 8006caa:	ab03      	add	r3, sp, #12
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	462a      	mov	r2, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4b13      	ldr	r3, [pc, #76]	@ (8006d00 <_vfiprintf_r+0x22c>)
 8006cb4:	a904      	add	r1, sp, #16
 8006cb6:	f7fd fbcd 	bl	8004454 <_printf_float>
 8006cba:	4607      	mov	r7, r0
 8006cbc:	1c78      	adds	r0, r7, #1
 8006cbe:	d1d6      	bne.n	8006c6e <_vfiprintf_r+0x19a>
 8006cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cc2:	07d9      	lsls	r1, r3, #31
 8006cc4:	d405      	bmi.n	8006cd2 <_vfiprintf_r+0x1fe>
 8006cc6:	89ab      	ldrh	r3, [r5, #12]
 8006cc8:	059a      	lsls	r2, r3, #22
 8006cca:	d402      	bmi.n	8006cd2 <_vfiprintf_r+0x1fe>
 8006ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cce:	f7fe f923 	bl	8004f18 <__retarget_lock_release_recursive>
 8006cd2:	89ab      	ldrh	r3, [r5, #12]
 8006cd4:	065b      	lsls	r3, r3, #25
 8006cd6:	f53f af1f 	bmi.w	8006b18 <_vfiprintf_r+0x44>
 8006cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cdc:	e71e      	b.n	8006b1c <_vfiprintf_r+0x48>
 8006cde:	ab03      	add	r3, sp, #12
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	4b06      	ldr	r3, [pc, #24]	@ (8006d00 <_vfiprintf_r+0x22c>)
 8006ce8:	a904      	add	r1, sp, #16
 8006cea:	f7fd fe51 	bl	8004990 <_printf_i>
 8006cee:	e7e4      	b.n	8006cba <_vfiprintf_r+0x1e6>
 8006cf0:	08007270 	.word	0x08007270
 8006cf4:	08007276 	.word	0x08007276
 8006cf8:	0800727a 	.word	0x0800727a
 8006cfc:	08004455 	.word	0x08004455
 8006d00:	08006ab1 	.word	0x08006ab1

08006d04 <__swbuf_r>:
 8006d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d06:	460e      	mov	r6, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	b118      	cbz	r0, 8006d16 <__swbuf_r+0x12>
 8006d0e:	6a03      	ldr	r3, [r0, #32]
 8006d10:	b90b      	cbnz	r3, 8006d16 <__swbuf_r+0x12>
 8006d12:	f7fd ffe9 	bl	8004ce8 <__sinit>
 8006d16:	69a3      	ldr	r3, [r4, #24]
 8006d18:	60a3      	str	r3, [r4, #8]
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	071a      	lsls	r2, r3, #28
 8006d1e:	d501      	bpl.n	8006d24 <__swbuf_r+0x20>
 8006d20:	6923      	ldr	r3, [r4, #16]
 8006d22:	b943      	cbnz	r3, 8006d36 <__swbuf_r+0x32>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 f82a 	bl	8006d80 <__swsetup_r>
 8006d2c:	b118      	cbz	r0, 8006d36 <__swbuf_r+0x32>
 8006d2e:	f04f 37ff 	mov.w	r7, #4294967295
 8006d32:	4638      	mov	r0, r7
 8006d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	6922      	ldr	r2, [r4, #16]
 8006d3a:	b2f6      	uxtb	r6, r6
 8006d3c:	1a98      	subs	r0, r3, r2
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	4637      	mov	r7, r6
 8006d42:	4283      	cmp	r3, r0
 8006d44:	dc05      	bgt.n	8006d52 <__swbuf_r+0x4e>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f7ff fd9b 	bl	8006884 <_fflush_r>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d1ed      	bne.n	8006d2e <__swbuf_r+0x2a>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	6022      	str	r2, [r4, #0]
 8006d5e:	701e      	strb	r6, [r3, #0]
 8006d60:	6962      	ldr	r2, [r4, #20]
 8006d62:	1c43      	adds	r3, r0, #1
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d004      	beq.n	8006d72 <__swbuf_r+0x6e>
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	07db      	lsls	r3, r3, #31
 8006d6c:	d5e1      	bpl.n	8006d32 <__swbuf_r+0x2e>
 8006d6e:	2e0a      	cmp	r6, #10
 8006d70:	d1df      	bne.n	8006d32 <__swbuf_r+0x2e>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff fd85 	bl	8006884 <_fflush_r>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	d0d9      	beq.n	8006d32 <__swbuf_r+0x2e>
 8006d7e:	e7d6      	b.n	8006d2e <__swbuf_r+0x2a>

08006d80 <__swsetup_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4b29      	ldr	r3, [pc, #164]	@ (8006e28 <__swsetup_r+0xa8>)
 8006d84:	4605      	mov	r5, r0
 8006d86:	6818      	ldr	r0, [r3, #0]
 8006d88:	460c      	mov	r4, r1
 8006d8a:	b118      	cbz	r0, 8006d94 <__swsetup_r+0x14>
 8006d8c:	6a03      	ldr	r3, [r0, #32]
 8006d8e:	b90b      	cbnz	r3, 8006d94 <__swsetup_r+0x14>
 8006d90:	f7fd ffaa 	bl	8004ce8 <__sinit>
 8006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d98:	0719      	lsls	r1, r3, #28
 8006d9a:	d422      	bmi.n	8006de2 <__swsetup_r+0x62>
 8006d9c:	06da      	lsls	r2, r3, #27
 8006d9e:	d407      	bmi.n	8006db0 <__swsetup_r+0x30>
 8006da0:	2209      	movs	r2, #9
 8006da2:	602a      	str	r2, [r5, #0]
 8006da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	e033      	b.n	8006e18 <__swsetup_r+0x98>
 8006db0:	0758      	lsls	r0, r3, #29
 8006db2:	d512      	bpl.n	8006dda <__swsetup_r+0x5a>
 8006db4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006db6:	b141      	cbz	r1, 8006dca <__swsetup_r+0x4a>
 8006db8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	d002      	beq.n	8006dc6 <__swsetup_r+0x46>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	f7fe ff09 	bl	8005bd8 <_free_r>
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0308 	orr.w	r3, r3, #8
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	b94b      	cbnz	r3, 8006dfa <__swsetup_r+0x7a>
 8006de6:	89a3      	ldrh	r3, [r4, #12]
 8006de8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006dec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df0:	d003      	beq.n	8006dfa <__swsetup_r+0x7a>
 8006df2:	4621      	mov	r1, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f882 	bl	8006efe <__smakebuf_r>
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	f013 0201 	ands.w	r2, r3, #1
 8006e02:	d00a      	beq.n	8006e1a <__swsetup_r+0x9a>
 8006e04:	2200      	movs	r2, #0
 8006e06:	60a2      	str	r2, [r4, #8]
 8006e08:	6962      	ldr	r2, [r4, #20]
 8006e0a:	4252      	negs	r2, r2
 8006e0c:	61a2      	str	r2, [r4, #24]
 8006e0e:	6922      	ldr	r2, [r4, #16]
 8006e10:	b942      	cbnz	r2, 8006e24 <__swsetup_r+0xa4>
 8006e12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e16:	d1c5      	bne.n	8006da4 <__swsetup_r+0x24>
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	0799      	lsls	r1, r3, #30
 8006e1c:	bf58      	it	pl
 8006e1e:	6962      	ldrpl	r2, [r4, #20]
 8006e20:	60a2      	str	r2, [r4, #8]
 8006e22:	e7f4      	b.n	8006e0e <__swsetup_r+0x8e>
 8006e24:	2000      	movs	r0, #0
 8006e26:	e7f7      	b.n	8006e18 <__swsetup_r+0x98>
 8006e28:	2000001c 	.word	0x2000001c

08006e2c <_raise_r>:
 8006e2c:	291f      	cmp	r1, #31
 8006e2e:	b538      	push	{r3, r4, r5, lr}
 8006e30:	4605      	mov	r5, r0
 8006e32:	460c      	mov	r4, r1
 8006e34:	d904      	bls.n	8006e40 <_raise_r+0x14>
 8006e36:	2316      	movs	r3, #22
 8006e38:	6003      	str	r3, [r0, #0]
 8006e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006e42:	b112      	cbz	r2, 8006e4a <_raise_r+0x1e>
 8006e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e48:	b94b      	cbnz	r3, 8006e5e <_raise_r+0x32>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 f830 	bl	8006eb0 <_getpid_r>
 8006e50:	4622      	mov	r2, r4
 8006e52:	4601      	mov	r1, r0
 8006e54:	4628      	mov	r0, r5
 8006e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e5a:	f000 b817 	b.w	8006e8c <_kill_r>
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d00a      	beq.n	8006e78 <_raise_r+0x4c>
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	d103      	bne.n	8006e6e <_raise_r+0x42>
 8006e66:	2316      	movs	r3, #22
 8006e68:	6003      	str	r3, [r0, #0]
 8006e6a:	2001      	movs	r0, #1
 8006e6c:	e7e7      	b.n	8006e3e <_raise_r+0x12>
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4620      	mov	r0, r4
 8006e72:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006e76:	4798      	blx	r3
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e7e0      	b.n	8006e3e <_raise_r+0x12>

08006e7c <raise>:
 8006e7c:	4b02      	ldr	r3, [pc, #8]	@ (8006e88 <raise+0xc>)
 8006e7e:	4601      	mov	r1, r0
 8006e80:	6818      	ldr	r0, [r3, #0]
 8006e82:	f7ff bfd3 	b.w	8006e2c <_raise_r>
 8006e86:	bf00      	nop
 8006e88:	2000001c 	.word	0x2000001c

08006e8c <_kill_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4d06      	ldr	r5, [pc, #24]	@ (8006eac <_kill_r+0x20>)
 8006e92:	4604      	mov	r4, r0
 8006e94:	4608      	mov	r0, r1
 8006e96:	4611      	mov	r1, r2
 8006e98:	602b      	str	r3, [r5, #0]
 8006e9a:	f7fa fed8 	bl	8001c4e <_kill>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	d102      	bne.n	8006ea8 <_kill_r+0x1c>
 8006ea2:	682b      	ldr	r3, [r5, #0]
 8006ea4:	b103      	cbz	r3, 8006ea8 <_kill_r+0x1c>
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
 8006eaa:	bf00      	nop
 8006eac:	200003fc 	.word	0x200003fc

08006eb0 <_getpid_r>:
 8006eb0:	f7fa bec6 	b.w	8001c40 <_getpid>

08006eb4 <__swhatbuf_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebc:	4615      	mov	r5, r2
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	461e      	mov	r6, r3
 8006ec2:	b096      	sub	sp, #88	@ 0x58
 8006ec4:	da0c      	bge.n	8006ee0 <__swhatbuf_r+0x2c>
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006ece:	bf14      	ite	ne
 8006ed0:	2340      	movne	r3, #64	@ 0x40
 8006ed2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	6031      	str	r1, [r6, #0]
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	b016      	add	sp, #88	@ 0x58
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	466a      	mov	r2, sp
 8006ee2:	f000 f849 	bl	8006f78 <_fstat_r>
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	dbed      	blt.n	8006ec6 <__swhatbuf_r+0x12>
 8006eea:	9901      	ldr	r1, [sp, #4]
 8006eec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ef0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ef4:	4259      	negs	r1, r3
 8006ef6:	4159      	adcs	r1, r3
 8006ef8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006efc:	e7eb      	b.n	8006ed6 <__swhatbuf_r+0x22>

08006efe <__smakebuf_r>:
 8006efe:	898b      	ldrh	r3, [r1, #12]
 8006f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f02:	079d      	lsls	r5, r3, #30
 8006f04:	4606      	mov	r6, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	d507      	bpl.n	8006f1a <__smakebuf_r+0x1c>
 8006f0a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006f0e:	6023      	str	r3, [r4, #0]
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	2301      	movs	r3, #1
 8006f14:	6163      	str	r3, [r4, #20]
 8006f16:	b003      	add	sp, #12
 8006f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f1a:	466a      	mov	r2, sp
 8006f1c:	ab01      	add	r3, sp, #4
 8006f1e:	f7ff ffc9 	bl	8006eb4 <__swhatbuf_r>
 8006f22:	9f00      	ldr	r7, [sp, #0]
 8006f24:	4605      	mov	r5, r0
 8006f26:	4639      	mov	r1, r7
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7fe fec7 	bl	8005cbc <_malloc_r>
 8006f2e:	b948      	cbnz	r0, 8006f44 <__smakebuf_r+0x46>
 8006f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f34:	059a      	lsls	r2, r3, #22
 8006f36:	d4ee      	bmi.n	8006f16 <__smakebuf_r+0x18>
 8006f38:	f023 0303 	bic.w	r3, r3, #3
 8006f3c:	f043 0302 	orr.w	r3, r3, #2
 8006f40:	81a3      	strh	r3, [r4, #12]
 8006f42:	e7e2      	b.n	8006f0a <__smakebuf_r+0xc>
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f4e:	81a3      	strh	r3, [r4, #12]
 8006f50:	9b01      	ldr	r3, [sp, #4]
 8006f52:	6020      	str	r0, [r4, #0]
 8006f54:	b15b      	cbz	r3, 8006f6e <__smakebuf_r+0x70>
 8006f56:	4630      	mov	r0, r6
 8006f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5c:	f000 f81e 	bl	8006f9c <_isatty_r>
 8006f60:	b128      	cbz	r0, 8006f6e <__smakebuf_r+0x70>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	89a3      	ldrh	r3, [r4, #12]
 8006f70:	431d      	orrs	r5, r3
 8006f72:	81a5      	strh	r5, [r4, #12]
 8006f74:	e7cf      	b.n	8006f16 <__smakebuf_r+0x18>
	...

08006f78 <_fstat_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	4d06      	ldr	r5, [pc, #24]	@ (8006f98 <_fstat_r+0x20>)
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	602b      	str	r3, [r5, #0]
 8006f86:	f7fa fec1 	bl	8001d0c <_fstat>
 8006f8a:	1c43      	adds	r3, r0, #1
 8006f8c:	d102      	bne.n	8006f94 <_fstat_r+0x1c>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b103      	cbz	r3, 8006f94 <_fstat_r+0x1c>
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	bd38      	pop	{r3, r4, r5, pc}
 8006f96:	bf00      	nop
 8006f98:	200003fc 	.word	0x200003fc

08006f9c <_isatty_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4d05      	ldr	r5, [pc, #20]	@ (8006fb8 <_isatty_r+0x1c>)
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	4608      	mov	r0, r1
 8006fa6:	602b      	str	r3, [r5, #0]
 8006fa8:	f7fa febf 	bl	8001d2a <_isatty>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_isatty_r+0x1a>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_isatty_r+0x1a>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	200003fc 	.word	0x200003fc

08006fbc <_init>:
 8006fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fbe:	bf00      	nop
 8006fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc2:	bc08      	pop	{r3}
 8006fc4:	469e      	mov	lr, r3
 8006fc6:	4770      	bx	lr

08006fc8 <_fini>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	bf00      	nop
 8006fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fce:	bc08      	pop	{r3}
 8006fd0:	469e      	mov	lr, r3
 8006fd2:	4770      	bx	lr
